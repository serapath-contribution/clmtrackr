{
  "version": 3,
  "sources": [
    "node_modules/browserify/node_modules/browser-pack/_prelude.js",
    "node_modules/jsfeat/build/jsfeat.js",
    "node_modules/numeric/numeric-1.2.6.js",
    "src/clmtracker.js",
    "src/node_modules/_frontalface.js",
    "src/node_modules/_left-eye-filter.js",
    "src/node_modules/_nose-filter.js",
    "src/node_modules/_right-eye-filter.js",
    "src/node_modules/_svmfilter-fft.js",
    "src/node_modules/_svmfilter-webgl.js"
  ],
  "names": [
    "e",
    "t",
    "n",
    "r",
    "s",
    "o",
    "u",
    "a",
    "require",
    "i",
    "f",
    "Error",
    "code",
    "l",
    "exports",
    "call",
    "length",
    "1",
    "module",
    "jsfeat",
    "REVISION",
    "global",
    "U8_t",
    "S32_t",
    "F32_t",
    "_data_type_size",
    "Int32Array",
    "get_data_type",
    "type",
    "get_channel",
    "get_data_type_size",
    "data_t",
    "size_in_bytes",
    "buffer",
    "this",
    "size",
    "ArrayBuffer",
    "u8",
    "Uint8Array",
    "i32",
    "f32",
    "Float32Array",
    "f64",
    "Float64Array",
    "matrix_t",
    "c",
    "data_type",
    "data_buffer",
    "channel",
    "cols",
    "rows",
    "allocate",
    "data",
    "prototype",
    "copy_to",
    "other",
    "od",
    "td",
    "resize",
    "ch",
    "pyramid_t",
    "levels",
    "Array",
    "pyrdown",
    "imgproc",
    "start_w",
    "start_h",
    "build",
    "input",
    "skip_first_level",
    "b",
    "j",
    "keypoint_t",
    "x",
    "y",
    "score",
    "level",
    "angle",
    "S64_t",
    "F64_t",
    "C1_t",
    "C2_t",
    "C3_t",
    "C4_t",
    "U8C1_t",
    "U8C3_t",
    "U8C4_t",
    "F32C1_t",
    "F32C2_t",
    "S32C1_t",
    "S32C2_t",
    "EPSILON",
    "FLT_MIN",
    "COLOR_RGBA2GRAY",
    "COLOR_RGB2GRAY",
    "COLOR_BGRA2GRAY",
    "COLOR_BGR2GRAY",
    "BOX_BLUR_NOSCALE",
    "SVD_U_T",
    "SVD_V_T",
    "cache",
    "_pool_head",
    "_pool_tail",
    "_pool_node_t",
    "next",
    "_pool_size",
    "capacity",
    "data_size",
    "node",
    "get_buffer",
    "put_buffer",
    "math",
    "qsort_stack",
    "get_gaussian_kernel",
    "sigma",
    "kernel",
    "sigma_x",
    "scale_2x",
    "sum",
    "kern_node",
    "_kernel",
    "Math",
    "exp",
    "perspective_4point_transform",
    "model",
    "src_x0",
    "src_y0",
    "dst_x0",
    "dst_y0",
    "src_x1",
    "src_y1",
    "dst_x1",
    "dst_y1",
    "src_x2",
    "src_y2",
    "dst_x2",
    "dst_y2",
    "src_x3",
    "src_y3",
    "dst_x3",
    "dst_y3",
    "t1",
    "t2",
    "t4",
    "t5",
    "t6",
    "t7",
    "t8",
    "t9",
    "t10",
    "t11",
    "t14",
    "t15",
    "t16",
    "t18",
    "t20",
    "t21",
    "t24",
    "t25",
    "t26",
    "t27",
    "t28",
    "t30",
    "t32",
    "t35",
    "t41",
    "t42",
    "t43",
    "t46",
    "t48",
    "t51",
    "t55",
    "Hr0",
    "Hr1",
    "Hr2",
    "Hr3",
    "Hr4",
    "Hr5",
    "Hr6",
    "Hr7",
    "Hl0",
    "Hl1",
    "Hl2",
    "Hl3",
    "Hl4",
    "Hl5",
    "Hl6",
    "Hl7",
    "t12",
    "t23",
    "t31",
    "t44",
    "t47",
    "t49",
    "t50",
    "mat",
    "qsort",
    "array",
    "low",
    "high",
    "cmp",
    "ta",
    "tb",
    "tc",
    "sp",
    "left",
    "right",
    "m",
    "ptr",
    "ptr2",
    "d",
    "left0",
    "left1",
    "right0",
    "right1",
    "pivot",
    "swap_cnt",
    "stack",
    "min",
    "median",
    "w",
    "middle",
    "ll",
    "hh",
    "matmath",
    "identity",
    "M",
    "value",
    "src",
    "cols_1",
    "len",
    "k",
    "transpose",
    "At",
    "A",
    "nrows",
    "ncols",
    "Ai",
    "Ati",
    "pAt",
    "ad",
    "atd",
    "multiply",
    "C",
    "B",
    "Ap",
    "pA",
    "pB",
    "p_B",
    "Cp",
    "mcols",
    "bd",
    "cd",
    "multiply_ABt",
    "mrows",
    "multiply_AtB",
    "multiply_AAt",
    "pCdiag",
    "p_A",
    "pC",
    "pCt",
    "multiply_AtA",
    "p_C",
    "p_CC",
    "identity_3x3",
    "dt",
    "invert_3x3",
    "from",
    "to",
    "invA",
    "t13",
    "t17",
    "multiply_3x3",
    "Cd",
    "Ad",
    "Bd",
    "m1_0",
    "m1_1",
    "m1_2",
    "m1_3",
    "m1_4",
    "m1_5",
    "m1_6",
    "m1_7",
    "m1_8",
    "m2_0",
    "m2_1",
    "m2_2",
    "m2_3",
    "m2_4",
    "m2_5",
    "m2_6",
    "m2_7",
    "m2_8",
    "mat3x3_determinant",
    "md",
    "determinant_3x3",
    "M11",
    "M12",
    "M13",
    "M21",
    "M22",
    "M23",
    "M31",
    "M32",
    "M33",
    "linalg",
    "swap",
    "i0",
    "i1",
    "hypot",
    "abs",
    "sqrt",
    "JacobiImpl",
    "astep",
    "W",
    "V",
    "vstep",
    "eps",
    "idx",
    "_in",
    "_in2",
    "iters",
    "max_iter",
    "mv",
    "val",
    "p",
    "a0",
    "b0",
    "indR_buff",
    "indC_buff",
    "indR",
    "indC",
    "JacobiSVDImpl",
    "_W",
    "Vt",
    "n1",
    "minval",
    "iter",
    "max",
    "Aj",
    "Vi",
    "Vj",
    "changed",
    "t0",
    "sd",
    "beta",
    "gamma",
    "delta",
    "seed",
    "val0",
    "asum",
    "W_buff",
    "lu_solve",
    "alpha",
    "cholesky_solve",
    "inv_diag",
    "col",
    "row",
    "col2",
    "cs",
    "rs",
    "svd_decompose",
    "U",
    "options",
    "at",
    "_m",
    "_n",
    "a_buff",
    "w_buff",
    "v_buff",
    "a_mt",
    "w_mt",
    "v_mt",
    "svd_solve",
    "X",
    "pu",
    "pv",
    "xsum",
    "tol",
    "u_buff",
    "u_mt",
    "ud",
    "wd",
    "vd",
    "svd_invert",
    "pa",
    "id",
    "eigenVV",
    "vects",
    "vals",
    "motion_model",
    "sqr",
    "iso_normalize_points",
    "T0",
    "T1",
    "count",
    "cx0",
    "cy0",
    "d0",
    "s0",
    "cx1",
    "cy1",
    "d1",
    "s1",
    "dx",
    "dy",
    "SQRT2",
    "AtA",
    "AtB",
    "affine2d",
    "run",
    "pt0",
    "pt1",
    "t0d",
    "t1d",
    "px",
    "py",
    "b_buff",
    "b_mt",
    "error",
    "err",
    "check_subset",
    "mLtL",
    "Evec",
    "homography2d",
    "LtL",
    "evd",
    "Y",
    "smx",
    "smy",
    "cmx",
    "cmy",
    "sMx",
    "sMy",
    "cMx",
    "cMy",
    "ww",
    "negative",
    "fp0",
    "fp1",
    "fp2",
    "fp3",
    "tp0",
    "tp1",
    "tp2",
    "tp3",
    "A11",
    "A12",
    "A21",
    "A22",
    "A31",
    "A32",
    "B11",
    "B12",
    "B21",
    "B22",
    "B31",
    "B32",
    "detA",
    "detB",
    "ransac_params_t",
    "thresh",
    "prob",
    "update_iters",
    "_eps",
    "max_iters",
    "num",
    "log",
    "denom",
    "pow",
    "round",
    "motion_estimator",
    "get_subset",
    "need_cnt",
    "max_cnt",
    "from_sub",
    "to_sub",
    "indices",
    "ssiter",
    "idx_i",
    "ok",
    "floor",
    "random",
    "find_inliers",
    "mask",
    "numinliers",
    "ransac",
    "params",
    "model_points",
    "niters",
    "result",
    "subset0",
    "subset1",
    "mc",
    "mr",
    "m_buff",
    "ms_buff",
    "err_buff",
    "curr_mask",
    "inliers_max",
    "nmodels",
    "lmeds",
    "min_median",
    "_resample_u8",
    "dst",
    "nw",
    "nh",
    "xofs_count",
    "h",
    "src_d",
    "dst_d",
    "scale_x",
    "scale_y",
    "inv_scale_256",
    "sx",
    "sy",
    "sx1",
    "sx2",
    "fsx1",
    "fsx2",
    "dxn",
    "beta1",
    "buf_node",
    "sum_node",
    "xofs_node",
    "buf",
    "xofs",
    "_resample",
    "scale",
    "_convol_u8",
    "filter",
    "kernel_size",
    "half_kernel",
    "dp",
    "sum1",
    "sum2",
    "sum3",
    "f0",
    "fk",
    "w2",
    "w3",
    "w4",
    "_convol",
    "grayscale",
    "ir",
    "jr",
    "coeff_r",
    "coeff_b",
    "cn",
    "cn2",
    "cn3",
    "dst_u8",
    "resample",
    "box_blur_gray",
    "radius",
    "h2",
    "end",
    "windowSize",
    "radiusPlusOne",
    "radiusPlus2",
    "tmp_buff",
    "dstIndex",
    "srcIndex",
    "nextPixelIndex",
    "previousPixelIndex",
    "data_i32",
    "data_u8",
    "hold",
    "gaussian_blur",
    "is_u8",
    "buf_sz",
    "filt_node",
    "_w2",
    "_h2",
    "sptr",
    "sline",
    "dptr",
    "dline",
    "scharr_derivatives",
    "trow0",
    "trow1",
    "dstep",
    "x1",
    "srow0",
    "srow1",
    "srow2",
    "drow",
    "img",
    "gxgy",
    "buf0_node",
    "buf1_node",
    "sobel_derivatives",
    "compute_integral_image",
    "dst_sum",
    "dst_sqsum",
    "dst_tilted",
    "w0",
    "h0",
    "w1",
    "s2",
    "pup",
    "v",
    "equalize_histogram",
    "hist0",
    "norm",
    "prev",
    "hist0_node",
    "canny",
    "low_thresh",
    "high_thresh",
    "grad",
    "_grad",
    "suppress",
    "tg22x",
    "tg67x",
    "dxdy_node",
    "map_node",
    "stack_node",
    "map",
    "dxdy",
    "dxdy_m",
    "row0",
    "row1",
    "row2",
    "map_w",
    "map_i",
    "stack_i",
    "warp_perspective",
    "transform",
    "fill_value",
    "src_width",
    "src_height",
    "dst_width",
    "dst_height",
    "off",
    "ixs",
    "iys",
    "xs",
    "ys",
    "xs0",
    "ys0",
    "ws",
    "sc",
    "p0",
    "p1",
    "m00",
    "m01",
    "m02",
    "m10",
    "m11",
    "m12",
    "m20",
    "m21",
    "m22",
    "warp_affine",
    "skindetector",
    "g",
    "width",
    "height",
    "fast_corners",
    "offsets16",
    "threshold_tab",
    "pixel_off",
    "score_diff",
    "_cmp_offsets",
    "pixel",
    "step",
    "pattern_size",
    "offsets",
    "_cmp_score_16",
    "threshold",
    "_threshold",
    "set_threshold",
    "detect",
    "corners",
    "border",
    "pt",
    "vt",
    "m3",
    "cpbuf_node",
    "cpbuf",
    "ey",
    "ex",
    "_count",
    "corners_cnt",
    "score_func",
    "thresh_tab",
    "tab",
    "ncorners",
    "cornerpos",
    "curr",
    "pprev",
    "jp1",
    "jm1",
    "pixel0",
    "pixel1",
    "pixel2",
    "pixel3",
    "pixel4",
    "pixel5",
    "pixel6",
    "pixel7",
    "pixel8",
    "pixel9",
    "pixel10",
    "pixel11",
    "pixel12",
    "pixel13",
    "pixel14",
    "pixel15",
    "yape06",
    "compute_laplacian",
    "Dxx",
    "Dyy",
    "yrow",
    "hessian_min_eigen_value",
    "tr",
    "Dxy",
    "Dyx",
    "Ixx",
    "Iyy",
    "Ixy",
    "sqrt_delta",
    "laplacian_threshold",
    "min_eigen_value_threshold",
    "points",
    "srd_d",
    "lap_buf",
    "laplacian",
    "lv",
    "rowx",
    "min_eigen_value",
    "number_of_points",
    "lap_thresh",
    "eigen_thresh",
    "yape",
    "precompute_directions",
    "dirs",
    "R",
    "third_check",
    "Sb",
    "is_local_maxima",
    "neighborhood",
    "perform_one_point",
    "I",
    "Scores",
    "Im",
    "Ip",
    "opposite",
    "dirs_nb",
    "B0",
    "B1",
    "B2",
    "state",
    "lev_table_t",
    "dirs_count",
    "scores",
    "level_tables",
    "tau",
    "init",
    "pyramid_levels",
    "Rm1",
    "hw",
    "ip",
    "im",
    "abs_score",
    "orb",
    "bit_pattern_31_",
    "H",
    "patch_img",
    "rectify_patch",
    "psize",
    "cosine",
    "cos",
    "sine",
    "sin",
    "describe",
    "descriptors",
    "patch_d",
    "patt",
    "descr_d",
    "descr_off",
    "optical_flow_lk",
    "scharr_deriv",
    "track",
    "prev_pyr",
    "curr_pyr",
    "prev_xy",
    "curr_xy",
    "win_size",
    "status",
    "min_eigen_threshold",
    "half_win",
    "win_area",
    "win_area2",
    "prev_imgs",
    "next_imgs",
    "img_prev",
    "img_next",
    "lw",
    "lh",
    "iwin_node",
    "deriv_iwin_node",
    "deriv_lev_node",
    "deriv_m",
    "iwin_buf",
    "deriv_iwin",
    "deriv_lev",
    "dsrc",
    "iptr",
    "diptr",
    "jptr",
    "lev_sc",
    "prev_x",
    "prev_y",
    "next_x",
    "next_y",
    "prev_delta_x",
    "prev_delta_y",
    "delta_x",
    "delta_y",
    "iprev_x",
    "iprev_y",
    "inext_x",
    "inext_y",
    "ptid",
    "brd_r",
    "brd_b",
    "b1",
    "b2",
    "iw00",
    "iw01",
    "iw10",
    "iw11",
    "ival",
    "ixval",
    "iyval",
    "D",
    "max_level",
    "W_BITS4",
    "haar",
    "_group_func",
    "r1",
    "r2",
    "distance",
    "edges_density",
    "detect_single_scale",
    "int_sum",
    "int_sqsum",
    "int_tilted",
    "int_canny_sum",
    "classifier",
    "mean",
    "variance",
    "std",
    "stages",
    "stage",
    "trees",
    "tree",
    "sn",
    "tn",
    "fn",
    "stage_thresh",
    "stage_sum",
    "tree_sum",
    "feature",
    "features",
    "fi_a",
    "fi_b",
    "fi_c",
    "fw",
    "fh",
    "win_w",
    "win_h",
    "step_x",
    "step_y",
    "inv_area",
    "found",
    "ii_a",
    "ii_b",
    "ii_c",
    "ii_d",
    "edges_thresh",
    "rects",
    "complexClassifiers",
    "simpleClassifiers",
    "tilted",
    "left_val",
    "right_val",
    "push",
    "neighbor",
    "confidence",
    "detect_multi_scale",
    "scale_factor",
    "scale_min",
    "concat",
    "group_rectangles",
    "min_neighbors",
    "parent",
    "element",
    "rank",
    "root",
    "root2",
    "temp",
    "node2",
    "idx_seq",
    "class_idx",
    "node1",
    "comps",
    "neighbors",
    "seq2",
    "result_seq",
    "flag",
    "bbf",
    "img_pyr",
    "interval",
    "scale_to",
    "prepare_cascade",
    "cascade",
    "stage_classifier",
    "orig_feature",
    "f_cnt",
    "_feature",
    "pz",
    "nx",
    "nz",
    "build_pyramid",
    "min_width",
    "min_height",
    "sw",
    "sh",
    "new_pyr",
    "src0",
    "src1",
    "pyr_l",
    "pyramid",
    "feature_k",
    "feature_o",
    "scale_upto",
    "q",
    "q_cnt",
    "pmin",
    "nmax",
    "i4",
    "qw",
    "qh",
    "shortcut",
    "seq",
    "pyr",
    "u8o",
    "paddings",
    "ny",
    "lib",
    "window",
    "numeric",
    "version",
    "bench",
    "Date",
    "_myIndexOf",
    "myIndexOf",
    "indexOf",
    "Function",
    "precision",
    "largeArray",
    "prettyPrint",
    "fmtnum",
    "isNaN",
    "isFinite",
    "normalized",
    "basic",
    "toPrecision",
    "parseFloat",
    "toString",
    "foo",
    "ret",
    "join",
    "hasOwnProperty",
    "parseDate",
    "parse",
    "replace",
    "parseCSV",
    "split",
    "patnum",
    "baz",
    "bar",
    "match",
    "substr",
    "test",
    "toCSV",
    "dim",
    "getURL",
    "url",
    "client",
    "XMLHttpRequest",
    "open",
    "send",
    "imageURL",
    "crc32Array",
    "table",
    "crc",
    "adler32",
    "crc32",
    "stream",
    "z",
    "key",
    "charAt",
    "_dim",
    "mapreduce",
    "body",
    "mapreduce2",
    "setup",
    "same",
    "rep",
    "dotMMsmall",
    "woo",
    "_getCol",
    "dotMMbig",
    "xj",
    "gc",
    "VV",
    "dotVV",
    "dotMV",
    "dotVM",
    "dot",
    "mulVS",
    "mulSV",
    "diag",
    "getDiag",
    "pointwise",
    "fun",
    "avec",
    "thevec",
    "haveret",
    "substring",
    "apply",
    "pointwise2",
    "_biforeach",
    "_biforeach2",
    "_foreach",
    "_foreach2",
    "ops2",
    "add",
    "sub",
    "mul",
    "div",
    "mod",
    "and",
    "or",
    "eq",
    "neq",
    "lt",
    "gt",
    "leq",
    "geq",
    "band",
    "bor",
    "bxor",
    "lshift",
    "rshift",
    "rrshift",
    "opseq",
    "addeq",
    "subeq",
    "muleq",
    "diveq",
    "modeq",
    "lshifteq",
    "rshifteq",
    "rrshifteq",
    "bandeq",
    "boreq",
    "bxoreq",
    "mathfuns",
    "mathfuns2",
    "ops1",
    "neg",
    "not",
    "bnot",
    "clone",
    "mapreducers",
    "any",
    "all",
    "prod",
    "norm2Squared",
    "norminf",
    "norm1",
    "sup",
    "inf",
    "codeeq",
    "truncVV",
    "truncVS",
    "truncSV",
    "trunc",
    "inv",
    "Ii",
    "Ij",
    "v0",
    "det",
    "k1",
    "A0",
    "A1",
    "Bj",
    "negtranspose",
    "_random",
    "rnd",
    "norm2",
    "linspace",
    "getBlock",
    "setBlock",
    "getRange",
    "J",
    "Bi",
    "AI",
    "blockMatrix",
    "N",
    "Xij",
    "Z",
    "ZI",
    "Xijk",
    "tensor",
    "xi",
    "T",
    "Tbinop",
    "rr",
    "rc",
    "cr",
    "cc",
    "reciprocal",
    "transjugate",
    "Tunop",
    "conj",
    "Aix",
    "Aiy",
    "Ajx",
    "Ajy",
    "Rix",
    "Riy",
    "Rjx",
    "Rjy",
    "ax",
    "ay",
    "bx",
    "by",
    "Rx",
    "Ry",
    "Ax",
    "Ay",
    "get",
    "ik",
    "set",
    "vx",
    "vy",
    "undefined",
    "getRows",
    "ry",
    "rx",
    "setRows",
    "getRow",
    "setRow",
    "eig",
    "house",
    "toUpperHessenberg",
    "me",
    "Ci",
    "Qi",
    "Q",
    "epsilon",
    "QRFrancis",
    "maxiter",
    "Hloc",
    "Hi",
    "QH1",
    "QH2",
    "Q0",
    "p2",
    "disc",
    "n2",
    "QH",
    "QB",
    "E",
    "Rk",
    "Rj",
    "lambda",
    "ccsSparse",
    "counts",
    "parseInt",
    "Av",
    "ccsFull",
    "j0",
    "j1",
    "ccsDim",
    "ccsTSolve",
    "bj",
    "dfs",
    "ccsDFS",
    "Pinv",
    "km",
    "k11",
    "ccsLPSolve",
    "Bv",
    "ccsLUP1",
    "L",
    "Li",
    "Lj",
    "Lv",
    "Ui",
    "Uj",
    "Uv",
    "sol",
    "P",
    "ccsDFS0",
    "ccsLPSolve0",
    "ccsLUP0",
    "ccsLUP",
    "ccsGetBlock",
    "jq",
    "flags",
    "q0",
    "q1",
    "ccsDot",
    "sA",
    "sB",
    "Cj",
    "Cv",
    "ccsLUPSolve",
    "LUP",
    "Xi",
    "Xj",
    "Xv",
    "ccsbinop",
    "eval",
    "ccsScatter",
    "Ri",
    "Rv",
    "Aii",
    "slice",
    "ccsGather",
    "sdim",
    "sclone",
    "sdiag",
    "sidentity",
    "stranspose",
    "sLUP",
    "sdotMM",
    "BTk",
    "accum",
    "reti",
    "BT",
    "sdotMV",
    "sdotVM",
    "sdotVV",
    "sdot",
    "sscatter",
    "Vij",
    "sgather",
    "gather",
    "pop",
    "cLU",
    "Infinity",
    "countL",
    "countU",
    "cLUsolve",
    "lu",
    "cgrid",
    "shape",
    "cdelsq",
    "dir",
    "cdotMV",
    "Spline",
    "yl",
    "yr",
    "kl",
    "kr",
    "_at",
    "x0",
    "mid",
    "diff",
    "zl",
    "zr",
    "pl",
    "pr",
    "roots",
    "ai",
    "bi",
    "ci",
    "di",
    "ri",
    "k0",
    "y0",
    "y1",
    "stops",
    "z0",
    "z1",
    "zm",
    "tm",
    "side",
    "spline",
    "kn",
    "fftpow2",
    "xe",
    "ye",
    "xo",
    "yo",
    "si",
    "_ifftpow2",
    "ifftpow2",
    "convpow2",
    "axi",
    "bxi",
    "ayi",
    "byi",
    "fft",
    "log2",
    "ceil",
    "cx",
    "cy",
    "ifft",
    "gradient",
    "f1",
    "f2",
    "d2",
    "it",
    "uncmin",
    "maxit",
    "callback",
    "df0",
    "g0",
    "g1",
    "Hy",
    "nstep",
    "H1",
    "Hinv",
    "ten",
    "isfinite",
    "msg",
    "solution",
    "invHessian",
    "iterations",
    "message",
    "Dopri",
    "ymid",
    "events",
    "xh",
    "yh",
    "dopri",
    "event",
    "k2",
    "k3",
    "k4",
    "k5",
    "k6",
    "k7",
    "er",
    "erinf",
    "e0",
    "e1",
    "ev",
    "A3",
    "A4",
    "A5",
    "A6",
    "bm",
    "yi",
    "xl",
    "xr",
    "en",
    "ei",
    "sl",
    "sr",
    "LU",
    "fast",
    "absAjk",
    "Akk",
    "Ak",
    "Pk",
    "LUsolve",
    "Pi",
    "LUi",
    "tmp",
    "solve",
    "echelonize",
    "__solveLP",
    "unbounded",
    "svd",
    "dotcc",
    "a1",
    "Ag",
    "_solveLP",
    "c0",
    "NaN",
    "solveLP",
    "Aeq",
    "beq",
    "Aeq2",
    "A2",
    "b4",
    "c1",
    "c2",
    "c4",
    "S",
    "x2",
    "MPStoLP",
    "MPS",
    "states",
    "String",
    "name",
    "sign",
    "rl",
    "vars",
    "nv",
    "seedrandom",
    "pool",
    "chunks",
    "significance",
    "overflow",
    "startdenom",
    "ARC4",
    "keylen",
    "lowbits",
    "flatten",
    "obj",
    "depth",
    "prop",
    "typ",
    "mixkey",
    "smear",
    "charCodeAt",
    "fromCharCode",
    "use_entropy",
    "arc4",
    "arguments",
    "getTime",
    "base0to1",
    "base1to0",
    "dpori",
    "lda",
    "kp1",
    "dposl",
    "kb",
    "dpofa",
    "info",
    "qpgen2",
    "dmat",
    "dvec",
    "fddmat",
    "crval",
    "amat",
    "bvec",
    "fdamat",
    "meq",
    "iact",
    "nact",
    "work",
    "ierr",
    "fn_goto_799",
    "iwuv",
    "l1",
    "it1",
    "iwzv",
    "iwrv",
    "iwrm",
    "iwsv",
    "nvl",
    "iwnbv",
    "tt",
    "gs",
    "nu",
    "t1inf",
    "t2min",
    "vsmall",
    "tmpa",
    "tmpb",
    "go",
    "solveQP",
    "Dmat",
    "Amat",
    "factorized",
    "unconstrained_solution",
    "pythag",
    "prec",
    "tolerance",
    "iteration",
    "test_convergence",
    "itmax",
    "clmtracker",
    "tracker",
    "shapeModel",
    "eigenVectors",
    "beginPath",
    "arc",
    "PI",
    "closePath",
    "fill",
    "atan",
    "constantVelocity",
    "searchWindow",
    "useWebGL",
    "scoreThreshold",
    "stopOnConvergence",
    "weightPoints",
    "sharpenResponse",
    "faceDetection",
    "workSize",
    "minScale",
    "scaleFactor",
    "useCanny",
    "edgesDensity",
    "equalizeHistogram",
    "useWebWorkers",
    "F",
    "_",
    "O",
    "G",
    "K",
    "$",
    "ee",
    "te",
    "re",
    "ne",
    "oe",
    "ie",
    "ae",
    "se",
    "ce",
    "le",
    "fe",
    "he",
    "de",
    "ve",
    "document",
    "createElement",
    "ue",
    "getContext",
    "ge",
    "we",
    "pe",
    "Me",
    "patchModel",
    "patchType",
    "numPatches",
    "patchSize",
    "numEvalues",
    "canvasSize",
    "hints",
    "mosseFilter",
    "left_eye_filter",
    "right_eye_filter",
    "nose_filter",
    "load",
    "console",
    "meanShape",
    "scoring",
    "coef",
    "bias",
    "eigenValues",
    "weights",
    "nonRegularizedVectors",
    "WebGLRenderingContext",
    "getExtension",
    "webglFilter",
    "alert",
    "svmFilter",
    "raw",
    "mosseFilterResponses",
    "start",
    "jsfeat_face",
    "Pe",
    "ke",
    "stop",
    "ze",
    "be",
    "createEvent",
    "initEvent",
    "dispatchEvent",
    "Ce",
    "bind",
    "save",
    "clearRect",
    "rotate",
    "translate",
    "drawImage",
    "restore",
    "Se",
    "Ae",
    "getImageData",
    "_e",
    "getResponses",
    "Ee",
    "qe",
    "splice",
    "getConvergence",
    "reset",
    "draw",
    "fillStyle",
    "strokeStyle",
    "path",
    "normal",
    "De",
    "getScore",
    "calculatePositions",
    "getCurrentPosition",
    "getCurrentParameters",
    "setResponseMode",
    "Fe",
    "getLBPResponses",
    "getRawResponses",
    "getSobelResponses",
    "Re",
    "findFace",
    "faceDetected",
    "comp",
    "leftEye",
    "rightEye",
    "nose",
    "moveTo",
    "lineTo",
    "stroke",
    "requestAnimationFrame",
    "webkitRequestAnimationFrame",
    "mozRequestAnimationFrame",
    "oRequestAnimationFrame",
    "msRequestAnimationFrame",
    "setTimeout",
    "cancelAnimationFrame",
    "webkitCancelRequestAnimationFrame",
    "mozCancelRequestAnimationFrame",
    "oCancelRequestAnimationFrame",
    "msCancelRequestAnimationFrame",
    "clearTimeout",
    "Object",
    "keys",
    "forEach",
    "frontalface",
    "real",
    "bottom",
    "imag",
    "top",
    "gl",
    "canvas",
    "filterWidth",
    "filterHeight",
    "patchWidth",
    "patchHeight",
    "canvasWidth",
    "canvasHeight",
    "patchResponseProgram",
    "patchDrawProgram",
    "fbo",
    "numBlocks",
    "patchTex",
    "drawRectBuffer",
    "drawLayerBuffer",
    "drawImageBuffer",
    "rttTexture",
    "texCoordBuffer",
    "texCoordLocation",
    "apositionBuffer",
    "newCanvasWidth",
    "newCanvasBlockHeight",
    "newCanvasHeight",
    "drawOutRectangles",
    "drawOutImages",
    "drawOutLayer",
    "patchCells",
    "textureWidth",
    "textureHeight",
    "patchArray",
    "biases",
    "lbpResponseProgram",
    "lbpTexCoordBuffer",
    "lbpPositionLocation",
    "lbpAPositionBuffer",
    "gradientResponseProgram",
    "gbo",
    "gradTexCoordLocation",
    "gradTexCoordBuffer",
    "gradPositionLocation",
    "gradAPositionBuffer",
    "lbpResponseFS",
    "gradientResponseFS",
    "patchResponseVS",
    "patchResponseFS",
    "lbpInit",
    "sobelInit",
    "rawInit",
    "lbpResponseVS",
    "gradientResponseVS",
    "drawResponsesVS",
    "drawResponsesFS",
    "filters",
    "nP",
    "pW",
    "pH",
    "fW",
    "fH",
    "opp",
    "toFixed",
    "setAttribute",
    "appendChild",
    "setupWebGL",
    "premultipliedAlpha",
    "preserveDrawingBuffer",
    "antialias",
    "insertFilter",
    "TEXTURE0",
    "TEXTURE4",
    "TEXTURE5",
    "yOffset",
    "rectangles",
    "halfFilter",
    "irectangles",
    "topCoord",
    "bottomCoord",
    "gradRectangles",
    "gradIRectangles",
    "indexOffset",
    "halfFilterWidth",
    "halfFilterHeight",
    "patchHeightT",
    "layernum",
    "grVertexShader",
    "loadShader",
    "VERTEX_SHADER",
    "grFragmentShader",
    "FRAGMENT_SHADER",
    "createProgram",
    "useProgram",
    "getAttribLocation",
    "createBuffer",
    "bindBuffer",
    "ARRAY_BUFFER",
    "bufferData",
    "STATIC_DRAW",
    "enableVertexAttribArray",
    "vertexAttribPointer",
    "FLOAT",
    "uniform1i",
    "getUniformLocation",
    "lbpVertexShader",
    "lbpFragmentShader",
    "lbpTexCoordLocation",
    "drVertexShader",
    "drFragmentShader",
    "resolutionLocation",
    "uniform2f",
    "responsesLocation",
    "prVertexShader",
    "prFragmentShader",
    "positionLocation",
    "activeTexture",
    "TEXTURE3",
    "gradients",
    "createTexture",
    "bindTexture",
    "TEXTURE_2D",
    "texImage2D",
    "RGBA",
    "texParameteri",
    "TEXTURE_WRAP_S",
    "CLAMP_TO_EDGE",
    "TEXTURE_WRAP_T",
    "TEXTURE_MIN_FILTER",
    "NEAREST",
    "TEXTURE_MAG_FILTER",
    "createFramebuffer",
    "bindFramebuffer",
    "FRAMEBUFFER",
    "framebufferTexture2D",
    "COLOR_ATTACHMENT0",
    "TEXTURE2",
    "viewport",
    "patches",
    "insertPatches",
    "clearColor",
    "clear",
    "COLOR_BUFFER_BIT",
    "DEPTH_BUFFER",
    "drawArrays",
    "TRIANGLES",
    "drawOut",
    "patchArrayIndex",
    "patchesIndex1",
    "patchesIndex2",
    "TEXTURE1",
    "textureNum",
    "filterSize",
    "filterArray",
    "filterTexture",
    "textureLocation",
    "layerLocation",
    "responses",
    "getOutput",
    "unpackToFloat",
    "splitArray",
    "addBias",
    "normalizeFilterMatrix",
    "biasMult",
    "parts",
    "al",
    "splitlength",
    "pixelValues",
    "readPixels",
    "UNSIGNED_BYTE",
    "newArray",
    "response",
    "msize",
    "dist",
    "isInIFrame",
    "opt_attribs",
    "context",
    "create3DContext",
    "names",
    "ii",
    "updateCSSIfInIFrame",
    "className",
    "getWebGLContext",
    "clientWidth",
    "clientHeight",
    "shaderSource",
    "shaderType",
    "opt_errorCallback",
    "errFn",
    "shader",
    "createShader",
    "compileShader",
    "getShaderParameter",
    "COMPILE_STATUS",
    "getShaderInfoLog",
    "deleteShader",
    "loadProgram",
    "shaders",
    "opt_locations",
    "program",
    "attachShader",
    "bindAttribLocation",
    "linkProgram",
    "getProgramParameter",
    "LINK_STATUS",
    "lastError",
    "getProgramInfoLog",
    "deleteProgram",
    "createShaderFromScript",
    "scriptId",
    "opt_shaderType",
    "shaderScript",
    "getElementById",
    "text",
    "createShaderFromScriptElement"
  ],
  "mappings": "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IAAA,EAAA,IAAA,GACA,EAAA,GAAA,EAAA,IACA,GAAA,IAAA,GAAA,EACA,IAAA,GAAA,IAAA,EACA,EAAA,EAAA,EAAA,EACA,GAAA,EAAA,IAAA,EACA,GAAA,EAAA,EAAA,IACA,GAAA,GAAA,GAAA,GACA,EAAA,IAAA,GAAA,IACA,GAAA,IAAA,EAAA,IACA,EAAA,GAAA,GAAA,GACA,EAAA,GAAA,EAAA,GACA,IAAA,IAAA,EAAA,GACA,GAAA,GAAA,GAAA,EACA,GAAA,EAAA,GAAA,EACA,EAAA,EAAA,GAAA,EACA,EAAA,GAAA,IAAA,GACA,EAAA,EAAA,EAAA,GACA,GAAA,EAAA,EAAA,GACA,GAAA,IAAA,EAAA,GACA,GAAA,GAAA,GAAA,GACA,EAAA,GAAA,EAAA,GACA,GAAA,EAAA,GAAA,IACA,IAAA,GAAA,EAAA,GACA,GAAA,GAAA,EAAA,GACA,EAAA,GAAA,GAAA,EACA,EAAA,GAAA,GAAA,EACA,EAAA,EAAA,EAAA,EACA,GAAA,EAAA,IAAA,IACA,IAAA,GAAA,GAAA,EACA,GAAA,EAAA,GAAA,GACA,GAAA,GAAA,EAAA,GACA,IAAA,EAAA,IAAA,GACA,GAAA,GAAA,GAAA,IACA,GAAA,GAAA,GAAA,EACA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,IAAA,GACA,EAAA,EAAA,GAAA,GACA,GAAA,GAAA,EAAA,EACA,GAAA,EAAA,GAAA,IACA,GAAA,GAAA,GAAA,GACA,IAAA,GAAA,GAAA,IACA,GAAA,GAAA,GAAA,GACA,EAAA,IAAA,EAAA,EACA,GAAA,GAAA,GAAA,GACA,GAAA,GAAA,GAAA,GACA,GAAA,EAAA,EAAA,IACA,GAAA,GAAA,EAAA,EACA,GAAA,GAAA,GAAA,IACA,GAAA,GAAA,EAAA,GACA,GAAA,GAAA,GAAA,EACA,EAAA,EAAA,GAAA,IACA,IAAA,IAAA,GAAA,IACA,EAAA,EAAA,GAAA,EACA,GAAA,EAAA,EAAA,GACA,GAAA,IAAA,EAAA,IACA,GAAA,GAAA,EAAA,GACA,IAAA,IAAA,GAAA,EACA,GAAA,EAAA,IAAA,EACA,EAAA,GAAA,GAAA,IACA,GAAA,IAAA,EAAA,GACA,EAAA,GAAA,EAAA,EACA,GAAA,EAAA,GAAA,GACA,EAAA,GAAA,EAAA,GACA,GAAA,IAAA,GAAA,GACA,EAAA,GAAA,GAAA,EACA,GAAA,EAAA,IAAA,GACA,IAAA,GAAA,IAAA,GACA,GAAA,EAAA,GAAA,GACA,GAAA,EAAA,EAAA,GACA,EAAA,GAAA,GAAA,IACA,GAAA,GAAA,EAAA,EACA,EAAA,EAAA,GAAA,EACA,GAAA,EAAA,EAAA,GACA,EAAA,EAAA,GAAA,GACA,GAAA,GAAA,EAAA,GACA,IAAA,IAAA,GAAA,EACA,EAAA,EAAA,GAAA,GACA,IAAA,EAAA,GAAA,EACA,EAAA,EAAA,EAAA,GACA,GAAA,GAAA,EAAA,GACA,GAAA,GAAA,EAAA,EACA,EAAA,EAAA,GAAA,EACA,EAAA,EAAA,IAAA,GACA,GAAA,GAAA,GAAA,GACA,EAAA,GAAA,EAAA,GACA,GAAA,IAAA,GAAA,EACA,EAAA,GAAA,GAAA,EACA,GAAA,EAAA,GAAA,EACA,EAAA,EAAA,GAAA,EACA,EAAA,EAAA,GAAA,EACA,GAAA,EAAA,GAAA,EACA,EAAA,EAAA,EAAA,GACA,IAAA,GAAA,GAAA,GACA,GAAA,IAAA,EAAA,IACA,GAAA,GAAA,EAAA,IACA,GAAA,GAAA,EAAA,EACA,GAAA,EAAA,IAAA,EACA,GAAA,EAAA,GAAA,IACA,GAAA,IAAA,EAAA,EACA,GAAA,EAAA,EAAA,GACA,EAAA,GAAA,EAAA,IACA,GAAA,GAAA,EAAA,EACA,GAAA,EAAA,GAAA,IACA,GAAA,IAAA,GAAA,GACA,GAAA,IAAA,GAAA,EACA,GAAA,EAAA,GAAA,IACA,GAAA,IAAA,EAAA,EACA,GAAA,EAAA,GAAA,EACA,GAAA,EAAA,EAAA,GACA,EAAA,GAAA,GAAA,EACA,IAAA,EAAA,IAAA,IACA,IAAA,GAAA,EAAA,EACA,EAAA,EAAA,EAAA,GACA,EAAA,EAAA,GAAA,EACA,GAAA,EAAA,EAAA,GACA,EAAA,IAAA,GAAA,GACA,EAAA,EAAA,EAAA,IACA,EAAA,EAAA,EAAA,EACA,EAAA,GAAA,GAAA,EACA,EAAA,EAAA,GAAA,GACA,IAAA,GAAA,EAAA,GACA,EAAA,GAAA,GAAA,GACA,GAAA,GAAA,GAAA,GACA,EAAA,EAAA,EAAA,GACA,EAAA,GAAA,EAAA,IACA,GAAA,GAAA,GAAA,EACA,GAAA,GAAA,EAAA,GACA,EAAA,EAAA,GAAA,GACA,GAAA,EAAA,GAAA,GACA,GAAA,GAAA,GAAA,IACA,GAAA,GAAA,GAAA,EACA,EAAA,EAAA,EAAA,GACA,GAAA,IAAA,GAAA,GACA,GAAA,IAAA,EAAA,EACA,EAAA,EAAA,IAAA,GACA,GAAA,EAAA,GAAA,GACA,GAAA,GAAA,GAAA,EACA,EAAA,EAAA,EAAA,EACA,GAAA,EAAA,EAAA,GACA,GAAA,GAAA,EAAA,GACA,EAAA,IAAA,GAAA,GACA,GAAA,GAAA,IAAA,EACA,EAAA,EAAA,EAAA,EACA,IAAA,EAAA,GAAA,GACA,GAAA,GAAA,EAAA,EACA,GAAA,EAAA,GAAA,EACA,GAAA,GAAA,EAAA,GACA,IAAA,GAAA,GAAA,GACA,IAAA,IAAA,GAAA,GACA,GAAA,GAAA,IAAA,EACA,GAAA,EAAA,GAAA,GACA,GAAA,IAAA,EAAA,IACA,GAAA,EAAA,EAAA,GACA,IAAA,IAAA,IAAA,GACA,IAAA,GAAA,GAAA,IACA,EAAA,GAAA,GAAA,GACA,GAAA,EAAA,EAAA,GACA,GAAA,IAAA,EAAA,GACA,EAAA,GAAA,GAAA,IACA,EAAA,IAAA,GAAA,GACA,GAAA,IAAA,EAAA,EACA,GAAA,EAAA,EAAA,IACA,GAAA,IAAA,EAAA,EACA,GAAA,GAAA,GAAA,EACA,GAAA,EAAA,IAAA,GACA,EAAA,GAAA,EAAA,GACA,GAAA,GAAA,GAAA,GACA,EAAA,GAAA,EAAA,GACA,IAAA,IAAA,GAAA,IACA,GAAA,GAAA,GAAA,GACA,EAAA,GAAA,GAAA,GACA,GAAA,GAAA,EAAA,GACA,GAAA,GAAA,EAAA,GACA,EAAA,EAAA,GAAA,GACA,EAAA,EAAA,IAAA,GACA,EAAA,GAAA,IAAA,EACA,GAAA,EAAA,IAAA,GACA,EAAA,GAAA,GAAA,IACA,GAAA,GAAA,EAAA,GACA,GAAA,GAAA,EAAA,IACA,GAAA,GAAA,GAAA,GACA,GAAA,GAAA,IAAA,EACA,GAAA,GAAA,GAAA,EACA,GAAA,GAAA,IAAA,GACA,IAAA,IAAA,GAAA,GACA,IAAA,GAAA,GAAA,GACA,GAAA,EAAA,EAAA,EACA,EAAA,GAAA,GAAA,IACA,EAAA,GAAA,GAAA,EACA,GAAA,GAAA,IAAA,GACA,GAAA,GAAA,GAAA,GACA,EAAA,GAAA,EAAA,EACA,EAAA,EAAA,GAAA,GACA,GAAA,GAAA,EAAA,EACA,EAAA,EAAA,GAAA,GACA,IAAA,IAAA,GAAA,EACA,GAAA,GAAA,GAAA,IACA,GAAA,IAAA,GAAA,EACA,EAAA,EAAA,EAAA,EACA,GAAA,EAAA,IAAA,EACA,EAAA,EAAA,GAAA,IACA,EAAA,IAAA,EAAA,GACA,GAAA,GAAA,EAAA,GACA,GAAA,IAAA,EAAA,GACA,GAAA,GAAA,EAAA,GACA,GAAA,GAAA,EAAA,EACA,EAAA,EAAA,GAAA,GACA,GAAA,EAAA,EAAA,GACA,GAAA,EAAA,IAAA,GACA,GAAA,EAAA,EAAA,GACA,IAAA,EAAA,GAAA,GACA,EAAA,GAAA,EAAA,EACA,GAAA,GAAA,EAAA,GACA,GAAA,EAAA,EAAA,GACA,IAAA,GAAA,EAAA,GACA,GAAA,GAAA,GAAA,GACA,GAAA,IAAA,IAAA,GACA,EAAA,EAAA,IAAA,GACA,GAAA,EAAA,EAAA,GACA,GAAA,GAAA,GAAA,GACA,EAAA,GAAA,GAAA,GACA,IAAA,GAAA,GAAA,EACA,GAAA,EAAA,EAAA,GACA,EAAA,EAAA,GAAA,GACA,GAAA,GAAA,GAAA,EACA,EAAA,EAAA,IAAA,EACA,IAAA,EAAA,IAAA,EACA,EAAA,EAAA,EAAA,GACA,EAAA,EAAA,EAAA,GACA,GAAA,EAAA,EAAA,GACA,GAAA,GAAA,GAAA,EACA,EAAA,EAAA,GAAA,GACA,EAAA,EAAA,GAAA,EACA,GAAA,EAAA,GAAA,IACA,GAAA,GAAA,GAAA,EACA,EAAA,EAAA,GAAA,EACA,GAAA,EAAA,IAAA,EACA,EAAA,EAAA,IAAA,GACA,GAAA,EAAA,GAAA,KAGAu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AA,kBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,mBAAA,kBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,kBAAA,qBAAA,qBAAA,mBAAA,mBAAA,mBAAA,qBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,oBAAA,kBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,oBAAA,mBAAA,kBAAA,oBAAA,oBAAA,mBAAA,sBAAA,mBAAA,qBAAA,oBAAA,sBAAA,mBAAA,oBAAA,mBAAA,oBAAA,oBAAA,qBAAA,oBAAA,mBAAA,oBAAA,mBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,qBAAA,oBAAA,qBAAA,oBAAA,kBAAA,kBAAA,oBAAA,oBAAA,sBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,qBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,oBAAA,mBAAA,qBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,kBAAA,oBAAA,kBAAA,iBAAA,mBAAA,mBAAA,mBAAA,oBAAA,qBAAA,mBAAA,oBAAA,oBAAA,oBAAA,qBAAA,oBAAA,mBAAA,oBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,qBAAA,oBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,oBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,qBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,oBAAA,qBAAA,mBAAA,oBAAA,oBAAA,qBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,kBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,sBAAA,mBAAA,oBAAA,mBAAA,mBAAA,iBAAA,mBAAA,mBAAA,oBAAA,oBAAA,qBAAA,oBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,oBAAA,oBAAA,oBAAA,kBAAA,mBAAA,kBAAA,iBAAA,oBAAA,kBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,kBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,kBAAA,oBAAA,qBAAA,mBAAA,kBAAA,oBAAA,mBAAA,kBAAA,oBAAA,oBAAA,oBAAA,kBAAA,mBAAA,oBAAA,mBAAA,oBAAA,qBAAA,kBAAA,oBAAA,oBAAA,oBAAA,mBAAA,kBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,mBAAA,oBAAA,mBAAA,oBAAA,kBAAA,mBAAA,oBAAA,iBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,kBAAA,mBAAA,oBAAA,mBAAA,mBAAA,kBAAA,kBAAA,oBAAA,mBAAA,oBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,kBAAA,iBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,qBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,iBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,kBAAA,oBAAA,mBAAA,kBAAA,oBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,oBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,qBAAA,qBAAA,oBAAA,mBAAA,oBAAA,oBAAA,kBAAA,mBAAA,mBAAA,kBAAA,iBAAA,oBAAA,oBAAA,oBAAA,oBAAA,kBAAA,oBAAA,kBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,kBAAA,mBAAA,oBAAA,mBAAA,oBAAA,oBAAA,oBAAA,mBAAA,qBAAA,oBAAA,oBAAA,mBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,qBAAA,qBAAA,oBAAA,oBAAA,oBAAA,kBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,iBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,qBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,qBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,kBAAA,oBAAA,kBAAA,oBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,sBAAA,kBAAA,oBAAA,mBAAA,qBAAA,mBAAA,oBAAA,qBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,qBAAA,mBAAA,oBAAA,kBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,kBAAA,qBAAA,oBAAA,oBAAA,qBAAA,qBAAA,qBAAA,qBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,mBAAA,qBAAA,oBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,qBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,kBAAA,oBAAA,mBAAA,oBAAA,qBAAA,kBAAA,oBAAA,oBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,oBAAA,sBAAA,oBAAA,mBAAA,kBAAA,mBAAA,oBAAA,qBAAA,mBAAA,qBAAA,mBAAA,qBAAA,oBAAA,mBAAA,oBAAA,qBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,mBAAA,qBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,qBAAA,mBAAA,oBAAA,mBAAA,oBAAA,oBAAA,sBAAA,mBAAA,qBAAA,mBAAA,sBAAA,mBAAA,mBAAA,qBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,mBAAA,oBAAA,oBAAA,qBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,qBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,kBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,oBAAA,oBAAA,kBAAA,kBAAA,oBAAA,mBAAA,oBAAA,oBAAA,qBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,kBAAA,oBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,kBAAA,oBAAA,oBAAA,oBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,qBAAA,kBAAA,mBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,kBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,oBAAA,mBAAA,mBAAA,kBAAA,oBAAA,kBAAA,mBAAA,mBAAA,qBAAA,mBAAA,oBAAA,oBAAA,mBAAA,mBAAA,oBAAA,iBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,oBAAA,mBAAA,iBAAA,qBAAA,qBAAA,oBAAA,mBAAA,mBAAA,kBAAA,oBAAA,kBAAA,oBAAA,mBAAA,qBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,oBAAAC,QAAAD,MAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,iBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,iBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,iBAAA,mBAAA,iBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,iBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,iBAAA,kBAAA,mBAAA,iBAAA,mBAAA,kBAAA,iBAAA,gBAAA,mBAAA,iBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,iBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,iBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,iBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,iBAAA,kBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,iBAAA,iBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,iBAAA,mBAAA,iBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,iBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,kBAAA,mBAAA,kBAAA,iBAAA,mBAAA,mBAAA,iBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,gBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,iBAAA,iBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,iBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,kBAAA,iBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,iBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,iBAAA,kBAAA,kBAAA,iBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,iBAAA,mBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,iBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,iBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,iBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,iBAAA,kBAAA,gBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,iBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,eAAA,mBAAA,kBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,iBAAA,iBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,iBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,iBAAA,kBAAA,iBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,iBAAA,kBAAA,kBAAA,mBAAA,iBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,iBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,iBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,iBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,iBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,iBAAA,gBAAA,kBAAA,kBAAA,iBAAA,kBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,iBAAA,kBAAA,kBAAA,gBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,gBAAA,mBAAA,iBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,iBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,iBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,iBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,iBAAA,kBAAA,mBAAA,mBAAA,gBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,gBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,iBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,iBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,gBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,iBAAA,mBAAA,mBAAA,kBAAA,iBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,kBAAA,mBAAA,kBAAA,iBAAA,kBAAA,gBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,gBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA;k5koBAAA,mBAAA,iBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,qBAAA,mBAAA,oBAAA,kBAAA,kBAAA,kBAAA,GAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,kBAAA,kBAAA,oBAAA,mBAAA,mBAAA,oBAAA,mBAAA,iBAAA,mBAAA,oBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,oBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,oBAAA,kBAAA,kBAAA,mBAAA,gBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,qBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,oBAAA,iBAAA,kBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,kBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,oBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,oBAAA,qBAAA,mBAAA,mBAAA,qBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,kBAAA,mBAAA,oBAAA,mBAAA,oBAAA,mBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,oBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,kBAAA,oBAAA,mBAAA,oBAAA,kBAAA,iBAAA,mBAAA,mBAAA,qBAAA,qBAAA,mBAAA,mBAAA,oBAAA,kBAAA,oBAAA,oBAAA,mBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,kBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,oBAAA,mBAAA,qBAAA,mBAAA,kBAAA,mBAAA,sBAAA,oBAAA,kBAAA,oBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,kBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,oBAAA,qBAAA,qBAAA,kBAAA,kBAAA,mBAAA,oBAAA,oBAAA,qBAAA,oBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,qBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,iBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,iBAAA,oBAAA,qBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,oBAAA,qBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,qBAAA,qBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,kBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,mBAAA,oBAAA,qBAAA,oBAAA,qBAAA,qBAAA,oBAAA,oBAAA,oBAAA,kBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,oBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,oBAAA,mBAAA,kBAAA,oBAAA,kBAAA,oBAAA,mBAAA,oBAAA,gBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,oBAAA,qBAAA,mBAAA,oBAAA,oBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,oBAAA,qBAAA,oBAAA,oBAAA,oBAAA,kBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,qBAAA,qBAAA,qBAAA,kBAAA,oBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,oBAAA,qBAAA,mBAAA,oBAAA,oBAAA,oBAAA,kBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,kBAAA,oBAAA,oBAAA,kBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,oBAAA,qBAAA,oBAAA,qBAAA,oBAAA,oBAAA,mBAAA,mBAAA,kBAAA,oBAAA,kBAAA,mBAAA,oBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,qBAAA,oBAAA,mBAAA,oBAAA,oBAAA,mBAAA,kBAAA,kBAAA,GAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,qBAAA,qBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,EAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,qBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,kBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,qBAAA,oBAAA,mBAAA,oBAAA,iBAAA,oBAAA,oBAAA,iBAAA,mBAAA,oBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,oBAAA,qBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,kBAAA,oBAAA,mBAAA,kBAAA,mBAAA,oBAAA,qBAAA,oBAAA,kBAAA,oBAAA,oBAAA,kBAAA,mBAAA,iBAAA,iBAAA,oBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,qBAAA,oBAAA,oBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,kBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,iBAAA,mBAAA,mBAAA,kBAAA,mBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,qBAAA,oBAAA,mBAAA,mBAAA,kBAAA,oBAAA,oBAAA,mBAAA,kBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,kBAAA,oBAAA,kBAAA,kBAAA,mBAAA,mBAAA,oBAAA,qBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,kBAAA,oBAAA,mBAAA,oBAAA,kBAAA,oBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,oBAAA,qBAAA,oBAAA,sBAAA,mBAAA,sBAAA,mBAAA,mBAAA,iBAAA,mBAAA,oBAAA,kBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,oBAAA,oBAAA,kBAAA,oBAAA,mBAAA,oBAAA,qBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,qBAAA,mBAAA,oBAAA,mBAAA,oBAAA,mBAAA,oBAAA,mBAAA,oBAAA,mBAAA,iBAAA,mBAAA,mBAAA,qBAAA,oBAAA,mBAAA,oBAAA,mBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,oBAAA,qBAAA,mBAAA,oBAAA,mBAAA,mBAAA,oBAAA,qBAAA,oBAAA,oBAAA,oBAAA,mBAAA,kBAAA,mBAAA,mBAAA,qBAAA,mBAAA,oBAAA,sBAAA,oBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,oBAAA,mBAAA,oBAAA,kBAAA,oBAAA,mBAAA,oBAAA,qBAAA,oBAAA,oBAAA,mBAAA,mBAAA,oBAAA,qBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,kBAAA,oBAAA,oBAAA,oBAAA,oBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,sBAAA,mBAAA,kBAAA,mBAAA,mBAAA,oBAAA,oBAAA,qBAAA,oBAAA,qBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,oBAAA,oBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,iBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,qBAAA,qBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,oBAAA,oBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,iBAAA,mBAAA,kBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,kBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,sBAAA,mBAAA,oBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,oBAAA,kBAAA,oBAAA,kBAAA,oBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,kBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,kBAAA,kBAAA,qBAAA,oBAAA,mBAAA,oBAAA,kBAAA,iBAAA,mBAAA,kBAAA,kBAAA,mBAAA,oBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,kBAAA,kBAAA,mBAAA,kBAAA,mBAAA,kBAAA,oBAAA,mBAAA,qBAAA,iBAAA,qBAAA,iBAAA,mBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,gBAAA,kBAAA,mBAAA,kBAAA,oBAAA,oBAAA,kBAAA,qBAAA,oBAAA,mBAAA,oBAAA,mBAAA,kBAAA,oBAAA,oBAAA,mBAAA,oBAAA,oBAAA,mBAAA,mBAAA,oBAAA,kBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,oBAAA,mBAAA,kBAAA,oBAAA;wrmBAAAj9B,OAAA,GAAAD,MAAA,GAAAm9B,KAAAH,MAAA,kBAAA,oBAAA,kBAAA,kBAAA,oBAAA,oBAAA,mBAAA,oBAAA,oBAAA,kBAAA,mBAAA,mBAAA,mBAAA,gBAAA,mBAAA,kBAAA,mBAAA,mBAAA,oBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,kBAAA,oBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,kBAAA,oBAAA,mBAAA,oBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,mBAAA,oBAAA,oBAAA,oBAAA,mBAAA,kBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,kBAAA,oBAAA,kBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,mBAAA,kBAAA,oBAAA,oBAAA,kBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,kBAAA,mBAAA,oBAAA,mBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,oBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,mBAAA,oBAAA,oBAAA,kBAAA,oBAAA,kBAAA,oBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,iBAAA,mBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,mBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,iBAAA,mBAAA,oBAAA,mBAAA,oBAAA,kBAAA,oBAAA,mBAAA,oBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,oBAAA,mBAAA,kBAAA,oBAAA,oBAAA,oBAAA,kBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,iBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,kBAAA,kBAAA,mBAAA,oBAAA,oBAAA,mBAAA,kBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,kBAAA,oBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,oBAAA,oBAAA,iBAAA,iBAAA,kBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,kBAAA,mBAAA,kBAAA,oBAAA,kBAAA,oBAAA,mBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,iBAAA,oBAAA,mBAAA,oBAAA,oBAAA,kBAAA,iBAAA,mBAAA,kBAAA,mBAAA,oBAAA,oBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,kBAAA,iBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,kBAAA,gBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,iBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,kBAAA,oBAAA,mBAAA,mBAAA,oBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,oBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,iBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,oBAAA,kBAAA,oBAAA,oBAAA,oBAAA,mBAAA,kBAAA,mBAAA,kBAAA,oBAAA,mBAAA,mBAAA,oBAAA,mBAAA,iBAAA,kBAAA,mBAAA,iBAAA,mBAAA,oBAAA,mBAAA,oBAAA,kBAAA,kBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,kBAAA,mBAAA,oBAAA,mBAAA,kBAAA,mBAAA,oBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,mBAAA,oBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,iBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,kBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,oBAAA,kBAAA,oBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,iBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,oBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,oBAAA,oBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,oBAAA,kBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,oBAAA,kBAAA,kBAAA,iBAAA,mBAAA,kBAAA,kBAAA,mBAAA,oBAAA,kBAAA,mBAAA,kBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,kBAAA,mBAAA,oBAAA,kBAAA,mBAAA,kBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,kBAAA,mBAAA,kBAAA,mBAAA,oBAAA,mBAAA,oBAAA,mBAAA,kBAAA,mBAAA,oBAAA,oBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,qBAAA,mBAAA,oBAAA,kBAAA,oBAAA,mBAAA,kBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,oBAAA,mBAAA,kBAAA,iBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,kBAAA,kBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,oBAAA,oBAAA,kBAAA,oBAAA,oBAAA,oBAAA,kBAAA,mBAAA,mBAAA,oBAAA,qBAAA,mBAAA,oBAAA,mBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,kBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,mBAAA,oBAAA,qBAAA,oBAAA,kBAAA,oBAAA,oBAAA,oBAAA,mBAAA,kBAAA,oBAAA,kBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,kBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,qBAAA,kBAAA,oBAAA,kBAAA,oBAAA,mBAAA,kBAAA,mBAAA,mBAAA,oBAAA,kBAAA,mBAAA,oBAAA,oBAAA,oBAAA,mBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,kBAAA,mBAAA,oBAAA,mBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,oBAAA,mBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,kBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,oBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,mBAAA,oBAAA,mBAAA,oBAAA,oBAAA,oBAAA,kBAAA,oBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,kBAAA,mBAAA,oBAAA,oBAAA,oBAAA,kBAAA,kBAAA,mBAAA,oBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,iBAAA,mBAAA,oBAAA,oBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,mBAAA,kBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,oBAAA,oBAAA,mBAAA,oBAAA,kBAAA,oBAAA,oBAAA,mBAAA,mBAAA,iBAAA,oBAAA,oBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA;6rmBAAAE,MAAA,EAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,GAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,iBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,iBAAA,mBAAA,oBAAA,oBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,iBAAA,oBAAA,kBAAA,mBAAA,oBAAA,mBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,kBAAA,oBAAA,mBAAA,mBAAA,kBAAA,oBAAA,kBAAA,oBAAA,kBAAA,oBAAA,kBAAA,kBAAA,kBAAA,oBAAA,oBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,oBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,kBAAA,mBAAA,oBAAA,oBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,iBAAA,oBAAA,mBAAA,kBAAA,oBAAA,kBAAA,oBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,oBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,oBAAA,mBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,kBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,oBAAA,kBAAA,mBAAA,kBAAA,mBAAA,kBAAA,mBAAA,oBAAA,mBAAA,mBAAA,kBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,oBAAA,qBAAA,qBAAA,kBAAA,mBAAA,kBAAA,oBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,iBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,oBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,oBAAA,mBAAA,mBAAA,kBAAA,oBAAA,kBAAA,kBAAA,kBAAA,oBAAA,oBAAA,oBAAA,mBAAA,iBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,oBAAA,kBAAA,kBAAA,mBAAA,iBAAA,mBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,kBAAA,iBAAA,oBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,oBAAA,mBAAA,kBAAA,mBAAA,mBAAA,oBAAA,kBAAA,mBAAA,mBAAA,mBAAA,iBAAA,mBAAA,mBAAA,oBAAA,kBAAA,mBAAA,mBAAA,kBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,kBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,kBAAA,oBAAA,mBAAA,oBAAA,oBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,kBAAA,mBAAA,kBAAA,oBAAA,iBAAA,kBAAA,kBAAA,oBAAA,mBAAA,mBAAA,oBAAA,gBAAA,oBAAA,mBAAA,oBAAA,oBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,oBAAA,mBAAA,oBAAA,mBAAA,iBAAA,oBAAA,oBAAA,mBAAA,oBAAA,kBAAA,oBAAA,mBAAA,kBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,kBAAA,mBAAA,kBAAA,mBAAA,iBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,oBAAA,mBAAA,mBAAA,oBAAA,oBAAA,kBAAA,oBAAA,oBAAA,kBAAA,mBAAA,mBAAA,kBAAA,oBAAA,mBAAA,kBAAA,mBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,oBAAA,iBAAA,mBAAA,oBAAA,kBAAA,mBAAA,mBAAA,gBAAA,mBAAA,kBAAA,mBAAA,oBAAA,mBAAA,kBAAA,kBAAA,oBAAA,kBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,iBAAA,mBAAA,mBAAA,GAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,oBAAA,oBAAA,oBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,EAAA,iBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,oBAAA,oBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,kBAAA,oBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,iBAAA,kBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,oBAAA,kBAAA,oBAAA,kBAAA,mBAAA,oBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,oBAAA,kBAAA,mBAAA,mBAAA,gBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,mBAAA,kBAAA,oBAAA,mBAAA,mBAAA,kBAAA,mBAAA,oBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,oBAAA,iBAAA,oBAAA,oBAAA,oBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,iBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,mBAAA,kBAAA,oBAAA,mBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,oBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,kBAAA,oBAAA,mBAAA,kBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,kBAAA,oBAAA,kBAAA,kBAAA,oBAAA,mBAAA,oBAAA,kBAAA,mBAAA,kBAAA,oBAAA,mBAAA,kBAAA,mBAAA,kBAAA,mBAAA,kBAAA,oBAAA,iBAAA,oBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,oBAAA,oBAAA,kBAAA,oBAAA,iBAAA,kBAAA,oBAAA,mBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,oBAAA,oBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,oBAAA,kBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,oBAAA,mBAAA,kBAAA,mBAAA,kBAAA,oBAAA,kBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,kBAAA,oBAAA,mBAAA,mBAAA,mBAAA,kBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,iBAAA,kBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,oBAAA,mBAAA,eAAA,oBAAA,oBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,iBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,oBAAA,mBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,oBAAA,kBAAA,mBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,iBAAA,kBAAA,kBAAA,kBAAA,iBAAA,mBAAA,mBAAA,mBAAA,oBAAA,kBAAA,oBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,oBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,mBAAA,kBAAA,oBAAA,oBAAA,kBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,kBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,kBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,oBAAA,kBAAA,oBAAA,mBAAA,oBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,oBAAA,kBAAA,oBAAA,oBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,kBAAA,oBAAA,mBAAA,mBAAA,kBAAA,oBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,oBAAA,oBAAA,mBAAA,mBAAA,oBAAA;i3lBAHAllD,OAAAJ,QAAA4/C,mGCEA,QAAAE,eACA,OAAAsF,MAAA,mBAAA,kBAAA,mBAAA,iBAAA,mBAAA,oBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,kBAAA,mBAAA,oBAAA,qBAAA,oBAAA,mBAAA,mBAAA,oBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,oBAAA,oBAAA,mBAAA,iBAAA,oBAAA,mBAAA,oBAAA,mBAAA,kBAAA,mBAAA,mBAAA,qBAAA,kBAAA,qBAAA,oBAAA,mBAAA,oBAAA,oBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,oBAAA,oBAAA,kBAAA,mBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,kBAAA,qBAAA,mBAAA,mBAAA,oBAAA,oBAAA,kBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,iBAAA,mBAAA,oBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,mBAAA,kBAAA,oBAAA,oBAAA,sBAAA,qBAAA,mBAAA,qBAAA,mBAAA,qBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,qBAAA,oBAAA,mBAAA,mBAAA,oBAAA,kBAAA,sBAAA,qBAAA,oBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,oBAAA,kBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,qBAAA,mBAAA,qBAAA,oBAAA,kBAAA,oBAAA,mBAAA,kBAAA,oBAAA,kBAAA,mBAAA,oBAAA,mBAAA,qBAAA,oBAAA,oBAAA,oBAAA,qBAAA,qBAAA,oBAAA,oBAAA,iBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,oBAAA,sBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,kBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,uBAAA,mBAAA,oBAAA,oBAAA,qBAAA,oBAAA,sBAAA,oBAAA,kBAAA,oBAAA,qBAAA,qBAAA,oBAAA,oBAAA,oBAAA,mBAAA,oBAAA,qBAAA,kBAAA,qBAAA,qBAAA,oBAAA,oBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,qBAAA,kBAAA,oBAAA,qBAAA,oBAAA,qBAAA,oBAAA,mBAAA,qBAAA,qBAAA,oBAAA,oBAAA,oBAAA,kBAAA,mBAAA,qBAAA,oBAAA,oBAAA,qBAAA,oBAAA,qBAAA,qBAAA,oBAAA,qBAAA,mBAAA,oBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,kBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,qBAAA,qBAAA,qBAAA,qBAAA,oBAAA,qBAAA,qBAAA,oBAAA,qBAAA,mBAAA,qBAAA,qBAAA,oBAAA,mBAAA,oBAAA,qBAAA,sBAAA,mBAAA,mBAAA,oBAAA,oBAAA,kBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,qBAAA,oBAAA,oBAAA,qBAAA,mBAAA,mBAAA,oBAAA,qBAAA,qBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,kBAAA,qBAAA,mBAAA,oBAAA,mBAAA,mBAAA,sBAAA,qBAAA,oBAAA,oBAAA,oBAAA,sBAAA,oBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,oBAAA,qBAAA,oBAAA,qBAAA,sBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,oBAAA,oBAAA,oBAAA,qBAAA,oBAAA,mBAAA,qBAAA,qBAAA,qBAAA,oBAAA,mBAAA,sBAAA,oBAAA,qBAAA,oBAAA,oBAAA,qBAAA,qBAAA,oBAAA,mBAAA,oBAAA,qBAAA,qBAAA,mBAAA,mBAAA,oBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,oBAAA,oBAAA,qBAAA,oBAAA,qBAAA,mBAAA,oBAAA,oBAAA,qBAAA,qBAAA,qBAAA,oBAAA,mBAAA,mBAAA,kBAAA,kBAAA,sBAAA,qBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,kBAAA,oBAAA,oBAAA,qBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,oBAAA,oBAAA,oBAAA,oBAAA,qBAAA,oBAAA,qBAAA,kBAAA,sBAAA,sBAAA,oBAAA,mBAAA,mBAAA,kBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,qBAAA,oBAAA,mBAAA,kBAAA,kBAAA,kBAAA,oBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,sBAAA,qBAAA,oBAAA,qBAAA,oBAAA,qBAAA,oBAAA,oBAAA,mBAAA,mBAAA,kBAAA,oBAAA,oBAAA,qBAAA,qBAAA,mBAAA,oBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,kBAAA,mBAAA,kBAAA,mBAAA,oBAAA,kBAAA,kBAAA,kBAAA,mBAAA,oBAAA,sBAAA,qBAAA,qBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,oBAAA,qBAAA,oBAAA,mBAAA,mBAAA,kBAAA,oBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,oBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,qBAAA,oBAAA,oBAAA,qBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,kBAAA,oBAAA,mBAAA,mBAAA,kBAAA,oBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,qBAAA,qBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,iBAAA,mBAAA,kBAAA,kBAAA,oBAAA,oBAAA,qBAAA,oBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,iBAAA,kBAAA,iBAAA,oBAAA,oBAAA,mBAAA,mBAAA,qBAAA,qBAAA,qBAAA,qBAAA,oBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,qBAAA,qBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,oBAAA,mBAAA,kBAAA,kBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,qBAAA,oBAAA,kBAAA,qBAAA,oBAAA,mBAAA,kBAAA,mBAAA,kBAAA,qBAAA,oBAAA,qBAAA,qBAAA,qBAAA,qBAAA,qBAAA,qBAAA,mBAAA,oBAAA,qBAAA,oBAAA,iBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,oBAAA,kBAAA,mBAAA,qBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,qBAAA,qBAAA,sBAAA,mBAAA,qBAAA,oBAAA,mBAAA,qBAAA,oBAAA,mBAAA,qBAAA,kBAAA,mBAAA,oBAAA,mBAAA,kBAAA,oBAAA,oBAAA,qBAAA,kBAAA,kBAAA,qBAAA,oBAAA,oBAAA,mBAAA,mBAAA,qBAAA,oBAAA,oBAAA,mBAAA,oBAAA,oBAAA,oBAAA,qBAAA,oBAAA,qBAAA,mBAAA,mBAAA,qBAAA,qBAAA,qBAAA,oBAAA,qBAAA,mBAAA,mBAAA,mBAAA,iBAAA,kBAAA,kBAAA,oBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,qBAAA,oBAAA,mBAAA,oBAAA,qBAAA,mBAAA,qBAAA,sBAAA,qBAAA,kBAAA,qBAAA,oBAAA,qBAAA,qBAAA,oBAAA,oBAAA,qBAAA,oBAAA,qBAAA,qBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,qBAAA,qBAAA,qBAAA,sBAAA,mBAAA,mBAAA,oBAAA,qBAAA,kBAAA,qBAAA,qBAAA,mBAAA,mBAAA,oBAAA,qBAAA,oBAAA,oBAAA,oBAAA,qBAAA,oBAAA,oBAAA,mBAAA,qBAAA,oBAAA,qBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,kBAAA,kBAAA,oBAAA,oBAAA,qBAAA,oBAAA,qBAAA,oBAAA,oBAAA,qBAAA,oBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,qBAAA,qBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,qBAAA,oBAAA,qBAAA,qBAAA,oBAAA,qBAAA,sBAAA,mBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,sBAAA,qBAAA,qBAAA,oBAAA,mBAAA,qBAAA,qBAAA,qBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,qBAAA,oBAAA,mBAAA,oBAAA,oBAAA,qBAAA,qBAAA,oBAAA,oBAAA,oBAAA,qBAAA,mBAAA,kBAAA,kBAAA,kBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,oBAAA,oBAAA,oBAAA,mBAAA,oBAAA,qBAAA,oBAAA,mBAAA,oBAAA,qBAAA,qBAAA,oBAAA,mBAAA,sBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,sBAAA,mBAAA,qBAAA,kBAAA,mBAAA,iBAAA,kBAAA,oBAAA,mBAAA,mBAAA,mBAAA,qBAAA,oBAAA,mBAAA,qBAAA,kBAAA,mBAAA,qBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,oBAAA,mBAAA,qBAAA,oBAAA,oBAAA,oBAAA,mBAAA,qBAAA,oBAAA,oBAAA,mBAAA,qBAAA,mBAAA,kBAAA,mBAAA,iBAAA,mBAAA,oBAAA,mBAAA,kBAAA,oBAAA,kBAAA,oBAAA,mBAAA,oBAAA,mBAAA,oBAAA,qBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,oBAAA,mBAAA,iBAAA,oBAAA,uBAAA,kBAAA,mBAAA,mBAAA,qBAAA,kBAAA,oBAAA,qBAAA,oBAAA,kBAAA,kBAAA,oBAAA,mBAAA,sBAAA,mBAAA,mBAAA,mBAAA,qBAAA,sBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,oBAAA,mBAAA,mBAAA,iBAAA,kBAAA,mBAAA,oBAAA,oBAAA,kBAAA,mBAAA,oBAAA,oBAAA,mBAAA,mBAAA,qBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,oBAAA,iBAAA,oBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,oBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,kBAAA,qBAAA,oBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,iBAAA,mBAAA,mBAAA;4knBAAAC,QAAAD,MAAA,kBAAA,kBAAA,kBAAA,iBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,iBAAA,kBAAA,mBAAA,iBAAA,kBAAA,mBAAA,iBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,iBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,kBAAA,iBAAA,iBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,iBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,iBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,iBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,gBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,iBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,iBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,iBAAA,iBAAA,kBAAA,iBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,gBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,iBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,iBAAA,kBAAA,kBAAA,iBAAA,kBAAA,iBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,iBAAA,iBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,iBAAA,mBAAA,kBAAA,kBAAA,kBAAA,iBAAA,kBAAA,iBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,iBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,iBAAA,kBAAA,kBAAA,iBAAA,iBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,gBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,iBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,gBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,iBAAA,iBAAA,kBAAA,iBAAA,kBAAA,mBAAA,iBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,gBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,iBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,iBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,iBAAA,kBAAA,kBAAA,kBAAA,iBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,iBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,gBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,gBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,iBAAA,iBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,iBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,iBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,iBAAA,kBAAA,kBAAA,kBAAA,kBAAA,iBAAA,iBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,gBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,iBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,iBAAA,iBAAA,mBAAA,mBAAA,kBAAA,gBAAA,mBAAA,kBAAA,iBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,iBAAA,mBAAA,mBAAA,iBAAA,mBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,iBAAA,kBAAA,mBAAA,kBAAA,iBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,iBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,kBAAA,mBAAA,kBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,iBAAA,kBAAA,kBAAA,kBAAA,mBAAA,iBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,iBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,iBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,iBAAA,kBAAA,kBAAA,iBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,kBAAA,mBAAA,kBAAA,mBAAA,iBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA;izkoBAAA,mBAAA,mBAAA,kBAAA,qBAAA,kBAAA,kBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,kBAAA,oBAAA,oBAAA,EAAA,qBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,iBAAA,oBAAA,mBAAA,kBAAA,mBAAA,mBAAA,oBAAA,mBAAA,kBAAA,oBAAA,qBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,mBAAA,kBAAA,oBAAA,kBAAA,oBAAA,oBAAA,mBAAA,oBAAA,kBAAA,kBAAA,oBAAA,mBAAA,iBAAA,mBAAA,mBAAA,mBAAA,qBAAA,mBAAA,mBAAA,sBAAA,oBAAA,oBAAA,mBAAA,mBAAA,oBAAA,kBAAA,mBAAA,oBAAA,oBAAA,qBAAA,oBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,kBAAA,kBAAA,oBAAA,oBAAA,oBAAA,qBAAA,oBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,kBAAA,mBAAA,mBAAA,kBAAA,oBAAA,qBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,kBAAA,kBAAA,mBAAA,kBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,kBAAA,mBAAA,oBAAA,qBAAA,kBAAA,sBAAA,mBAAA,oBAAA,mBAAA,mBAAA,oBAAA,mBAAA,qBAAA,kBAAA,mBAAA,mBAAA,mBAAA,qBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,kBAAA,oBAAA,oBAAA,oBAAA,mBAAA,iBAAA,gBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,qBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,qBAAA,oBAAA,oBAAA,mBAAA,oBAAA,oBAAA,qBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,kBAAA,mBAAA,kBAAA,mBAAA,qBAAA,oBAAA,mBAAA,oBAAA,kBAAA,mBAAA,kBAAA,qBAAA,oBAAA,mBAAA,mBAAA,qBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,oBAAA,qBAAA,mBAAA,oBAAA,qBAAA,oBAAA,mBAAA,kBAAA,mBAAA,oBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,qBAAA,mBAAA,kBAAA,oBAAA,oBAAA,qBAAA,oBAAA,mBAAA,oBAAA,mBAAA,oBAAA,mBAAA,qBAAA,qBAAA,kBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,qBAAA,qBAAA,qBAAA,oBAAA,mBAAA,mBAAA,oBAAA,kBAAA,iBAAA,iBAAA,oBAAA,oBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,oBAAA,qBAAA,qBAAA,oBAAA,oBAAA,oBAAA,oBAAA,qBAAA,mBAAA,qBAAA,oBAAA,mBAAA,qBAAA,oBAAA,qBAAA,qBAAA,qBAAA,oBAAA,qBAAA,qBAAA,mBAAA,qBAAA,qBAAA,oBAAA,qBAAA,oBAAA,mBAAA,oBAAA,qBAAA,oBAAA,qBAAA,qBAAA,oBAAA,oBAAA,qBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,oBAAA,mBAAA,qBAAA,oBAAA,qBAAA,qBAAA,oBAAA,sBAAA,qBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,sBAAA,qBAAA,kBAAA,mBAAA,qBAAA,oBAAA,oBAAA,kBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,qBAAA,mBAAA,mBAAA,qBAAA,sBAAA,oBAAA,qBAAA,sBAAA,qBAAA,oBAAA,mBAAA,oBAAA,oBAAA,oBAAA,qBAAA,oBAAA,oBAAA,oBAAA,qBAAA,qBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,iBAAA,oBAAA,oBAAA,mBAAA,oBAAA,oBAAA,oBAAA,qBAAA,sBAAA,oBAAA,oBAAA,mBAAA,qBAAA,qBAAA,oBAAA,oBAAA,oBAAA,oBAAA,qBAAA,kBAAA,oBAAA,qBAAA,qBAAA,oBAAA,oBAAA,qBAAA,qBAAA,oBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,oBAAA,oBAAA,oBAAA,qBAAA,kBAAA,qBAAA,mBAAA,mBAAA,oBAAA,oBAAA,qBAAA,qBAAA,mBAAA,oBAAA,qBAAA,oBAAA,mBAAA,qBAAA,oBAAA,oBAAA,mBAAA,qBAAA,oBAAA,qBAAA,oBAAA,mBAAA,oBAAA,qBAAA,mBAAA,mBAAA,mBAAA,qBAAA,oBAAA,oBAAA,oBAAA,kBAAA,qBAAA,oBAAA,qBAAA,oBAAA,oBAAA,kBAAA,qBAAA,oBAAA,oBAAA,qBAAA,mBAAA,oBAAA,qBAAA,oBAAA,mBAAA,oBAAA,oBAAA,oBAAA,qBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,kBAAA,kBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,qBAAA,mBAAA,oBAAA,oBAAA,qBAAA,oBAAA,qBAAA,mBAAA,mBAAA,qBAAA,oBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,oBAAA,mBAAA,kBAAA,mBAAA,kBAAA,mBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,kBAAA,oBAAA,mBAAA,uBAAA,mBAAA,qBAAA,qBAAA,qBAAA,oBAAA,oBAAA,mBAAA,EAAA,kBAAA,oBAAA,mBAAA,qBAAA,mBAAA,sBAAA,oBAAA,mBAAA,qBAAA,oBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,GAAA,qBAAA,mBAAA,mBAAA,oBAAA,oBAAA,qBAAA,sBAAA,mBAAA,qBAAA,sBAAA,oBAAA,oBAAA,oBAAA,kBAAA,oBAAA,mBAAA,iBAAA,mBAAA,oBAAA,oBAAA,qBAAA,oBAAA,oBAAA,sBAAA,mBAAA,sBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,oBAAA,qBAAA,oBAAA,oBAAA,qBAAA,mBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,qBAAA,qBAAA,oBAAA,mBAAA,oBAAA,kBAAA,mBAAA,kBAAA,kBAAA,oBAAA,mBAAA,kBAAA,mBAAA,qBAAA,qBAAA,oBAAA,mBAAA,oBAAA,oBAAA,qBAAA,qBAAA,oBAAA,mBAAA,oBAAA,mBAAA,oBAAA,oBAAA,oBAAA,mBAAA,kBAAA,qBAAA,oBAAA,qBAAA,mBAAA,qBAAA,mBAAA,qBAAA,qBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,oBAAA,mBAAA,mBAAA,qBAAA,oBAAA,qBAAA,qBAAA,mBAAA,kBAAA,mBAAA,oBAAA,oBAAA,oBAAA,qBAAA,mBAAA,kBAAA,oBAAA,qBAAA,sBAAA,qBAAA,oBAAA,oBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,qBAAA,qBAAA,qBAAA,oBAAA,sBAAA,qBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,qBAAA,qBAAA,oBAAA,mBAAA,sBAAA,mBAAA,oBAAA,qBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,oBAAA,mBAAA,qBAAA,qBAAA,qBAAA,qBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,oBAAA,qBAAA,oBAAA,mBAAA,qBAAA,qBAAA,oBAAA,oBAAA,qBAAA,qBAAA,oBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,qBAAA,oBAAA,oBAAA,qBAAA,qBAAA,mBAAA,oBAAA,oBAAA,sBAAA,oBAAA,oBAAA,qBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,mBAAA,oBAAA,qBAAA,oBAAA,oBAAA,qBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,iBAAA,mBAAA,oBAAA,mBAAA,mBAAA,kBAAA,oBAAA,oBAAA,qBAAA,qBAAA,sBAAA,oBAAA,qBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,qBAAA,oBAAA,qBAAA,oBAAA,qBAAA,qBAAA,qBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,oBAAA,qBAAA,qBAAA,mBAAA,mBAAA,mBAAA,mBAAA,qBAAA,oBAAA,qBAAA,qBAAA,oBAAA,qBAAA,mBAAA,kBAAA,qBAAA,oBAAA,oBAAA,oBAAA,oBAAA,qBAAA,sBAAA,oBAAA,qBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,kBAAA,oBAAA,kBAAA,kBAAA,kBAAA,oBAAA,oBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,mBAAA,oBAAA,oBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,qBAAA,oBAAA,sBAAA,oBAAA,mBAAA,oBAAA,qBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,kBAAA,oBAAA,kBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,qBAAA,qBAAA,oBAAA,mBAAA,mBAAA,oBAAA,oBAAA,kBAAA,oBAAA,qBAAA,oBAAA,mBAAA,oBAAA,kBAAA,qBAAA,oBAAA,oBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,oBAAA,kBAAA,mBAAA,oBAAA,kBAAA,oBAAA,mBAAA,oBAAA,mBAAA,gBAAA,oBAAA,qBAAA,kBAAA,oBAAA,mBAAA,mBAAA,mBAAA,qBAAA,mBAAA,oBAAA,oBAAA,oBAAA,mBAAA,sBAAA,kBAAA,qBAAA,oBAAA,oBAAA,kBAAA,kBAAA,kBAAA,mBAAA,oBAAA,kBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,mBAAA,oBAAA,mBAAA,iBAAA,mBAAA,kBAAA,mBAAA,mBAAA,oBAAA,mBAAA,kBAAA,oBAAA,kBAAA,oBAAA,mBAAA,oBAAA,oBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,kBAAA,oBAAA,mBAAA,iBAAA,kBAAA,oBAAA,qBAAA,qBAAA,qBAAA,oBAAA,mBAAA,qBAAA,mBAAA,mBAAA,oBAAA,oBAAA,sBAAA,mBAAA,oBAAA,oBAAA,oBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,iBAAA,iBAAA,mBAAA,mBAAA,oBAAA,kBAAA,oBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,oBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,kBAAA,qBAAA,oBAAA,mBAAA,mBAAA,oBAAA,mBAAA,kBAAA,iBAAA,kBAAA,mBAAA,mBAAA,iBAAA;iknBAAAj9B,OAAA,GAAAD,MAAA,GAAAm9B,KAAAH,MAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,mBAAA,oBAAA,kBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,oBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,kBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,kBAAA,oBAAA,oBAAA,oBAAA,mBAAA,kBAAA,iBAAA,oBAAA,oBAAA,mBAAA,kBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,qBAAA,mBAAA,kBAAA,mBAAA,mBAAA,oBAAA,kBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,kBAAA,oBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,oBAAA,kBAAA,mBAAA,mBAAA,iBAAA,mBAAA,oBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,oBAAA,oBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,oBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,oBAAA,oBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,oBAAA,oBAAA,oBAAA,kBAAA,oBAAA,kBAAA,kBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,oBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,gBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,oBAAA,qBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,qBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,oBAAA,mBAAA,kBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,kBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,kBAAA,kBAAA,oBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,oBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,oBAAA,mBAAA,kBAAA,oBAAA,oBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,mBAAA,oBAAA,oBAAA,kBAAA,oBAAA,oBAAA,mBAAA,iBAAA,mBAAA,mBAAA,qBAAA,mBAAA,mBAAA,oBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,oBAAA,kBAAA,kBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,oBAAA,oBAAA,oBAAA,mBAAA,kBAAA,oBAAA,oBAAA,kBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,oBAAA,kBAAA,mBAAA,mBAAA,mBAAA,iBAAA,mBAAA,qBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,kBAAA,kBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,oBAAA,mBAAA,kBAAA,kBAAA,mBAAA,oBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,oBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,oBAAA,mBAAA,kBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,oBAAA,qBAAA,mBAAA,mBAAA,oBAAA,iBAAA,mBAAA,kBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,iBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,kBAAA,kBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,oBAAA,oBAAA,kBAAA,kBAAA,kBAAA,oBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,oBAAA,mBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,oBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,iBAAA,mBAAA,mBAAA,mBAAA,kBAAA,oBAAA,mBAAA,gBAAA,kBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,mBAAA,oBAAA,mBAAA,oBAAA,kBAAA,iBAAA,mBAAA,mBAAA,mBAAA,oBAAA,iBAAA,mBAAA,iBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,iBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,kBAAA,oBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,oBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,oBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,oBAAA,oBAAA,mBAAA,kBAAA,kBAAA,kBAAA,oBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,oBAAA,kBAAA,kBAAA,oBAAA,kBAAA,iBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,oBAAA,oBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,iBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,oBAAA,kBAAA,kBAAA,oBAAA,mBAAA,mBAAA,oBAAA,mBAAA,kBAAA,oBAAA,oBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,oBAAA,oBAAA,kBAAA,mBAAA,oBAAA,mBAAA,oBAAA,oBAAA,kBAAA,kBAAA,iBAAA,kBAAA,mBAAA,kBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,qBAAA,kBAAA,kBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,iBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,kBAAA,mBAAA,kBAAA,iBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,oBAAA,kBAAA,mBAAA,oBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,oBAAA,oBAAA,iBAAA,kBAAA,oBAAA,oBAAA,mBAAA,mBAAA,oBAAA,kBAAA,mBAAA,qBAAA,kBAAA,oBAAA,oBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,oBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,oBAAA,oBAAA,mBAAA,mBAAA,oBAAA,oBAAA,kBAAA,mBAAA,kBAAA,mBAAA,kBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,kBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,kBAAA,qBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,kBAAA,kBAAA,kBAAA,oBAAA,oBAAA,kBAAA,kBAAA,iBAAA,mBAAA,mBAAA,mBAAA,mBAAA,iBAAA,kBAAA,oBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,iBAAA,oBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,oBAAA,kBAAA,oBAAA,mBAAA,oBAAA,kBAAA,mBAAA,kBAAA,oBAAA,mBAAA,oBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,oBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,oBAAA,oBAAA,mBAAA,kBAAA,oBAAA,kBAAA,kBAAA,oBAAA,mBAAA,kBAAA,mBAAA,oBAAA,oBAAA,mBAAA,mBAAA,oBAAA,kBAAA,oBAAA,kBAAA,oBAAA,oBAAA,mBAAA,qBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,oBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,mBAAA,kBAAA,oBAAA,mBAAA,oBAAA,kBAAA,mBAAA,mBAAA,oBAAA,kBAAA,oBAAA,qBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,oBAAA,gBAAA,kBAAA,mBAAA,kBAAA,oBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,oBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA;46lBAAAE,MAAA,GAAA,oBAAA,iBAAA,oBAAA,kBAAA,oBAAA,kBAAA,mBAAA,oBAAA,mBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,kBAAA,EAAA,oBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,oBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,oBAAA,oBAAA,oBAAA,oBAAA,iBAAA,mBAAA,mBAAA,mBAAA,kBAAA,oBAAA,oBAAA,kBAAA,kBAAA,mBAAA,oBAAA,mBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,oBAAA,mBAAA,kBAAA,oBAAA,mBAAA,kBAAA,kBAAA,iBAAA,oBAAA,gBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,oBAAA,mBAAA,oBAAA,kBAAA,kBAAA,oBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,oBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,kBAAA,oBAAA,mBAAA,kBAAA,mBAAA,kBAAA,oBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,qBAAA,mBAAA,kBAAA,oBAAA,mBAAA,kBAAA,mBAAA,kBAAA,oBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,oBAAA,mBAAA,kBAAA,mBAAA,qBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,oBAAA,oBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,oBAAA,mBAAA,kBAAA,mBAAA,oBAAA,mBAAA,mBAAA,oBAAA,oBAAA,kBAAA,oBAAA,oBAAA,iBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,kBAAA,mBAAA,kBAAA,oBAAA,kBAAA,oBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,kBAAA,mBAAA,oBAAA,kBAAA,oBAAA,mBAAA,mBAAA,kBAAA,oBAAA,mBAAA,mBAAA,kBAAA,oBAAA,iBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,oBAAA,kBAAA,kBAAA,mBAAA,oBAAA,iBAAA,mBAAA,kBAAA,oBAAA,oBAAA,oBAAA,mBAAA,kBAAA,mBAAA,oBAAA,mBAAA,mBAAA,kBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,kBAAA,kBAAA,oBAAA,kBAAA,iBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,mBAAA,oBAAA,mBAAA,mBAAA,oBAAA,kBAAA,mBAAA,iBAAA,oBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,kBAAA,oBAAA,mBAAA,mBAAA,oBAAA,oBAAA,kBAAA,mBAAA,oBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,oBAAA,mBAAA,kBAAA,mBAAA,oBAAA,mBAAA,kBAAA,kBAAA,oBAAA,oBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,oBAAA,kBAAA,mBAAA,oBAAA,oBAAA,kBAAA,mBAAA,mBAAA,kBAAA,oBAAA,oBAAA,kBAAA,mBAAA,oBAAA,oBAAA,mBAAA,kBAAA,oBAAA,mBAAA,mBAAA,mBAAA,iBAAA,oBAAA,mBAAA,iBAAA,oBAAA,oBAAA,mBAAA,kBAAA,mBAAA,oBAAA,oBAAA,iBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,kBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,oBAAA,kBAAA,oBAAA,mBAAA,kBAAA,oBAAA,oBAAA,kBAAA,oBAAA,qBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,oBAAA,mBAAA,kBAAA,kBAAA,oBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,oBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,oBAAA,kBAAA,mBAAA,mBAAA,kBAAA,oBAAA,kBAAA,kBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,qBAAA,kBAAA,oBAAA,mBAAA,kBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,mBAAA,kBAAA,oBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,oBAAA,oBAAA,kBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,kBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,kBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,oBAAA,kBAAA,mBAAA,oBAAA,mBAAA,kBAAA,oBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,oBAAA,mBAAA,qBAAA,kBAAA,oBAAA,oBAAA,mBAAA,oBAAA,oBAAA,mBAAA,EAAA,kBAAA,oBAAA,kBAAA,mBAAA,mBAAA,oBAAA,mBAAA,kBAAA,oBAAA,iBAAA,kBAAA,mBAAA,kBAAA,mBAAA,kBAAA,GAAA,kBAAA,mBAAA,kBAAA,oBAAA,mBAAA,oBAAA,qBAAA,kBAAA,oBAAA,oBAAA,oBAAA,kBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,oBAAA,kBAAA,mBAAA,oBAAA,oBAAA,oBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,oBAAA,kBAAA,oBAAA,mBAAA,kBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,kBAAA,mBAAA,iBAAA,mBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,kBAAA,oBAAA,mBAAA,oBAAA,mBAAA,iBAAA,mBAAA,kBAAA,oBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,oBAAA,kBAAA,oBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,oBAAA,mBAAA,kBAAA,kBAAA,oBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,oBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,oBAAA,oBAAA,kBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,kBAAA,mBAAA,iBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,oBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,iBAAA,oBAAA,mBAAA,mBAAA,iBAAA,mBAAA,qBAAA,iBAAA,mBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,kBAAA,kBAAA,oBAAA,oBAAA,mBAAA,kBAAA,kBAAA,mBAAA,oBAAA,kBAAA,mBAAA,oBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,oBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,oBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,oBAAA,oBAAA,mBAAA,kBAAA,oBAAA,mBAAA,oBAAA,oBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,iBAAA,oBAAA,oBAAA,kBAAA,oBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,oBAAA,oBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,oBAAA,kBAAA,mBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,kBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,oBAAA,kBAAA,kBAAA,oBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,oBAAA,mBAAA,kBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,kBAAA,oBAAA,mBAAA,kBAAA,kBAAA,qBAAA,oBAAA,kBAAA,kBAAA,iBAAA,mBAAA,mBAAA,oBAAA,mBAAA,qBAAA,mBAAA,kBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,oBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,kBAAA,mBAAA,kBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,kBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,oBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,oBAAA,mBAAA,oBAAA,iBAAA,mBAAA,mBAAA,oBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,iBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,iBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,qBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,oBAAA,kBAAA,kBAAA,kBAAA,oBAAA,mBAAA,mBAAA,oBAAA,oBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,oBAAA,mBAAA,kBAAA,oBAAA,mBAAA,kBAAA,kBAAA,kBAAA,oBAAA,oBAAA,oBAAA,mBAAA,kBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,kBAAA,mBAAA,mBAAA,mBAAA,oBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,iBAAA,oBAAA,mBAAA,kBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,oBAAA,mBAAA,kBAAA,oBAAA,oBAAA,mBAAA,kBAAA,oBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA;65lBAHAllD,OAAAJ,QAAA8/C,qDCEA,QAAAD,oBACA,OAAAuF,MAAA,mBAAA,oBAAA,mBAAA,kBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,kBAAA,oBAAA,iBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,kBAAA,oBAAA,mBAAA,kBAAA,oBAAA,oBAAA,kBAAA,mBAAA,mBAAA,mBAAA,oBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,qBAAA,mBAAA,mBAAA,mBAAA,qBAAA,kBAAA,kBAAA,mBAAA,oBAAA,kBAAA,oBAAA,mBAAA,qBAAA,mBAAA,oBAAA,oBAAA,mBAAA,mBAAA,kBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,oBAAA,kBAAA,mBAAA,kBAAA,mBAAA,iBAAA,mBAAA,oBAAA,mBAAA,oBAAA,qBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,oBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,mBAAA,kBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,iBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,kBAAA,kBAAA,mBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,kBAAA,oBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,iBAAA,mBAAA,oBAAA,oBAAA,kBAAA,mBAAA,mBAAA,mBAAA,sBAAA,mBAAA,oBAAA,qBAAA,oBAAA,mBAAA,oBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,qBAAA,oBAAA,oBAAA,oBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,kBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,iBAAA,mBAAA,mBAAA,mBAAA,kBAAA,oBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,oBAAA,qBAAA,mBAAA,mBAAA,mBAAA,kBAAA,qBAAA,qBAAA,oBAAA,qBAAA,mBAAA,mBAAA,qBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,oBAAA,oBAAA,mBAAA,mBAAA,oBAAA,kBAAA,kBAAA,oBAAA,mBAAA,oBAAA,oBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,qBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,oBAAA,oBAAA,qBAAA,qBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,qBAAA,oBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,oBAAA,kBAAA,oBAAA,qBAAA,oBAAA,qBAAA,qBAAA,mBAAA,kBAAA,mBAAA,kBAAA,mBAAA,oBAAA,qBAAA,gBAAA,oBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,qBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,kBAAA,oBAAA,oBAAA,oBAAA,qBAAA,qBAAA,oBAAA,mBAAA,mBAAA,oBAAA,kBAAA,mBAAA,kBAAA,mBAAA,kBAAA,mBAAA,qBAAA,kBAAA,mBAAA,kBAAA,mBAAA,gBAAA,mBAAA,iBAAA,mBAAA,qBAAA,qBAAA,qBAAA,oBAAA,kBAAA,qBAAA,oBAAA,mBAAA,mBAAA,oBAAA,mBAAA,qBAAA,oBAAA,oBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,oBAAA,mBAAA,kBAAA,mBAAA,oBAAA,mBAAA,oBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,oBAAA,oBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,kBAAA,oBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,oBAAA,oBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,oBAAA,qBAAA,oBAAA,oBAAA,mBAAA,kBAAA,mBAAA,mBAAA,oBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,iBAAA,mBAAA,kBAAA,mBAAA,oBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,sBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,oBAAA,mBAAA,mBAAA,oBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,qBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,mBAAA,gBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,qBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,iBAAA,mBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,kBAAA,kBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,oBAAA,oBAAA,mBAAA,qBAAA,mBAAA,iBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,iBAAA,mBAAA,mBAAA,mBAAA,kBAAA,qBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,oBAAA,oBAAA,mBAAA,kBAAA,mBAAA,kBAAA,iBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,mBAAA,kBAAA,qBAAA,oBAAA,mBAAA,oBAAA,oBAAA,qBAAA,mBAAA,kBAAA,mBAAA,qBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,oBAAA,kBAAA,mBAAA,mBAAA,iBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,qBAAA,oBAAA,mBAAA,oBAAA,mBAAA,oBAAA,oBAAA,mBAAA,mBAAA,qBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,gBAAA,mBAAA,mBAAA,kBAAA,oBAAA,mBAAA,kBAAA,oBAAA,mBAAA,oBAAA,oBAAA,qBAAA,kBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,qBAAA,mBAAA,mBAAA,oBAAA,qBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,oBAAA,mBAAA,qBAAA,kBAAA,oBAAA,qBAAA,qBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,oBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,qBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,oBAAA,mBAAA,kBAAA,mBAAA,oBAAA,oBAAA,kBAAA,oBAAA,mBAAA,oBAAA,qBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,kBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,qBAAA,oBAAA,oBAAA,oBAAA,oBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,qBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,kBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,qBAAA,oBAAA,oBAAA,oBAAA,kBAAA,mBAAA,oBAAA,mBAAA,kBAAA,mBAAA,oBAAA,oBAAA,oBAAA,kBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,mBAAA,kBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,qBAAA,oBAAA,mBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,kBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,qBAAA,qBAAA,oBAAA,qBAAA,oBAAA,oBAAA,qBAAA,kBAAA,kBAAA,oBAAA,oBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,oBAAA,qBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,kBAAA,mBAAA,kBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,kBAAA,mBAAA,oBAAA,qBAAA,oBAAA,oBAAA,qBAAA,mBAAA,oBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,oBAAA,oBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,mBAAA,qBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,oBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,oBAAA,oBAAA,kBAAA,qBAAA,mBAAA,oBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,qBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA;gxmBAAAC,QAAAD,MAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,iBAAA,mBAAA,mBAAA,kBAAA,kBAAA,iBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,iBAAA,kBAAA,kBAAA,iBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,iBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,iBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,kBAAA,mBAAA,iBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,mBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,gBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,iBAAA,kBAAA,gBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,iBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,iBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,iBAAA,kBAAA,kBAAA,kBAAA,iBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,iBAAA,mBAAA,mBAAA,mBAAA,iBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,iBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,iBAAA,kBAAA,kBAAA,kBAAA,iBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,iBAAA,iBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,iBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,iBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,iBAAA,kBAAA,kBAAA,kBAAA,kBAAA,iBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,iBAAA,iBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,iBAAA,kBAAA,iBAAA,kBAAA,iBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,iBAAA,kBAAA,iBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,iBAAA,kBAAA,iBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,gBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,gBAAA,kBAAA,kBAAA,iBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,iBAAA,kBAAA,kBAAA,iBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,kBAAA,mBAAA,iBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,iBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,iBAAA,iBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,iBAAA,kBAAA,kBAAA,mBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,iBAAA,iBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,iBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,iBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,iBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,iBAAA,kBAAA,iBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,iBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,iBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,iBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,iBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,iBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,iBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,iBAAA,kBAAA,iBAAA,kBAAA,kBAAA,iBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,iBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,iBAAA,iBAAA,kBAAA,kBAAA,mBAAA,kBAAA;+7kBAAAE,MAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAAA,MAAA,GAAA,kBAAA,kBAAA,oBAAA,iBAAA,kBAAA,mBAAA,kBAAA,mBAAA,oBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,GAAA,mBAAA,oBAAA,kBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,iBAAA,mBAAA,kBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,oBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,kBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,qBAAA,oBAAA,oBAAA,oBAAA,oBAAA,kBAAA,oBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,iBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,iBAAA,kBAAA,mBAAA,oBAAA,oBAAA,qBAAA,mBAAA,mBAAA,oBAAA,oBAAA,kBAAA,mBAAA,oBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,sBAAA,oBAAA,kBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,iBAAA,kBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,kBAAA,qBAAA,mBAAA,mBAAA,kBAAA,kBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,iBAAA,kBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,kBAAA,qBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,kBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,kBAAA,oBAAA,kBAAA,oBAAA,mBAAA,mBAAA,kBAAA,iBAAA,kBAAA,kBAAA,kBAAA,kBAAA,oBAAA,kBAAA,mBAAA,mBAAA,oBAAA,qBAAA,mBAAA,oBAAA,gBAAA,mBAAA,oBAAA,iBAAA,mBAAA,mBAAA,oBAAA,qBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,qBAAA,oBAAA,kBAAA,mBAAA,qBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,oBAAA,oBAAA,iBAAA,mBAAA,mBAAA,kBAAA,oBAAA,mBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,kBAAA,mBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,qBAAA,kBAAA,oBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,oBAAA,qBAAA,oBAAA,qBAAA,mBAAA,mBAAA,oBAAA,qBAAA,oBAAA,mBAAA,oBAAA,mBAAA,oBAAA,kBAAA,mBAAA,mBAAA,mBAAA,sBAAA,mBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,sBAAA,mBAAA,kBAAA,oBAAA,mBAAA,oBAAA,mBAAA,oBAAA,oBAAA,sBAAA,mBAAA,kBAAA,mBAAA,kBAAA,qBAAA,mBAAA,kBAAA,mBAAA,oBAAA,kBAAA,kBAAA,oBAAA,mBAAA,oBAAA,oBAAA,oBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,mBAAA,oBAAA,qBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,kBAAA,mBAAA,kBAAA,mBAAA,kBAAA,oBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,mBAAA,oBAAA,kBAAA,kBAAA,kBAAA,iBAAA,iBAAA,mBAAA,kBAAA,kBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,oBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,iBAAA,qBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,qBAAA,oBAAA,oBAAA,mBAAA,mBAAA,kBAAA,kBAAA,oBAAA,oBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,iBAAA,iBAAA,mBAAA,oBAAA,oBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,iBAAA,kBAAA,GAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,oBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,EAAA,kBAAA,mBAAA,oBAAA,oBAAA,iBAAA,kBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,mBAAA,oBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,oBAAA,kBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,qBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,oBAAA,kBAAA,mBAAA,mBAAA,mBAAA,oBAAA,kBAAA,mBAAA,oBAAA,mBAAA,oBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,kBAAA,kBAAA,oBAAA,oBAAA,qBAAA,kBAAA,kBAAA,mBAAA,kBAAA,oBAAA,kBAAA,oBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,kBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,iBAAA,oBAAA,kBAAA,iBAAA,mBAAA,kBAAA,mBAAA,kBAAA,oBAAA,mBAAA,mBAAA,mBAAA,kBAAA,qBAAA,oBAAA,oBAAA,kBAAA,oBAAA,oBAAA,qBAAA,oBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,oBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,kBAAA,kBAAA,kBAAA,mBAAA,qBAAA,mBAAA,mBAAA,oBAAA,qBAAA,oBAAA,qBAAA,oBAAA,oBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,sBAAA,mBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,qBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,mBAAA,qBAAA,oBAAA,oBAAA,mBAAA,oBAAA,qBAAA,qBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,kBAAA,oBAAA,oBAAA,kBAAA,kBAAA,oBAAA,oBAAA,oBAAA,qBAAA,mBAAA,mBAAA,mBAAA,qBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,qBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,qBAAA,oBAAA,kBAAA,qBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,qBAAA,oBAAA,oBAAA,oBAAA,oBAAA,qBAAA,oBAAA,kBAAA,kBAAA,iBAAA,qBAAA,oBAAA,oBAAA,kBAAA,oBAAA,oBAAA,oBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,kBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,oBAAA,mBAAA,kBAAA,kBAAA,oBAAA,mBAAA,mBAAA,iBAAA,kBAAA,kBAAA,kBAAA,mBAAA,oBAAA,qBAAA,oBAAA,oBAAA,mBAAA,mBAAA,oBAAA,kBAAA,kBAAA,iBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,oBAAA,gBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,oBAAA,mBAAA,oBAAA,oBAAA,oBAAA,qBAAA,iBAAA,kBAAA,kBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,oBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,sBAAA,mBAAA,oBAAA,oBAAA,oBAAA,kBAAA,iBAAA,kBAAA,kBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,kBAAA,kBAAA,oBAAA,oBAAA,iBAAA,mBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,oBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,oBAAA,kBAAA,kBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,oBAAA,oBAAA,kBAAA,iBAAA,mBAAA,oBAAA,oBAAA,mBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,iBAAA,oBAAA,qBAAA,qBAAA,mBAAA,qBAAA,kBAAA,oBAAA,kBAAA,kBAAA,kBAAA,kBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,oBAAA,oBAAA;glmBAAAj9B,OAAA,GAAAD,MAAA,GAAAm9B,KAAAH,MAAA,kBAAA,oBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,oBAAA,mBAAA,oBAAA,kBAAA,mBAAA,kBAAA,oBAAA,kBAAA,mBAAA,kBAAA,oBAAA,mBAAA,oBAAA,kBAAA,mBAAA,kBAAA,oBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,oBAAA,kBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,oBAAA,iBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,kBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,oBAAA,kBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,mBAAA,iBAAA,oBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,oBAAA,mBAAA,mBAAA,oBAAA,kBAAA,oBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,oBAAA,oBAAA,oBAAA,mBAAA,iBAAA,mBAAA,mBAAA,kBAAA,kBAAA,oBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,oBAAA,mBAAA,kBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,qBAAA,oBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,kBAAA,iBAAA,kBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,kBAAA,oBAAA,oBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,kBAAA,gBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,oBAAA,oBAAA,mBAAA,oBAAA,oBAAA,kBAAA,mBAAA,mBAAA,iBAAA,iBAAA,kBAAA,kBAAA,kBAAA,oBAAA,mBAAA,oBAAA,oBAAA,mBAAA,kBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,kBAAA,mBAAA,oBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,oBAAA,oBAAA,mBAAA,mBAAA,oBAAA,kBAAA,iBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,kBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,oBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,kBAAA,mBAAA,kBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,oBAAA,mBAAA,oBAAA,mBAAA,kBAAA,oBAAA,iBAAA,mBAAA,oBAAA,mBAAA,kBAAA,mBAAA,kBAAA,mBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,oBAAA,mBAAA,kBAAA,kBAAA,mBAAA,kBAAA,oBAAA,oBAAA,mBAAA,oBAAA,kBAAA,iBAAA,oBAAA,mBAAA,mBAAA,oBAAA,mBAAA,kBAAA,kBAAA,oBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,iBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,iBAAA,iBAAA,kBAAA,mBAAA,kBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,iBAAA,kBAAA,kBAAA,mBAAA,kBAAA,aAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,iBAAA,kBAAA,mBAAA,oBAAA,mBAAA,kBAAA,iBAAA,mBAAA,mBAAA,mBAAA,kBAAA,oBAAA,kBAAA,kBAAA,oBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,oBAAA,oBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,kBAAA,mBAAA,iBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,iBAAA,oBAAA,kBAAA,kBAAA,mBAAA,kBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,iBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,iBAAA,mBAAA,kBAAA,oBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,iBAAA,kBAAA,kBAAA,mBAAA,iBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,iBAAA,mBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,oBAAA,oBAAA,kBAAA,kBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,iBAAA,mBAAA,oBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,kBAAA,kBAAA,mBAAA,oBAAA,oBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,mBAAA,iBAAA,kBAAA,iBAAA,oBAAA,mBAAA,mBAAA,kBAAA,mBAAA,oBAAA,mBAAA,kBAAA,mBAAA,kBAAA,oBAAA,oBAAA,mBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,mBAAA,oBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,oBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,oBAAA,kBAAA,kBAAA,mBAAA,mBAAA,oBAAA,kBAAA,mBAAA,oBAAA,mBAAA,oBAAA,oBAAA,mBAAA,mBAAA,iBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,oBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,oBAAA,oBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,oBAAA,qBAAA,kBAAA,kBAAA,kBAAA,oBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,oBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,kBAAA,mBAAA,oBAAA,kBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,kBAAA,mBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,oBAAA,mBAAA,oBAAA,kBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,qBAAA,mBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,iBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,gBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,kBAAA,mBAAA,oBAAA,oBAAA,kBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,kBAAA,mBAAA,oBAAA,oBAAA,mBAAA,kBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,iBAAA,mBAAA,mBAAA,oBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,iBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,oBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,mBAAA,oBAAA,oBAAA,kBAAA,oBAAA,mBAAA,mBAAA,oBAAA,oBAAA,kBAAA,mBAAA,kBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,mBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,kBAAA,oBAAA,mBAAA,kBAAA,mBAAA,kBAAA,oBAAA,mBAAA,iBAAA,mBAAA,oBAAA,kBAAA,mBAAA,oBAAA,oBAAA,oBAAA,iBAAA,kBAAA,mBAAA,kBAAA,iBAAA,kBAAA,kBAAA,mBAAA,oBAAA,oBAAA,oBAAA,mBAAA,oBAAA;84lBAAAE,MAAA,GAAA,mBAAA,kBAAA,oBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,oBAAA,kBAAA,oBAAA,kBAAA,oBAAA,kBAAA,mBAAA,GAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,oBAAA,oBAAA,mBAAA,mBAAA,oBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,iBAAA,kBAAA,iBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,iBAAA,kBAAA,mBAAA,kBAAA,mBAAA,kBAAA,oBAAA,oBAAA,mBAAA,oBAAA,oBAAA,iBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,iBAAA,oBAAA,oBAAA,mBAAA,oBAAA,kBAAA,iBAAA,kBAAA,kBAAA,mBAAA,kBAAA,oBAAA,mBAAA,oBAAA,mBAAA,oBAAA,kBAAA,oBAAA,mBAAA,mBAAA,mBAAA,iBAAA,mBAAA,kBAAA,oBAAA,oBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,oBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,kBAAA,mBAAA,oBAAA,gBAAA,mBAAA,oBAAA,mBAAA,oBAAA,oBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,oBAAA,kBAAA,mBAAA,kBAAA,kBAAA,gBAAA,kBAAA,mBAAA,kBAAA,oBAAA,oBAAA,kBAAA,oBAAA,iBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,iBAAA,mBAAA,kBAAA,oBAAA,oBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,oBAAA,mBAAA,oBAAA,iBAAA,mBAAA,kBAAA,mBAAA,kBAAA,mBAAA,oBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,oBAAA,oBAAA,mBAAA,mBAAA,oBAAA,mBAAA,kBAAA,oBAAA,kBAAA,oBAAA,iBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,oBAAA,oBAAA,oBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,kBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,gBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,oBAAA,oBAAA,oBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,oBAAA,oBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,oBAAA,mBAAA,iBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,oBAAA,oBAAA,mBAAA,iBAAA,kBAAA,kBAAA,mBAAA,mBAAA,oBAAA,iBAAA,kBAAA,kBAAA,kBAAA,iBAAA,oBAAA,kBAAA,mBAAA,oBAAA,oBAAA,oBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,oBAAA,mBAAA,mBAAA,kBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,kBAAA,mBAAA,kBAAA,oBAAA,qBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,oBAAA,oBAAA,oBAAA,qBAAA,mBAAA,kBAAA,oBAAA,mBAAA,oBAAA,mBAAA,oBAAA,mBAAA,oBAAA,kBAAA,kBAAA,oBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,iBAAA,oBAAA,mBAAA,oBAAA,oBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,kBAAA,mBAAA,kBAAA,oBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,oBAAA,mBAAA,kBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,iBAAA,iBAAA,kBAAA,mBAAA,kBAAA,oBAAA,oBAAA,mBAAA,oBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,kBAAA,kBAAA,mBAAA,oBAAA,oBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,kBAAA,iBAAA,oBAAA,mBAAA,oBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,oBAAA,kBAAA,kBAAA,gBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,oBAAA,kBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,mBAAA,kBAAA,mBAAA,mBAAA,oBAAA,iBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,kBAAA,mBAAA,kBAAA,GAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,kBAAA,kBAAA,mBAAA,oBAAA,mBAAA,mBAAA,EAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,iBAAA,kBAAA,kBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,mBAAA,kBAAA,oBAAA,iBAAA,iBAAA,oBAAA,kBAAA,kBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,kBAAA,oBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,kBAAA,mBAAA,mBAAA,oBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,kBAAA,kBAAA,oBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,oBAAA,oBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,oBAAA,kBAAA,mBAAA,mBAAA,oBAAA,kBAAA,oBAAA,kBAAA,kBAAA,oBAAA,kBAAA,oBAAA,mBAAA,oBAAA,oBAAA,kBAAA,mBAAA,kBAAA,mBAAA,iBAAA,mBAAA,kBAAA,oBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,oBAAA,iBAAA,kBAAA,kBAAA,mBAAA,mBAAA,mBAAA,iBAAA,mBAAA,kBAAA,oBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,oBAAA,oBAAA,mBAAA,eAAA,kBAAA,mBAAA,kBAAA,mBAAA,oBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,oBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,oBAAA,kBAAA,oBAAA,kBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,qBAAA,kBAAA,oBAAA,mBAAA,oBAAA,kBAAA,mBAAA,kBAAA,mBAAA,kBAAA,mBAAA,oBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,oBAAA,mBAAA,kBAAA,oBAAA,oBAAA,kBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,kBAAA,mBAAA,oBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,oBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,oBAAA,mBAAA,oBAAA,oBAAA,mBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,kBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,oBAAA,kBAAA,oBAAA,kBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,mBAAA,oBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,oBAAA,mBAAA,oBAAA,oBAAA,oBAAA,oBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,kBAAA,mBAAA,kBAAA,oBAAA,oBAAA,oBAAA,mBAAA,oBAAA,mBAAA,kBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,kBAAA,mBAAA,oBAAA,kBAAA,oBAAA,oBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,mBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,mBAAA,kBAAA,kBAAA,mBAAA,kBAAA,mBAAA,iBAAA,oBAAA,oBAAA,mBAAA,oBAAA,kBAAA,mBAAA,mBAAA,kBAAA,kBAAA,kBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,oBAAA,mBAAA,oBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,mBAAA,mBAAA,oBAAA,kBAAA,kBAAA,iBAAA,kBAAA,kBAAA,mBAAA,mBAAA,oBAAA,mBAAA,mBAAA,kBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,mBAAA,oBAAA,mBAAA,oBAAA,oBAAA,mBAAA,kBAAA,mBAAA,kBAAA,mBAAA,kBAAA,oBAAA,oBAAA,mBAAA,mBAAA,mBAAA,kBAAA,mB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",
  "sourceRoot": "../",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "/**\r\n * @author Eugene Zatepyakin / http://inspirit.ru/\r\n */\r\n\r\n// namespace ?\r\nvar jsfeat = jsfeat || { REVISION: 'ALPHA' };\r\n/**\r\n * @author Eugene Zatepyakin / http://inspirit.ru/\r\n */\r\n\r\n(function(global) {\r\n    \"use strict\";\r\n    //\r\n\r\n    // CONSTANTS\r\n    var EPSILON = 0.0000001192092896;\r\n    var FLT_MIN = 1E-37;\r\n\r\n    // implementation from CCV project\r\n    // currently working only with u8,s32,f32\r\n    var U8_t = 0x0100,\r\n        S32_t = 0x0200,\r\n        F32_t = 0x0400,\r\n        S64_t = 0x0800,\r\n        F64_t = 0x1000;\r\n\r\n    var C1_t = 0x01,\r\n        C2_t = 0x02,\r\n        C3_t = 0x03,\r\n        C4_t = 0x04;\r\n\r\n    var _data_type_size = new Int32Array([ -1, 1, 4, -1, 4, -1, -1, -1, 8, -1, -1, -1, -1, -1, -1, -1, 8 ]);\r\n\r\n    var get_data_type = (function () {\r\n        return function(type) {\r\n            return (type & 0xFF00);\r\n        }\r\n    })();\r\n\r\n    var get_channel = (function () {\r\n        return function(type) {\r\n            return (type & 0xFF);\r\n        }\r\n    })();\r\n\r\n    var get_data_type_size = (function () {\r\n        return function(type) {\r\n            return _data_type_size[(type & 0xFF00) >> 8];\r\n        }\r\n    })();\r\n\r\n    // color conversion\r\n    var COLOR_RGBA2GRAY = 0;\r\n    var COLOR_RGB2GRAY = 1;\r\n    var COLOR_BGRA2GRAY = 2;\r\n    var COLOR_BGR2GRAY = 3;\r\n\r\n    // box blur option\r\n    var BOX_BLUR_NOSCALE = 0x01;\r\n    // svd options\r\n    var SVD_U_T = 0x01;\r\n    var SVD_V_T = 0x02;\r\n\r\n    var data_t = (function () {\r\n        function data_t(size_in_bytes, buffer) {\r\n            // we need align size to multiple of 8\r\n            this.size = ((size_in_bytes + 7) | 0) & -8;\r\n            if (typeof buffer === \"undefined\") { \r\n                this.buffer = new ArrayBuffer(this.size);\r\n            } else {\r\n                this.buffer = buffer;\r\n                this.size = buffer.length;\r\n            }\r\n            this.u8 = new Uint8Array(this.buffer);\r\n            this.i32 = new Int32Array(this.buffer);\r\n            this.f32 = new Float32Array(this.buffer);\r\n            this.f64 = new Float64Array(this.buffer);\r\n        }\r\n        return data_t;\r\n    })();\r\n\r\n    var matrix_t = (function () {\r\n        // columns, rows, data_type\r\n        function matrix_t(c, r, data_type, data_buffer) {\r\n            this.type = get_data_type(data_type)|0;\r\n            this.channel = get_channel(data_type)|0;\r\n            this.cols = c|0;\r\n            this.rows = r|0;\r\n            if (typeof data_buffer === \"undefined\") { \r\n                this.allocate();\r\n            } else {\r\n                this.buffer = data_buffer;\r\n                // data user asked for\r\n                this.data = this.type&U8_t ? this.buffer.u8 : (this.type&S32_t ? this.buffer.i32 : (this.type&F32_t ? this.buffer.f32 : this.buffer.f64));\r\n            }\r\n        }\r\n        matrix_t.prototype.allocate = function() {\r\n            // clear references\r\n            delete this.data;\r\n            delete this.buffer;\r\n            //\r\n            this.buffer = new data_t((this.cols * get_data_type_size(this.type) * this.channel) * this.rows);\r\n            this.data = this.type&U8_t ? this.buffer.u8 : (this.type&S32_t ? this.buffer.i32 : (this.type&F32_t ? this.buffer.f32 : this.buffer.f64));\r\n        }\r\n        matrix_t.prototype.copy_to = function(other) {\r\n            var od = other.data, td = this.data;\r\n            var i = 0, n = (this.cols*this.rows*this.channel)|0;\r\n            for(; i < n-4; i+=4) {\r\n                od[i] = td[i];\r\n                od[i+1] = td[i+1];\r\n                od[i+2] = td[i+2];\r\n                od[i+3] = td[i+3];\r\n            }\r\n            for(; i < n; ++i) {\r\n                od[i] = td[i];\r\n            }\r\n        }\r\n        matrix_t.prototype.resize = function(c, r, ch) {\r\n            if (typeof ch === \"undefined\") { ch = this.channel; }\r\n            // relocate buffer only if new size doesnt fit\r\n            var new_size = (c * get_data_type_size(this.type) * ch) * r;\r\n            if(new_size > this.buffer.size) {\r\n                this.cols = c;\r\n                this.rows = r;\r\n                this.channel = ch;\r\n                this.allocate();\r\n            } else {\r\n                this.cols = c;\r\n                this.rows = r;\r\n                this.channel = ch;\r\n            }\r\n        }\r\n\r\n        return matrix_t;\r\n    })();\r\n\r\n    var pyramid_t = (function () {\r\n\r\n        function pyramid_t(levels) {\r\n            this.levels = levels|0;\r\n            this.data = new Array(levels);\r\n            this.pyrdown = jsfeat.imgproc.pyrdown;\r\n        }\r\n\r\n        pyramid_t.prototype.allocate = function(start_w, start_h, data_type) {\r\n            var i = this.levels;\r\n            while(--i >= 0) {\r\n                this.data[i] = new matrix_t(start_w >> i, start_h >> i, data_type);\r\n            }\r\n        }\r\n\r\n        pyramid_t.prototype.build = function(input, skip_first_level) {\r\n            if (typeof skip_first_level === \"undefined\") { skip_first_level = true; }\r\n            // just copy data to first level\r\n            var i = 2, a = input, b = this.data[0];\r\n            if(!skip_first_level) {\r\n                var j=input.cols*input.rows;\r\n                while(--j >= 0) {\r\n                    b.data[j] = input.data[j];\r\n                }\r\n            }\r\n            b = this.data[1];\r\n            this.pyrdown(a, b);\r\n            for(; i < this.levels; ++i) {\r\n                a = b;\r\n                b = this.data[i];\r\n                this.pyrdown(a, b);\r\n            }\r\n        }\r\n\r\n        return pyramid_t;\r\n    })();\r\n\r\n    var keypoint_t = (function () {\r\n        function keypoint_t(x,y,score,level,angle) {\r\n            if (typeof x === \"undefined\") { x=0; }\r\n            if (typeof y === \"undefined\") { y=0; }\r\n            if (typeof score === \"undefined\") { score=0; }\r\n            if (typeof level === \"undefined\") { level=0; }\r\n            if (typeof angle === \"undefined\") { angle=-1.0; }\r\n\r\n            this.x = x;\r\n            this.y = y;\r\n            this.score = score;\r\n            this.level = level;\r\n            this.angle = angle;\r\n        }\r\n        return keypoint_t;\r\n    })();\r\n\r\n\r\n    // data types\r\n    global.U8_t = U8_t;\r\n    global.S32_t = S32_t;\r\n    global.F32_t = F32_t;\r\n    global.S64_t = S64_t;\r\n    global.F64_t = F64_t;\r\n    // data channels\r\n    global.C1_t = C1_t;\r\n    global.C2_t = C2_t;\r\n    global.C3_t = C3_t;\r\n    global.C4_t = C4_t;\r\n\r\n    // popular formats\r\n    global.U8C1_t = U8_t | C1_t;\r\n    global.U8C3_t = U8_t | C3_t;\r\n    global.U8C4_t = U8_t | C4_t;\r\n\r\n    global.F32C1_t = F32_t | C1_t;\r\n    global.F32C2_t = F32_t | C2_t;\r\n    global.S32C1_t = S32_t | C1_t;\r\n    global.S32C2_t = S32_t | C2_t;\r\n\r\n    // constants\r\n    global.EPSILON = EPSILON;\r\n    global.FLT_MIN = FLT_MIN;\r\n\r\n    // color convert\r\n    global.COLOR_RGBA2GRAY = COLOR_RGBA2GRAY;\r\n    global.COLOR_RGB2GRAY = COLOR_RGB2GRAY;\r\n    global.COLOR_BGRA2GRAY = COLOR_BGRA2GRAY;\r\n    global.COLOR_BGR2GRAY = COLOR_BGR2GRAY;\r\n\r\n    // options\r\n    global.BOX_BLUR_NOSCALE = BOX_BLUR_NOSCALE;\r\n    global.SVD_U_T = SVD_U_T;\r\n    global.SVD_V_T = SVD_V_T;\r\n\r\n    global.get_data_type = get_data_type;\r\n    global.get_channel = get_channel;\r\n    global.get_data_type_size = get_data_type_size;\r\n\r\n    global.data_t = data_t;\r\n    global.matrix_t = matrix_t;\r\n    global.pyramid_t = pyramid_t;\r\n    global.keypoint_t = keypoint_t;\r\n\r\n})(jsfeat);\r\n/**\n * @author Eugene Zatepyakin / http://inspirit.ru/\n */\n\n(function(global) {\n    \"use strict\";\n    //\n\n    var cache = (function() {\n\n        // very primitive array cache, still need testing if it helps\n        // of course V8 has its own powerful cache sys but i'm not sure\n        // it caches several multichannel 640x480 buffer creations each frame\n\n        var _pool_node_t = (function () {\n            function _pool_node_t(size_in_bytes) {\n                this.next = null;\n                this.data = new jsfeat.data_t(size_in_bytes);\n                this.size = this.data.size;\n                this.buffer = this.data.buffer;\n                this.u8 = this.data.u8;\n                this.i32 = this.data.i32;\n                this.f32 = this.data.f32;\n                this.f64 = this.data.f64;\n            }\n            _pool_node_t.prototype.resize = function(size_in_bytes) {\n                delete this.data;\n                this.data = new jsfeat.data_t(size_in_bytes);\n                this.size = this.data.size;\n                this.buffer = this.data.buffer;\n                this.u8 = this.data.u8;\n                this.i32 = this.data.i32;\n                this.f32 = this.data.f32;\n                this.f64 = this.data.f64;\n            }\n            return _pool_node_t;\n        })();\n\n        var _pool_head, _pool_tail;\n        var _pool_size = 0;\n\n        return {\n\n            allocate: function(capacity, data_size) {\n                _pool_head = _pool_tail = new _pool_node_t(data_size);\n                for (var i = 0; i < capacity; ++i) {\n                    var node = new _pool_node_t(data_size);\n                    _pool_tail = _pool_tail.next = node;\n\n                    _pool_size++;\n                }\n            },\n\n            get_buffer: function(size_in_bytes) {\n                // assume we have enough free nodes\n                var node = _pool_head;\n                _pool_head = _pool_head.next;\n                _pool_size--;\n\n                if(size_in_bytes > node.size) {\n                    node.resize(size_in_bytes);\n                }\n\n                return node;\n            },\n\n            put_buffer: function(node) {\n                _pool_tail = _pool_tail.next = node;\n                _pool_size++;\n            }\n        };\n    })();\n\n    global.cache = cache;\n    // for now we dont need more than 30 buffers\n    // if having cache sys really helps we can add auto extending sys\n    cache.allocate(30, 640*4);\n\n})(jsfeat);\n/**\r\n * @author Eugene Zatepyakin / http://inspirit.ru/\r\n */\r\n\r\n(function(global) {\r\n    \"use strict\";\r\n    //\r\n\r\n    var math = (function() {\r\n\r\n        var qsort_stack = new Int32Array(48*2);\r\n\r\n        return {\r\n            get_gaussian_kernel: function(size, sigma, kernel, data_type) {\r\n                var i=0,x=0.0,t=0.0,sigma_x=0.0,scale_2x=0.0;\r\n                var sum = 0.0;\r\n                var kern_node = jsfeat.cache.get_buffer(size<<2);\r\n                var _kernel = kern_node.f32;//new Float32Array(size);\r\n\r\n                if((size&1) == 1 && size <= 7 && sigma <= 0) {\r\n                    switch(size>>1) {\r\n                        case 0:\r\n                        _kernel[0] = 1.0;\r\n                        sum = 1.0;\r\n                        break;\r\n                        case 1:\r\n                        _kernel[0] = 0.25, _kernel[1] = 0.5, _kernel[2] = 0.25;\r\n                        sum = 0.25+0.5+0.25;\r\n                        break;\r\n                        case 2:\r\n                        _kernel[0] = 0.0625, _kernel[1] = 0.25, _kernel[2] = 0.375, \r\n                        _kernel[3] = 0.25, _kernel[4] = 0.0625;\r\n                        sum = 0.0625+0.25+0.375+0.25+0.0625;\r\n                        break;\r\n                        case 3:\r\n                        _kernel[0] = 0.03125, _kernel[1] = 0.109375, _kernel[2] = 0.21875, \r\n                        _kernel[3] = 0.28125, _kernel[4] = 0.21875, _kernel[5] = 0.109375, _kernel[6] = 0.03125;\r\n                        sum = 0.03125+0.109375+0.21875+0.28125+0.21875+0.109375+0.03125;\r\n                        break;\r\n                    }\r\n                } else {\r\n                    sigma_x = sigma > 0 ? sigma : ((size-1)*0.5 - 1.0)*0.3 + 0.8;\r\n                    scale_2x = -0.5/(sigma_x*sigma_x);\r\n\r\n                    for( ; i < size; ++i )\r\n                    {\r\n                        x = i - (size-1)*0.5;\r\n                        t = Math.exp(scale_2x*x*x);\r\n\r\n                        _kernel[i] = t;\r\n                        sum += t;\r\n                    }\r\n                }\r\n\r\n                if(data_type & jsfeat.U8_t) {\r\n                    // int based kernel\r\n                    sum = 256.0/sum;\r\n                    for (i = 0; i < size; ++i) {\r\n                        kernel[i] = (_kernel[i] * sum + 0.5)|0;\r\n                    }\r\n                } else {\r\n                    // classic kernel\r\n                    sum = 1.0/sum;\r\n                    for (i = 0; i < size; ++i) {\r\n                        kernel[i] = _kernel[i] * sum;\r\n                    }\r\n                }\r\n\r\n                jsfeat.cache.put_buffer(kern_node);\r\n            },\r\n\r\n            // model is 3x3 matrix_t\r\n            perspective_4point_transform: function(model, src_x0, src_y0, dst_x0, dst_y0,\r\n                                                        src_x1, src_y1, dst_x1, dst_y1,\r\n                                                        src_x2, src_y2, dst_x2, dst_y2,\r\n                                                        src_x3, src_y3, dst_x3, dst_y3) {\r\n                var t1 = src_x0;\r\n                var t2 = src_x2;\r\n                var t4 = src_y1;\r\n                var t5 = t1 * t2 * t4;\r\n                var t6 = src_y3;\r\n                var t7 = t1 * t6;\r\n                var t8 = t2 * t7;\r\n                var t9 = src_y2;\r\n                var t10 = t1 * t9;\r\n                var t11 = src_x1;\r\n                var t14 = src_y0;\r\n                var t15 = src_x3;\r\n                var t16 = t14 * t15;\r\n                var t18 = t16 * t11;\r\n                var t20 = t15 * t11 * t9;\r\n                var t21 = t15 * t4;\r\n                var t24 = t15 * t9;\r\n                var t25 = t2 * t4;\r\n                var t26 = t6 * t2;\r\n                var t27 = t6 * t11;\r\n                var t28 = t9 * t11;\r\n                var t30 = 1.0 / (t21-t24 - t25 + t26 - t27 + t28);\r\n                var t32 = t1 * t15;\r\n                var t35 = t14 * t11;\r\n                var t41 = t4 * t1;\r\n                var t42 = t6 * t41;\r\n                var t43 = t14 * t2;\r\n                var t46 = t16 * t9;\r\n                var t48 = t14 * t9 * t11;\r\n                var t51 = t4 * t6 * t2;\r\n                var t55 = t6 * t14;\r\n                var Hr0 = -(t8-t5 + t10 * t11 - t11 * t7 - t16 * t2 + t18 - t20 + t21 * t2) * t30;\r\n                var Hr1 = (t5 - t8 - t32 * t4 + t32 * t9 + t18 - t2 * t35 + t27 * t2 - t20) * t30;\r\n                var Hr2 = t1;\r\n                var Hr3 = (-t9 * t7 + t42 + t43 * t4 - t16 * t4 + t46 - t48 + t27 * t9 - t51) * t30;\r\n                var Hr4 = (-t42 + t41 * t9 - t55 * t2 + t46 - t48 + t55 * t11 + t51 - t21 * t9) * t30;\r\n                var Hr5 = t14;\r\n                var Hr6 = (-t10 + t41 + t43 - t35 + t24 - t21 - t26 + t27) * t30;\r\n                var Hr7 = (-t7 + t10 + t16 - t43 + t27 - t28 - t21 + t25) * t30;\r\n                \r\n                t1 = dst_x0;\r\n                t2 = dst_x2;\r\n                t4 = dst_y1;\r\n                t5 = t1 * t2 * t4;\r\n                t6 = dst_y3;\r\n                t7 = t1 * t6;\r\n                t8 = t2 * t7;\r\n                t9 = dst_y2;\r\n                t10 = t1 * t9;\r\n                t11 = dst_x1;\r\n                t14 = dst_y0;\r\n                t15 = dst_x3;\r\n                t16 = t14 * t15;\r\n                t18 = t16 * t11;\r\n                t20 = t15 * t11 * t9;\r\n                t21 = t15 * t4;\r\n                t24 = t15 * t9;\r\n                t25 = t2 * t4;\r\n                t26 = t6 * t2;\r\n                t27 = t6 * t11;\r\n                t28 = t9 * t11;\r\n                t30 = 1.0 / (t21-t24 - t25 + t26 - t27 + t28);\r\n                t32 = t1 * t15;\r\n                t35 = t14 * t11;\r\n                t41 = t4 * t1;\r\n                t42 = t6 * t41;\r\n                t43 = t14 * t2;\r\n                t46 = t16 * t9;\r\n                t48 = t14 * t9 * t11;\r\n                t51 = t4 * t6 * t2;\r\n                t55 = t6 * t14;\r\n                var Hl0 = -(t8-t5 + t10 * t11 - t11 * t7 - t16 * t2 + t18 - t20 + t21 * t2) * t30;\r\n                var Hl1 = (t5 - t8 - t32 * t4 + t32 * t9 + t18 - t2 * t35 + t27 * t2 - t20) * t30;\r\n                var Hl2 = t1;\r\n                var Hl3 = (-t9 * t7 + t42 + t43 * t4 - t16 * t4 + t46 - t48 + t27 * t9 - t51) * t30;\r\n                var Hl4 = (-t42 + t41 * t9 - t55 * t2 + t46 - t48 + t55 * t11 + t51 - t21 * t9) * t30;\r\n                var Hl5 = t14;\r\n                var Hl6 = (-t10 + t41 + t43 - t35 + t24 - t21 - t26 + t27) * t30;\r\n                var Hl7 = (-t7 + t10 + t16 - t43 + t27 - t28 - t21 + t25) * t30;\r\n\r\n                // the following code computes R = Hl * inverse Hr\r\n                t2 = Hr4-Hr7*Hr5;\r\n                t4 = Hr0*Hr4;\r\n                t5 = Hr0*Hr5;\r\n                t7 = Hr3*Hr1;\r\n                t8 = Hr2*Hr3;\r\n                t10 = Hr1*Hr6;\r\n                var t12 = Hr2*Hr6;\r\n                t15 = 1.0 / (t4-t5*Hr7-t7+t8*Hr7+t10*Hr5-t12*Hr4);\r\n                t18 = -Hr3+Hr5*Hr6;\r\n                var t23 = -Hr3*Hr7+Hr4*Hr6;\r\n                t28 = -Hr1+Hr2*Hr7;\r\n                var t31 = Hr0-t12;\r\n                t35 = Hr0*Hr7-t10;\r\n                t41 = -Hr1*Hr5+Hr2*Hr4;\r\n                var t44 = t5-t8;\r\n                var t47 = t4-t7;\r\n                t48 = t2*t15;\r\n                var t49 = t28*t15;\r\n                var t50 = t41*t15;\r\n                var mat = model.data;\r\n                mat[0] = Hl0*t48+Hl1*(t18*t15)-Hl2*(t23*t15);\r\n                mat[1] = Hl0*t49+Hl1*(t31*t15)-Hl2*(t35*t15);\r\n                mat[2] = -Hl0*t50-Hl1*(t44*t15)+Hl2*(t47*t15);\r\n                mat[3] = Hl3*t48+Hl4*(t18*t15)-Hl5*(t23*t15);\r\n                mat[4] = Hl3*t49+Hl4*(t31*t15)-Hl5*(t35*t15);\r\n                mat[5] = -Hl3*t50-Hl4*(t44*t15)+Hl5*(t47*t15);\r\n                mat[6] = Hl6*t48+Hl7*(t18*t15)-t23*t15;\r\n                mat[7] = Hl6*t49+Hl7*(t31*t15)-t35*t15;\r\n                mat[8] = -Hl6*t50-Hl7*(t44*t15)+t47*t15;\r\n            },\r\n\r\n            // The current implementation was derived from *BSD system qsort():\r\n            // Copyright (c) 1992, 1993\r\n            // The Regents of the University of California.  All rights reserved.\r\n            qsort: function(array, low, high, cmp) {\r\n                var isort_thresh = 7;\r\n                var t,ta,tb,tc;\r\n                var sp = 0,left=0,right=0,i=0,n=0,m=0,ptr=0,ptr2=0,d=0;\r\n                var left0=0,left1=0,right0=0,right1=0,pivot=0,a=0,b=0,c=0,swap_cnt=0;\r\n\r\n                var stack = qsort_stack;\r\n\r\n                if( (high-low+1) <= 1 ) return;\r\n\r\n                stack[0] = low;\r\n                stack[1] = high;\r\n\r\n                while( sp >= 0 ) {\r\n                \r\n                    left = stack[sp<<1];\r\n                    right = stack[(sp<<1)+1];\r\n                    sp--;\r\n\r\n                    for(;;) {\r\n                        n = (right - left) + 1;\r\n\r\n                        if( n <= isort_thresh ) {\r\n                        //insert_sort:\r\n                            for( ptr = left + 1; ptr <= right; ptr++ ) {\r\n                                for( ptr2 = ptr; ptr2 > left && cmp(array[ptr2],array[ptr2-1]); ptr2--) {\r\n                                    t = array[ptr2];\r\n                                    array[ptr2] = array[ptr2-1];\r\n                                    array[ptr2-1] = t;\r\n                                }\r\n                            }\r\n                            break;\r\n                        } else {\r\n                            swap_cnt = 0;\r\n\r\n                            left0 = left;\r\n                            right0 = right;\r\n                            pivot = left + (n>>1);\r\n\r\n                            if( n > 40 ) {\r\n                                d = n >> 3;\r\n                                a = left, b = left + d, c = left + (d<<1);\r\n                                ta = array[a],tb = array[b],tc = array[c];\r\n                                left = cmp(ta, tb) ? (cmp(tb, tc) ? b : (cmp(ta, tc) ? c : a))\r\n                                                  : (cmp(tc, tb) ? b : (cmp(ta, tc) ? a : c));\r\n\r\n                                a = pivot - d, b = pivot, c = pivot + d;\r\n                                ta = array[a],tb = array[b],tc = array[c];\r\n                                pivot = cmp(ta, tb) ? (cmp(tb, tc) ? b : (cmp(ta, tc) ? c : a))\r\n                                                  : (cmp(tc, tb) ? b : (cmp(ta, tc) ? a : c));\r\n\r\n                                a = right - (d<<1), b = right - d, c = right;\r\n                                ta = array[a],tb = array[b],tc = array[c];\r\n                                right = cmp(ta, tb) ? (cmp(tb, tc) ? b : (cmp(ta, tc) ? c : a))\r\n                                                  : (cmp(tc, tb) ? b : (cmp(ta, tc) ? a : c));\r\n                            }\r\n\r\n                            a = left, b = pivot, c = right;\r\n                            ta = array[a],tb = array[b],tc = array[c];\r\n                            pivot = cmp(ta, tb) ? (cmp(tb, tc) ? b : (cmp(ta, tc) ? c : a))   \r\n                                               : (cmp(tc, tb) ? b : (cmp(ta, tc) ? a : c));\r\n                            if( pivot != left0 ) {\r\n                                t = array[pivot];\r\n                                array[pivot] = array[left0];\r\n                                array[left0] = t;\r\n                                pivot = left0;\r\n                            }\r\n                            left = left1 = left0 + 1;\r\n                            right = right1 = right0;\r\n\r\n                            ta = array[pivot];\r\n                            for(;;) {\r\n                                while( left <= right && !cmp(ta, array[left]) ) {\r\n                                    if( !cmp(array[left], ta) ) {\r\n                                        if( left > left1 ) {\r\n                                            t = array[left1];\r\n                                            array[left1] = array[left];\r\n                                            array[left] = t;\r\n                                        }\r\n                                        swap_cnt = 1;\r\n                                        left1++;\r\n                                    }\r\n                                    left++;\r\n                                }\r\n\r\n                                while( left <= right && !cmp(array[right], ta) ) {\r\n                                    if( !cmp(ta, array[right]) ) {\r\n                                        if( right < right1 ) {\r\n                                            t = array[right1];\r\n                                            array[right1] = array[right];\r\n                                            array[right] = t;\r\n                                        }\r\n                                        swap_cnt = 1;\r\n                                        right1--;\r\n                                    }\r\n                                    right--;\r\n                                }\r\n\r\n                                if( left > right ) break;\r\n                                \r\n                                t = array[left];\r\n                                array[left] = array[right];\r\n                                array[right] = t;\r\n                                swap_cnt = 1;\r\n                                left++;\r\n                                right--;\r\n                            }\r\n\r\n                            if( swap_cnt == 0 ) {\r\n                                left = left0, right = right0;\r\n                                //goto insert_sort;\r\n                                for( ptr = left + 1; ptr <= right; ptr++ ) {\r\n                                    for( ptr2 = ptr; ptr2 > left && cmp(array[ptr2],array[ptr2-1]); ptr2--) {\r\n                                        t = array[ptr2];\r\n                                        array[ptr2] = array[ptr2-1];\r\n                                        array[ptr2-1] = t;\r\n                                    }\r\n                                }\r\n                                break;\r\n                            }\r\n\r\n                            n = Math.min( (left1 - left0), (left - left1) );\r\n                            m = (left-n)|0;\r\n                            for( i = 0; i < n; ++i,++m ) {\r\n                                t = array[left0+i];\r\n                                array[left0+i] = array[m];\r\n                                array[m] = t;\r\n                            }\r\n\r\n                            n = Math.min( (right0 - right1), (right1 - right) );\r\n                            m = (right0-n+1)|0;\r\n                            for( i = 0; i < n; ++i,++m ) {\r\n                                t = array[left+i];\r\n                                array[left+i] = array[m];\r\n                                array[m] = t;\r\n                            }\r\n                            n = (left - left1);\r\n                            m = (right1 - right);\r\n                            if( n > 1 ) {\r\n                                if( m > 1 ) {\r\n                                    if( n > m ) {\r\n                                        ++sp;\r\n                                        stack[sp<<1] = left0;\r\n                                        stack[(sp<<1)+1] = left0 + n - 1;\r\n                                        left = right0 - m + 1, right = right0;\r\n                                    } else {\r\n                                        ++sp;\r\n                                        stack[sp<<1] = right0 - m + 1;\r\n                                        stack[(sp<<1)+1] = right0;\r\n                                        left = left0, right = left0 + n - 1;\r\n                                    }\r\n                                } else {\r\n                                    left = left0, right = left0 + n - 1;\r\n                                }\r\n                            }\r\n                            else if( m > 1 )\r\n                                left = right0 - m + 1, right = right0;\r\n                            else\r\n                                break;\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n\r\n            median: function(array, low, high) {\r\n                var w;\r\n                var middle=0,ll=0,hh=0,median=(low+high)>>1;\r\n                for (;;) {\r\n                    if (high <= low) return array[median];\r\n                    if (high == (low + 1)) {\r\n                        if (array[low] > array[high]) {\r\n                            w = array[low];\r\n                            array[low] = array[high];\r\n                            array[high] = w;\r\n                        }\r\n                        return array[median];\r\n                    }\r\n                    middle = ((low + high) >> 1);\r\n                    if (array[middle] > array[high]) {\r\n                        w = array[middle];\r\n                        array[middle] = array[high];\r\n                        array[high] = w;\r\n                    }\r\n                    if (array[low] > array[high]) {\r\n                        w = array[low];\r\n                        array[low] = array[high];\r\n                        array[high] = w;\r\n                    }\r\n                    if (array[middle] > array[low]) {\r\n                        w = array[middle];\r\n                        array[middle] = array[low];\r\n                        array[low] = w;\r\n                    }\r\n                    ll = (low + 1);\r\n                    w = array[middle];\r\n                    array[middle] = array[ll];\r\n                    array[ll] = w;\r\n                    hh = high;\r\n                    for (;;) {\r\n                        do ++ll; while (array[low] > array[ll]);\r\n                        do --hh; while (array[hh] > array[low]);\r\n                        if (hh < ll) break;\r\n                        w = array[ll];\r\n                        array[ll] = array[hh];\r\n                        array[hh] = w;\r\n                    }\r\n                    w = array[low];\r\n                    array[low] = array[hh];\r\n                    array[hh] = w;\r\n                    if (hh <= median)\r\n                        low = ll;\r\n                    else if (hh >= median)\r\n                        high = (hh - 1);\r\n                }\r\n                return 0;\r\n            }\r\n        };\r\n\r\n    })();\r\n\r\n    global.math = math;\r\n\r\n})(jsfeat);\r\n/**\r\n * @author Eugene Zatepyakin / http://inspirit.ru/\r\n *\r\n */\r\n\r\n(function(global) {\r\n    \"use strict\";\r\n    //\r\n\r\n    var matmath = (function() {\r\n        \r\n        return {\r\n            identity: function(M, value) {\r\n                if (typeof value === \"undefined\") { value=1; }\r\n                var src=M.data;\r\n                var rows=M.rows, cols=M.cols, cols_1=(cols+1)|0;\r\n                var len = rows * cols;\r\n                var k = len;\r\n                while(--len >= 0) src[len] = 0.0;\r\n                len = k;\r\n                k = 0;\r\n                while(k < len)  {\r\n                    src[k] = value;\r\n                    k = k + cols_1;\r\n                }\r\n            },\r\n\r\n            transpose: function(At, A) {\r\n                var i=0,j=0,nrows=A.rows,ncols=A.cols;\r\n                var Ai=0,Ati=0,pAt=0;\r\n                var ad=A.data,atd=At.data;\r\n\r\n                for (; i < nrows; Ati += 1, Ai += ncols, i++) {\r\n                    pAt = Ati;\r\n                    for (j = 0; j < ncols; pAt += nrows, j++) atd[pAt] = ad[Ai+j];\r\n                }\r\n            },\r\n\r\n            // C = A * B\r\n            multiply: function(C, A, B) {\r\n                var i=0,j=0,k=0;\r\n                var Ap=0,pA=0,pB=0,p_B=0,Cp=0;\r\n                var ncols=A.cols,nrows=A.rows,mcols=B.cols;\r\n                var ad=A.data,bd=B.data,cd=C.data;\r\n                var sum=0.0;\r\n\r\n                for (; i < nrows; Ap += ncols, i++) {\r\n                    for (p_B = 0, j = 0; j < mcols; Cp++, p_B++, j++) {\r\n                        pB = p_B;\r\n                        pA = Ap;\r\n                        sum = 0.0;\r\n                        for (k = 0; k < ncols; pA++, pB += mcols, k++) {\r\n                            sum += ad[pA] * bd[pB];\r\n                        }\r\n                        cd[Cp] = sum;\r\n                    }\r\n                }\r\n            },\r\n\r\n            // C = A * B'\r\n            multiply_ABt: function(C, A, B) {\r\n                var i=0,j=0,k=0;\r\n                var Ap=0,pA=0,pB=0,Cp=0;\r\n                var ncols=A.cols,nrows=A.rows,mrows=B.rows;\r\n                var ad=A.data,bd=B.data,cd=C.data;\r\n                var sum=0.0;\r\n\r\n                for (; i < nrows; Ap += ncols, i++) {\r\n                    for (pB = 0, j = 0; j < mrows; Cp++, j++) {\r\n                        pA = Ap;\r\n                        sum = 0.0;\r\n                        for (k = 0; k < ncols; pA++, pB++, k++) {\r\n                            sum += ad[pA] * bd[pB];\r\n                        }\r\n                        cd[Cp] = sum;\r\n                    }\r\n                }\r\n            },\r\n\r\n            // C = A' * B\r\n            multiply_AtB: function(C, A, B) {\r\n                var i=0,j=0,k=0;\r\n                var Ap=0,pA=0,pB=0,p_B=0,Cp=0;\r\n                var ncols=A.cols,nrows=A.rows,mcols=B.cols;\r\n                var ad=A.data,bd=B.data,cd=C.data;\r\n                var sum=0.0;\r\n\r\n                for (; i < ncols; Ap++, i++) {\r\n                    for (p_B = 0, j = 0; j < mcols; Cp++, p_B++, j++) {\r\n                        pB = p_B;\r\n                        pA = Ap;\r\n                        sum = 0.0;\r\n                        for (k = 0; k < nrows; pA += ncols, pB += mcols, k++) {\r\n                            sum += ad[pA] * bd[pB];\r\n                        }\r\n                        cd[Cp] = sum;\r\n                    }\r\n                }\r\n            },\r\n\r\n            // C = A * A'\r\n            multiply_AAt: function(C, A) {\r\n                var i=0,j=0,k=0;\r\n                var pCdiag=0,p_A=0,pA=0,pB=0,pC=0,pCt=0;\r\n                var ncols=A.cols,nrows=A.rows;\r\n                var ad=A.data,cd=C.data;\r\n                var sum=0.0;\r\n\r\n                for (; i < nrows; pCdiag += nrows + 1, p_A = pA, i++) {\r\n                    pC = pCdiag;\r\n                    pCt = pCdiag;\r\n                    pB = p_A; \r\n                    for (j = i; j < nrows; pC++, pCt += nrows, j++) {\r\n                        pA = p_A;\r\n                        sum = 0.0;\r\n                        for (k = 0; k < ncols; k++) {\r\n                            sum += ad[pA++] * ad[pB++];\r\n                        }\r\n                        cd[pC] = sum\r\n                        cd[pCt] = sum;\r\n                    }\r\n                }\r\n            },\r\n\r\n            // C = A' * A\r\n            multiply_AtA: function(C, A) {\r\n                var i=0,j=0,k=0;\r\n                var p_A=0,pA=0,pB=0,p_C=0,pC=0,p_CC=0;\r\n                var ncols=A.cols,nrows=A.rows;\r\n                var ad=A.data,cd=C.data;\r\n                var sum=0.0;\r\n\r\n                for (; i < ncols; p_C += ncols, i++) {\r\n                    p_A = i;\r\n                    p_CC = p_C + i;\r\n                    pC = p_CC;\r\n                    for (j = i; j < ncols; pC++, p_CC += ncols, j++) {\r\n                        pA = p_A;\r\n                        pB = j;\r\n                        sum = 0.0;\r\n                        for (k = 0; k < nrows; pA += ncols, pB += ncols, k++) {\r\n                            sum += ad[pA] * ad[pB];\r\n                        }\r\n                        cd[pC] = sum\r\n                        cd[p_CC] = sum;\r\n                    }\r\n                }\r\n            },\r\n\r\n            // various small matrix operations\r\n            identity_3x3: function(M, value) {\r\n                if (typeof value === \"undefined\") { value=1; }\r\n                var dt=M.data;\r\n                dt[0] = dt[4] = dt[8] = value;\r\n                dt[1] = dt[2] = dt[3] = 0;\r\n                dt[5] = dt[6] = dt[7] = 0;\r\n            },\r\n\r\n            invert_3x3: function(from, to) {\r\n                var A = from.data, invA = to.data;\r\n                var t1 = A[4];\r\n                var t2 = A[8];\r\n                var t4 = A[5];\r\n                var t5 = A[7];\r\n                var t8 = A[0];\r\n\r\n                var t9 = t8*t1;\r\n                var t11 = t8*t4;\r\n                var t13 = A[3];\r\n                var t14 = A[1];\r\n                var t15 = t13*t14;\r\n                var t17 = A[2];\r\n                var t18 = t13*t17;\r\n                var t20 = A[6];\r\n                var t21 = t20*t14;\r\n                var t23 = t20*t17;\r\n                var t26 = 1.0/(t9*t2-t11*t5-t15*t2+t18*t5+t21*t4-t23*t1);\r\n                invA[0] = (t1*t2-t4*t5)*t26;\r\n                invA[1] = -(t14*t2-t17*t5)*t26;\r\n                invA[2] = -(-t14*t4+t17*t1)*t26;\r\n                invA[3] = -(t13*t2-t4*t20)*t26;\r\n                invA[4] = (t8*t2-t23)*t26;\r\n                invA[5] = -(t11-t18)*t26;\r\n                invA[6] = -(-t13*t5+t1*t20)*t26;\r\n                invA[7] = -(t8*t5-t21)*t26;\r\n                invA[8] = (t9-t15)*t26;\r\n            },\r\n            // C = A * B\r\n            multiply_3x3: function(C, A, B) {\r\n                var Cd=C.data, Ad=A.data, Bd=B.data;\r\n                var m1_0 = Ad[0], m1_1 = Ad[1], m1_2 = Ad[2];\r\n                var m1_3 = Ad[3], m1_4 = Ad[4], m1_5 = Ad[5];\r\n                var m1_6 = Ad[6], m1_7 = Ad[7], m1_8 = Ad[8];\r\n\r\n                var m2_0 = Bd[0], m2_1 = Bd[1], m2_2 = Bd[2];\r\n                var m2_3 = Bd[3], m2_4 = Bd[4], m2_5 = Bd[5];\r\n                var m2_6 = Bd[6], m2_7 = Bd[7], m2_8 = Bd[8];\r\n\r\n                Cd[0] = m1_0 * m2_0 + m1_1 * m2_3 + m1_2 * m2_6;\r\n                Cd[1] = m1_0 * m2_1 + m1_1 * m2_4 + m1_2 * m2_7;\r\n                Cd[2] = m1_0 * m2_2 + m1_1 * m2_5 + m1_2 * m2_8;\r\n                Cd[3] = m1_3 * m2_0 + m1_4 * m2_3 + m1_5 * m2_6;\r\n                Cd[4] = m1_3 * m2_1 + m1_4 * m2_4 + m1_5 * m2_7;\r\n                Cd[5] = m1_3 * m2_2 + m1_4 * m2_5 + m1_5 * m2_8;\r\n                Cd[6] = m1_6 * m2_0 + m1_7 * m2_3 + m1_8 * m2_6;\r\n                Cd[7] = m1_6 * m2_1 + m1_7 * m2_4 + m1_8 * m2_7;\r\n                Cd[8] = m1_6 * m2_2 + m1_7 * m2_5 + m1_8 * m2_8;\r\n            },\r\n\r\n            mat3x3_determinant: function(M) {\r\n                var md=M.data;\r\n                return  md[0] * md[4] * md[8] -\r\n                        md[0] * md[5] * md[7] -\r\n                        md[3] * md[1] * md[8] +\r\n                        md[3] * md[2] * md[7] +\r\n                        md[6] * md[1] * md[5] -\r\n                        md[6] * md[2] * md[4];\r\n            },\r\n\r\n            determinant_3x3: function(M11, M12, M13, \r\n                                      M21, M22, M23, \r\n                                      M31, M32, M33) {\r\n                return  M11 * M22 * M33 - M11 * M23 * M32 -\r\n                          M21 * M12 * M33 + M21 * M13 * M32 +\r\n                          M31 * M12 * M23 - M31 * M13 * M22;\r\n            }\r\n        };\r\n\r\n    })();\r\n\r\n    global.matmath = matmath;\r\n\r\n})(jsfeat);\n/**\r\n * @author Eugene Zatepyakin / http://inspirit.ru/\r\n *\r\n */\r\n\r\n(function(global) {\r\n    \"use strict\";\r\n    //\r\n\r\n    var linalg = (function() {\r\n\r\n        var swap = function(A, i0, i1, t) {\r\n            t = A[i0];\r\n            A[i0] = A[i1];\r\n            A[i1] = t;\r\n        }\r\n\r\n        var hypot = function(a, b) {\r\n            a = Math.abs(a);\r\n            b = Math.abs(b);\r\n            if( a > b ) {\r\n                b /= a;\r\n                return a*Math.sqrt(1.0 + b*b);\r\n            }\r\n            if( b > 0 ) {\r\n                a /= b;\r\n                return b*Math.sqrt(1.0 + a*a);\r\n            }\r\n            return 0.0;\r\n        }\r\n\r\n        var JacobiImpl = function(A, astep, W, V, vstep, n) {\r\n            var eps = jsfeat.EPSILON;\r\n            var i=0,j=0,k=0,m=0,l=0,idx=0,_in=0,_in2=0;\r\n            var iters=0,max_iter=n*n*30;\r\n            var mv=0.0,val=0.0,p=0.0,y=0.0,t=0.0,s=0.0,c=0.0,a0=0.0,b0=0.0;\r\n\r\n            var indR_buff = jsfeat.cache.get_buffer(n<<2);\r\n            var indC_buff = jsfeat.cache.get_buffer(n<<2);\r\n            var indR = indR_buff.i32;\r\n            var indC = indC_buff.i32;\r\n\r\n            if(V) {\r\n                for(; i < n; i++) {\r\n                    k = i*vstep;\r\n                    for(j = 0; j < n; j++) {\r\n                        V[k + j] = 0.0;\r\n                    }\r\n                    V[k + i] = 1.0;\r\n                }\r\n            }\r\n\r\n            for(k = 0; k < n; k++) {\r\n                W[k] = A[(astep + 1)*k];\r\n                if(k < n - 1) {\r\n                    for(m = k+1, mv = Math.abs(A[astep*k + m]), i = k+2; i < n; i++) {\r\n                        val = Math.abs(A[astep*k+i]);\r\n                        if(mv < val)\r\n                            mv = val, m = i;\r\n                    }\r\n                    indR[k] = m;\r\n                }\r\n                if(k > 0) {\r\n                    for(m = 0, mv = Math.abs(A[k]), i = 1; i < k; i++) {\r\n                        val = Math.abs(A[astep*i+k]);\r\n                        if(mv < val)\r\n                            mv = val, m = i;\r\n                    }\r\n                    indC[k] = m;\r\n                }\r\n            }\r\n\r\n            if(n > 1) for( ; iters < max_iter; iters++) {\r\n                // find index (k,l) of pivot p\r\n                for(k = 0, mv = Math.abs(A[indR[0]]), i = 1; i < n-1; i++) {\r\n                    val = Math.abs(A[astep*i + indR[i]]);\r\n                    if( mv < val )\r\n                        mv = val, k = i;\r\n                }\r\n                l = indR[k];\r\n                for(i = 1; i < n; i++) {\r\n                    val = Math.abs(A[astep*indC[i] + i]);\r\n                    if( mv < val )\r\n                        mv = val, k = indC[i], l = i;\r\n                }\r\n                \r\n                p = A[astep*k + l];\r\n\r\n                if(Math.abs(p) <= eps) break;\r\n\r\n                y = (W[l] - W[k])*0.5;\r\n                t = Math.abs(y) + hypot(p, y);\r\n                s = hypot(p, t);\r\n                c = t/s;\r\n                s = p/s; t = (p/t)*p;\r\n                if(y < 0)\r\n                    s = -s, t = -t;\r\n                A[astep*k + l] = 0;\r\n                \r\n                W[k] -= t;\r\n                W[l] += t;\r\n                \r\n                // rotate rows and columns k and l\r\n                for (i = 0; i < k; i++) {\r\n                    _in = (astep * i + k);\r\n                    _in2 = (astep * i + l);\r\n                    a0 = A[_in];\r\n                    b0 = A[_in2];\r\n                    A[_in] = a0 * c - b0 * s;\r\n                    A[_in2] = a0 * s + b0 * c;\r\n                }\r\n                for (i = (k + 1); i < l; i++) {\r\n                    _in = (astep * k + i);\r\n                    _in2 = (astep * i + l);\r\n                    a0 = A[_in];\r\n                    b0 = A[_in2];\r\n                    A[_in] = a0 * c - b0 * s;\r\n                    A[_in2] = a0 * s + b0 * c;\r\n                }\r\n                i = l + 1;\r\n                _in = (astep * k + i);\r\n                _in2 = (astep * l + i);\r\n                for (; i < n; i++, _in++, _in2++) {\r\n                    a0 = A[_in];\r\n                    b0 = A[_in2];\r\n                    A[_in] = a0 * c - b0 * s;\r\n                    A[_in2] = a0 * s + b0 * c;\r\n                }\r\n                \r\n                // rotate eigenvectors\r\n                if (V) {\r\n                    _in = vstep * k;\r\n                    _in2 = vstep * l;\r\n                    for (i = 0; i < n; i++, _in++, _in2++) {\r\n                        a0 = V[_in];\r\n                        b0 = V[_in2];\r\n                        V[_in] = a0 * c - b0 * s;\r\n                        V[_in2] = a0 * s + b0 * c;\r\n                    }\r\n                }\r\n                \r\n                for(j = 0; j < 2; j++) {\r\n                    idx = j == 0 ? k : l;\r\n                    if(idx < n - 1) {\r\n                        for(m = idx+1, mv = Math.abs(A[astep*idx + m]), i = idx+2; i < n; i++) {\r\n                            val = Math.abs(A[astep*idx+i]);\r\n                            if( mv < val )\r\n                                mv = val, m = i;\r\n                        }\r\n                        indR[idx] = m;\r\n                    }\r\n                    if(idx > 0) {\r\n                        for(m = 0, mv = Math.abs(A[idx]), i = 1; i < idx; i++) {\r\n                            val = Math.abs(A[astep*i+idx]);\r\n                            if( mv < val )\r\n                                mv = val, m = i;\r\n                        }\r\n                        indC[idx] = m;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // sort eigenvalues & eigenvectors\r\n            for(k = 0; k < n-1; k++) {\r\n                m = k;\r\n                for(i = k+1; i < n; i++) {\r\n                    if(W[m] < W[i])\r\n                        m = i;\r\n                }\r\n                if(k != m) {\r\n                    swap(W, m, k, mv);\r\n                    if(V) {\r\n                        for(i = 0; i < n; i++) {\r\n                            swap(V, vstep*m + i, vstep*k + i, mv);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n\r\n            jsfeat.cache.put_buffer(indR_buff);\r\n            jsfeat.cache.put_buffer(indC_buff);\r\n        }\r\n\r\n        var JacobiSVDImpl = function(At, astep, _W, Vt, vstep, m, n, n1) {\r\n            var eps = jsfeat.EPSILON * 2.0;\r\n            var minval = jsfeat.FLT_MIN;\r\n            var i=0,j=0,k=0,iter=0,max_iter=Math.max(m, 30);\r\n            var Ai=0,Aj=0,Vi=0,Vj=0,changed=0;\r\n            var c=0.0, s=0.0, t=0.0;\r\n            var t0=0.0,t1=0.0,sd=0.0,beta=0.0,gamma=0.0,delta=0.0,a=0.0,p=0.0,b=0.0;\r\n            var seed = 0x1234;\r\n            var val=0.0,val0=0.0,asum=0.0;\r\n\r\n            var W_buff = jsfeat.cache.get_buffer(n<<3);\r\n            var W = W_buff.f64;\r\n            \r\n            for(; i < n; i++) {\r\n                for(k = 0, sd = 0; k < m; k++) {\r\n                    t = At[i*astep + k];\r\n                    sd += t*t;\r\n                }\r\n                W[i] = sd;\r\n                \r\n                if(Vt) {\r\n                    for(k = 0; k < n; k++) {\r\n                        Vt[i*vstep + k] = 0;\r\n                    }\r\n                    Vt[i*vstep + i] = 1;\r\n                }\r\n            }\r\n            \r\n            for(; iter < max_iter; iter++) {\r\n                changed = 0;\r\n                \r\n                for(i = 0; i < n-1; i++) {\r\n                    for(j = i+1; j < n; j++) {\r\n                        Ai = (i*astep)|0, Aj = (j*astep)|0;\r\n                        a = W[i], p = 0, b = W[j];\r\n                        \r\n                        k = 2;\r\n                        p += At[Ai]*At[Aj];\r\n                        p += At[Ai+1]*At[Aj+1];\r\n\r\n                        for(; k < m; k++)\r\n                            p += At[Ai+k]*At[Aj+k];\r\n                        \r\n                        if(Math.abs(p) <= eps*Math.sqrt(a*b)) continue;\r\n                        \r\n                        p *= 2.0;\r\n                        beta = a - b, gamma = hypot(p, beta);\r\n                        if( beta < 0 ) {\r\n                            delta = (gamma - beta)*0.5;\r\n                            s = Math.sqrt(delta/gamma);\r\n                            c = (p/(gamma*s*2.0));\r\n                        } else {\r\n                            c = Math.sqrt((gamma + beta)/(gamma*2.0));\r\n                            s = (p/(gamma*c*2.0));\r\n                        }\r\n                        \r\n                        a=0.0, b=0.0;\r\n                        \r\n                        k = 2; // unroll\r\n                        t0 = c*At[Ai] + s*At[Aj];\r\n                        t1 = -s*At[Ai] + c*At[Aj];\r\n                        At[Ai] = t0; At[Aj] = t1;\r\n                        a += t0*t0; b += t1*t1;\r\n\r\n                        t0 = c*At[Ai+1] + s*At[Aj+1];\r\n                        t1 = -s*At[Ai+1] + c*At[Aj+1];\r\n                        At[Ai+1] = t0; At[Aj+1] = t1;\r\n                        a += t0*t0; b += t1*t1;\r\n\r\n                        for( ; k < m; k++ )\r\n                        {\r\n                            t0 = c*At[Ai+k] + s*At[Aj+k];\r\n                            t1 = -s*At[Ai+k] + c*At[Aj+k];\r\n                            At[Ai+k] = t0; At[Aj+k] = t1;\r\n                            \r\n                            a += t0*t0; b += t1*t1;\r\n                        }\r\n                        \r\n                        W[i] = a; W[j] = b;\r\n                        \r\n                        changed = 1;\r\n                        \r\n                        if(Vt) {\r\n                            Vi = (i*vstep)|0, Vj = (j*vstep)|0;\r\n\r\n                            k = 2;\r\n                            t0 = c*Vt[Vi] + s*Vt[Vj];\r\n                            t1 = -s*Vt[Vi] + c*Vt[Vj];\r\n                            Vt[Vi] = t0; Vt[Vj] = t1;\r\n\r\n                            t0 = c*Vt[Vi+1] + s*Vt[Vj+1];\r\n                            t1 = -s*Vt[Vi+1] + c*Vt[Vj+1];\r\n                            Vt[Vi+1] = t0; Vt[Vj+1] = t1;\r\n\r\n                            for(; k < n; k++) {\r\n                                t0 = c*Vt[Vi+k] + s*Vt[Vj+k];\r\n                                t1 = -s*Vt[Vi+k] + c*Vt[Vj+k];\r\n                                Vt[Vi+k] = t0; Vt[Vj+k] = t1;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                if(changed == 0) break;\r\n            }\r\n            \r\n            for(i = 0; i < n; i++) {\r\n                for(k = 0, sd = 0; k < m; k++) {\r\n                    t = At[i*astep + k];\r\n                    sd += t*t;\r\n                }\r\n                W[i] = Math.sqrt(sd);\r\n            }\r\n            \r\n            for(i = 0; i < n-1; i++) {\r\n                j = i;\r\n                for(k = i+1; k < n; k++) {\r\n                    if(W[j] < W[k])\r\n                        j = k;\r\n                }\r\n                if(i != j) {\r\n                    swap(W, i, j, sd);\r\n                    if(Vt) {\r\n                        for(k = 0; k < m; k++) {\r\n                            swap(At, i*astep + k, j*astep + k, t);\r\n                        }\r\n                        \r\n                        for(k = 0; k < n; k++) {\r\n                            swap(Vt, i*vstep + k, j*vstep + k, t);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            \r\n            for(i = 0; i < n; i++) {\r\n                _W[i] = W[i];\r\n            }\r\n            \r\n            if(!Vt) {\r\n                jsfeat.cache.put_buffer(W_buff);\r\n                return;\r\n            }\r\n\r\n            for(i = 0; i < n1; i++) {\r\n\r\n                sd = i < n ? W[i] : 0;\r\n                \r\n                while(sd <= minval) {\r\n                    // if we got a zero singular value, then in order to get the corresponding left singular vector\r\n                    // we generate a random vector, project it to the previously computed left singular vectors,\r\n                    // subtract the projection and normalize the difference.\r\n                    val0 = (1.0/m);\r\n                    for(k = 0; k < m; k++) {\r\n                        seed = (seed * 214013 + 2531011);\r\n                        val = (((seed >> 16) & 0x7fff) & 256) != 0 ? val0 : -val0;\r\n                        At[i*astep + k] = val;\r\n                    }\r\n                    for(iter = 0; iter < 2; iter++) {\r\n                        for(j = 0; j < i; j++) {\r\n                            sd = 0;\r\n                            for(k = 0; k < m; k++) {\r\n                                sd += At[i*astep + k]*At[j*astep + k];\r\n                            }\r\n                            asum = 0.0;\r\n                            for(k = 0; k < m; k++) {\r\n                                t = (At[i*astep + k] - sd*At[j*astep + k]);\r\n                                At[i*astep + k] = t;\r\n                                asum += Math.abs(t);\r\n                            }\r\n                            asum = asum ? 1.0/asum : 0;\r\n                            for(k = 0; k < m; k++) {\r\n                                At[i*astep + k] *= asum;\r\n                            }\r\n                        }\r\n                    }\r\n                    sd = 0;\r\n                    for(k = 0; k < m; k++) {\r\n                        t = At[i*astep + k];\r\n                        sd += t*t;\r\n                    }\r\n                    sd = Math.sqrt(sd);\r\n                }\r\n                \r\n                s = (1.0/sd);\r\n                for(k = 0; k < m; k++) {\r\n                    At[i*astep + k] *= s;\r\n                }\r\n            }\r\n\r\n            jsfeat.cache.put_buffer(W_buff);\r\n        }\r\n        \r\n        return {\r\n\r\n            lu_solve: function(A, B) {\r\n                var i=0,j=0,k=0,p=1,astep=A.cols;\r\n                var ad=A.data, bd=B.data;\r\n                var t,alpha,d,s;\r\n\r\n                for(i = 0; i < astep; i++) {\r\n                    k = i;                    \r\n                    for(j = i+1; j < astep; j++) {\r\n                        if(Math.abs(ad[j*astep + i]) > Math.abs(ad[k*astep+i])) {\r\n                            k = j;\r\n                        }\r\n                    }\r\n                    \r\n                    if(Math.abs(ad[k*astep+i]) < jsfeat.EPSILON) {\r\n                        return 0; // FAILED\r\n                    }\r\n                    \r\n                    if(k != i) {\r\n                        for(j = i; j < astep; j++ ) {\r\n                            swap(ad, i*astep+j, k*astep+j, t);\r\n                        }\r\n                        \r\n                        swap(bd, i, k, t);\r\n                        p = -p;\r\n                    }\r\n                    \r\n                    d = -1.0/ad[i*astep+i];\r\n                    \r\n                    for(j = i+1; j < astep; j++) {\r\n                        alpha = ad[j*astep+i]*d;\r\n                        \r\n                        for(k = i+1; k < astep; k++) {\r\n                            ad[j*astep+k] += alpha*ad[i*astep+k];\r\n                        }\r\n                        \r\n                        bd[j] += alpha*bd[i];\r\n                    }\r\n                    \r\n                    ad[i*astep+i] = -d;\r\n                }\r\n                \r\n                for(i = astep-1; i >= 0; i--) {\r\n                    s = bd[i];\r\n                    for(k = i+1; k < astep; k++) {\r\n                        s -= ad[i*astep+k]*bd[k];\r\n                    }\r\n                    bd[i] = s*ad[i*astep+i];\r\n                }\r\n\r\n                return 1; // OK\r\n            },\r\n\r\n            cholesky_solve: function(A, B) {\r\n                var col=0,row=0,col2=0,cs=0,rs=0,i=0,j=0;\r\n                var size = A.cols;\r\n                var ad=A.data, bd=B.data;\r\n                var val,inv_diag;\r\n\r\n                for (col = 0; col < size; col++) {\r\n                    inv_diag = 1.0;\r\n                    cs = (col * size);\r\n                    rs = cs;\r\n                    for (row = col; row < size; row++)\r\n                    {\r\n                        // correct for the parts of cholesky already computed\r\n                        val = ad[(rs+col)];\r\n                        for (col2 = 0; col2 < col; col2++) {\r\n                            val -= ad[(col2*size+col)] * ad[(rs+col2)];\r\n                        }\r\n                        if (row == col) {\r\n                            // this is the diagonal element so don't divide\r\n                            ad[(rs+col)] = val;\r\n                            if(val == 0) {\r\n                                return 0;\r\n                            }\r\n                            inv_diag = 1.0 / val;\r\n                        } else {\r\n                            // cache the value without division in the upper half\r\n                            ad[(cs+row)] = val;\r\n                            // divide my the diagonal element for all others\r\n                            ad[(rs+col)] = val * inv_diag;\r\n                        }\r\n                        rs = (rs + size);\r\n                    }\r\n                }\r\n\r\n                // first backsub through L\r\n                cs = 0;\r\n                for (i = 0; i < size; i++) {\r\n                    val = bd[i];\r\n                    for (j = 0; j < i; j++) {\r\n                        val -= ad[(cs+j)] * bd[j];\r\n                    }\r\n                    bd[i] = val;\r\n                    cs = (cs + size);\r\n                }\r\n                // backsub through diagonal\r\n                cs = 0;\r\n                for (i = 0; i < size; i++) {\r\n                    bd[i] /= ad[(cs + i)];\r\n                    cs = (cs + size);\r\n                }\r\n                // backsub through L Transpose\r\n                i = (size-1);\r\n                for (; i >= 0; i--) {\r\n                    val = bd[i];\r\n                    j = (i + 1);\r\n                    cs = (j * size);\r\n                    for (; j < size; j++) {\r\n                        val -= ad[(cs + i)] * bd[j];\r\n                        cs = (cs + size);\r\n                    }\r\n                    bd[i] = val;\r\n                }\r\n\r\n                return 1;\r\n            },\r\n\r\n            svd_decompose: function(A, W, U, V, options) {\r\n                if (typeof options === \"undefined\") { options = 0; };\r\n                var at=0,i=0,j=0,_m=A.rows,_n=A.cols,m=_m,n=_n;\r\n                var dt = A.type | jsfeat.C1_t; // we only work with single channel\r\n\r\n                if(m < n) {\r\n                    at = 1;\r\n                    i = m;\r\n                    m = n;\r\n                    n = i;\r\n                }\r\n\r\n                var a_buff = jsfeat.cache.get_buffer((m*m)<<3);\r\n                var w_buff = jsfeat.cache.get_buffer(n<<3);\r\n                var v_buff = jsfeat.cache.get_buffer((n*n)<<3);\r\n\r\n                var a_mt = new jsfeat.matrix_t(m, m, dt, a_buff.data);\r\n                var w_mt = new jsfeat.matrix_t(1, n, dt, w_buff.data);\r\n                var v_mt = new jsfeat.matrix_t(n, n, dt, v_buff.data);\r\n\r\n                if(at == 0) {\r\n                    // transpose\r\n                    jsfeat.matmath.transpose(a_mt, A);\r\n                } else {\r\n                    for(i = 0; i < _n*_m; i++) {\r\n                        a_mt.data[i] = A.data[i];\r\n                    }\r\n                    for(; i < n*m; i++) {\r\n                        a_mt.data[i] = 0;\r\n                    }\r\n                }\r\n\r\n                JacobiSVDImpl(a_mt.data, m, w_mt.data, v_mt.data, n, m, n, m);\r\n\r\n                if(W) {\r\n                    for(i=0; i < n; i++) {\r\n                        W.data[i] = w_mt.data[i];\r\n                    }\r\n                    for(; i < _n; i++) {\r\n                        W.data[i] = 0;\r\n                    }\r\n                }\r\n\r\n                if (at == 0) {\r\n                    if(U && (options & jsfeat.SVD_U_T)) {\r\n                        i = m*m;\r\n                        while(--i >= 0) {\r\n                            U.data[i] = a_mt.data[i];\r\n                        }\r\n                    } else if(U) {\r\n                        jsfeat.matmath.transpose(U, a_mt);\r\n                    }\r\n\r\n                    if(V && (options & jsfeat.SVD_V_T)) {\r\n                        i = n*n;\r\n                        while(--i >= 0) {\r\n                            V.data[i] = v_mt.data[i];\r\n                        }\r\n                    } else if(V) {\r\n                        jsfeat.matmath.transpose(V, v_mt);\r\n                    }\r\n                } else {\r\n                    if(U && (options & jsfeat.SVD_U_T)) {\r\n                        i = n*n;\r\n                        while(--i >= 0) {\r\n                            U.data[i] = v_mt.data[i];\r\n                        }\r\n                    } else if(U) {\r\n                        jsfeat.matmath.transpose(U, v_mt);\r\n                    }\r\n\r\n                    if(V && (options & jsfeat.SVD_V_T)) {\r\n                        i = m*m;\r\n                        while(--i >= 0) {\r\n                            V.data[i] = a_mt.data[i];\r\n                        }\r\n                    } else if(V) {\r\n                        jsfeat.matmath.transpose(V, a_mt);\r\n                    }\r\n                }\r\n\r\n                jsfeat.cache.put_buffer(a_buff);\r\n                jsfeat.cache.put_buffer(w_buff);\r\n                jsfeat.cache.put_buffer(v_buff);\r\n\r\n            },\r\n\r\n            svd_solve: function(A, X, B) {\r\n                var i=0,j=0,k=0;\r\n                var pu=0,pv=0;\r\n                var nrows=A.rows,ncols=A.cols;\r\n                var sum=0.0,xsum=0.0,tol=0.0;\r\n                var dt = A.type | jsfeat.C1_t;\r\n\r\n                var u_buff = jsfeat.cache.get_buffer((nrows*nrows)<<3);\r\n                var w_buff = jsfeat.cache.get_buffer(ncols<<3);\r\n                var v_buff = jsfeat.cache.get_buffer((ncols*ncols)<<3);\r\n\r\n                var u_mt = new jsfeat.matrix_t(nrows, nrows, dt, u_buff.data);\r\n                var w_mt = new jsfeat.matrix_t(1, ncols, dt, w_buff.data);\r\n                var v_mt = new jsfeat.matrix_t(ncols, ncols, dt, v_buff.data);\r\n\r\n                var bd = B.data, ud = u_mt.data, wd = w_mt.data, vd = v_mt.data;\r\n\r\n                this.svd_decompose(A, w_mt, u_mt, v_mt, 0);\r\n\r\n                tol = jsfeat.EPSILON * wd[0] * ncols;\r\n\r\n                for (; i < ncols; i++, pv += ncols) {\r\n                    xsum = 0.0;\r\n                    for(j = 0; j < ncols; j++) {\r\n                        if(wd[j] > tol) {\r\n                            for(k = 0, sum = 0.0, pu = 0; k < nrows; k++, pu += ncols) {\r\n                                sum += ud[pu + j] * bd[k];\r\n                            }\r\n                            xsum += sum * vd[pv + j] / wd[j];\r\n                        }\r\n                    }\r\n                    X.data[i] = xsum;\r\n                }\r\n\r\n                jsfeat.cache.put_buffer(u_buff);\r\n                jsfeat.cache.put_buffer(w_buff);\r\n                jsfeat.cache.put_buffer(v_buff);\r\n            },\r\n\r\n            svd_invert: function(Ai, A) {\r\n                var i=0,j=0,k=0;\r\n                var pu=0,pv=0,pa=0;\r\n                var nrows=A.rows,ncols=A.cols;\r\n                var sum=0.0,tol=0.0;\r\n                var dt = A.type | jsfeat.C1_t;\r\n\r\n                var u_buff = jsfeat.cache.get_buffer((nrows*nrows)<<3);\r\n                var w_buff = jsfeat.cache.get_buffer(ncols<<3);\r\n                var v_buff = jsfeat.cache.get_buffer((ncols*ncols)<<3);\r\n\r\n                var u_mt = new jsfeat.matrix_t(nrows, nrows, dt, u_buff.data);\r\n                var w_mt = new jsfeat.matrix_t(1, ncols, dt, w_buff.data);\r\n                var v_mt = new jsfeat.matrix_t(ncols, ncols, dt, v_buff.data);\r\n\r\n                var id = Ai.data, ud = u_mt.data, wd = w_mt.data, vd = v_mt.data;\r\n\r\n                this.svd_decompose(A, w_mt, u_mt, v_mt, 0);\r\n\r\n                tol = jsfeat.EPSILON * wd[0] * ncols;\r\n\r\n                for (; i < ncols; i++, pv += ncols) {\r\n                    for (j = 0, pu = 0; j < nrows; j++, pa++) {\r\n                        for (k = 0, sum = 0.0; k < ncols; k++, pu++) {\r\n                            if (wd[k] > tol) sum += vd[pv + k] * ud[pu] / wd[k];\r\n                        }\r\n                        id[pa] = sum;\r\n                    }\r\n                }\r\n\r\n                jsfeat.cache.put_buffer(u_buff);\r\n                jsfeat.cache.put_buffer(w_buff);\r\n                jsfeat.cache.put_buffer(v_buff);\r\n            },\r\n\r\n            eigenVV: function(A, vects, vals) {\r\n                var n=A.cols,i=n*n;\r\n                var dt = A.type | jsfeat.C1_t;\r\n\r\n                var a_buff = jsfeat.cache.get_buffer((n*n)<<3);\r\n                var w_buff = jsfeat.cache.get_buffer(n<<3);\r\n                var a_mt = new jsfeat.matrix_t(n, n, dt, a_buff.data);\r\n                var w_mt = new jsfeat.matrix_t(1, n, dt, w_buff.data);\r\n\r\n                while(--i >= 0) {\r\n                    a_mt.data[i] = A.data[i];\r\n                }\r\n\r\n                JacobiImpl(a_mt.data, n, w_mt.data, vects ? vects.data : null, n, n);\r\n\r\n                if(vals) {\r\n                    while(--n >= 0) {\r\n                        vals.data[n] = w_mt.data[n];\r\n                    }\r\n                }\r\n\r\n                jsfeat.cache.put_buffer(a_buff);\r\n                jsfeat.cache.put_buffer(w_buff);\r\n            }\r\n\r\n        };\r\n\r\n    })();\r\n\r\n    global.linalg = linalg;\r\n\r\n})(jsfeat);\n/**\n * @author Eugene Zatepyakin / http://inspirit.ru/\n *\n */\n\n(function(global) {\n    \"use strict\";\n    //\n\n    var motion_model = (function() {\n\n    \tvar sqr = function(x) {\n    \t\treturn x*x;\n    \t}\n\n    \t// does isotropic normalization\n    \tvar iso_normalize_points = function(from, to, T0, T1, count) {\n\t\t\tvar i=0;\n\t\t    var cx0=0.0, cy0=0.0, d0=0.0, s0=0.0;\n\t\t    var cx1=0.0, cy1=0.0, d1=0.0, s1=0.0;\n\t\t    var dx=0.0,dy=0.0;\n\n\t\t    for (; i < count; ++i) {\n\t\t        cx0 += from[i].x;\n\t\t        cy0 += from[i].y;\n\t\t        cx1 += to[i].x;\n\t\t        cy1 += to[i].y;\n\t\t    }\n\n\t\t    cx0 /= count; cy0 /= count;\n\t\t    cx1 /= count; cy1 /= count;\n\n\t\t    for (i = 0; i < count; ++i) {\n\t\t        dx = from[i].x - cx0;\n\t\t        dy = from[i].y - cy0;\n\t\t        d0 += Math.sqrt(dx*dx + dy*dy);\n\t\t        dx = to[i].x - cx1;\n\t\t        dy = to[i].y - cy1;\n\t\t        d1 += Math.sqrt(dx*dx + dy*dy);\n\t\t    }\n\n\t\t    d0 /= count; d1 /= count;\n\n\t\t    s0 = Math.SQRT2 / d0; s1 = Math.SQRT2 / d1;\n\n\t\t    T0[0] = T0[4] = s0;\n\t\t    T0[2] = -cx0*s0;\n\t\t    T0[5] = -cy0*s0;\n\t\t    T0[1] = T0[3] = T0[6] = T0[7] = 0.0;\n\t\t    T0[8] = 1.0;\n\n\t\t    T1[0] = T1[4] = s1;\n\t\t    T1[2] = -cx1*s1;\n\t\t    T1[5] = -cy1*s1;\n\t\t    T1[1] = T1[3] = T1[6] = T1[7] = 0.0;\n\t\t    T1[8] = 1.0;\n\t\t}\n\n\t\tvar have_collinear_points = function(points, count) {\n\t\t    var j=0,k=0,i=(count-1)|0;\n\t\t    var dx1=0.0,dy1=0.0,dx2=0.0,dy2=0.0;\n\n\t\t    // check that the i-th selected point does not belong\n\t\t    // to a line connecting some previously selected points\n\t\t    for(; j < i; ++j) {\n\t\t        dx1 = points[j].x - points[i].x;\n\t\t        dy1 = points[j].y - points[i].y;\n\t\t        for(k = 0; k < j; ++k) {\n\t\t            dx2 = points[k].x - points[i].x;\n\t\t            dy2 = points[k].y - points[i].y;\n\t\t            if( Math.abs(dx2*dy1 - dy2*dx1) <= jsfeat.EPSILON*(Math.abs(dx1) + Math.abs(dy1) + Math.abs(dx2) + Math.abs(dy2)))\n\t\t                return true;\n\t\t        }\n\t\t    }\n\t\t    return false;\n\t\t}\n\n\t\tvar T0 = new jsfeat.matrix_t(3, 3, jsfeat.F32_t|jsfeat.C1_t);\n    \tvar T1 = new jsfeat.matrix_t(3, 3, jsfeat.F32_t|jsfeat.C1_t);\n    \tvar AtA = new jsfeat.matrix_t(6, 6, jsfeat.F32_t|jsfeat.C1_t);\n    \tvar AtB = new jsfeat.matrix_t(6, 1, jsfeat.F32_t|jsfeat.C1_t);\n    \t\n    \tvar affine2d = (function () {\n\n\t        function affine2d() {\n\t        \t// empty constructor\n\t        }\n\n\t        affine2d.prototype.run = function(from, to, model, count) {\n\t        \tvar i=0,j=0;\n\t        \tvar dt=model.type|jsfeat.C1_t;\n\t        \tvar md=model.data, t0d=T0.data, t1d=T1.data;\n\t        \tvar pt0,pt1,px=0.0,py=0.0;\n\n\t            iso_normalize_points(from, to, t0d, t1d, count);\n\n\t            var a_buff = jsfeat.cache.get_buffer((2*count*6)<<3);\n                var b_buff = jsfeat.cache.get_buffer((2*count)<<3);\n\n                var a_mt = new jsfeat.matrix_t(6, 2*count, dt, a_buff.data);\n                var b_mt = new jsfeat.matrix_t(1, 2*count, dt, b_buff.data);\n                var ad=a_mt.data, bd=b_mt.data;\n\n\t\t\t    for (; i < count; ++i) {\n\t\t\t    \tpt0 = from[i];\n\t\t\t        pt1 = to[i];\n\n\t\t\t        px = t0d[0]*pt0.x + t0d[1]*pt0.y + t0d[2];\n\t\t\t        py = t0d[3]*pt0.x + t0d[4]*pt0.y + t0d[5];\n\n\t\t\t        j = i*2*6;\n\t\t\t        ad[j]=px, ad[j+1]=py, ad[j+2]=1.0, ad[j+3]=0.0, ad[j+4]=0.0, ad[j+5]=0.0;\n\n\t\t\t        j += 6;\n\t\t\t        ad[j]=0.0, ad[j+1]=0.0, ad[j+2]=0.0, ad[j+3]=px, ad[j+4]=py, ad[j+5]=1.0;\n\n\t\t\t        bd[i<<1] = t1d[0]*pt1.x + t1d[1]*pt1.y + t1d[2];\n\t\t\t        bd[(i<<1)+1] = t1d[3]*pt1.x + t1d[4]*pt1.y + t1d[5];\n\t\t\t    }\n\n\t\t\t    jsfeat.matmath.multiply_AtA(AtA, a_mt);\n\t\t\t    jsfeat.matmath.multiply_AtB(AtB, a_mt, b_mt);\n\n\t\t\t    jsfeat.linalg.lu_solve(AtA, AtB);\n\n\t\t\t    md[0] = AtB.data[0], md[1]=AtB.data[1], md[2]=AtB.data[2];\n\t\t\t    md[3] = AtB.data[3], md[4]=AtB.data[4], md[5]=AtB.data[5];\n\t\t\t    md[6] = 0.0, md[7] = 0.0, md[8] = 1.0; // fill last row\n\n\t\t\t    // denormalize\n\t\t\t    jsfeat.matmath.invert_3x3(T1, T1);\n\t\t\t    jsfeat.matmath.multiply_3x3(model, T1, model);\n\t\t\t    jsfeat.matmath.multiply_3x3(model, model, T0);\n\n\t\t\t    // free buffer\n\t\t\t    jsfeat.cache.put_buffer(a_buff);\n\t\t\t    jsfeat.cache.put_buffer(b_buff);\n\n\t\t\t    return 1;\n\t        }\n\n\t        affine2d.prototype.error = function(from, to, model, err, count) {\n\t        \tvar i=0;\n\t        \tvar pt0,pt1;\n\t        \tvar m=model.data;\n\n\t\t\t    for (; i < count; ++i) {\n\t\t\t        pt0 = from[i];\n\t\t\t        pt1 = to[i];\n\n\t\t\t        err[i] = sqr(pt1.x - m[0]*pt0.x - m[1]*pt0.y - m[2]) +\n\t\t\t                 sqr(pt1.y - m[3]*pt0.x - m[4]*pt0.y - m[5]);\n\t\t\t    }\n\t        }\n\n\t        affine2d.prototype.check_subset = function(from, to, count) {\n\t            return true; // all good\n\t        }\n\n\t        return affine2d;\n\t    })();\n\n\t    var mLtL = new jsfeat.matrix_t(9, 9, jsfeat.F32_t|jsfeat.C1_t);\n\t    var Evec = new jsfeat.matrix_t(9, 9, jsfeat.F32_t|jsfeat.C1_t);\n\n\t    var homography2d = (function () {\n\n\t        function homography2d() {\n\t        \t// empty constructor\n\t        \t//this.T0 = new jsfeat.matrix_t(3, 3, jsfeat.F32_t|jsfeat.C1_t);\n\t        \t//this.T1 = new jsfeat.matrix_t(3, 3, jsfeat.F32_t|jsfeat.C1_t);\n\t        \t//this.mLtL = new jsfeat.matrix_t(9, 9, jsfeat.F32_t|jsfeat.C1_t);\n\t        \t//this.Evec = new jsfeat.matrix_t(9, 9, jsfeat.F32_t|jsfeat.C1_t);\n\t        }\n\n\t        homography2d.prototype.run = function(from, to, model, count) {\n\t        \tvar i=0,j=0;\n\t        \tvar md=model.data, t0d=T0.data, t1d=T1.data;\n\t        \tvar LtL=mLtL.data, evd=Evec.data;\n\t        \tvar x=0.0,y=0.0,X=0.0,Y=0.0;\n\n\t\t\t    // norm\n\t\t\t\tvar smx=0.0, smy=0.0, cmx=0.0, cmy=0.0, sMx=0.0, sMy=0.0, cMx=0.0, cMy=0.0;\n\n\t\t\t\tfor(; i < count; ++i) {\n\t\t\t\t    cmx += to[i].x;\n\t\t\t\t    cmy += to[i].y;\n\t\t\t\t    cMx += from[i].x;\n\t\t\t\t    cMy += from[i].y;\n\t\t\t\t}\n\n\t\t\t    cmx /= count; cmy /= count;\n\t\t\t    cMx /= count; cMy /= count;\n\n\t\t\t    for(i = 0; i < count; ++i)\n\t\t\t    {\n\t\t\t\t    smx += Math.abs(to[i].x - cmx);\n\t\t\t\t    smy += Math.abs(to[i].y - cmy);\n\t\t\t\t    sMx += Math.abs(from[i].x - cMx);\n\t\t\t\t    sMy += Math.abs(from[i].y - cMy);\n\t\t\t\t}\n\n\t\t\t    if( Math.abs(smx) < jsfeat.EPSILON \n\t\t\t    \t|| Math.abs(smy) < jsfeat.EPSILON \n\t\t\t    \t|| Math.abs(sMx) < jsfeat.EPSILON \n\t\t\t    \t|| Math.abs(sMy) < jsfeat.EPSILON ) return 0;\n\n\t\t\t    smx = count/smx; smy = count/smy;\n\t\t\t    sMx = count/sMx; sMy = count/sMy;\n\n\t\t\t    t0d[0] = sMx; \tt0d[1] = 0; \tt0d[2] = -cMx*sMx; \n\t\t\t    t0d[3] = 0; \tt0d[4] = sMy; \tt0d[5] = -cMy*sMy; \n\t\t\t    t0d[6] = 0; \tt0d[7] = 0; \tt0d[8] = 1;\n\n\t\t\t\tt1d[0] = 1.0/smx; \tt1d[1] = 0; \t\tt1d[2] = cmx;\n\t\t\t\tt1d[3] = 0; \t\tt1d[4] = 1.0/smy; \tt1d[5] = cmy;\n\t\t\t\tt1d[6] = 0; \t\tt1d[7] = 0; \t\tt1d[8] = 1;\n\t\t\t\t//\n\n\t\t\t\t// construct system\n\t\t\t\ti = 81;\n\t\t\t\twhile(--i >= 0) {\n\t\t\t\t\tLtL[i] = 0.0;\n\t\t\t\t}\n\t\t\t\tfor(i = 0; i < count; ++i) {\n\t\t\t\t\tx = (to[i].x - cmx) * smx;\n\t\t\t\t\ty = (to[i].y - cmy) * smy;\n\t\t\t\t\tX = (from[i].x - cMx) * sMx;\n\t\t\t\t\tY = (from[i].y - cMy) * sMy;\n\n\t\t\t\t\tLtL[0] += X*X;\n\t\t\t\t\tLtL[1] += X*Y;\n\t\t\t\t\tLtL[2] += X;\n\n\t\t\t\t\tLtL[6] += X*-x*X;\n\t\t\t\t\tLtL[7] += X*-x*Y;\n\t\t\t\t\tLtL[8] += X*-x;\n\t\t\t\t\tLtL[10] += Y*Y;\n\t\t\t\t\tLtL[11] += Y;\n\n\t\t\t\t\tLtL[15] += Y*-x*X;\n\t\t\t\t\tLtL[16] += Y*-x*Y;\n\t\t\t\t\tLtL[17] += Y*-x;\n\t\t\t\t\tLtL[20] += 1.0;\n\n\t\t\t\t\tLtL[24] += -x*X;\n\t\t\t\t\tLtL[25] += -x*Y;\n\t\t\t\t\tLtL[26] += -x;\n\t\t\t\t\tLtL[30] += X*X;\n\t\t\t\t\tLtL[31] += X*Y;\n\t\t\t\t\tLtL[32] += X;\n\t\t\t\t\tLtL[33] += X*-y*X;\n\t\t\t\t\tLtL[34] += X*-y*Y;\n\t\t\t\t\tLtL[35] += X*-y;\n\t\t\t\t\tLtL[40] += Y*Y;\n\t\t\t\t\tLtL[41] += Y;\n\t\t\t\t\tLtL[42] += Y*-y*X;\n\t\t\t\t\tLtL[43] += Y*-y*Y;\n\t\t\t\t\tLtL[44] += Y*-y;\n\t\t\t\t\tLtL[50] += 1.0;\n\t\t\t\t\tLtL[51] += -y*X;\n\t\t\t\t\tLtL[52] += -y*Y;\n\t\t\t\t\tLtL[53] += -y;\n\t\t\t\t\tLtL[60] += -x*X*-x*X + -y*X*-y*X;\n\t\t\t\t\tLtL[61] += -x*X*-x*Y + -y*X*-y*Y;\n\t\t\t\t\tLtL[62] += -x*X*-x + -y*X*-y;\n\t\t\t\t\tLtL[70] += -x*Y*-x*Y + -y*Y*-y*Y;\n\t\t\t\t\tLtL[71] += -x*Y*-x + -y*Y*-y;\n\t\t\t\t\tLtL[80] += -x*-x + -y*-y;\n\t\t\t\t}\n\t\t\t\t//\n\n\t\t\t\t// symmetry\n\t\t\t    for(i = 0; i < 9; ++i) {\n\t\t\t        for(j = 0; j < i; ++j)\n\t\t\t            LtL[i*9+j] = LtL[j*9+i];\n\t\t\t    }\n\n\t\t\t\tjsfeat.linalg.eigenVV(mLtL, Evec);\n\n\t\t\t\tmd[0]=evd[72], md[1]=evd[73], md[2]=evd[74];\n\t\t\t    md[3]=evd[75], md[4]=evd[76], md[5]=evd[77];\n\t\t\t    md[6]=evd[78], md[7]=evd[79], md[8]=evd[80];\n\n\t\t\t\t// denormalize\n\t\t\t    jsfeat.matmath.multiply_3x3(model, T1, model);\n\t\t\t    jsfeat.matmath.multiply_3x3(model, model, T0);\n\n\t\t\t    // set bottom right to 1.0\n\t\t\t    x = 1.0/md[8];\n\t\t\t    md[0] *= x; md[1] *= x; md[2] *= x;\n\t\t\t    md[3] *= x; md[4] *= x; md[5] *= x;\n\t\t\t    md[6] *= x; md[7] *= x; md[8] = 1.0;\n\n\t\t\t    return 1;\n\t        }\n\n\t        homography2d.prototype.error = function(from, to, model, err, count) {\n\t        \tvar i=0;\n\t        \tvar pt0,pt1,ww=0.0,dx=0.0,dy=0.0;\n\t        \tvar m=model.data;\n\n\t\t\t    for (; i < count; ++i) {\n\t\t\t        pt0 = from[i];\n\t\t\t        pt1 = to[i];\n\n\t\t\t        ww = 1.0/(m[6]*pt0.x + m[7]*pt0.y + 1.0);\n\t\t\t        dx = (m[0]*pt0.x + m[1]*pt0.y + m[2])*ww - pt1.x;\n\t\t\t        dy = (m[3]*pt0.x + m[4]*pt0.y + m[5])*ww - pt1.y;\n\t\t\t        err[i] = (dx*dx + dy*dy);\n\t\t\t    }\n\t        }\n\n\t        homography2d.prototype.check_subset = function(from, to, count) {\n\t        \t// seems to reject good subsets actually\n\t        \t//if( have_collinear_points(from, count) || have_collinear_points(to, count) ) {\n        \t\t\t//return false;\n        \t\t//}\n        \t\tif( count == 4 ) {\n\t\t\t        var negative = 0;\n\n\t\t\t        var fp0=from[0],fp1=from[1],fp2=from[2],fp3=from[3];\n\t\t\t        var tp0=to[0],tp1=to[1],tp2=to[2],tp3=to[3];\n\n\t\t\t        // set1\n\t\t\t        var A11=fp0.x, A12=fp0.y, A13=1.0;\n\t\t\t        var A21=fp1.x, A22=fp1.y, A23=1.0;\n\t\t\t        var A31=fp2.x, A32=fp2.y, A33=1.0;\n\n\t\t\t        var B11=tp0.x, B12=tp0.y, B13=1.0;\n\t\t\t        var B21=tp1.x, B22=tp1.y, B23=1.0;\n\t\t\t        var B31=tp2.x, B32=tp2.y, B33=1.0;\n\n\t\t\t        var detA = jsfeat.matmath.determinant_3x3(A11,A12,A13, A21,A22,A23, A31,A32,A33);\n\t\t\t\t\tvar detB = jsfeat.matmath.determinant_3x3(B11,B12,B13, B21,B22,B23, B31,B32,B33);\n\n\t\t\t\t\tif(detA*detB < 0) negative++;\n\n\t\t\t\t\t// set2\n\t\t\t\t\tA11=fp1.x, A12=fp1.y;\n\t\t\t        A21=fp2.x, A22=fp2.y;\n\t\t\t        A31=fp3.x, A32=fp3.y;\n\n\t\t\t        B11=tp1.x, B12=tp1.y;\n\t\t\t        B21=tp2.x, B22=tp2.y;\n\t\t\t        B31=tp3.x, B32=tp3.y;\n\n\t\t\t        detA = jsfeat.matmath.determinant_3x3(A11,A12,A13, A21,A22,A23, A31,A32,A33);\n\t\t\t\t\tdetB = jsfeat.matmath.determinant_3x3(B11,B12,B13, B21,B22,B23, B31,B32,B33);\n\n\t\t\t\t\tif(detA*detB < 0) negative++;\n\n\t\t\t\t\t// set3\n\t\t\t\t\tA11=fp0.x, A12=fp0.y;\n\t\t\t        A21=fp2.x, A22=fp2.y;\n\t\t\t        A31=fp3.x, A32=fp3.y;\n\n\t\t\t        B11=tp0.x, B12=tp0.y;\n\t\t\t        B21=tp2.x, B22=tp2.y;\n\t\t\t        B31=tp3.x, B32=tp3.y;\n\n\t\t\t        detA = jsfeat.matmath.determinant_3x3(A11,A12,A13, A21,A22,A23, A31,A32,A33);\n\t\t\t\t\tdetB = jsfeat.matmath.determinant_3x3(B11,B12,B13, B21,B22,B23, B31,B32,B33);\n\n\t\t\t\t\tif(detA*detB < 0) negative++;\n\n\t\t\t\t\t// set4\n\t\t\t\t\tA11=fp0.x, A12=fp0.y;\n\t\t\t        A21=fp1.x, A22=fp1.y;\n\t\t\t        A31=fp3.x, A32=fp3.y;\n\n\t\t\t        B11=tp0.x, B12=tp0.y;\n\t\t\t        B21=tp1.x, B22=tp1.y;\n\t\t\t        B31=tp3.x, B32=tp3.y;\n\n\t\t\t        detA = jsfeat.matmath.determinant_3x3(A11,A12,A13, A21,A22,A23, A31,A32,A33);\n\t\t\t\t\tdetB = jsfeat.matmath.determinant_3x3(B11,B12,B13, B21,B22,B23, B31,B32,B33);\n\n\t\t\t\t\tif(detA*detB < 0) negative++;\n\n\t\t\t        if(negative != 0 && negative != 4) {\n\t\t\t        \treturn false;\n\t\t\t        }\n\t\t\t    }\n\t            return true; // all good\n\t        }\n\n\t        return homography2d;\n\t    })();\n\n\t    return {\n\n    \t\taffine2d:affine2d,\n    \t\thomography2d:homography2d\n\n    \t};\n\n    })();\n\n    var ransac_params_t = (function () {\n        function ransac_params_t(size, thresh, eps, prob) {\n            if (typeof size === \"undefined\") { size=0; }\n            if (typeof thresh === \"undefined\") { thresh=0.5; }\n            if (typeof eps === \"undefined\") { eps=0.5; }\n            if (typeof prob === \"undefined\") { prob=0.99; }\n\n            this.size = size;\n            this.thresh = thresh;\n            this.eps = eps;\n            this.prob = prob;\n        };\n        ransac_params_t.prototype.update_iters = function(_eps, max_iters) {\n\t        var num = Math.log(1 - this.prob);\n\t        var denom = Math.log(1 - Math.pow(1 - _eps, this.size));\n\t        return (denom >= 0 || -num >= max_iters*(-denom) ? max_iters : Math.round(num/denom))|0;\n        };\n        return ransac_params_t;\n    })();\n\n    var motion_estimator = (function() {\n\n    \tvar get_subset = function(kernel, from, to, need_cnt, max_cnt, from_sub, to_sub) {\n    \t\tvar max_try = 1000;\n    \t\tvar indices = [];\n\t\t    var i=0, j=0, ssiter=0, idx_i=0, ok=false;\n\t\t    for(; ssiter < max_try; ++ssiter)  {\n\t\t        i = 0;\n\t\t        for (; i < need_cnt && ssiter < max_try;) {\n\t\t            ok = false;\n\t\t            idx_i = 0;\n\t\t            while (!ok) {\n\t\t                ok = true;\n\t\t                idx_i = indices[i] = Math.floor(Math.random() * max_cnt)|0;\n\t\t                for (j = 0; j < i; ++j) {\n\t\t                    if (idx_i == indices[j])\n\t\t                    { ok = false; break; }\n\t\t                }\n\t\t            }\n\t\t            from_sub[i] = from[idx_i];\n\t\t            to_sub[i] = to[idx_i];\n\t\t            if( !kernel.check_subset( from_sub, to_sub, i+1 ) ) {\n\t\t                ssiter++;\n\t\t                continue;\n\t\t            }\n\t\t            ++i;\n\t\t        }\n\t\t        break;\n\t\t    }\n\n\t\t    return (i == need_cnt && ssiter < max_try);\n    \t}\n\n    \tvar find_inliers = function(kernel, model, from, to, count, thresh, err, mask) {\n    \t\tvar numinliers = 0, i=0, f=0;\n    \t\tvar t = thresh*thresh;\n\n    \t\tkernel.error(from, to, model, err, count);\n\n\t\t    for(; i < count; ++i) {\n\t\t        f = err[i] <= t;\n\t\t        mask[i] = f;\n\t\t        numinliers += f;\n\t\t    }\n\t\t    return numinliers;\n    \t}\n\n    \treturn {\n\n    \t\transac: function(params, kernel, from, to, count, model, mask, max_iters) {\n    \t\t\tif (typeof max_iters === \"undefined\") { max_iters=1000; }\n\n    \t\t\tif(count < params.size) return false;\n\n    \t\t\tvar model_points = params.size;\n\t\t\t    var niters = max_iters, iter=0;\n\t\t\t    var result = false;\n\n\t\t\t    var subset0 = [];\n\t\t\t    var subset1 = [];\n\t\t\t    var found = false;\n\n\t\t\t    var mc=model.cols,mr=model.rows;\n                var dt = model.type | jsfeat.C1_t;\n\n\t\t\t    var m_buff = jsfeat.cache.get_buffer((mc*mr)<<3);\n\t\t\t    var ms_buff = jsfeat.cache.get_buffer(count);\n\t\t\t    var err_buff = jsfeat.cache.get_buffer(count<<2);\n\t\t\t    var M = new jsfeat.matrix_t(mc, mr, dt, m_buff.data);\n\t\t\t    var curr_mask = new jsfeat.matrix_t(count, 1, jsfeat.U8C1_t, ms_buff.data);\n\n\t\t\t    var inliers_max = -1, numinliers=0;\n\t\t\t    var nmodels = 0;\n\n\t\t\t    var err = err_buff.f32;\n\n\t\t\t    // special case\n\t\t\t    if(count == model_points) {\n\t\t\t        if(kernel.run(from, to, M, count) <= 0) {\n\t\t\t        \tjsfeat.cache.put_buffer(m_buff);\n\t\t\t        \tjsfeat.cache.put_buffer(ms_buff);\n\t\t\t        \tjsfeat.cache.put_buffer(err_buff);\n\t\t\t        \treturn false;\n\t\t\t        }\n\n\t\t\t        M.copy_to(model);\n\t\t\t        if(mask) {\n\t\t\t        \twhile(--count >= 0) {\n\t\t\t        \t\tmask.data[count] = 1;\n\t\t\t        \t}\n\t\t\t        }\n\t\t\t        jsfeat.cache.put_buffer(m_buff);\n\t\t\t        jsfeat.cache.put_buffer(ms_buff);\n\t\t\t        jsfeat.cache.put_buffer(err_buff);\n\t\t\t        return true;\n\t\t\t    }\n\n\t\t\t    for (; iter < niters; ++iter) {\n\t\t\t        // generate subset\n\t\t\t        found = get_subset(kernel, from, to, model_points, count, subset0, subset1);\n\t\t\t        if(!found) {\n\t\t\t            if(iter == 0) {\n\t\t\t            \tjsfeat.cache.put_buffer(m_buff);\n\t\t\t            \tjsfeat.cache.put_buffer(ms_buff);\n\t\t\t            \tjsfeat.cache.put_buffer(err_buff);\n\t\t\t                return false;\n\t\t\t            }\n\t\t\t            break;\n\t\t\t        }\n\n\t\t\t        nmodels = kernel.run( subset0, subset1, M, model_points );\n\t\t\t        if(nmodels <= 0)\n\t\t\t            continue;\n\n\t\t\t        // TODO handle multimodel output\n\n\t\t\t        numinliers = find_inliers(kernel, M, from, to, count, params.thresh, err, curr_mask.data);\n\n\t\t\t        if( numinliers > Math.max(inliers_max, model_points-1) ) {\n\t\t\t            M.copy_to(model);\n\t\t\t            inliers_max = numinliers;\n\t\t\t            if(mask) curr_mask.copy_to(mask);\n\t\t\t            niters = params.update_iters((count - numinliers)/count, niters);\n\t\t\t            result = true;\n\t\t\t        }\n\t\t\t    }\n\n\t\t\t    jsfeat.cache.put_buffer(m_buff);\n\t\t\t    jsfeat.cache.put_buffer(ms_buff);\n\t\t\t    jsfeat.cache.put_buffer(err_buff);\n\n\t\t\t    return result;\n    \t\t},\n\n    \t\tlmeds: function(params, kernel, from, to, count, model, mask, max_iters) {\n    \t\t\tif (typeof max_iters === \"undefined\") { max_iters=1000; }\n\n    \t\t\tif(count < params.size) return false;\n\n    \t\t\tvar model_points = params.size;\n\t\t\t    var niters = max_iters, iter=0;\n\t\t\t    var result = false;\n\n\t\t\t    var subset0 = [];\n\t\t\t    var subset1 = [];\n\t\t\t    var found = false;\n\n\t\t\t    var mc=model.cols,mr=model.rows;\n                var dt = model.type | jsfeat.C1_t;\n\n\t\t\t    var m_buff = jsfeat.cache.get_buffer((mc*mr)<<3);\n\t\t\t    var ms_buff = jsfeat.cache.get_buffer(count);\n\t\t\t    var err_buff = jsfeat.cache.get_buffer(count<<2);\n\t\t\t    var M = new jsfeat.matrix_t(mc, mr, dt, m_buff.data);\n\t\t\t    var curr_mask = new jsfeat.matrix_t(count, 1, jsfeat.U8_t|jsfeat.C1_t, ms_buff.data);\n\n\t\t\t    var numinliers=0;\n\t\t\t    var nmodels = 0;\n\n\t\t\t    var err = err_buff.f32;\n\t\t\t    var min_median = 1000000000.0, sigma=0.0, median=0.0;\n\n\t\t\t    params.eps = 0.45;\n\t\t\t    niters = params.update_iters(params.eps, niters);\n\n\t\t\t    // special case\n\t\t\t    if(count == model_points) {\n\t\t\t        if(kernel.run(from, to, M, count) <= 0) {\n\t\t\t        \tjsfeat.cache.put_buffer(m_buff);\n\t\t\t        \tjsfeat.cache.put_buffer(ms_buff);\n\t\t\t        \tjsfeat.cache.put_buffer(err_buff);\n\t\t\t        \treturn false;\n\t\t\t        }\n\n\t\t\t        M.copy_to(model);\n\t\t\t        if(mask) {\n\t\t\t        \twhile(--count >= 0) {\n\t\t\t        \t\tmask.data[count] = 1;\n\t\t\t        \t}\n\t\t\t        }\n\t\t\t        jsfeat.cache.put_buffer(m_buff);\n\t\t\t        jsfeat.cache.put_buffer(ms_buff);\n\t\t\t        jsfeat.cache.put_buffer(err_buff);\n\t\t\t        return true;\n\t\t\t    }\n\n\t\t\t    for (; iter < niters; ++iter) {\n\t\t\t        // generate subset\n\t\t\t        found = get_subset(kernel, from, to, model_points, count, subset0, subset1);\n\t\t\t        if(!found) {\n\t\t\t            if(iter == 0) {\n\t\t\t            \tjsfeat.cache.put_buffer(m_buff);\n\t\t\t            \tjsfeat.cache.put_buffer(ms_buff);\n\t\t\t            \tjsfeat.cache.put_buffer(err_buff);\n\t\t\t                return false;\n\t\t\t            }\n\t\t\t            break;\n\t\t\t        }\n\n\t\t\t        nmodels = kernel.run( subset0, subset1, M, model_points );\n\t\t\t        if(nmodels <= 0)\n\t\t\t            continue;\n\n\t\t\t        // TODO handle multimodel output\n\n\t\t\t        kernel.error(from, to, M, err, count);\n\t\t\t        median = jsfeat.math.median(err, 0, count-1);\n\n\t\t\t        if(median < min_median) {\n\t\t\t            min_median = median;\n\t\t\t            M.copy_to(model);\n\t\t\t            result = true;\n\t\t\t        }\n\t\t\t    }\n\n\t\t\t    if(result) {\n\t\t\t        sigma = 2.5*1.4826*(1 + 5.0/(count - model_points))*Math.sqrt(min_median);\n\t\t\t        sigma = Math.max(sigma, 0.001);\n\n\t\t\t        numinliers = find_inliers(kernel, model, from, to, count, sigma, err, curr_mask.data);\n\t\t\t        if(mask) curr_mask.copy_to(mask);\n\t\t\t        \n\t\t\t        result = numinliers >= model_points;\n\t\t\t    }\n\n\t\t\t    jsfeat.cache.put_buffer(m_buff);\n\t\t\t    jsfeat.cache.put_buffer(ms_buff);\n\t\t\t    jsfeat.cache.put_buffer(err_buff);\n\n\t\t\t    return result;\n    \t\t}\n\n    \t};\n\n    })();\n\n    global.ransac_params_t = ransac_params_t;\n    global.motion_model = motion_model;\n    global.motion_estimator = motion_estimator;\n\n})(jsfeat);\n/**\n * @author Eugene Zatepyakin / http://inspirit.ru/\n */\n\n(function(global) {\n    \"use strict\";\n    //\n\n    var imgproc = (function() {\n\n        var _resample_u8 = function(src, dst, nw, nh) {\n            var xofs_count=0;\n            var ch=src.channel,w=src.cols,h=src.rows;\n            var src_d=src.data,dst_d=dst.data;\n            var scale_x = w / nw, scale_y = h / nh;\n            var inv_scale_256 = (scale_x * scale_y * 0x10000)|0;\n            var dx=0,dy=0,sx=0,sy=0,sx1=0,sx2=0,i=0,k=0,fsx1=0.0,fsx2=0.0;\n            var a=0,b=0,dxn=0,alpha=0,beta=0,beta1=0;\n\n            var buf_node = jsfeat.cache.get_buffer((nw*ch)<<2);\n            var sum_node = jsfeat.cache.get_buffer((nw*ch)<<2);\n            var xofs_node = jsfeat.cache.get_buffer((w*2*3)<<2);\n\n            var buf = buf_node.i32;\n            var sum = sum_node.i32;\n            var xofs = xofs_node.i32;\n\n            for (; dx < nw; dx++) {\n                fsx1 = dx * scale_x, fsx2 = fsx1 + scale_x;\n                sx1 = (fsx1 + 1.0 - 1e-6)|0, sx2 = fsx2|0;\n                sx1 = Math.min(sx1, w - 1);\n                sx2 = Math.min(sx2, w - 1);\n\n                if(sx1 > fsx1) {\n                    xofs[k++] = (dx * ch)|0;\n                    xofs[k++] = ((sx1 - 1)*ch)|0; \n                    xofs[k++] = ((sx1 - fsx1) * 0x100)|0;\n                    xofs_count++;\n                }\n                for(sx = sx1; sx < sx2; sx++){\n                    xofs_count++;\n                    xofs[k++] = (dx * ch)|0;\n                    xofs[k++] = (sx * ch)|0;\n                    xofs[k++] = 256;\n                }\n                if(fsx2 - sx2 > 1e-3) {\n                    xofs_count++;\n                    xofs[k++] = (dx * ch)|0;\n                    xofs[k++] = (sx2 * ch)|0;\n                    xofs[k++] = ((fsx2 - sx2) * 256)|0;\n                }\n            }\n\n            for (dx = 0; dx < nw * ch; dx++) {\n                buf[dx] = sum[dx] = 0;\n            }\n            dy = 0;\n            for (sy = 0; sy < h; sy++) {\n                a = w * sy;\n                for (k = 0; k < xofs_count; k++) {\n                    dxn = xofs[k*3];\n                    sx1 = xofs[k*3+1];\n                    alpha = xofs[k*3+2];\n                    for (i = 0; i < ch; i++) {\n                        buf[dxn + i] += src_d[a+sx1+i] * alpha;\n                    }\n                }\n                if ((dy + 1) * scale_y <= sy + 1 || sy == h - 1) {\n                    beta = (Math.max(sy + 1 - (dy + 1) * scale_y, 0.0) * 256)|0;\n                    beta1 = 256 - beta;\n                    b = nw * dy;\n                    if (beta <= 0) {\n                        for (dx = 0; dx < nw * ch; dx++) {\n                            dst_d[b+dx] = Math.min(Math.max((sum[dx] + buf[dx] * 256) / inv_scale_256, 0), 255);\n                            sum[dx] = buf[dx] = 0;\n                        }\n                    } else {\n                        for (dx = 0; dx < nw * ch; dx++) {\n                            dst_d[b+dx] = Math.min(Math.max((sum[dx] + buf[dx] * beta1) / inv_scale_256, 0), 255);\n                            sum[dx] = buf[dx] * beta;\n                            buf[dx] = 0;\n                        }\n                    }\n                    dy++;\n                } else {\n                    for(dx = 0; dx < nw * ch; dx++) {\n                        sum[dx] += buf[dx] * 256;\n                        buf[dx] = 0;\n                    }\n                }\n            }\n\n            jsfeat.cache.put_buffer(sum_node);\n            jsfeat.cache.put_buffer(buf_node);\n            jsfeat.cache.put_buffer(xofs_node);\n        }\n\n        var _resample = function(src, dst, nw, nh) {\n            var xofs_count=0;\n            var ch=src.channel,w=src.cols,h=src.rows;\n            var src_d=src.data,dst_d=dst.data;\n            var scale_x = w / nw, scale_y = h / nh;\n            var scale = 1.0 / (scale_x * scale_y);\n            var dx=0,dy=0,sx=0,sy=0,sx1=0,sx2=0,i=0,k=0,fsx1=0.0,fsx2=0.0;\n            var a=0,b=0,dxn=0,alpha=0.0,beta=0.0,beta1=0.0;\n\n            var buf_node = jsfeat.cache.get_buffer((nw*ch)<<2);\n            var sum_node = jsfeat.cache.get_buffer((nw*ch)<<2);\n            var xofs_node = jsfeat.cache.get_buffer((w*2*3)<<2);\n\n            var buf = buf_node.f32;\n            var sum = sum_node.f32;\n            var xofs = xofs_node.f32;\n\n            for (; dx < nw; dx++) {\n                fsx1 = dx * scale_x, fsx2 = fsx1 + scale_x;\n                sx1 = (fsx1 + 1.0 - 1e-6)|0, sx2 = fsx2|0;\n                sx1 = Math.min(sx1, w - 1);\n                sx2 = Math.min(sx2, w - 1);\n\n                if(sx1 > fsx1) {\n                    xofs_count++;\n                    xofs[k++] = ((sx1 - 1)*ch)|0;\n                    xofs[k++] = (dx * ch)|0;\n                    xofs[k++] = (sx1 - fsx1) * scale;\n                }\n                for(sx = sx1; sx < sx2; sx++){\n                    xofs_count++;\n                    xofs[k++] = (sx * ch)|0;\n                    xofs[k++] = (dx * ch)|0; \n                    xofs[k++] = scale;\n                }\n                if(fsx2 - sx2 > 1e-3) {\n                    xofs_count++;\n                    xofs[k++] = (sx2 * ch)|0;\n                    xofs[k++] = (dx * ch)|0;\n                    xofs[k++] = (fsx2 - sx2) * scale;\n                }\n            }\n\n            for (dx = 0; dx < nw * ch; dx++) {\n                buf[dx] = sum[dx] = 0;\n            }\n            dy = 0;\n            for (sy = 0; sy < h; sy++) {\n                a = w * sy;\n                for (k = 0; k < xofs_count; k++) {\n                    sx1 = xofs[k*3]|0;\n                    dxn = xofs[k*3+1]|0;\n                    alpha = xofs[k*3+2];\n                    for (i = 0; i < ch; i++) {\n                        buf[dxn + i] += src_d[a+sx1+i] * alpha;\n                    }\n                }\n                if ((dy + 1) * scale_y <= sy + 1 || sy == h - 1) {\n                    beta = Math.max(sy + 1 - (dy + 1) * scale_y, 0.0);\n                    beta1 = 1.0 - beta;\n                    b = nw * dy;\n                    if (Math.abs(beta) < 1e-3) {\n                        for (dx = 0; dx < nw * ch; dx++) {\n                            dst_d[b+dx] = sum[dx] + buf[dx];\n                            sum[dx] = buf[dx] = 0;\n                        }\n                    } else {\n                        for (dx = 0; dx < nw * ch; dx++) {\n                            dst_d[b+dx] = sum[dx] + buf[dx] * beta1;\n                            sum[dx] = buf[dx] * beta;\n                            buf[dx] = 0;\n                        }\n                    }\n                    dy++;\n                } else {\n                    for(dx = 0; dx < nw * ch; dx++) {\n                        sum[dx] += buf[dx]; \n                        buf[dx] = 0;\n                    }\n                }\n            }\n            jsfeat.cache.put_buffer(sum_node);\n            jsfeat.cache.put_buffer(buf_node);\n            jsfeat.cache.put_buffer(xofs_node);\n        }\n\n        var _convol_u8 = function(buf, src_d, dst_d, w, h, filter, kernel_size, half_kernel) {\n            var i=0,j=0,k=0,sp=0,dp=0,sum=0,sum1=0,sum2=0,sum3=0,f0=filter[0],fk=0;\n            var w2=w<<1,w3=w*3,w4=w<<2;\n            // hor pass\n            for (; i < h; ++i) { \n                sum = src_d[sp];\n                for (j = 0; j < half_kernel; ++j) {\n                    buf[j] = sum;\n                }\n                for (j = 0; j <= w-2; j+=2) {\n                    buf[j + half_kernel] = src_d[sp+j];\n                    buf[j + half_kernel+1] = src_d[sp+j+1];\n                }\n                for (; j < w; ++j) {\n                    buf[j + half_kernel] = src_d[sp+j];\n                }\n                sum = src_d[sp+w-1];\n                for (j = w; j < half_kernel + w; ++j) {\n                    buf[j + half_kernel] = sum;\n                }\n                for (j = 0; j <= w-4; j+=4) {\n                    sum = buf[j] * f0, \n                    sum1 = buf[j+1] * f0,\n                    sum2 = buf[j+2] * f0,\n                    sum3 = buf[j+3] * f0;\n                    for (k = 1; k < kernel_size; ++k) {\n                        fk = filter[k];\n                        sum += buf[k + j] * fk;\n                        sum1 += buf[k + j+1] * fk;\n                        sum2 += buf[k + j+2] * fk;\n                        sum3 += buf[k + j+3] * fk;\n                    }\n                    dst_d[dp+j] = Math.min(sum >> 8, 255);\n                    dst_d[dp+j+1] = Math.min(sum1 >> 8, 255);\n                    dst_d[dp+j+2] = Math.min(sum2 >> 8, 255);\n                    dst_d[dp+j+3] = Math.min(sum3 >> 8, 255);\n                }\n                for (; j < w; ++j) {\n                    sum = buf[j] * f0;\n                    for (k = 1; k < kernel_size; ++k) {\n                        sum += buf[k + j] * filter[k];\n                    }\n                    dst_d[dp+j] = Math.min(sum >> 8, 255);\n                }\n                sp += w;\n                dp += w;\n            }\n\n            // vert pass\n            for (i = 0; i < w; ++i) {\n                sum = dst_d[i];\n                for (j = 0; j < half_kernel; ++j) {\n                    buf[j] = sum;\n                }\n                k = i;\n                for (j = 0; j <= h-2; j+=2, k+=w2) {\n                    buf[j+half_kernel] = dst_d[k];\n                    buf[j+half_kernel+1] = dst_d[k+w];\n                }\n                for (; j < h; ++j, k+=w) {\n                    buf[j+half_kernel] = dst_d[k];\n                }\n                sum = dst_d[(h-1)*w + i];\n                for (j = h; j < half_kernel + h; ++j) {\n                    buf[j + half_kernel] = sum;\n                }\n                dp = i;\n                for (j = 0; j <= h-4; j+=4, dp+=w4) { \n                    sum = buf[j] * f0, \n                    sum1 = buf[j+1] * f0,\n                    sum2 = buf[j+2] * f0,\n                    sum3 = buf[j+3] * f0;\n                    for (k = 1; k < kernel_size; ++k) {\n                        fk = filter[k];\n                        sum += buf[k + j] * fk;\n                        sum1 += buf[k + j+1] * fk;\n                        sum2 += buf[k + j+2] * fk;\n                        sum3 += buf[k + j+3] * fk;\n                    }\n                    dst_d[dp] = Math.min(sum >> 8, 255);\n                    dst_d[dp+w] = Math.min(sum1 >> 8, 255);\n                    dst_d[dp+w2] = Math.min(sum2 >> 8, 255);\n                    dst_d[dp+w3] = Math.min(sum3 >> 8, 255);\n                }\n                for (; j < h; ++j, dp+=w) {\n                    sum = buf[j] * f0;\n                    for (k = 1; k < kernel_size; ++k) {\n                        sum += buf[k + j] * filter[k];\n                    }\n                    dst_d[dp] = Math.min(sum >> 8, 255);\n                }\n            }\n        }\n\n        var _convol = function(buf, src_d, dst_d, w, h, filter, kernel_size, half_kernel) {\n            var i=0,j=0,k=0,sp=0,dp=0,sum=0.0,sum1=0.0,sum2=0.0,sum3=0.0,f0=filter[0],fk=0.0;\n            var w2=w<<1,w3=w*3,w4=w<<2;\n            // hor pass\n            for (; i < h; ++i) { \n                sum = src_d[sp];\n                for (j = 0; j < half_kernel; ++j) {\n                    buf[j] = sum;\n                }\n                for (j = 0; j <= w-2; j+=2) {\n                    buf[j + half_kernel] = src_d[sp+j];\n                    buf[j + half_kernel+1] = src_d[sp+j+1];\n                }\n                for (; j < w; ++j) {\n                    buf[j + half_kernel] = src_d[sp+j];\n                }\n                sum = src_d[sp+w-1];\n                for (j = w; j < half_kernel + w; ++j) {\n                    buf[j + half_kernel] = sum;\n                }\n                for (j = 0; j <= w-4; j+=4) {\n                    sum = buf[j] * f0, \n                    sum1 = buf[j+1] * f0,\n                    sum2 = buf[j+2] * f0,\n                    sum3 = buf[j+3] * f0;\n                    for (k = 1; k < kernel_size; ++k) {\n                        fk = filter[k];\n                        sum += buf[k + j] * fk;\n                        sum1 += buf[k + j+1] * fk;\n                        sum2 += buf[k + j+2] * fk;\n                        sum3 += buf[k + j+3] * fk;\n                    }\n                    dst_d[dp+j] = sum;\n                    dst_d[dp+j+1] = sum1;\n                    dst_d[dp+j+2] = sum2;\n                    dst_d[dp+j+3] = sum3;\n                }\n                for (; j < w; ++j) {\n                    sum = buf[j] * f0;\n                    for (k = 1; k < kernel_size; ++k) {\n                        sum += buf[k + j] * filter[k];\n                    }\n                    dst_d[dp+j] = sum;\n                }\n                sp += w;\n                dp += w;\n            }\n\n            // vert pass\n            for (i = 0; i < w; ++i) {\n                sum = dst_d[i];\n                for (j = 0; j < half_kernel; ++j) {\n                    buf[j] = sum;\n                }\n                k = i;\n                for (j = 0; j <= h-2; j+=2, k+=w2) {\n                    buf[j+half_kernel] = dst_d[k];\n                    buf[j+half_kernel+1] = dst_d[k+w];\n                }\n                for (; j < h; ++j, k+=w) {\n                    buf[j+half_kernel] = dst_d[k];\n                }\n                sum = dst_d[(h-1)*w + i];\n                for (j = h; j < half_kernel + h; ++j) {\n                    buf[j + half_kernel] = sum;\n                }\n                dp = i;\n                for (j = 0; j <= h-4; j+=4, dp+=w4) { \n                    sum = buf[j] * f0, \n                    sum1 = buf[j+1] * f0,\n                    sum2 = buf[j+2] * f0,\n                    sum3 = buf[j+3] * f0;\n                    for (k = 1; k < kernel_size; ++k) {\n                        fk = filter[k];\n                        sum += buf[k + j] * fk;\n                        sum1 += buf[k + j+1] * fk;\n                        sum2 += buf[k + j+2] * fk;\n                        sum3 += buf[k + j+3] * fk;\n                    }\n                    dst_d[dp] = sum;\n                    dst_d[dp+w] = sum1;\n                    dst_d[dp+w2] = sum2;\n                    dst_d[dp+w3] = sum3;\n                }\n                for (; j < h; ++j, dp+=w) {\n                    sum = buf[j] * f0;\n                    for (k = 1; k < kernel_size; ++k) {\n                        sum += buf[k + j] * filter[k];\n                    }\n                    dst_d[dp] = sum;\n                }\n            }\n        }\n\n        return {\n            // TODO: add support for RGB/BGR order\n            // for raw arrays\n            grayscale: function(src, w, h, dst, code) {\n                // this is default image data representation in browser\n                if (typeof code === \"undefined\") { code = jsfeat.COLOR_RGBA2GRAY; }\n                var x=0, y=0, i=0, j=0, ir=0,jr=0;\n                var coeff_r = 4899, coeff_g = 9617, coeff_b = 1868, cn = 4;\n\n                if(code == jsfeat.COLOR_BGRA2GRAY || code == jsfeat.COLOR_BGR2GRAY) {\n                    coeff_r = 1868;\n                    coeff_b = 4899;\n                }\n                if(code == jsfeat.COLOR_RGB2GRAY || code == jsfeat.COLOR_BGR2GRAY) {\n                    cn = 3;\n                }\n                var cn2 = cn<<1, cn3 = (cn*3)|0;\n\n                dst.resize(w, h, 1);\n                var dst_u8 = dst.data;\n\n                for(y = 0; y < h; ++y, j+=w, i+=w*cn) {\n                    for(x = 0, ir = i, jr = j; x <= w-4; x+=4, ir+=cn<<2, jr+=4) {\n                        dst_u8[jr]     = (src[ir] * coeff_r + src[ir+1] * coeff_g + src[ir+2] * coeff_b + 8192) >> 14;\n                        dst_u8[jr + 1] = (src[ir+cn] * coeff_r + src[ir+cn+1] * coeff_g + src[ir+cn+2] * coeff_b + 8192) >> 14;\n                        dst_u8[jr + 2] = (src[ir+cn2] * coeff_r + src[ir+cn2+1] * coeff_g + src[ir+cn2+2] * coeff_b + 8192) >> 14;\n                        dst_u8[jr + 3] = (src[ir+cn3] * coeff_r + src[ir+cn3+1] * coeff_g + src[ir+cn3+2] * coeff_b + 8192) >> 14;\n                    }\n                    for (; x < w; ++x, ++jr, ir+=cn) {\n                        dst_u8[jr] = (src[ir] * coeff_r + src[ir+1] * coeff_g + src[ir+2] * coeff_b + 8192) >> 14;\n                    }\n                }\n            },\n            // derived from CCV library\n            resample: function(src, dst, nw, nh) {\n                var h=src.rows,w=src.cols;\n                if (h > nh && w > nw) {\n                    dst.resize(nw, nh, src.channel);\n                    // using the fast alternative (fix point scale, 0x100 to avoid overflow)\n                    if (src.type&jsfeat.U8_t && dst.type&jsfeat.U8_t && h * w / (nh * nw) < 0x100) {\n                        _resample_u8(src, dst, nw, nh);\n                    } else {\n                        _resample(src, dst, nw, nh);\n                    }\n                }\n            },\n\n            box_blur_gray: function(src, dst, radius, options) {\n                if (typeof options === \"undefined\") { options = 0; }\n                var w=src.cols, h=src.rows, h2=h<<1, w2=w<<1;\n                var i=0,x=0,y=0,end=0;\n                var windowSize = ((radius << 1) + 1)|0;\n                var radiusPlusOne = (radius + 1)|0, radiusPlus2 = (radiusPlusOne+1)|0;\n                var scale = options&jsfeat.BOX_BLUR_NOSCALE ? 1 : (1.0 / (windowSize*windowSize));\n\n                var tmp_buff = jsfeat.cache.get_buffer((w*h)<<2);\n\n                var sum=0, dstIndex=0, srcIndex = 0, nextPixelIndex=0, previousPixelIndex=0;\n                var data_i32 = tmp_buff.i32; // to prevent overflow\n                var data_u8 = src.data;\n                var hold=0;\n\n                dst.resize(w, h, src.channel);\n\n                // first pass\n                // no need to scale \n                //data_u8 = src.data;\n                //data_i32 = tmp;\n                for (y = 0; y < h; ++y) {\n                    dstIndex = y;\n                    sum = radiusPlusOne * data_u8[srcIndex];\n\n                    for(i = (srcIndex+1)|0, end=(srcIndex+radius)|0; i <= end; ++i) {\n                        sum += data_u8[i];\n                    }\n\n                    nextPixelIndex = (srcIndex + radiusPlusOne)|0;\n                    previousPixelIndex = srcIndex;\n                    hold = data_u8[previousPixelIndex];\n                    for(x = 0; x < radius; ++x, dstIndex += h) {\n                        data_i32[dstIndex] = sum;\n                        sum += data_u8[nextPixelIndex]- hold;\n                        nextPixelIndex ++;\n                    }\n                    for(; x < w-radiusPlus2; x+=2, dstIndex += h2) {\n                        data_i32[dstIndex] = sum;\n                        sum += data_u8[nextPixelIndex]- data_u8[previousPixelIndex];\n\n                        data_i32[dstIndex+h] = sum;\n                        sum += data_u8[nextPixelIndex+1]- data_u8[previousPixelIndex+1];\n\n                        nextPixelIndex +=2;\n                        previousPixelIndex +=2;\n                    }\n                    for(; x < w-radiusPlusOne; ++x, dstIndex += h) {\n                        data_i32[dstIndex] = sum;\n                        sum += data_u8[nextPixelIndex]- data_u8[previousPixelIndex];\n\n                        nextPixelIndex ++;\n                        previousPixelIndex ++;\n                    }\n                    \n                    hold = data_u8[nextPixelIndex-1];\n                    for(; x < w; ++x, dstIndex += h) {\n                        data_i32[dstIndex] = sum;\n\n                        sum += hold- data_u8[previousPixelIndex];\n                        previousPixelIndex ++;\n                    }\n\n                    srcIndex += w;\n                }\n                //\n                // second pass\n                srcIndex = 0;\n                //data_i32 = tmp; // this is a transpose\n                data_u8 = dst.data;\n\n                // dont scale result\n                if(scale == 1) {\n                    for (y = 0; y < w; ++y) {\n                        dstIndex = y;\n                        sum = radiusPlusOne * data_i32[srcIndex];\n\n                        for(i = (srcIndex+1)|0, end=(srcIndex+radius)|0; i <= end; ++i) {\n                            sum += data_i32[i];\n                        }\n\n                        nextPixelIndex = srcIndex + radiusPlusOne;\n                        previousPixelIndex = srcIndex;\n                        hold = data_i32[previousPixelIndex];\n\n                        for(x = 0; x < radius; ++x, dstIndex += w) {\n                            data_u8[dstIndex] = sum;\n                            sum += data_i32[nextPixelIndex]- hold;\n                            nextPixelIndex ++;\n                        }\n                        for(; x < h-radiusPlus2; x+=2, dstIndex += w2) {\n                            data_u8[dstIndex] = sum;\n                            sum += data_i32[nextPixelIndex]- data_i32[previousPixelIndex];\n\n                            data_u8[dstIndex+w] = sum;\n                            sum += data_i32[nextPixelIndex+1]- data_i32[previousPixelIndex+1];\n\n                            nextPixelIndex +=2;\n                            previousPixelIndex +=2;\n                        }\n                        for(; x < h-radiusPlusOne; ++x, dstIndex += w) {\n                            data_u8[dstIndex] = sum;\n\n                            sum += data_i32[nextPixelIndex]- data_i32[previousPixelIndex];\n                            nextPixelIndex ++;\n                            previousPixelIndex ++;\n                        }\n                        hold = data_i32[nextPixelIndex-1];\n                        for(; x < h; ++x, dstIndex += w) {\n                            data_u8[dstIndex] = sum;\n\n                            sum += hold- data_i32[previousPixelIndex];\n                            previousPixelIndex ++;\n                        }\n\n                        srcIndex += h;\n                    }\n                } else {\n                    for (y = 0; y < w; ++y) {\n                        dstIndex = y;\n                        sum = radiusPlusOne * data_i32[srcIndex];\n\n                        for(i = (srcIndex+1)|0, end=(srcIndex+radius)|0; i <= end; ++i) {\n                            sum += data_i32[i];\n                        }\n\n                        nextPixelIndex = srcIndex + radiusPlusOne;\n                        previousPixelIndex = srcIndex;\n                        hold = data_i32[previousPixelIndex];\n\n                        for(x = 0; x < radius; ++x, dstIndex += w) {\n                            data_u8[dstIndex] = sum*scale;\n                            sum += data_i32[nextPixelIndex]- hold;\n                            nextPixelIndex ++;\n                        }\n                        for(; x < h-radiusPlus2; x+=2, dstIndex += w2) {\n                            data_u8[dstIndex] = sum*scale;\n                            sum += data_i32[nextPixelIndex]- data_i32[previousPixelIndex];\n\n                            data_u8[dstIndex+w] = sum*scale;\n                            sum += data_i32[nextPixelIndex+1]- data_i32[previousPixelIndex+1];\n\n                            nextPixelIndex +=2;\n                            previousPixelIndex +=2;\n                        }\n                        for(; x < h-radiusPlusOne; ++x, dstIndex += w) {\n                            data_u8[dstIndex] = sum*scale;\n\n                            sum += data_i32[nextPixelIndex]- data_i32[previousPixelIndex];\n                            nextPixelIndex ++;\n                            previousPixelIndex ++;\n                        }\n                        hold = data_i32[nextPixelIndex-1];\n                        for(; x < h; ++x, dstIndex += w) {\n                            data_u8[dstIndex] = sum*scale;\n\n                            sum += hold- data_i32[previousPixelIndex];\n                            previousPixelIndex ++;\n                        }\n\n                        srcIndex += h;\n                    }\n                }\n\n                jsfeat.cache.put_buffer(tmp_buff);\n            },\n\n            gaussian_blur: function(src, dst, kernel_size, sigma) {\n                if (typeof sigma === \"undefined\") { sigma = 0.0; }\n                if (typeof kernel_size === \"undefined\") { kernel_size = 0; }\n                kernel_size = kernel_size == 0 ? (Math.max(1, (4.0 * sigma + 1.0 - 1e-8)) * 2 + 1)|0 : kernel_size;\n                var half_kernel = kernel_size >> 1;\n                var w = src.cols, h = src.rows;\n                var data_type = src.type, is_u8 = data_type&jsfeat.U8_t;\n\n                dst.resize(w, h, src.channel);\n\n                var src_d = src.data, dst_d = dst.data;\n                var buf,filter,buf_sz=(kernel_size + Math.max(h, w))|0;\n\n                var buf_node = jsfeat.cache.get_buffer(buf_sz<<2);\n                var filt_node = jsfeat.cache.get_buffer(kernel_size<<2);\n\n                if(is_u8) {\n                    buf = buf_node.i32;\n                    filter = filt_node.i32;\n                } else if(data_type&jsfeat.S32_t) {\n                    buf = buf_node.i32;\n                    filter = filt_node.f32;\n                } else {\n                    buf = buf_node.f32;\n                    filter = filt_node.f32;\n                }\n\n                jsfeat.math.get_gaussian_kernel(kernel_size, sigma, filter, data_type);\n\n                if(is_u8) {\n                    _convol_u8(buf, src_d, dst_d, w, h, filter, kernel_size, half_kernel);\n                } else {\n                    _convol(buf, src_d, dst_d, w, h, filter, kernel_size, half_kernel);\n                }\n\n                jsfeat.cache.put_buffer(buf_node);\n                jsfeat.cache.put_buffer(filt_node);\n            },\n            // assume we always need it for u8 image\n            pyrdown: function(src, dst, sx, sy) {\n                // this is needed for bbf\n                if (typeof sx === \"undefined\") { sx = 0; }\n                if (typeof sy === \"undefined\") { sy = 0; }\n\n                var w = src.cols, h = src.rows;\n                var w2 = w >> 1, h2 = h >> 1;\n                var _w2 = w2 - (sx << 1), _h2 = h2 - (sy << 1);\n                var x=0,y=0,sptr=sx+sy*w,sline=0,dptr=0,dline=0;\n\n                dst.resize(w2, h2, src.channel);\n\n                var src_d = src.data, dst_d = dst.data;\n\n                for(y = 0; y < _h2; ++y) {\n                    sline = sptr;\n                    dline = dptr;\n                    for(x = 0; x <= _w2-2; x+=2, dline+=2, sline += 4) {\n                        dst_d[dline] = (src_d[sline] + src_d[sline+1] +\n                                            src_d[sline+w] + src_d[sline+w+1] + 2) >> 2;\n                        dst_d[dline+1] = (src_d[sline+2] + src_d[sline+3] +\n                                            src_d[sline+w+2] + src_d[sline+w+3] + 2) >> 2;\n                    }\n                    for(; x < _w2; ++x, ++dline, sline += 2) {\n                        dst_d[dline] = (src_d[sline] + src_d[sline+1] +\n                                            src_d[sline+w] + src_d[sline+w+1] + 2) >> 2;\n                    }\n                    sptr += w << 1;\n                    dptr += w2;\n                }\n            },\n\n            // dst: [gx,gy,...]\n            scharr_derivatives: function(src, dst) {\n                var w = src.cols, h = src.rows;\n                var dstep = w<<1,x=0,y=0,x1=0,a,b,c,d,e,f;\n                var srow0=0,srow1=0,srow2=0,drow=0;\n                var trow0,trow1;\n\n                dst.resize(w, h, 2); // 2 channel output gx, gy\n\n                var img = src.data, gxgy=dst.data;\n\n                var buf0_node = jsfeat.cache.get_buffer((w+2)<<2);\n                var buf1_node = jsfeat.cache.get_buffer((w+2)<<2);\n\n                if(src.type&jsfeat.U8_t || src.type&jsfeat.S32_t) {\n                    trow0 = buf0_node.i32;\n                    trow1 = buf1_node.i32;\n                } else {\n                    trow0 = buf0_node.f32;\n                    trow1 = buf1_node.f32;\n                }\n\n                for(; y < h; ++y, srow1+=w) {\n                    srow0 = ((y > 0 ? y-1 : 1)*w)|0;\n                    srow2 = ((y < h-1 ? y+1 : h-2)*w)|0;\n                    drow = (y*dstep)|0;\n                    // do vertical convolution\n                    for(x = 0, x1 = 1; x <= w-2; x+=2, x1+=2) {\n                        a = img[srow0+x], b = img[srow2+x];\n                        trow0[x1] = ( (a + b)*3 + (img[srow1+x])*10 );\n                        trow1[x1] = ( b - a );\n                        //\n                        a = img[srow0+x+1], b = img[srow2+x+1];\n                        trow0[x1+1] = ( (a + b)*3 + (img[srow1+x+1])*10 );\n                        trow1[x1+1] = ( b - a );\n                    }\n                    for(; x < w; ++x, ++x1) {\n                        a = img[srow0+x], b = img[srow2+x];\n                        trow0[x1] = ( (a + b)*3 + (img[srow1+x])*10 );\n                        trow1[x1] = ( b - a );\n                    }\n                    // make border\n                    x = (w + 1)|0;\n                    trow0[0] = trow0[1]; trow0[x] = trow0[w];\n                    trow1[0] = trow1[1]; trow1[x] = trow1[w];\n                    // do horizontal convolution, interleave the results and store them\n                    for(x = 0; x <= w-4; x+=4) {\n                        a = trow1[x+2], b = trow1[x+1], c = trow1[x+3], d = trow1[x+4],\n                        e = trow0[x+2], f = trow0[x+3];\n                        gxgy[drow++] = ( e - trow0[x] );\n                        gxgy[drow++] = ( (a + trow1[x])*3 + b*10 );\n                        gxgy[drow++] = ( f - trow0[x+1] );\n                        gxgy[drow++] = ( (c + b)*3 + a*10 );\n\n                        gxgy[drow++] = ( (trow0[x+4] - e) );\n                        gxgy[drow++] = ( ((d + a)*3 + c*10) );\n                        gxgy[drow++] = ( (trow0[x+5] - f) );\n                        gxgy[drow++] = ( ((trow1[x+5] + c)*3 + d*10) );\n                    }\n                    for(; x < w; ++x) {\n                        gxgy[drow++] = ( (trow0[x+2] - trow0[x]) );\n                        gxgy[drow++] = ( ((trow1[x+2] + trow1[x])*3 + trow1[x+1]*10) );\n                    }\n                }\n                jsfeat.cache.put_buffer(buf0_node);\n                jsfeat.cache.put_buffer(buf1_node);\n            },\n\n            // compute gradient using Sobel kernel [1 2 1] * [-1 0 1]^T\n            // dst: [gx,gy,...]\n            sobel_derivatives: function(src, dst) {\n                var w = src.cols, h = src.rows;\n                var dstep = w<<1,x=0,y=0,x1=0,a,b,c,d,e,f;\n                var srow0=0,srow1=0,srow2=0,drow=0;\n                var trow0,trow1;\n\n                dst.resize(w, h, 2); // 2 channel output gx, gy\n\n                var img = src.data, gxgy=dst.data;\n\n                var buf0_node = jsfeat.cache.get_buffer((w+2)<<2);\n                var buf1_node = jsfeat.cache.get_buffer((w+2)<<2);\n\n                if(src.type&jsfeat.U8_t || src.type&jsfeat.S32_t) {\n                    trow0 = buf0_node.i32;\n                    trow1 = buf1_node.i32;\n                } else {\n                    trow0 = buf0_node.f32;\n                    trow1 = buf1_node.f32;\n                }\n\n                for(; y < h; ++y, srow1+=w) {\n                    srow0 = ((y > 0 ? y-1 : 1)*w)|0;\n                    srow2 = ((y < h-1 ? y+1 : h-2)*w)|0;\n                    drow = (y*dstep)|0;\n                    // do vertical convolution\n                    for(x = 0, x1 = 1; x <= w-2; x+=2, x1+=2) {\n                        a = img[srow0+x], b = img[srow2+x];\n                        trow0[x1] = ( (a + b) + (img[srow1+x]*2) );\n                        trow1[x1] = ( b - a );\n                        //\n                        a = img[srow0+x+1], b = img[srow2+x+1];\n                        trow0[x1+1] = ( (a + b) + (img[srow1+x+1]*2) );\n                        trow1[x1+1] = ( b - a );\n                    }\n                    for(; x < w; ++x, ++x1) {\n                        a = img[srow0+x], b = img[srow2+x];\n                        trow0[x1] = ( (a + b) + (img[srow1+x]*2) );\n                        trow1[x1] = ( b - a );\n                    }\n                    // make border\n                    x = (w + 1)|0;\n                    trow0[0] = trow0[1]; trow0[x] = trow0[w];\n                    trow1[0] = trow1[1]; trow1[x] = trow1[w];\n                    // do horizontal convolution, interleave the results and store them\n                    for(x = 0; x <= w-4; x+=4) {\n                        a = trow1[x+2], b = trow1[x+1], c = trow1[x+3], d = trow1[x+4],\n                        e = trow0[x+2], f = trow0[x+3];\n                        gxgy[drow++] = ( e - trow0[x] );\n                        gxgy[drow++] = ( a + trow1[x] + b*2 );\n                        gxgy[drow++] = ( f - trow0[x+1] );\n                        gxgy[drow++] = ( c + b + a*2 );\n\n                        gxgy[drow++] = ( trow0[x+4] - e );\n                        gxgy[drow++] = ( d + a + c*2 );\n                        gxgy[drow++] = ( trow0[x+5] - f );\n                        gxgy[drow++] = ( trow1[x+5] + c + d*2 );\n                    }\n                    for(; x < w; ++x) {\n                        gxgy[drow++] = ( trow0[x+2] - trow0[x] );\n                        gxgy[drow++] = ( trow1[x+2] + trow1[x] + trow1[x+1]*2 );\n                    }\n                }\n                jsfeat.cache.put_buffer(buf0_node);\n                jsfeat.cache.put_buffer(buf1_node);\n            },\n\n            // please note: \n            // dst_(type) size should be cols = src.cols+1, rows = src.rows+1\n            compute_integral_image: function(src, dst_sum, dst_sqsum, dst_tilted) {\n                var w0=src.cols|0,h0=src.rows|0,src_d=src.data;\n                var w1=(w0+1)|0;\n                var s=0,s2=0,p=0,pup=0,i=0,j=0,v=0,k=0;\n\n                if(dst_sum && dst_sqsum) {\n                    // fill first row with zeros\n                    for(; i < w1; ++i) {\n                        dst_sum[i] = 0, dst_sqsum[i] = 0;\n                    }\n                    p = (w1+1)|0, pup = 1;\n                    for(i = 0, k = 0; i < h0; ++i, ++p, ++pup) {\n                        s = s2 = 0;\n                        for(j = 0; j <= w0-2; j+=2, k+=2, p+=2, pup+=2) {\n                            v = src_d[k];\n                            s += v, s2 += v*v;\n                            dst_sum[p] = dst_sum[pup] + s;\n                            dst_sqsum[p] = dst_sqsum[pup] + s2;\n\n                            v = src_d[k+1];\n                            s += v, s2 += v*v;\n                            dst_sum[p+1] = dst_sum[pup+1] + s;\n                            dst_sqsum[p+1] = dst_sqsum[pup+1] + s2;\n                        }\n                        for(; j < w0; ++j, ++k, ++p, ++pup) {\n                            v = src_d[k];\n                            s += v, s2 += v*v;\n                            dst_sum[p] = dst_sum[pup] + s;\n                            dst_sqsum[p] = dst_sqsum[pup] + s2;\n                        }\n                    }\n                } else if(dst_sum) {\n                    // fill first row with zeros\n                    for(; i < w1; ++i) {\n                        dst_sum[i] = 0;\n                    }\n                    p = (w1+1)|0, pup = 1;\n                    for(i = 0, k = 0; i < h0; ++i, ++p, ++pup) {\n                        s = 0;\n                        for(j = 0; j <= w0-2; j+=2, k+=2, p+=2, pup+=2) {\n                            s += src_d[k];\n                            dst_sum[p] = dst_sum[pup] + s;\n                            s += src_d[k+1];\n                            dst_sum[p+1] = dst_sum[pup+1] + s;\n                        }\n                        for(; j < w0; ++j, ++k, ++p, ++pup) {\n                            s += src_d[k];\n                            dst_sum[p] = dst_sum[pup] + s;\n                        }\n                    }\n                } else if(dst_sqsum) {\n                    // fill first row with zeros\n                    for(; i < w1; ++i) {\n                        dst_sqsum[i] = 0;\n                    }\n                    p = (w1+1)|0, pup = 1;\n                    for(i = 0, k = 0; i < h0; ++i, ++p, ++pup) {\n                        s2 = 0;\n                        for(j = 0; j <= w0-2; j+=2, k+=2, p+=2, pup+=2) {\n                            v = src_d[k];\n                            s2 += v*v;\n                            dst_sqsum[p] = dst_sqsum[pup] + s2;\n                            v = src_d[k+1];\n                            s2 += v*v;\n                            dst_sqsum[p+1] = dst_sqsum[pup+1] + s2;\n                        }\n                        for(; j < w0; ++j, ++k, ++p, ++pup) {\n                            v = src_d[k];\n                            s2 += v*v;\n                            dst_sqsum[p] = dst_sqsum[pup] + s2;\n                        }\n                    }\n                }\n\n                if(dst_tilted) {\n                    // fill first row with zeros\n                    for(i = 0; i < w1; ++i) {\n                        dst_tilted[i] = 0;\n                    }\n                    // diagonal\n                    p = (w1+1)|0, pup = 0;\n                    for(i = 0, k = 0; i < h0; ++i, ++p, ++pup) {\n                        for(j = 0; j <= w0-2; j+=2, k+=2, p+=2, pup+=2) {\n                            dst_tilted[p] = src_d[k] + dst_tilted[pup];\n                            dst_tilted[p+1] = src_d[k+1] + dst_tilted[pup+1];\n                        }\n                        for(; j < w0; ++j, ++k, ++p, ++pup) {\n                            dst_tilted[p] = src_d[k] + dst_tilted[pup];\n                        }\n                    }\n                    // diagonal\n                    p = (w1+w0)|0, pup = w0;\n                    for(i = 0; i < h0; ++i, p+=w1, pup+=w1) {\n                        dst_tilted[p] += dst_tilted[pup];\n                    }\n\n                    for(j = w0-1; j > 0; --j) {\n                        p = j+h0*w1, pup=p-w1;\n                        for(i = h0; i > 0; --i, p-=w1, pup-=w1) {\n                            dst_tilted[p] += dst_tilted[pup] + dst_tilted[pup+1];\n                        }\n                    }\n                }\n            },\n            equalize_histogram: function(src, dst) {\n                var w=src.cols,h=src.rows,src_d=src.data;\n\n                dst.resize(w, h, src.channel);\n\n                var dst_d=dst.data,size=w*h;\n                var i=0,prev=0,hist0,norm;\n\n                var hist0_node = jsfeat.cache.get_buffer(256<<2);\n                hist0 = hist0_node.i32;\n                for(; i < 256; ++i) hist0[i] = 0;\n                for (i = 0; i < size; ++i) {\n                    ++hist0[src_d[i]];\n                }\n\n                prev = hist0[0];\n                for (i = 1; i < 256; ++i) {\n                    prev = hist0[i] += prev;\n                }\n\n                norm = 255 / size;\n                for (i = 0; i < size; ++i) {\n                    dst_d[i] = (hist0[src_d[i]] * norm + 0.5)|0;\n                }\n                jsfeat.cache.put_buffer(hist0_node);\n            },\n\n            canny: function(src, dst, low_thresh, high_thresh) {\n                var w=src.cols,h=src.rows,src_d=src.data;\n\n                dst.resize(w, h, src.channel);\n                \n                var dst_d=dst.data;\n                var i=0,j=0,grad=0,w2=w<<1,_grad=0,suppress=0,f=0,x=0,y=0,s=0;\n                var tg22x=0,tg67x=0;\n\n                // cache buffers\n                var dxdy_node = jsfeat.cache.get_buffer((h * w2)<<2);\n                var buf_node = jsfeat.cache.get_buffer((3 * (w + 2))<<2);\n                var map_node = jsfeat.cache.get_buffer(((h+2) * (w + 2))<<2);\n                var stack_node = jsfeat.cache.get_buffer((h * w)<<2);\n                \n\n                var buf = buf_node.i32;\n                var map = map_node.i32;\n                var stack = stack_node.i32;\n                var dxdy = dxdy_node.i32;\n                var dxdy_m = new jsfeat.matrix_t(w, h, jsfeat.S32C2_t, dxdy_node.data);\n                var row0=1,row1=(w+2+1)|0,row2=(2*(w+2)+1)|0,map_w=(w+2)|0,map_i=(map_w+1)|0,stack_i=0;\n\n                this.sobel_derivatives(src, dxdy_m);\n\n                if(low_thresh > high_thresh) {\n                    i = low_thresh;\n                    low_thresh = high_thresh;\n                    high_thresh = i;\n                }\n\n                i = (3 * (w + 2))|0;\n                while(--i>=0) {\n                    buf[i] = 0;\n                }\n\n                i = ((h+2) * (w + 2))|0;\n                while(--i>=0) {\n                    map[i] = 0;\n                }\n\n                for (; j < w; ++j, grad+=2) {\n                    //buf[row1+j] = Math.abs(dxdy[grad]) + Math.abs(dxdy[grad+1]);\n                    x = dxdy[grad], y = dxdy[grad+1];\n                    //buf[row1+j] = x*x + y*y;\n                    buf[row1+j] = ((x ^ (x >> 31)) - (x >> 31)) + ((y ^ (y >> 31)) - (y >> 31));\n                }\n\n                for(i=1; i <= h; ++i, grad+=w2) {\n                    if(i == h) {\n                        j = row2+w;\n                        while(--j>=row2) {\n                            buf[j] = 0;\n                        }\n                    } else {\n                        for (j = 0; j < w; j++) {\n                            //buf[row2+j] =  Math.abs(dxdy[grad+(j<<1)]) + Math.abs(dxdy[grad+(j<<1)+1]);\n                            x = dxdy[grad+(j<<1)], y = dxdy[grad+(j<<1)+1];\n                            //buf[row2+j] = x*x + y*y;\n                            buf[row2+j] = ((x ^ (x >> 31)) - (x >> 31)) + ((y ^ (y >> 31)) - (y >> 31));\n                        }\n                    }\n                    _grad = (grad - w2)|0;\n                    map[map_i-1] = 0;\n                    suppress = 0;\n                    for(j = 0; j < w; ++j, _grad+=2) {\n                        f = buf[row1+j];\n                        if (f > low_thresh) {\n                            x = dxdy[_grad];\n                            y = dxdy[_grad+1];\n                            s = x ^ y;\n                            // seems ot be faster than Math.abs\n                            x = ((x ^ (x >> 31)) - (x >> 31))|0;\n                            y = ((y ^ (y >> 31)) - (y >> 31))|0;\n                            //x * tan(22.5) x * tan(67.5) == 2 * x + x * tan(22.5)\n                            tg22x = x * 13573;\n                            tg67x = tg22x + ((x + x) << 15);\n                            y <<= 15;\n                            if (y < tg22x) {\n                                if (f > buf[row1+j-1] && f >= buf[row1+j+1]) {\n                                    if (f > high_thresh && !suppress && map[map_i+j-map_w] != 2) {\n                                        map[map_i+j] = 2;\n                                        suppress = 1;\n                                        stack[stack_i++] = map_i + j;\n                                    } else {\n                                        map[map_i+j] = 1;\n                                    }\n                                    continue;\n                                }\n                            } else if (y > tg67x) {\n                                if (f > buf[row0+j] && f >= buf[row2+j]) {\n                                    if (f > high_thresh && !suppress && map[map_i+j-map_w] != 2) {\n                                        map[map_i+j] = 2;\n                                        suppress = 1;\n                                        stack[stack_i++] = map_i + j;\n                                    } else {\n                                        map[map_i+j] = 1;\n                                    }\n                                    continue;\n                                }\n                            } else {\n                                s = s < 0 ? -1 : 1;\n                                if (f > buf[row0+j-s] && f > buf[row2+j+s]) {\n                                    if (f > high_thresh && !suppress && map[map_i+j-map_w] != 2) {\n                                        map[map_i+j] = 2;\n                                        suppress = 1;\n                                        stack[stack_i++] = map_i + j;\n                                    } else {\n                                        map[map_i+j] = 1;\n                                    }\n                                    continue;\n                                }\n                            }\n                        }\n                        map[map_i+j] = 0;\n                        suppress = 0;\n                    }\n                    map[map_i+w] = 0;\n                    map_i += map_w;\n                    j = row0;\n                    row0 = row1;\n                    row1 = row2;\n                    row2 = j;\n                }\n\n                j = map_i - map_w - 1;\n                for(i = 0; i < map_w; ++i, ++j) {\n                    map[j] = 0;\n                }\n                // path following\n                while(stack_i > 0) {\n                    map_i = stack[--stack_i];\n                    map_i -= map_w+1;\n                    if(map[map_i] == 1) map[map_i] = 2, stack[stack_i++] = map_i;\n                    map_i += 1;\n                    if(map[map_i] == 1) map[map_i] = 2, stack[stack_i++] = map_i;\n                    map_i += 1;\n                    if(map[map_i] == 1) map[map_i] = 2, stack[stack_i++] = map_i;\n                    map_i += map_w;\n                    if(map[map_i] == 1) map[map_i] = 2, stack[stack_i++] = map_i;\n                    map_i -= 2;\n                    if(map[map_i] == 1) map[map_i] = 2, stack[stack_i++] = map_i;\n                    map_i += map_w;\n                    if(map[map_i] == 1) map[map_i] = 2, stack[stack_i++] = map_i;\n                    map_i += 1;\n                    if(map[map_i] == 1) map[map_i] = 2, stack[stack_i++] = map_i;\n                    map_i += 1;\n                    if(map[map_i] == 1) map[map_i] = 2, stack[stack_i++] = map_i;\n                }\n\n                map_i = map_w + 1;\n                row0 = 0;\n                for(i = 0; i < h; ++i, map_i+=map_w) {\n                    for(j = 0; j < w; ++j) {\n                        dst_d[row0++] = (map[map_i+j] == 2) * 0xff;\n                    }\n                }\n\n                // free buffers\n                jsfeat.cache.put_buffer(dxdy_node);\n                jsfeat.cache.put_buffer(buf_node);\n                jsfeat.cache.put_buffer(map_node);\n                jsfeat.cache.put_buffer(stack_node);\n            },\n            // transform is 3x3 matrix_t\n            warp_perspective: function(src, dst, transform, fill_value) {\n                if (typeof fill_value === \"undefined\") { fill_value = 0; }\n                var src_width=src.cols|0, src_height=src.rows|0, dst_width=dst.cols|0, dst_height=dst.rows|0;\n                var src_d=src.data, dst_d=dst.data;\n                var x=0,y=0,off=0,ixs=0,iys=0,xs=0.0,ys=0.0,xs0=0.0,ys0=0.0,ws=0.0,sc=0.0,a=0.0,b=0.0,p0=0.0,p1=0.0;\n                var td=transform.data;\n                var m00=td[0],m01=td[1],m02=td[2],\n                    m10=td[3],m11=td[4],m12=td[5],\n                    m20=td[6],m21=td[7],m22=td[8];\n\n                for(var dptr = 0; y < dst_height; ++y) {\n                    xs0 = m01 * y + m02,\n                    ys0 = m11 * y + m12,\n                    ws  = m21 * y + m22;\n                    for(x = 0; x < dst_width; ++x, ++dptr, xs0+=m00, ys0+=m10, ws+=m20) {\n                        sc = 1.0 / ws;\n                        xs = xs0 * sc, ys = ys0 * sc;\n                        ixs = xs | 0, iys = ys | 0;\n\n                        if(xs > 0 && ys > 0 && ixs < (src_width - 1) && iys < (src_height - 1)) {\n                            a = Math.max(xs - ixs, 0.0);\n                            b = Math.max(ys - iys, 0.0);\n                            off = (src_width*iys + ixs)|0;\n\n                            p0 = src_d[off] +  a * (src_d[off+1] - src_d[off]);\n                            p1 = src_d[off+src_width] + a * (src_d[off+src_width+1] - src_d[off+src_width]);\n\n                            dst_d[dptr] = p0 + b * (p1 - p0);\n                        }\n                        else dst_d[dptr] = fill_value;\n                    }\n                }\n            },\n            // transform is 3x3 or 2x3 matrix_t only first 6 values referenced\n            warp_affine: function(src, dst, transform, fill_value) {\n                if (typeof fill_value === \"undefined\") { fill_value = 0; }\n                var src_width=src.cols, src_height=src.rows, dst_width=dst.cols, dst_height=dst.rows;\n                var src_d=src.data, dst_d=dst.data;\n                var x=0,y=0,off=0,ixs=0,iys=0,xs=0.0,ys=0.0,a=0.0,b=0.0,p0=0.0,p1=0.0;\n                var td=transform.data;\n                var m00=td[0],m01=td[1],m02=td[2],\n                    m10=td[3],m11=td[4],m12=td[5];\n\n                for(var dptr = 0; y < dst_height; ++y) {\n                    xs = m01 * y + m02;\n                    ys = m11 * y + m12;\n                    for(x = 0; x < dst_width; ++x, ++dptr, xs+=m00, ys+=m10) {\n                        ixs = xs | 0; iys = ys | 0;\n\n                        if(ixs >= 0 && iys >= 0 && ixs < (src_width - 1) && iys < (src_height - 1)) {\n                            a = xs - ixs;\n                            b = ys - iys;\n                            off = src_width*iys + ixs;\n\n                            p0 = src_d[off] +  a * (src_d[off+1] - src_d[off]);\n                            p1 = src_d[off+src_width] + a * (src_d[off+src_width+1] - src_d[off+src_width]);\n\n                            dst_d[dptr] = p0 + b * (p1 - p0);\n                        }\n                        else dst_d[dptr] = fill_value;\n                    }\n                }\n            },\n            \n            // Basic RGB Skin detection filter\n            // from http://popscan.blogspot.fr/2012/08/skin-detection-in-digital-images.html\n            skindetector: function(src,dst) {\n                var r,g,b,j;\n                var i = src.width*src.height;\n                while(i--){\n                    j = i*4;\n                    r = src.data[j];\n                    g = src.data[j+1];\n                    b = src.data[j+2];\n                    if((r>95)&&(g>40)&&(b>20)\n                     &&(r>g)&&(r>b)\n                     &&(r-Math.min(g,b)>15)\n                     &&(Math.abs(r-g)>15)){\n                         dst[i] = 255;\n                    } else {\n                        dst[i] = 0;\n                    }\n                }                \n            }\n        };\n    })();\n\n    global.imgproc = imgproc;\n\n})(jsfeat);\n/**\r\n * @author Eugene Zatepyakin / http://inspirit.ru/\r\n *\r\n * This is FAST corner detector, contributed to OpenCV by the author, Edward Rosten.\r\n */\r\n\r\n/*\r\nThe references are:\r\n * Machine learning for high-speed corner detection,\r\n   E. Rosten and T. Drummond, ECCV 2006\r\n * Faster and better: A machine learning approach to corner detection\r\n   E. Rosten, R. Porter and T. Drummond, PAMI, 2009  \r\n*/\r\n\r\n(function(global) {\r\n    \"use strict\";\r\n    //\r\n    var fast_corners = (function() {\r\n\r\n        var offsets16 = new Int32Array([0, 3, 1, 3, 2, 2, 3, 1, 3, 0, 3, -1, 2, -2, 1, -3, 0, -3, -1, -3, -2, -2, -3, -1, -3, 0, -3, 1, -2, 2, -1, 3]);\r\n\r\n        var threshold_tab = new Uint8Array(512);\r\n        var pixel_off = new Int32Array(25);\r\n        var score_diff = new Int32Array(25);\r\n\r\n        // private functions\r\n        var _cmp_offsets = function(pixel, step, pattern_size) {\r\n            var k = 0;\r\n            var offsets = offsets16;\r\n            for( ; k < pattern_size; ++k ) {\r\n                pixel[k] = offsets[k<<1] + offsets[(k<<1)+1] * step;\r\n            }\r\n            for( ; k < 25; ++k ) {\r\n                pixel[k] = pixel[k - pattern_size];\r\n            }\r\n        },\r\n\r\n        _cmp_score_16 = function(src, off, pixel, d, threshold) {\r\n            var N = 25, k = 0, v = src[off];\r\n            var a0 = threshold,a=0,b0=0,b=0;\r\n\r\n            for( ; k < N; ++k ) {\r\n                d[k] = v - src[off+pixel[k]];\r\n            }\r\n\r\n            for( k = 0; k < 16; k += 2 ) {\r\n                a = Math.min(d[k+1], d[k+2]);\r\n                a = Math.min(a, d[k+3]);\r\n\r\n                if( a <= a0 ) continue;\r\n\r\n                a = Math.min(a, d[k+4]);\r\n                a = Math.min(a, d[k+5]);\r\n                a = Math.min(a, d[k+6]);\r\n                a = Math.min(a, d[k+7]);\r\n                a = Math.min(a, d[k+8]);\r\n                a0 = Math.max(a0, Math.min(a, d[k]));\r\n                a0 = Math.max(a0, Math.min(a, d[k+9]));\r\n            }\r\n\r\n            b0 = -a0;\r\n            for( k = 0; k < 16; k += 2 ) {\r\n                b = Math.max(d[k+1], d[k+2]);\r\n                b = Math.max(b, d[k+3]);\r\n                b = Math.max(b, d[k+4]);\r\n                b = Math.max(b, d[k+5]);\r\n\r\n                if( b >= b0 ) continue;\r\n                b = Math.max(b, d[k+6]);\r\n                b = Math.max(b, d[k+7]);\r\n                b = Math.max(b, d[k+8]);\r\n                b0 = Math.min(b0, Math.max(b, d[k]));\r\n                b0 = Math.min(b0, Math.max(b, d[k+9]));\r\n            }\r\n\r\n            return -b0-1;\r\n        };\r\n\r\n        var _threshold = 20;\r\n\r\n        return {\r\n            set_threshold: function(threshold) {\r\n                _threshold = Math.min(Math.max(threshold, 0), 255);\r\n                for (var i = -255; i <= 255; ++i) {\r\n                    threshold_tab[(i + 255)] = (i < -_threshold ? 1 : (i > _threshold ? 2 : 0));\r\n                }\r\n                return _threshold;\r\n            },\r\n            \r\n            detect: function(src, corners, border) {\r\n                if (typeof border === \"undefined\") { border = 3; }\r\n\r\n                var K = 8, N = 25;\r\n                var img = src.data, w = src.cols, h = src.rows;\r\n                var i=0, j=0, k=0, vt=0, x=0, m3=0;\r\n                var buf_node = jsfeat.cache.get_buffer(3 * w);\r\n                var cpbuf_node = jsfeat.cache.get_buffer(((w+1)*3)<<2);\r\n                var buf = buf_node.u8;\r\n                var cpbuf = cpbuf_node.i32;\r\n                var pixel = pixel_off;\r\n                var sd = score_diff;\r\n                var sy = Math.max(3, border);\r\n                var ey = Math.min((h-2), (h-border));\r\n                var sx = Math.max(3, border);\r\n                var ex = Math.min((w - 3), (w - border));\r\n                var _count = 0, corners_cnt = 0, pt;\r\n                var score_func = _cmp_score_16;\r\n                var thresh_tab = threshold_tab;\r\n                var threshold = _threshold;\r\n\r\n                var v=0,tab=0,d=0,ncorners=0,cornerpos=0,curr=0,ptr=0,prev=0,pprev=0;\r\n                var jp1=0,jm1=0,score=0;\r\n\r\n                _cmp_offsets(pixel, w, 16);\r\n\r\n                // local vars are faster?\r\n                var pixel0 = pixel[0];\r\n                var pixel1 = pixel[1];\r\n                var pixel2 = pixel[2];\r\n                var pixel3 = pixel[3];\r\n                var pixel4 = pixel[4];\r\n                var pixel5 = pixel[5];\r\n                var pixel6 = pixel[6];\r\n                var pixel7 = pixel[7];\r\n                var pixel8 = pixel[8];\r\n                var pixel9 = pixel[9];\r\n                var pixel10 = pixel[10];\r\n                var pixel11 = pixel[11];\r\n                var pixel12 = pixel[12];\r\n                var pixel13 = pixel[13];\r\n                var pixel14 = pixel[14];\r\n                var pixel15 = pixel[15];\r\n\r\n                for(i = 0; i < w*3; ++i) {\r\n                    buf[i] = 0;\r\n                }\r\n\r\n                for(i = sy; i < ey; ++i) {\r\n                    ptr = ((i * w) + sx)|0;\r\n                    m3 = (i - 3)%3;\r\n                    curr = (m3*w)|0;\r\n                    cornerpos = (m3*(w+1))|0;\r\n                    for (j = 0; j < w; ++j) buf[curr+j] = 0;\r\n                    ncorners = 0;\r\n                    \r\n                    if( i < (ey - 1) ) {\r\n                        j = sx;\r\n                        \r\n                        for( ; j < ex; ++j, ++ptr ) {\r\n                            v = img[ptr];\r\n                            tab = ( - v + 255 );\r\n                            d = ( thresh_tab[tab+img[ptr+pixel0]] | thresh_tab[tab+img[ptr+pixel8]] );\r\n                            \r\n                            if( d == 0 ) {\r\n                                continue;\r\n                            }\r\n                            \r\n                            d &= ( thresh_tab[tab+img[ptr+pixel2]] | thresh_tab[tab+img[ptr+pixel10]] );\r\n                            d &= ( thresh_tab[tab+img[ptr+pixel4]] | thresh_tab[tab+img[ptr+pixel12]] );\r\n                            d &= ( thresh_tab[tab+img[ptr+pixel6]] | thresh_tab[tab+img[ptr+pixel14]] );\r\n                            \r\n                            if( d == 0 ) {\r\n                                continue;\r\n                            }\r\n                            \r\n                            d &= ( thresh_tab[tab+img[ptr+pixel1]] | thresh_tab[tab+img[ptr+pixel9]] );\r\n                            d &= ( thresh_tab[tab+img[ptr+pixel3]] | thresh_tab[tab+img[ptr+pixel11]] );\r\n                            d &= ( thresh_tab[tab+img[ptr+pixel5]] | thresh_tab[tab+img[ptr+pixel13]] );\r\n                            d &= ( thresh_tab[tab+img[ptr+pixel7]] | thresh_tab[tab+img[ptr+pixel15]] );\r\n                            \r\n                            if( d & 1 ) {\r\n                                vt = (v - threshold);\r\n                                _count = 0;\r\n                                \r\n                                for( k = 0; k < N; ++k ) {\r\n                                    x = img[(ptr+pixel[k])];\r\n                                    if(x < vt) {\r\n                                        ++_count;\r\n                                        if( _count > K ) {\r\n                                            ++ncorners;\r\n                                            cpbuf[cornerpos+ncorners] = j;\r\n                                            buf[curr+j] = score_func(img, ptr, pixel, sd, threshold);\r\n                                            break;\r\n                                        }\r\n                                    }\r\n                                    else {\r\n                                        _count = 0;\r\n                                    }\r\n                                }\r\n                            }\r\n                            \r\n                            if( d & 2 ) {\r\n                                vt = (v + threshold);\r\n                                _count = 0;\r\n                                \r\n                                for( k = 0; k < N; ++k ) {\r\n                                    x = img[(ptr+pixel[k])];\r\n                                    if(x > vt) {\r\n                                        ++_count;\r\n                                        if( _count > K ) {\r\n                                            ++ncorners;\r\n                                            cpbuf[cornerpos+ncorners] = j;\r\n                                            buf[curr+j] = score_func(img, ptr, pixel, sd, threshold);\r\n                                            break;\r\n                                        }\r\n                                    }\r\n                                    else {\r\n                                        _count = 0;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    \r\n                    cpbuf[cornerpos+w] = ncorners;\r\n            \r\n                    if ( i == sy ) {\r\n                        continue;\r\n                    }\r\n                    \r\n                    m3 = (i - 4 + 3)%3;\r\n                    prev = (m3*w)|0;\r\n                    cornerpos = (m3*(w+1))|0;\r\n                    m3 = (i - 5 + 3)%3;\r\n                    pprev = (m3*w)|0;\r\n\r\n                    ncorners = cpbuf[cornerpos+w];\r\n                    \r\n                    for( k = 0; k < ncorners; ++k ) {\r\n                        j = cpbuf[cornerpos+k];\r\n                        jp1 = (j+1)|0;\r\n                        jm1 = (j-1)|0;\r\n                        score = buf[prev+j];\r\n                        if( (score > buf[prev+jp1] && score > buf[prev+jm1] &&\r\n                            score > buf[pprev+jm1] && score > buf[pprev+j] && score > buf[pprev+jp1] &&\r\n                            score > buf[curr+jm1] && score > buf[curr+j] && score > buf[curr+jp1]) ) {\r\n                            // save corner\r\n                            pt = corners[corners_cnt];\r\n                            pt.x = j, pt.y = (i-1), pt.score = score;\r\n                            corners_cnt++;\r\n                        }\r\n                    }\r\n                } // y loop\r\n                jsfeat.cache.put_buffer(buf_node);\r\n                jsfeat.cache.put_buffer(cpbuf_node);\r\n                return corners_cnt;\r\n            }\r\n        };\r\n    })();\r\n\r\n    global.fast_corners = fast_corners;\r\n    fast_corners.set_threshold(20); // set default\r\n\r\n})(jsfeat);\r\n/**\n * @author Eugene Zatepyakin / http://inspirit.ru/\n *\n * Copyright 2007 Computer Vision Lab,\n * Ecole Polytechnique Federale de Lausanne (EPFL), Switzerland.\n * @author Vincent Lepetit (http://cvlab.epfl.ch/~lepetit)\n */\n\n(function(global) {\n    \"use strict\";\n    //\n\n    var yape06 = (function() {\n        \n        var compute_laplacian = function(src, dst, w, h, Dxx, Dyy, sx,sy, ex,ey) {\n            var y=0,x=0,yrow=(sy*w+sx)|0,row=yrow;\n\n            for(y = sy; y < ey; ++y, yrow+=w, row = yrow) {\n                for(x = sx; x < ex; ++x, ++row) {\n                    dst[row] = -4 * src[row] + src[row+Dxx] + src[row-Dxx] + src[row+Dyy] + src[row-Dyy];\n                }\n            }\n        }\n\n        var hessian_min_eigen_value = function(src, off, tr, Dxx, Dyy, Dxy, Dyx) {\n            var Ixx = -2 * src[off] + src[off + Dxx] + src[off - Dxx];\n            var Iyy = -2 * src[off] + src[off + Dyy] + src[off - Dyy];\n            var Ixy = src[off + Dxy] + src[off - Dxy] - src[off + Dyx] - src[off - Dyx];\n            var sqrt_delta = ( Math.sqrt(((Ixx - Iyy) * (Ixx - Iyy) + 4 * Ixy * Ixy) ) )|0;\n\n            return Math.min(Math.abs(tr - sqrt_delta), Math.abs(-(tr + sqrt_delta)));\n        }\n\n        return {\n\n            laplacian_threshold: 30,\n            min_eigen_value_threshold: 25,\n\n            detect: function(src, points, border) {\n                if (typeof border === \"undefined\") { border = 5; }\n                var x=0,y=0;\n                var w=src.cols, h=src.rows, srd_d=src.data;\n                var Dxx = 5, Dyy = (5 * w)|0;\n                var Dxy = (3 + 3 * w)|0, Dyx = (3 - 3 * w)|0;\n                var lap_buf = jsfeat.cache.get_buffer((w*h)<<2);\n                var laplacian = lap_buf.i32;\n                var lv=0, row=0,rowx=0,min_eigen_value=0,pt;\n                var number_of_points = 0;\n                var lap_thresh = this.laplacian_threshold;\n                var eigen_thresh = this.min_eigen_value_threshold;\n\n                var sx = Math.max(5, border)|0;\n                var sy = Math.max(3, border)|0;\n                var ex = Math.min(w-5, w-border)|0;\n                var ey = Math.min(h-3, h-border)|0;\n\n                x = w*h;\n                while(--x>=0) {laplacian[x]=0;}\n                compute_laplacian(srd_d, laplacian, w, h, Dxx, Dyy, sx,sy, ex,ey);\n\n                row = (sy*w+sx)|0;\n                for(y = sy; y < ey; ++y, row += w) {\n                    for(x = sx, rowx=row; x < ex; ++x, ++rowx) {\n\n                        lv = laplacian[rowx];\n                        if ((lv < -lap_thresh &&\n                            lv < laplacian[rowx - 1]      && lv < laplacian[rowx + 1] &&\n                            lv < laplacian[rowx - w]     && lv < laplacian[rowx + w] &&\n                            lv < laplacian[rowx - w - 1] && lv < laplacian[rowx + w - 1] &&\n                            lv < laplacian[rowx - w + 1] && lv < laplacian[rowx + w + 1])\n                            ||\n                            (lv > lap_thresh &&\n                            lv > laplacian[rowx - 1]      && lv > laplacian[rowx + 1] &&\n                            lv > laplacian[rowx - w]     && lv > laplacian[rowx + w] &&\n                            lv > laplacian[rowx - w - 1] && lv > laplacian[rowx + w - 1] &&\n                            lv > laplacian[rowx - w + 1] && lv > laplacian[rowx + w + 1])\n                            ) {\n\n                            min_eigen_value = hessian_min_eigen_value(srd_d, rowx, lv, Dxx, Dyy, Dxy, Dyx);\n                            if (min_eigen_value > eigen_thresh) {\n                                pt = points[number_of_points];\n                                pt.x = x, pt.y = y, pt.score = min_eigen_value;\n                                ++number_of_points;\n                                ++x, ++rowx; // skip next pixel since this is maxima in 3x3\n                            }\n                        }\n                    }\n                }\n\n                jsfeat.cache.put_buffer(lap_buf);\n\n                return number_of_points;\n            }\n\n        };\n    })();\n\n    global.yape06 = yape06;\n\n})(jsfeat);\n/**\r\n * @author Eugene Zatepyakin / http://inspirit.ru/\r\n *\r\n * Copyright 2007 Computer Vision Lab,\r\n * Ecole Polytechnique Federale de Lausanne (EPFL), Switzerland.\r\n */\r\n\r\n(function(global) {\r\n    \"use strict\";\r\n    //\r\n\r\n    var yape = (function() {\r\n\r\n        var precompute_directions = function(step, dirs, R) {\r\n            var i = 0;\r\n            var x, y;\r\n\r\n            x = R;\r\n            for(y = 0; y < x; y++, i++)\r\n            {\r\n                x = (Math.sqrt((R * R - y * y)) + 0.5)|0;\r\n                dirs[i] = (x + step * y);\r\n            }\r\n            for(x-- ; x < y && x >= 0; x--, i++)\r\n            {\r\n                y = (Math.sqrt((R * R - x * x)) + 0.5)|0;\r\n                dirs[i] = (x + step * y);\r\n            }\r\n            for( ; -x < y; x--, i++)\r\n            {\r\n                y = (Math.sqrt((R * R - x * x)) + 0.5)|0;\r\n                dirs[i] = (x + step * y);\r\n            }\r\n            for(y-- ; y >= 0; y--, i++)\r\n            {\r\n                x = (-Math.sqrt((R * R - y * y)) - 0.5)|0;\r\n                dirs[i] = (x + step * y);\r\n            }\r\n            for(; y > x; y--, i++)\r\n            {\r\n                x = (-Math.sqrt((R * R - y * y)) - 0.5)|0;\r\n                dirs[i] = (x + step * y);\r\n            }\r\n            for(x++ ; x <= 0; x++, i++)\r\n            {\r\n                y = (-Math.sqrt((R * R - x * x)) - 0.5)|0;\r\n                dirs[i] = (x + step * y);\r\n            }\r\n            for( ; x < -y; x++, i++)\r\n            {\r\n                y = (-Math.sqrt((R * R - x * x)) - 0.5)|0;\r\n                dirs[i] = (x + step * y);\r\n            }\r\n            for(y++ ; y < 0; y++, i++)\r\n            {\r\n                x = (Math.sqrt((R * R - y * y)) + 0.5)|0;\r\n                dirs[i] = (x + step * y);\r\n            }\r\n\r\n            dirs[i] = dirs[0];\r\n            dirs[i + 1] = dirs[1];\r\n            return i;\r\n        }\r\n\r\n        var third_check = function (Sb, off, step) {\r\n            var n = 0;\r\n            if(Sb[off+1]   != 0) n++;\r\n            if(Sb[off-1]   != 0) n++;\r\n            if(Sb[off+step]   != 0) n++;\r\n            if(Sb[off+step+1] != 0) n++;\r\n            if(Sb[off+step-1] != 0) n++;\r\n            if(Sb[off-step]   != 0) n++;\r\n            if(Sb[off-step+1] != 0) n++;\r\n            if(Sb[off-step-1] != 0) n++;\r\n\r\n            return n;\r\n        }\r\n\r\n        var is_local_maxima = function(p, off, v, step, neighborhood) {\r\n            var x, y;\r\n\r\n            if (v > 0) {\r\n                off -= step*neighborhood;\r\n                for (y= -neighborhood; y<=neighborhood; ++y) {\r\n                    for (x= -neighborhood; x<=neighborhood; ++x) {\r\n                        if (p[off+x] > v) return false;\r\n                    }\r\n                    off += step;\r\n                }\r\n            } else {\r\n                off -= step*neighborhood;\r\n                for (y= -neighborhood; y<=neighborhood; ++y) {\r\n                    for (x= -neighborhood; x<=neighborhood; ++x) {\r\n                        if (p[off+x] < v) return false;\r\n                    }\r\n                    off += step;\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n\r\n        var perform_one_point = function(I, x, Scores, Im, Ip, dirs, opposite, dirs_nb) {\r\n          var score = 0;\r\n          var a = 0, b = (opposite - 1)|0;\r\n          var A=0, B0=0, B1=0, B2=0;\r\n          var state=0;\r\n\r\n          // WE KNOW THAT NOT(A ~ I0 & B1 ~ I0):\r\n          A = I[x+dirs[a]];\r\n          if ((A <= Ip)) {\r\n            if ((A >= Im)) { // A ~ I0\r\n              B0 = I[x+dirs[b]];\r\n              if ((B0 <= Ip)) {\r\n                if ((B0 >= Im)) { Scores[x] = 0; return; }\r\n                else {\r\n                  b++; B1 = I[x+dirs[b]];\r\n                  if ((B1 > Ip)) {\r\n                    b++; B2 = I[x+dirs[b]];\r\n                    if ((B2 > Ip)) state = 3;\r\n                    else if ((B2 < Im)) state = 6;\r\n                    else { Scores[x] = 0; return; } // A ~ I0, B2 ~ I0\r\n                  }\r\n                  else/* if ((B1 < Im))*/ {\r\n                    b++; B2 = I[x+dirs[b]];\r\n                    if ((B2 > Ip)) state = 7;\r\n                    else if ((B2 < Im)) state = 2;\r\n                    else { Scores[x] = 0; return; } // A ~ I0, B2 ~ I0\r\n                  }\r\n                  //else { Scores[x] = 0; return; } // A ~ I0, B1 ~ I0\r\n                }\r\n              }\r\n              else { // B0 < I0\r\n                b++; B1 = I[x+dirs[b]];\r\n                if ((B1 > Ip)) {\r\n                  b++; B2 = I[x+dirs[b]];\r\n                  if ((B2 > Ip)) state = 3;\r\n                  else if ((B2 < Im)) state = 6;\r\n                  else { Scores[x] = 0; return; } // A ~ I0, B2 ~ I0\r\n                }\r\n                else if ((B1 < Im)) {\r\n                  b++; B2 = I[x+dirs[b]];\r\n                  if ((B2 > Ip)) state = 7;\r\n                  else if ((B2 < Im)) state = 2;\r\n                  else { Scores[x] = 0; return; } // A ~ I0, B2 ~ I0\r\n                }\r\n                else { Scores[x] = 0; return; } // A ~ I0, B1 ~ I0\r\n              }\r\n            }\r\n            else { // A > I0\r\n              B0 = I[x+dirs[b]];\r\n              if ((B0 > Ip)) { Scores[x] = 0; return; }\r\n                b++; B1 = I[x+dirs[b]];\r\n              if ((B1 > Ip)) { Scores[x] = 0; return; }\r\n                b++; B2 = I[x+dirs[b]];\r\n              if ((B2 > Ip)) { Scores[x] = 0; return; }\r\n                state = 1;\r\n            }\r\n          }\r\n          else // A < I0\r\n          {\r\n            B0 = I[x+dirs[b]];\r\n            if ((B0 < Im)) { Scores[x] = 0; return; }\r\n              b++; B1 = I[x+dirs[b]];\r\n            if ((B1 < Im)) { Scores[x] = 0; return; }\r\n              b++; B2 = I[x+dirs[b]];\r\n            if ((B2 < Im)) { Scores[x] = 0; return; }\r\n              state = 0;\r\n          }\r\n\r\n          for(a = 1; a <= opposite; a++)\r\n          {\r\n            A = I[x+dirs[a]];\r\n\r\n            switch(state)\r\n            {\r\n            case 0:\r\n              if ((A > Ip)) {\r\n                B1 = B2; b++; B2 = I[x+dirs[b]];\r\n                if ((B2 < Im)) { Scores[x] = 0; return; }\r\n                  { score -= A + B1; state = 0; break; };\r\n              }\r\n              if ((A < Im)) {\r\n                if ((B1 > Ip)) { Scores[x] = 0; return; }\r\n                  if ((B2 > Ip)) { Scores[x] = 0; return; }\r\n                    B1 = B2; b++; B2 = I[x+dirs[b]];\r\n                if ((B2 > Ip)) { Scores[x] = 0; return; }\r\n                  { score -= A + B1; state = 8; break; };\r\n              } \r\n              // A ~ I0\r\n              if ((B1 <= Ip)) { Scores[x] = 0; return; }\r\n                if ((B2 <= Ip)) { Scores[x] = 0; return; }\r\n                  B1 = B2; b++; B2 = I[x+dirs[b]];\r\n              if ((B2 > Ip)) { score -= A + B1; state = 3; break; };\r\n              if ((B2 < Im)) { score -= A + B1; state = 6; break; };\r\n              { Scores[x] = 0; return; }\r\n\r\n            case 1:\r\n              if ((A < Im)) {\r\n                B1 = B2; b++; B2 = I[x+dirs[b]];\r\n                if ((B2 > Ip)) { Scores[x] = 0; return; }\r\n                  { score -= A + B1; state = 1; break; };\r\n              }\r\n              if ((A > Ip)) {\r\n                if ((B1 < Im)) { Scores[x] = 0; return; }\r\n                  if ((B2 < Im)) { Scores[x] = 0; return; }\r\n                    B1 = B2; b++; B2 = I[x+dirs[b]];\r\n                if ((B2 < Im)) { Scores[x] = 0; return; }\r\n                  { score -= A + B1; state = 9; break; };\r\n              }\r\n              // A ~ I0\r\n              if ((B1 >= Im)) { Scores[x] = 0; return; }\r\n                if ((B2 >= Im)) { Scores[x] = 0; return; }\r\n                  B1 = B2; b++; B2 = I[x+dirs[b]];\r\n              if ((B2 < Im)) { score -= A + B1; state = 2; break; };\r\n              if ((B2 > Ip)) { score -= A + B1; state = 7; break; };\r\n              { Scores[x] = 0; return; }\r\n\r\n            case 2:\r\n              if ((A > Ip)) { Scores[x] = 0; return; }\r\n                B1 = B2; b++; B2 = I[x+dirs[b]];\r\n              if ((A < Im))\r\n              {\r\n                if ((B2 > Ip)) { Scores[x] = 0; return; }\r\n                  { score -= A + B1; state = 4; break; };\r\n              } \r\n              // A ~ I0\r\n              if ((B2 > Ip)) { score -= A + B1; state = 7; break; };\r\n              if ((B2 < Im)) { score -= A + B1; state = 2; break; };\r\n              { Scores[x] = 0; return; } // A ~ I0, B2 ~ I0\r\n\r\n            case 3:\r\n              if ((A < Im)) { Scores[x] = 0; return; }\r\n                B1 = B2; b++; B2 = I[x+dirs[b]];\r\n              if ((A > Ip)) {\r\n                if ((B2 < Im)) { Scores[x] = 0; return; }\r\n                  { score -= A + B1; state = 5; break; };\r\n              }\r\n              // A ~ I0\r\n              if ((B2 > Ip)) { score -= A + B1; state = 3; break; };\r\n              if ((B2 < Im)) { score -= A + B1; state = 6; break; };\r\n              { Scores[x] = 0; return; }\r\n\r\n            case 4:\r\n              if ((A > Ip)) { Scores[x] = 0; return; }\r\n                if ((A < Im)) {\r\n                  B1 = B2; b++; B2 = I[x+dirs[b]];\r\n                  if ((B2 > Ip)) { Scores[x] = 0; return; }\r\n                    { score -= A + B1; state = 1; break; };\r\n                }\r\n                if ((B2 >= Im)) { Scores[x] = 0; return; }\r\n                  B1 = B2; b++; B2 = I[x+dirs[b]];\r\n                if ((B2 < Im)) { score -= A + B1; state = 2; break; };\r\n                if ((B2 > Ip)) { score -= A + B1; state = 7; break; };\r\n                { Scores[x] = 0; return; }\r\n\r\n            case 5:\r\n              if ((A < Im)) { Scores[x] = 0; return; }\r\n                if ((A > Ip)) {\r\n                  B1 = B2; b++; B2 = I[x+dirs[b]];\r\n                  if ((B2 < Im)) { Scores[x] = 0; return; }\r\n                    { score -= A + B1; state = 0; break; };\r\n                }\r\n                // A ~ I0\r\n                if ((B2 <= Ip)) { Scores[x] = 0; return; }\r\n                  B1 = B2; b++; B2 = I[x+dirs[b]];\r\n                if ((B2 > Ip)) { score -= A + B1; state = 3; break; };\r\n                if ((B2 < Im)) { score -= A + B1; state = 6; break; };\r\n                { Scores[x] = 0; return; }\r\n\r\n            case 7:\r\n              if ((A > Ip)) { Scores[x] = 0; return; }\r\n                if ((A < Im)) { Scores[x] = 0; return; }\r\n                  B1 = B2; b++; B2 = I[x+dirs[b]];\r\n              // A ~ I0\r\n              if ((B2 > Ip)) { score -= A + B1; state = 3; break; };\r\n              if ((B2 < Im)) { score -= A + B1; state = 6; break; };\r\n              { Scores[x] = 0; return; } // A ~ I0, B2 ~ I0\r\n\r\n            case 6:\r\n              if ((A > Ip)) { Scores[x] = 0; return; }\r\n                if ((A < Im)) { Scores[x] = 0; return; }\r\n                  B1 = B2; b++; B2 = I[x+dirs[b]];\r\n              // A ~ I0\r\n              if ((B2 < Im)) { score -= A + B1; state = 2; break; };\r\n              if ((B2 > Ip)) { score -= A + B1; state = 7; break; };\r\n              { Scores[x] = 0; return; } // A ~ I0, B2 ~ I0\r\n\r\n            case 8:\r\n              if ((A > Ip)) {\r\n                if ((B2 < Im)) { Scores[x] = 0; return; }\r\n                  B1 = B2; b++; B2 = I[x+dirs[b]];\r\n                if ((B2 < Im)) { Scores[x] = 0; return; }\r\n                  { score -= A + B1; state = 9; break; };\r\n              }\r\n              if ((A < Im)) {\r\n                B1 = B2; b++; B2 = I[x+dirs[b]];\r\n                if ((B2 > Ip)) { Scores[x] = 0; return; }\r\n                  { score -= A + B1; state = 1; break; };\r\n              }\r\n              { Scores[x] = 0; return; }\r\n\r\n            case 9:\r\n              if ((A < Im)) {\r\n                if ((B2 > Ip)) { Scores[x] = 0; return; }\r\n                  B1 = B2; b++; B2 = I[x+dirs[b]];\r\n                if ((B2 > Ip)) { Scores[x] = 0; return; }\r\n                  { score -= A + B1; state = 8; break; };\r\n              }\r\n              if ((A > Ip)) {\r\n                B1 = B2; b++; B2 = I[x+dirs[b]];\r\n                if ((B2 < Im)) { Scores[x] = 0; return; }\r\n                  { score -= A + B1; state = 0; break; };\r\n              }\r\n              { Scores[x] = 0; return; }\r\n\r\n            default:\r\n              //\"PB default\";\r\n              break;\r\n            } // switch(state)\r\n          } // for(a...)\r\n\r\n          Scores[x] = (score + dirs_nb * I[x]);\r\n        }\r\n\r\n        var lev_table_t = (function () {\r\n            function lev_table_t(w, h, r) {\r\n                this.dirs = new Int32Array(1024);\r\n                this.dirs_count = precompute_directions(w, this.dirs, r)|0;\r\n                this.scores = new Int32Array(w*h);\r\n                this.radius = r|0;\r\n            }\r\n            return lev_table_t;\r\n        })();\r\n        \r\n        return {\r\n\r\n            level_tables: [],\r\n            tau: 7,\r\n\r\n            init: function(width, height, radius, pyramid_levels) {\r\n                if (typeof pyramid_levels === \"undefined\") { pyramid_levels = 1; }\r\n                var i;\r\n                radius = Math.min(radius, 7);\r\n                radius = Math.max(radius, 3);\r\n                for(i = 0; i < pyramid_levels; ++i) {\r\n                    this.level_tables[i] = new lev_table_t(width>>i, height>>i, radius);\r\n                }\r\n            },\r\n\r\n            detect: function(src, points, border) {\r\n                if (typeof border === \"undefined\") { border = 4; }\r\n                var t = this.level_tables[0];\r\n                var R = t.radius|0, Rm1 = (R-1)|0;\r\n                var dirs = t.dirs;\r\n                var dirs_count = t.dirs_count|0;\r\n                var opposite = dirs_count >> 1;\r\n                var img = src.data, w=src.cols|0, h=src.rows|0,hw=w>>1;\r\n                var scores = t.scores;\r\n                var x=0,y=0,row=0,rowx=0,ip=0,im=0,abs_score=0, score=0;\r\n                var tau = this.tau|0;\r\n                var number_of_points = 0, pt;\r\n\r\n                var sx = Math.max(R+1, border)|0;\r\n                var sy = Math.max(R+1, border)|0;\r\n                var ex = Math.min(w-R-2, w-border)|0;\r\n                var ey = Math.min(h-R-2, h-border)|0;\r\n\r\n                row = (sy*w+sx)|0;\r\n                for(y = sy; y < ey; ++y, row+=w) {\r\n                    for(x = sx, rowx = row; x < ex; ++x, ++rowx) {\r\n                        ip = img[rowx] + tau, im = img[rowx] - tau;\r\n\r\n                        if (im<img[rowx+R] && img[rowx+R]<ip && im<img[rowx-R] && img[rowx-R]<ip) {\r\n                            scores[rowx] = 0;\r\n                        } else {\r\n                            perform_one_point(img, rowx, scores, im, ip, dirs, opposite, dirs_count);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // local maxima\r\n                row = (sy*w+sx)|0;\r\n                for(y = sy; y < ey; ++y, row+=w) {\r\n                    for(x = sx, rowx = row; x < ex; ++x, ++rowx) {\r\n                        score = scores[rowx];\r\n                        abs_score = Math.abs(score);\r\n                        if(abs_score < 5) {\r\n                            // if this pixel is 0, the next one will not be good enough. Skip it.\r\n                            ++x, ++rowx;\r\n                        } else {\r\n                            if(third_check(scores, rowx, w) >= 3 && is_local_maxima(scores, rowx, score, hw, R)) {\r\n                                pt = points[number_of_points];\r\n                                pt.x = x, pt.y = y, pt.score = abs_score;\r\n                                ++number_of_points;\r\n\r\n                                x += Rm1, rowx += Rm1;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return number_of_points;\r\n            }\r\n        };\r\n\r\n    })();\r\n\r\n    global.yape = yape;\r\n\r\n})(jsfeat);\n/**\n * @author Eugene Zatepyakin / http://inspirit.ru/\n *\n * Original implementation derived from OpenCV,\n * @authors Ethan Rublee, Vincent Rabaud, Gary Bradski\n */\n\n(function(global) {\n    \"use strict\";\n    //\n\n    var orb = (function() {\n\n    \tvar bit_pattern_31_ = new Int32Array([\n\t\t    8,-3, 9,5/*mean (0), correlation (0)*/,\n\t\t    4,2, 7,-12/*mean (1.12461e-05), correlation (0.0437584)*/,\n\t\t    -11,9, -8,2/*mean (3.37382e-05), correlation (0.0617409)*/,\n\t\t    7,-12, 12,-13/*mean (5.62303e-05), correlation (0.0636977)*/,\n\t\t    2,-13, 2,12/*mean (0.000134953), correlation (0.085099)*/,\n\t\t    1,-7, 1,6/*mean (0.000528565), correlation (0.0857175)*/,\n\t\t    -2,-10, -2,-4/*mean (0.0188821), correlation (0.0985774)*/,\n\t\t    -13,-13, -11,-8/*mean (0.0363135), correlation (0.0899616)*/,\n\t\t    -13,-3, -12,-9/*mean (0.121806), correlation (0.099849)*/,\n\t\t    10,4, 11,9/*mean (0.122065), correlation (0.093285)*/,\n\t\t    -13,-8, -8,-9/*mean (0.162787), correlation (0.0942748)*/,\n\t\t    -11,7, -9,12/*mean (0.21561), correlation (0.0974438)*/,\n\t\t    7,7, 12,6/*mean (0.160583), correlation (0.130064)*/,\n\t\t    -4,-5, -3,0/*mean (0.228171), correlation (0.132998)*/,\n\t\t    -13,2, -12,-3/*mean (0.00997526), correlation (0.145926)*/,\n\t\t    -9,0, -7,5/*mean (0.198234), correlation (0.143636)*/,\n\t\t    12,-6, 12,-1/*mean (0.0676226), correlation (0.16689)*/,\n\t\t    -3,6, -2,12/*mean (0.166847), correlation (0.171682)*/,\n\t\t    -6,-13, -4,-8/*mean (0.101215), correlation (0.179716)*/,\n\t\t    11,-13, 12,-8/*mean (0.200641), correlation (0.192279)*/,\n\t\t    4,7, 5,1/*mean (0.205106), correlation (0.186848)*/,\n\t\t    5,-3, 10,-3/*mean (0.234908), correlation (0.192319)*/,\n\t\t    3,-7, 6,12/*mean (0.0709964), correlation (0.210872)*/,\n\t\t    -8,-7, -6,-2/*mean (0.0939834), correlation (0.212589)*/,\n\t\t    -2,11, -1,-10/*mean (0.127778), correlation (0.20866)*/,\n\t\t    -13,12, -8,10/*mean (0.14783), correlation (0.206356)*/,\n\t\t    -7,3, -5,-3/*mean (0.182141), correlation (0.198942)*/,\n\t\t    -4,2, -3,7/*mean (0.188237), correlation (0.21384)*/,\n\t\t    -10,-12, -6,11/*mean (0.14865), correlation (0.23571)*/,\n\t\t    5,-12, 6,-7/*mean (0.222312), correlation (0.23324)*/,\n\t\t    5,-6, 7,-1/*mean (0.229082), correlation (0.23389)*/,\n\t\t    1,0, 4,-5/*mean (0.241577), correlation (0.215286)*/,\n\t\t    9,11, 11,-13/*mean (0.00338507), correlation (0.251373)*/,\n\t\t    4,7, 4,12/*mean (0.131005), correlation (0.257622)*/,\n\t\t    2,-1, 4,4/*mean (0.152755), correlation (0.255205)*/,\n\t\t    -4,-12, -2,7/*mean (0.182771), correlation (0.244867)*/,\n\t\t    -8,-5, -7,-10/*mean (0.186898), correlation (0.23901)*/,\n\t\t    4,11, 9,12/*mean (0.226226), correlation (0.258255)*/,\n\t\t    0,-8, 1,-13/*mean (0.0897886), correlation (0.274827)*/,\n\t\t    -13,-2, -8,2/*mean (0.148774), correlation (0.28065)*/,\n\t\t    -3,-2, -2,3/*mean (0.153048), correlation (0.283063)*/,\n\t\t    -6,9, -4,-9/*mean (0.169523), correlation (0.278248)*/,\n\t\t    8,12, 10,7/*mean (0.225337), correlation (0.282851)*/,\n\t\t    0,9, 1,3/*mean (0.226687), correlation (0.278734)*/,\n\t\t    7,-5, 11,-10/*mean (0.00693882), correlation (0.305161)*/,\n\t\t    -13,-6, -11,0/*mean (0.0227283), correlation (0.300181)*/,\n\t\t    10,7, 12,1/*mean (0.125517), correlation (0.31089)*/,\n\t\t    -6,-3, -6,12/*mean (0.131748), correlation (0.312779)*/,\n\t\t    10,-9, 12,-4/*mean (0.144827), correlation (0.292797)*/,\n\t\t    -13,8, -8,-12/*mean (0.149202), correlation (0.308918)*/,\n\t\t    -13,0, -8,-4/*mean (0.160909), correlation (0.310013)*/,\n\t\t    3,3, 7,8/*mean (0.177755), correlation (0.309394)*/,\n\t\t    5,7, 10,-7/*mean (0.212337), correlation (0.310315)*/,\n\t\t    -1,7, 1,-12/*mean (0.214429), correlation (0.311933)*/,\n\t\t    3,-10, 5,6/*mean (0.235807), correlation (0.313104)*/,\n\t\t    2,-4, 3,-10/*mean (0.00494827), correlation (0.344948)*/,\n\t\t    -13,0, -13,5/*mean (0.0549145), correlation (0.344675)*/,\n\t\t    -13,-7, -12,12/*mean (0.103385), correlation (0.342715)*/,\n\t\t    -13,3, -11,8/*mean (0.134222), correlation (0.322922)*/,\n\t\t    -7,12, -4,7/*mean (0.153284), correlation (0.337061)*/,\n\t\t    6,-10, 12,8/*mean (0.154881), correlation (0.329257)*/,\n\t\t    -9,-1, -7,-6/*mean (0.200967), correlation (0.33312)*/,\n\t\t    -2,-5, 0,12/*mean (0.201518), correlation (0.340635)*/,\n\t\t    -12,5, -7,5/*mean (0.207805), correlation (0.335631)*/,\n\t\t    3,-10, 8,-13/*mean (0.224438), correlation (0.34504)*/,\n\t\t    -7,-7, -4,5/*mean (0.239361), correlation (0.338053)*/,\n\t\t    -3,-2, -1,-7/*mean (0.240744), correlation (0.344322)*/,\n\t\t    2,9, 5,-11/*mean (0.242949), correlation (0.34145)*/,\n\t\t    -11,-13, -5,-13/*mean (0.244028), correlation (0.336861)*/,\n\t\t    -1,6, 0,-1/*mean (0.247571), correlation (0.343684)*/,\n\t\t    5,-3, 5,2/*mean (0.000697256), correlation (0.357265)*/,\n\t\t    -4,-13, -4,12/*mean (0.00213675), correlation (0.373827)*/,\n\t\t    -9,-6, -9,6/*mean (0.0126856), correlation (0.373938)*/,\n\t\t    -12,-10, -8,-4/*mean (0.0152497), correlation (0.364237)*/,\n\t\t    10,2, 12,-3/*mean (0.0299933), correlation (0.345292)*/,\n\t\t    7,12, 12,12/*mean (0.0307242), correlation (0.366299)*/,\n\t\t    -7,-13, -6,5/*mean (0.0534975), correlation (0.368357)*/,\n\t\t    -4,9, -3,4/*mean (0.099865), correlation (0.372276)*/,\n\t\t    7,-1, 12,2/*mean (0.117083), correlation (0.364529)*/,\n\t\t    -7,6, -5,1/*mean (0.126125), correlation (0.369606)*/,\n\t\t    -13,11, -12,5/*mean (0.130364), correlation (0.358502)*/,\n\t\t    -3,7, -2,-6/*mean (0.131691), correlation (0.375531)*/,\n\t\t    7,-8, 12,-7/*mean (0.160166), correlation (0.379508)*/,\n\t\t    -13,-7, -11,-12/*mean (0.167848), correlation (0.353343)*/,\n\t\t    1,-3, 12,12/*mean (0.183378), correlation (0.371916)*/,\n\t\t    2,-6, 3,0/*mean (0.228711), correlation (0.371761)*/,\n\t\t    -4,3, -2,-13/*mean (0.247211), correlation (0.364063)*/,\n\t\t    -1,-13, 1,9/*mean (0.249325), correlation (0.378139)*/,\n\t\t    7,1, 8,-6/*mean (0.000652272), correlation (0.411682)*/,\n\t\t    1,-1, 3,12/*mean (0.00248538), correlation (0.392988)*/,\n\t\t    9,1, 12,6/*mean (0.0206815), correlation (0.386106)*/,\n\t\t    -1,-9, -1,3/*mean (0.0364485), correlation (0.410752)*/,\n\t\t    -13,-13, -10,5/*mean (0.0376068), correlation (0.398374)*/,\n\t\t    7,7, 10,12/*mean (0.0424202), correlation (0.405663)*/,\n\t\t    12,-5, 12,9/*mean (0.0942645), correlation (0.410422)*/,\n\t\t    6,3, 7,11/*mean (0.1074), correlation (0.413224)*/,\n\t\t    5,-13, 6,10/*mean (0.109256), correlation (0.408646)*/,\n\t\t    2,-12, 2,3/*mean (0.131691), correlation (0.416076)*/,\n\t\t    3,8, 4,-6/*mean (0.165081), correlation (0.417569)*/,\n\t\t    2,6, 12,-13/*mean (0.171874), correlation (0.408471)*/,\n\t\t    9,-12, 10,3/*mean (0.175146), correlation (0.41296)*/,\n\t\t    -8,4, -7,9/*mean (0.183682), correlation (0.402956)*/,\n\t\t    -11,12, -4,-6/*mean (0.184672), correlation (0.416125)*/,\n\t\t    1,12, 2,-8/*mean (0.191487), correlation (0.386696)*/,\n\t\t    6,-9, 7,-4/*mean (0.192668), correlation (0.394771)*/,\n\t\t    2,3, 3,-2/*mean (0.200157), correlation (0.408303)*/,\n\t\t    6,3, 11,0/*mean (0.204588), correlation (0.411762)*/,\n\t\t    3,-3, 8,-8/*mean (0.205904), correlation (0.416294)*/,\n\t\t    7,8, 9,3/*mean (0.213237), correlation (0.409306)*/,\n\t\t    -11,-5, -6,-4/*mean (0.243444), correlation (0.395069)*/,\n\t\t    -10,11, -5,10/*mean (0.247672), correlation (0.413392)*/,\n\t\t    -5,-8, -3,12/*mean (0.24774), correlation (0.411416)*/,\n\t\t    -10,5, -9,0/*mean (0.00213675), correlation (0.454003)*/,\n\t\t    8,-1, 12,-6/*mean (0.0293635), correlation (0.455368)*/,\n\t\t    4,-6, 6,-11/*mean (0.0404971), correlation (0.457393)*/,\n\t\t    -10,12, -8,7/*mean (0.0481107), correlation (0.448364)*/,\n\t\t    4,-2, 6,7/*mean (0.050641), correlation (0.455019)*/,\n\t\t    -2,0, -2,12/*mean (0.0525978), correlation (0.44338)*/,\n\t\t    -5,-8, -5,2/*mean (0.0629667), correlation (0.457096)*/,\n\t\t    7,-6, 10,12/*mean (0.0653846), correlation (0.445623)*/,\n\t\t    -9,-13, -8,-8/*mean (0.0858749), correlation (0.449789)*/,\n\t\t    -5,-13, -5,-2/*mean (0.122402), correlation (0.450201)*/,\n\t\t    8,-8, 9,-13/*mean (0.125416), correlation (0.453224)*/,\n\t\t    -9,-11, -9,0/*mean (0.130128), correlation (0.458724)*/,\n\t\t    1,-8, 1,-2/*mean (0.132467), correlation (0.440133)*/,\n\t\t    7,-4, 9,1/*mean (0.132692), correlation (0.454)*/,\n\t\t    -2,1, -1,-4/*mean (0.135695), correlation (0.455739)*/,\n\t\t    11,-6, 12,-11/*mean (0.142904), correlation (0.446114)*/,\n\t\t    -12,-9, -6,4/*mean (0.146165), correlation (0.451473)*/,\n\t\t    3,7, 7,12/*mean (0.147627), correlation (0.456643)*/,\n\t\t    5,5, 10,8/*mean (0.152901), correlation (0.455036)*/,\n\t\t    0,-4, 2,8/*mean (0.167083), correlation (0.459315)*/,\n\t\t    -9,12, -5,-13/*mean (0.173234), correlation (0.454706)*/,\n\t\t    0,7, 2,12/*mean (0.18312), correlation (0.433855)*/,\n\t\t    -1,2, 1,7/*mean (0.185504), correlation (0.443838)*/,\n\t\t    5,11, 7,-9/*mean (0.185706), correlation (0.451123)*/,\n\t\t    3,5, 6,-8/*mean (0.188968), correlation (0.455808)*/,\n\t\t    -13,-4, -8,9/*mean (0.191667), correlation (0.459128)*/,\n\t\t    -5,9, -3,-3/*mean (0.193196), correlation (0.458364)*/,\n\t\t    -4,-7, -3,-12/*mean (0.196536), correlation (0.455782)*/,\n\t\t    6,5, 8,0/*mean (0.1972), correlation (0.450481)*/,\n\t\t    -7,6, -6,12/*mean (0.199438), correlation (0.458156)*/,\n\t\t    -13,6, -5,-2/*mean (0.211224), correlation (0.449548)*/,\n\t\t    1,-10, 3,10/*mean (0.211718), correlation (0.440606)*/,\n\t\t    4,1, 8,-4/*mean (0.213034), correlation (0.443177)*/,\n\t\t    -2,-2, 2,-13/*mean (0.234334), correlation (0.455304)*/,\n\t\t    2,-12, 12,12/*mean (0.235684), correlation (0.443436)*/,\n\t\t    -2,-13, 0,-6/*mean (0.237674), correlation (0.452525)*/,\n\t\t    4,1, 9,3/*mean (0.23962), correlation (0.444824)*/,\n\t\t    -6,-10, -3,-5/*mean (0.248459), correlation (0.439621)*/,\n\t\t    -3,-13, -1,1/*mean (0.249505), correlation (0.456666)*/,\n\t\t    7,5, 12,-11/*mean (0.00119208), correlation (0.495466)*/,\n\t\t    4,-2, 5,-7/*mean (0.00372245), correlation (0.484214)*/,\n\t\t    -13,9, -9,-5/*mean (0.00741116), correlation (0.499854)*/,\n\t\t    7,1, 8,6/*mean (0.0208952), correlation (0.499773)*/,\n\t\t    7,-8, 7,6/*mean (0.0220085), correlation (0.501609)*/,\n\t\t    -7,-4, -7,1/*mean (0.0233806), correlation (0.496568)*/,\n\t\t    -8,11, -7,-8/*mean (0.0236505), correlation (0.489719)*/,\n\t\t    -13,6, -12,-8/*mean (0.0268781), correlation (0.503487)*/,\n\t\t    2,4, 3,9/*mean (0.0323324), correlation (0.501938)*/,\n\t\t    10,-5, 12,3/*mean (0.0399235), correlation (0.494029)*/,\n\t\t    -6,-5, -6,7/*mean (0.0420153), correlation (0.486579)*/,\n\t\t    8,-3, 9,-8/*mean (0.0548021), correlation (0.484237)*/,\n\t\t    2,-12, 2,8/*mean (0.0616622), correlation (0.496642)*/,\n\t\t    -11,-2, -10,3/*mean (0.0627755), correlation (0.498563)*/,\n\t\t    -12,-13, -7,-9/*mean (0.0829622), correlation (0.495491)*/,\n\t\t    -11,0, -10,-5/*mean (0.0843342), correlation (0.487146)*/,\n\t\t    5,-3, 11,8/*mean (0.0929937), correlation (0.502315)*/,\n\t\t    -2,-13, -1,12/*mean (0.113327), correlation (0.48941)*/,\n\t\t    -1,-8, 0,9/*mean (0.132119), correlation (0.467268)*/,\n\t\t    -13,-11, -12,-5/*mean (0.136269), correlation (0.498771)*/,\n\t\t    -10,-2, -10,11/*mean (0.142173), correlation (0.498714)*/,\n\t\t    -3,9, -2,-13/*mean (0.144141), correlation (0.491973)*/,\n\t\t    2,-3, 3,2/*mean (0.14892), correlation (0.500782)*/,\n\t\t    -9,-13, -4,0/*mean (0.150371), correlation (0.498211)*/,\n\t\t    -4,6, -3,-10/*mean (0.152159), correlation (0.495547)*/,\n\t\t    -4,12, -2,-7/*mean (0.156152), correlation (0.496925)*/,\n\t\t    -6,-11, -4,9/*mean (0.15749), correlation (0.499222)*/,\n\t\t    6,-3, 6,11/*mean (0.159211), correlation (0.503821)*/,\n\t\t    -13,11, -5,5/*mean (0.162427), correlation (0.501907)*/,\n\t\t    11,11, 12,6/*mean (0.16652), correlation (0.497632)*/,\n\t\t    7,-5, 12,-2/*mean (0.169141), correlation (0.484474)*/,\n\t\t    -1,12, 0,7/*mean (0.169456), correlation (0.495339)*/,\n\t\t    -4,-8, -3,-2/*mean (0.171457), correlation (0.487251)*/,\n\t\t    -7,1, -6,7/*mean (0.175), correlation (0.500024)*/,\n\t\t    -13,-12, -8,-13/*mean (0.175866), correlation (0.497523)*/,\n\t\t    -7,-2, -6,-8/*mean (0.178273), correlation (0.501854)*/,\n\t\t    -8,5, -6,-9/*mean (0.181107), correlation (0.494888)*/,\n\t\t    -5,-1, -4,5/*mean (0.190227), correlation (0.482557)*/,\n\t\t    -13,7, -8,10/*mean (0.196739), correlation (0.496503)*/,\n\t\t    1,5, 5,-13/*mean (0.19973), correlation (0.499759)*/,\n\t\t    1,0, 10,-13/*mean (0.204465), correlation (0.49873)*/,\n\t\t    9,12, 10,-1/*mean (0.209334), correlation (0.49063)*/,\n\t\t    5,-8, 10,-9/*mean (0.211134), correlation (0.503011)*/,\n\t\t    -1,11, 1,-13/*mean (0.212), correlation (0.499414)*/,\n\t\t    -9,-3, -6,2/*mean (0.212168), correlation (0.480739)*/,\n\t\t    -1,-10, 1,12/*mean (0.212731), correlation (0.502523)*/,\n\t\t    -13,1, -8,-10/*mean (0.21327), correlation (0.489786)*/,\n\t\t    8,-11, 10,-6/*mean (0.214159), correlation (0.488246)*/,\n\t\t    2,-13, 3,-6/*mean (0.216993), correlation (0.50287)*/,\n\t\t    7,-13, 12,-9/*mean (0.223639), correlation (0.470502)*/,\n\t\t    -10,-10, -5,-7/*mean (0.224089), correlation (0.500852)*/,\n\t\t    -10,-8, -8,-13/*mean (0.228666), correlation (0.502629)*/,\n\t\t    4,-6, 8,5/*mean (0.22906), correlation (0.498305)*/,\n\t\t    3,12, 8,-13/*mean (0.233378), correlation (0.503825)*/,\n\t\t    -4,2, -3,-3/*mean (0.234323), correlation (0.476692)*/,\n\t\t    5,-13, 10,-12/*mean (0.236392), correlation (0.475462)*/,\n\t\t    4,-13, 5,-1/*mean (0.236842), correlation (0.504132)*/,\n\t\t    -9,9, -4,3/*mean (0.236977), correlation (0.497739)*/,\n\t\t    0,3, 3,-9/*mean (0.24314), correlation (0.499398)*/,\n\t\t    -12,1, -6,1/*mean (0.243297), correlation (0.489447)*/,\n\t\t    3,2, 4,-8/*mean (0.00155196), correlation (0.553496)*/,\n\t\t    -10,-10, -10,9/*mean (0.00239541), correlation (0.54297)*/,\n\t\t    8,-13, 12,12/*mean (0.0034413), correlation (0.544361)*/,\n\t\t    -8,-12, -6,-5/*mean (0.003565), correlation (0.551225)*/,\n\t\t    2,2, 3,7/*mean (0.00835583), correlation (0.55285)*/,\n\t\t    10,6, 11,-8/*mean (0.00885065), correlation (0.540913)*/,\n\t\t    6,8, 8,-12/*mean (0.0101552), correlation (0.551085)*/,\n\t\t    -7,10, -6,5/*mean (0.0102227), correlation (0.533635)*/,\n\t\t    -3,-9, -3,9/*mean (0.0110211), correlation (0.543121)*/,\n\t\t    -1,-13, -1,5/*mean (0.0113473), correlation (0.550173)*/,\n\t\t    -3,-7, -3,4/*mean (0.0140913), correlation (0.554774)*/,\n\t\t    -8,-2, -8,3/*mean (0.017049), correlation (0.55461)*/,\n\t\t    4,2, 12,12/*mean (0.01778), correlation (0.546921)*/,\n\t\t    2,-5, 3,11/*mean (0.0224022), correlation (0.549667)*/,\n\t\t    6,-9, 11,-13/*mean (0.029161), correlation (0.546295)*/,\n\t\t    3,-1, 7,12/*mean (0.0303081), correlation (0.548599)*/,\n\t\t    11,-1, 12,4/*mean (0.0355151), correlation (0.523943)*/,\n\t\t    -3,0, -3,6/*mean (0.0417904), correlation (0.543395)*/,\n\t\t    4,-11, 4,12/*mean (0.0487292), correlation (0.542818)*/,\n\t\t    2,-4, 2,1/*mean (0.0575124), correlation (0.554888)*/,\n\t\t    -10,-6, -8,1/*mean (0.0594242), correlation (0.544026)*/,\n\t\t    -13,7, -11,1/*mean (0.0597391), correlation (0.550524)*/,\n\t\t    -13,12, -11,-13/*mean (0.0608974), correlation (0.55383)*/,\n\t\t    6,0, 11,-13/*mean (0.065126), correlation (0.552006)*/,\n\t\t    0,-1, 1,4/*mean (0.074224), correlation (0.546372)*/,\n\t\t    -13,3, -9,-2/*mean (0.0808592), correlation (0.554875)*/,\n\t\t    -9,8, -6,-3/*mean (0.0883378), correlation (0.551178)*/,\n\t\t    -13,-6, -8,-2/*mean (0.0901035), correlation (0.548446)*/,\n\t\t    5,-9, 8,10/*mean (0.0949843), correlation (0.554694)*/,\n\t\t    2,7, 3,-9/*mean (0.0994152), correlation (0.550979)*/,\n\t\t    -1,-6, -1,-1/*mean (0.10045), correlation (0.552714)*/,\n\t\t    9,5, 11,-2/*mean (0.100686), correlation (0.552594)*/,\n\t\t    11,-3, 12,-8/*mean (0.101091), correlation (0.532394)*/,\n\t\t    3,0, 3,5/*mean (0.101147), correlation (0.525576)*/,\n\t\t    -1,4, 0,10/*mean (0.105263), correlation (0.531498)*/,\n\t\t    3,-6, 4,5/*mean (0.110785), correlation (0.540491)*/,\n\t\t    -13,0, -10,5/*mean (0.112798), correlation (0.536582)*/,\n\t\t    5,8, 12,11/*mean (0.114181), correlation (0.555793)*/,\n\t\t    8,9, 9,-6/*mean (0.117431), correlation (0.553763)*/,\n\t\t    7,-4, 8,-12/*mean (0.118522), correlation (0.553452)*/,\n\t\t    -10,4, -10,9/*mean (0.12094), correlation (0.554785)*/,\n\t\t    7,3, 12,4/*mean (0.122582), correlation (0.555825)*/,\n\t\t    9,-7, 10,-2/*mean (0.124978), correlation (0.549846)*/,\n\t\t    7,0, 12,-2/*mean (0.127002), correlation (0.537452)*/,\n\t\t    -1,-6, 0,-11/*mean (0.127148), correlation (0.547401)*/\n\t\t]);\n\n\t    var H = new jsfeat.matrix_t(3, 3, jsfeat.F32_t|jsfeat.C1_t);\n\t    var patch_img = new jsfeat.matrix_t(32, 32, jsfeat.U8_t|jsfeat.C1_t);\n\n\t    var rectify_patch = function(src, dst, angle, px, py, psize) {\n\t    \tvar cosine = Math.cos(angle);\n\t    \tvar sine   = Math.sin(angle);\n\n\t        H.data[0] = cosine, H.data[1] = -sine,    H.data[2] = (-cosine + sine  ) * psize*0.5 + px,\n\t        H.data[3] = sine,   H.data[4] =  cosine,  H.data[5] = (-sine   - cosine) * psize*0.5 + py;\n\n\t        jsfeat.imgproc.warp_affine(src, dst, H, 128);\n\t    }\n\n    \treturn {\n\n    \t\tdescribe: function(src, corners, count, descriptors) {\n    \t\t\tvar DESCR_SIZE = 32; // bytes;\n\t\t\t\tvar i=0,b=0,px=0.0,py=0.0,angle=0.0;\n\t\t\t\tvar t0=0, t1=0, val=0;\n\t\t\t\tvar img = src.data, w = src.cols, h = src.rows;\n\t\t\t\tvar patch_d = patch_img.data;\n\t\t\t\tvar patch_off = 16*32 + 16; // center of patch\n\t\t\t\tvar patt=0;\n\n\t\t\t\tif(!(descriptors.type&jsfeat.U8_t)) {\n\t\t\t\t\t// relocate to U8 type\n\t\t\t\t\tdescriptors.type = jsfeat.U8_t;\n\t\t\t\t\tdescriptors.cols = DESCR_SIZE;\n\t                descriptors.rows = count;\n\t                descriptors.channel = 1;\n\t\t\t\t\tdescriptors.allocate();\n\t\t\t\t} else {\n\t\t\t\t\tdescriptors.resize(DESCR_SIZE, count, 1);\n\t\t\t\t}\n\n\t\t\t\tvar descr_d = descriptors.data;\n\t\t\t\tvar descr_off = 0;\n\n\t\t\t\tfor(i = 0; i < count; ++i) {\n\t\t\t\t\tpx = corners[i].x;\n\t\t\t\t\tpy = corners[i].y;\n\t\t\t\t\tangle = corners[i].angle;\n\n\t\t\t\t\trectify_patch(src, patch_img, angle, px, py, 32);\n\n\t\t\t\t\t// describe the patch\n\t\t\t\t\tpatt = 0;\n\t\t\t\t\tfor (b = 0; b < DESCR_SIZE; ++b) {\n\t\t\t            \n\t\t\t            t0 = patch_d[patch_off + bit_pattern_31_[patt+1] * 32 + bit_pattern_31_[patt]]; patt += 2\n\t\t\t            t1 = patch_d[patch_off + bit_pattern_31_[patt+1] * 32 + bit_pattern_31_[patt]]; patt += 2\n\t\t\t            val = (t0 < t1)|0;\n\t\t\t            \n\t\t\t            t0 = patch_d[patch_off + bit_pattern_31_[patt+1] * 32 + bit_pattern_31_[patt]]; patt += 2\n\t\t\t            t1 = patch_d[patch_off + bit_pattern_31_[patt+1] * 32 + bit_pattern_31_[patt]]; patt += 2\n\t\t\t            val |= (t0 < t1) << 1;\n\t\t\t            \n\t\t\t            t0 = patch_d[patch_off + bit_pattern_31_[patt+1] * 32 + bit_pattern_31_[patt]]; patt += 2\n\t\t\t            t1 = patch_d[patch_off + bit_pattern_31_[patt+1] * 32 + bit_pattern_31_[patt]]; patt += 2\n\t\t\t            val |= (t0 < t1) << 2;\n\t\t\t            \n\t\t\t            t0 = patch_d[patch_off + bit_pattern_31_[patt+1] * 32 + bit_pattern_31_[patt]]; patt += 2\n\t\t\t            t1 = patch_d[patch_off + bit_pattern_31_[patt+1] * 32 + bit_pattern_31_[patt]]; patt += 2\n\t\t\t            val |= (t0 < t1) << 3;\n\t\t\t            \n\t\t\t            t0 = patch_d[patch_off + bit_pattern_31_[patt+1] * 32 + bit_pattern_31_[patt]]; patt += 2\n\t\t\t            t1 = patch_d[patch_off + bit_pattern_31_[patt+1] * 32 + bit_pattern_31_[patt]]; patt += 2\n\t\t\t            val |= (t0 < t1) << 4;\n\t\t\t            \n\t\t\t            t0 = patch_d[patch_off + bit_pattern_31_[patt+1] * 32 + bit_pattern_31_[patt]]; patt += 2\n\t\t\t            t1 = patch_d[patch_off + bit_pattern_31_[patt+1] * 32 + bit_pattern_31_[patt]]; patt += 2\n\t\t\t            val |= (t0 < t1) << 5;\n\t\t\t            \n\t\t\t            t0 = patch_d[patch_off + bit_pattern_31_[patt+1] * 32 + bit_pattern_31_[patt]]; patt += 2\n\t\t\t            t1 = patch_d[patch_off + bit_pattern_31_[patt+1] * 32 + bit_pattern_31_[patt]]; patt += 2\n\t\t\t            val |= (t0 < t1) << 6;\n\t\t\t            \n\t\t\t            t0 = patch_d[patch_off + bit_pattern_31_[patt+1] * 32 + bit_pattern_31_[patt]]; patt += 2\n\t\t\t            t1 = patch_d[patch_off + bit_pattern_31_[patt+1] * 32 + bit_pattern_31_[patt]]; patt += 2\n\t\t\t            val |= (t0 < t1) << 7;\n\t\t\t            \n\t\t\t            descr_d[descr_off+b] = val;\n\t\t\t        }\n\t\t\t        descr_off += DESCR_SIZE;\n\t\t\t\t}\n    \t\t}\n    \t};\n    })();\n\n    global.orb = orb;\n\n})(jsfeat);\n/**\n * @author Eugene Zatepyakin / http://inspirit.ru/\n *\n * this code is a rewrite from OpenCV's Lucas-Kanade optical flow implementation\n */\n\n(function(global) {\n    \"use strict\";\n    //\n    var optical_flow_lk = (function() {\n\n        // short link to shar deriv\n        var scharr_deriv = jsfeat.imgproc.scharr_derivatives;\n\n        return {\n            track: function(prev_pyr, curr_pyr, prev_xy, curr_xy, count, win_size, max_iter, status, eps, min_eigen_threshold) {\n                if (typeof max_iter === \"undefined\") { max_iter = 30; }\n                if (typeof status === \"undefined\") { status = new Uint8Array(count); }\n                if (typeof eps === \"undefined\") { eps = 0.01; }\n                if (typeof min_eigen_threshold === \"undefined\") { min_eigen_threshold = 0.0001; }\n\n                var half_win = (win_size-1)*0.5;\n                var win_area = (win_size*win_size)|0;\n                var win_area2 = win_area << 1;\n                var prev_imgs = prev_pyr.data, next_imgs = curr_pyr.data;\n                var img_prev=prev_imgs[0].data,img_next=next_imgs[0].data;\n                var w0 = prev_imgs[0].cols, h0 = prev_imgs[0].rows,lw=0,lh=0;\n\n                var iwin_node = jsfeat.cache.get_buffer(win_area<<2);\n                var deriv_iwin_node = jsfeat.cache.get_buffer(win_area2<<2);\n                var deriv_lev_node = jsfeat.cache.get_buffer((h0*(w0<<1))<<2);\n\n                var deriv_m = new jsfeat.matrix_t(w0, h0, jsfeat.S32C2_t, deriv_lev_node.data);\n\n                var iwin_buf = iwin_node.i32;\n                var deriv_iwin = deriv_iwin_node.i32;\n                var deriv_lev = deriv_lev_node.i32;\n\n                var dstep=0,src=0,dsrc=0,iptr=0,diptr=0,jptr=0;\n                var lev_sc=0.0,prev_x=0.0,prev_y=0.0,next_x=0.0,next_y=0.0;\n                var prev_delta_x=0.0,prev_delta_y=0.0,delta_x=0.0,delta_y=0.0;\n                var iprev_x=0,iprev_y=0,inext_x=0,inext_y=0;\n                var i=0,j=0,x=0,y=0,level=0,ptid=0,iter=0;\n                var brd_tl=0,brd_r=0,brd_b=0;\n                var a=0.0,b=0.0,b1=0.0,b2=0.0;\n\n                // fixed point math\n                var W_BITS14 = 14;\n                var W_BITS4 = 14;\n                var W_BITS1m5 = W_BITS4 - 5;\n                var W_BITS1m51 = (1 << ((W_BITS1m5) - 1));\n                var W_BITS14_ = (1 << W_BITS14);\n                var W_BITS41 = (1 << ((W_BITS4) - 1));\n                var FLT_SCALE = 1.0/(1 << 20);\n                var iw00=0,iw01=0,iw10=0,iw11=0,ival=0,ixval=0,iyval=0;\n                var A11=0.0,A12=0.0,A22=0.0,D=0.0,min_eig=0.0;\n\n                var FLT_EPSILON = 0.00000011920929;\n                eps *= eps;\n\n                // reset status\n                for(; i < count; ++i) {\n                    status[i] = 1;\n                }\n\n                var max_level = (prev_pyr.levels - 1)|0;\n                level = max_level;\n\n                for(; level >= 0; --level) {\n                    lev_sc = (1.0/(1 << level));\n                    lw = w0 >> level;\n                    lh = h0 >> level;\n                    dstep = lw << 1;\n                    img_prev = prev_imgs[level].data;\n                    img_next = next_imgs[level].data;\n                    \n                    brd_r = (lw - win_size)|0;\n                    brd_b = (lh - win_size)|0;\n\n                    // calculate level derivatives\n                    scharr_deriv(prev_imgs[level], deriv_m);\n\n                    // iterate through points\n                    for(ptid = 0; ptid < count; ++ptid) {\n                        i = ptid << 1;\n                        j = i + 1;\n                        prev_x = prev_xy[i]*lev_sc;\n                        prev_y = prev_xy[j]*lev_sc;\n\n                        if( level == max_level ) {\n                            next_x = prev_x;\n                            next_y = prev_y;\n                        } else {\n                            next_x = curr_xy[i]*2.0;\n                            next_y = curr_xy[j]*2.0;\n                        }\n                        curr_xy[i] = next_x;\n                        curr_xy[j] = next_y;\n\n                        prev_x -= half_win;\n                        prev_y -= half_win;\n                        iprev_x = prev_x|0;\n                        iprev_y = prev_y|0;\n\n                        // border check\n                        x = (iprev_x <= brd_tl)|(iprev_x >= brd_r)|(iprev_y <= brd_tl)|(iprev_y >= brd_b);\n                        if( x != 0 ) {\n                            if( level == 0 ) {\n                                status[ptid] = 0;\n                            }\n                            continue;\n                        }\n\n                        a = prev_x - iprev_x;\n                        b = prev_y - iprev_y;\n                        iw00 = (((1.0 - a)*(1.0 - b)*W_BITS14_) + 0.5)|0;\n                        iw01 = ((a*(1.0 - b)*W_BITS14_) + 0.5)|0;\n                        iw10 = (((1.0 - a)*b*W_BITS14_) + 0.5)|0;\n                        iw11 = (W_BITS14_ - iw00 - iw01 - iw10);\n\n                        A11 = 0.0, A12 = 0.0, A22 = 0.0;\n\n                        // extract the patch from the first image, compute covariation matrix of derivatives\n                        for( y = 0; y < win_size; ++y ) {\n                            src = ( (y + iprev_y)*lw + iprev_x )|0;\n                            dsrc = src << 1;\n\n                            iptr = (y*win_size)|0;\n                            diptr = iptr << 1;\n                            for(x = 0 ; x < win_size; ++x, ++src, ++iptr, dsrc += 2) {\n                                ival = ( (img_prev[src])*iw00 + (img_prev[src+1])*iw01 +\n                                        (img_prev[src+lw])*iw10 + (img_prev[src+lw+1])*iw11 );\n                                ival = (((ival) + W_BITS1m51) >> (W_BITS1m5));\n\n                                ixval = ( deriv_lev[dsrc]*iw00 + deriv_lev[dsrc+2]*iw01 +\n                                        deriv_lev[dsrc+dstep]*iw10 + deriv_lev[dsrc+dstep+2]*iw11 );\n                                ixval = (((ixval) + W_BITS41) >> (W_BITS4));\n\n                                iyval = ( deriv_lev[dsrc+1]*iw00 + deriv_lev[dsrc+3]*iw01 + deriv_lev[dsrc+dstep+1]*iw10 +\n                                        deriv_lev[dsrc+dstep+3]*iw11 );\n                                iyval = (((iyval) + W_BITS41) >> (W_BITS4));\n\n                                iwin_buf[iptr] = ival;\n                                deriv_iwin[diptr++] = ixval;\n                                deriv_iwin[diptr++] = iyval;\n\n                                A11 += ixval*ixval;\n                                A12 += ixval*iyval;\n                                A22 += iyval*iyval;\n                            }\n                        }\n\n                        A11 *= FLT_SCALE; A12 *= FLT_SCALE; A22 *= FLT_SCALE;\n\n                        D = A11*A22 - A12*A12;\n                        min_eig = (A22 + A11 - Math.sqrt((A11-A22)*(A11-A22) + 4.0*A12*A12)) / win_area2;\n\n                        if( min_eig < min_eigen_threshold || D < FLT_EPSILON )\n                        {\n                            if( level == 0 ) {\n                                status[ptid] = 0;\n                            }\n                            continue;\n                        }\n\n                        D = 1.0/D;\n\n                        next_x -= half_win;\n                        next_y -= half_win;\n                        prev_delta_x = 0.0;\n                        prev_delta_y = 0.0;\n\n                        for( iter = 0; iter < max_iter; ++iter ) {\n                            inext_x = next_x|0;\n                            inext_y = next_y|0;\n\n                            x = (inext_x <= brd_tl)|(inext_x >= brd_r)|(inext_y <= brd_tl)|(inext_y >= brd_b);\n                            if( x != 0 ) {\n                                if( level == 0 ) {\n                                    status[ptid] = 0;\n                                }\n                                break;\n                            }\n\n                            a = next_x - inext_x;\n                            b = next_y - inext_y;\n                            iw00 = (((1.0 - a)*(1.0 - b)*W_BITS14_) + 0.5)|0;\n                            iw01 = ((a*(1.0 - b)*W_BITS14_) + 0.5)|0;\n                            iw10 = (((1.0 - a)*b*W_BITS14_) + 0.5)|0;\n                            iw11 = (W_BITS14_ - iw00 - iw01 - iw10);\n                            b1 = 0.0, b2 = 0.0;\n\n                            for( y = 0; y < win_size; ++y ) {\n                                jptr = ( (y + inext_y)*lw + inext_x )|0;\n\n                                iptr = (y*win_size)|0;\n                                diptr = iptr << 1;\n                                for( x = 0 ; x < win_size; ++x, ++jptr, ++iptr ) {\n                                    ival = ( (img_next[jptr])*iw00 + (img_next[jptr+1])*iw01 +\n                                            (img_next[jptr+lw])*iw10 + (img_next[jptr+lw+1])*iw11 );\n                                    ival = (((ival) + W_BITS1m51) >> (W_BITS1m5));\n                                    ival = (ival - iwin_buf[iptr]);\n\n                                    b1 += ival * deriv_iwin[diptr++];\n                                    b2 += ival * deriv_iwin[diptr++];\n                                }\n                            }\n\n                            b1 *= FLT_SCALE;\n                            b2 *= FLT_SCALE;\n\n                            delta_x = ((A12*b2 - A22*b1) * D);\n                            delta_y = ((A12*b1 - A11*b2) * D);\n\n                            next_x += delta_x;\n                            next_y += delta_y;\n                            curr_xy[i] = next_x + half_win;\n                            curr_xy[j] = next_y + half_win;\n\n                            if( delta_x*delta_x + delta_y*delta_y <= eps ) {\n                                break;\n                            }\n\n                            if( iter > 0 && Math.abs(delta_x + prev_delta_x) < 0.01 &&\n                                            Math.abs(delta_y + prev_delta_y) < 0.01 ) {\n                                curr_xy[i] -= delta_x*0.5;\n                                curr_xy[j] -= delta_y*0.5;\n                                break;\n                            }\n\n                            prev_delta_x = delta_x;\n                            prev_delta_y = delta_y;\n                        }\n                    } // points loop\n                } // levels loop\n\n                jsfeat.cache.put_buffer(iwin_node);\n                jsfeat.cache.put_buffer(deriv_iwin_node);\n                jsfeat.cache.put_buffer(deriv_lev_node);\n            }\n        };\n    })();\n\n    global.optical_flow_lk = optical_flow_lk;\n\n})(jsfeat);\n/**\r\n * @author Eugene Zatepyakin / http://inspirit.ru/\r\n *\r\n * this code is a rewrite from https://github.com/mtschirs/js-objectdetect implementation\r\n * @author Martin Tschirsich / http://www.tu-darmstadt.de/~m_t\r\n */\r\n\r\n(function(global) {\r\n    \"use strict\";\r\n    //\r\n    var haar = (function() {\r\n\r\n        var _group_func = function(r1, r2) {\r\n            var distance = (r1.width * 0.25 + 0.5)|0;\r\n\r\n            return r2.x <= r1.x + distance &&\r\n                   r2.x >= r1.x - distance &&\r\n                   r2.y <= r1.y + distance &&\r\n                   r2.y >= r1.y - distance &&\r\n                   r2.width <= (r1.width * 1.5 + 0.5)|0 &&\r\n                   (r2.width * 1.5 + 0.5)|0 >= r1.width;\r\n        }\r\n        \r\n        return {\r\n\r\n            edges_density: 0.07,\r\n\r\n            detect_single_scale: function(int_sum, int_sqsum, int_tilted, int_canny_sum, width, height, scale, classifier) {\r\n                var win_w = (classifier.size[0] * scale)|0,\r\n                    win_h = (classifier.size[1] * scale)|0,\r\n                    step_x = (0.5 * scale + 1.5)|0,\r\n                    step_y = step_x;\r\n                var i,j,k,x,y,ex=(width-win_w)|0,ey=(height-win_h)|0;\r\n                var w1=(width+1)|0,edge_dens,mean,variance,std;\r\n                var inv_area = 1.0 / (win_w * win_h);\r\n                var stages,stage,trees,tree,sn,tn,fn,found=true,stage_thresh,stage_sum,tree_sum,feature,features;\r\n                var fi_a,fi_b,fi_c,fi_d,fw,fh;\r\n\r\n                var ii_a=0,ii_b=win_w,ii_c=win_h*w1,ii_d=ii_c+win_w;\r\n                var edges_thresh = ((win_w*win_h) * 0xff * this.edges_density)|0;\r\n                // if too much gradient we also can skip\r\n                //var edges_thresh_high = ((win_w*win_h) * 0xff * 0.3)|0;\r\n\r\n                var rects = [];\r\n                for(y = 0; y < ey; y += step_y) {\r\n                    ii_a = y * w1;\r\n                    for(x = 0; x < ex; x += step_x, ii_a += step_x) {\r\n\r\n                        mean =    int_sum[ii_a] \r\n                                - int_sum[ii_a+ii_b]\r\n                                - int_sum[ii_a+ii_c]\r\n                                + int_sum[ii_a+ii_d];\r\n\r\n                        // canny prune\r\n                        if(int_canny_sum) {\r\n                            edge_dens = (int_canny_sum[ii_a] \r\n                                        - int_canny_sum[ii_a+ii_b]\r\n                                        - int_canny_sum[ii_a+ii_c]\r\n                                        + int_canny_sum[ii_a+ii_d]);\r\n                            if(edge_dens < edges_thresh || mean < 20) {\r\n                                x += step_x, ii_a += step_x;\r\n                                continue;\r\n                            }\r\n                        }\r\n\r\n                        mean *= inv_area;\r\n                        variance = (int_sqsum[ii_a] \r\n                                    - int_sqsum[ii_a+ii_b]\r\n                                    - int_sqsum[ii_a+ii_c]\r\n                                    + int_sqsum[ii_a+ii_d]) * inv_area - mean * mean;\r\n\r\n                        std = variance > 0. ? Math.sqrt(variance) : 1;\r\n\r\n                        stages = classifier.complexClassifiers;\r\n                        sn = stages.length;\r\n                        found =  true;\r\n                        for(i = 0; i < sn; ++i) {\r\n                            stage = stages[i];\r\n                            stage_thresh = stage.threshold;\r\n                            trees = stage.simpleClassifiers;\r\n                            tn = trees.length;\r\n                            stage_sum = 0;\r\n                            for(j = 0; j < tn; ++j) {\r\n                                tree = trees[j];\r\n                                tree_sum = 0;\r\n                                features = tree.features;\r\n                                fn = features.length;\r\n                                if(tree.tilted === 1) {\r\n                                    for(k=0; k < fn; ++k) {\r\n                                        feature = features[k];\r\n                                        fi_a = ~~(x + feature[0] * scale) + ~~(y + feature[1] * scale) * w1;\r\n                                        fw = ~~(feature[2] * scale);\r\n                                        fh = ~~(feature[3] * scale);\r\n                                        fi_b = fw * w1;\r\n                                        fi_c =  fh * w1;\r\n\r\n                                        tree_sum += (int_tilted[fi_a]\r\n                                                    - int_tilted[fi_a + fw + fi_b]\r\n                                                    - int_tilted[fi_a - fh + fi_c]\r\n                                                    + int_tilted[fi_a + fw - fh + fi_b + fi_c]) * feature[4];\r\n                                    }\r\n                                } else {\r\n                                    for(k=0; k < fn; ++k) {\r\n                                        feature = features[k];\r\n                                        fi_a = ~~(x + feature[0] * scale) + ~~(y + feature[1] * scale) * w1;\r\n                                        fw = ~~(feature[2] * scale);\r\n                                        fh = ~~(feature[3] * scale);\r\n                                        fi_c = fh * w1;\r\n\r\n                                        tree_sum += (int_sum[fi_a] \r\n                                                    - int_sum[fi_a+fw]\r\n                                                    - int_sum[fi_a+fi_c]\r\n                                                    + int_sum[fi_a+fi_c+fw]) * feature[4];\r\n                                    }\r\n                                }\r\n                                stage_sum += (tree_sum * inv_area < tree.threshold * std) ? tree.left_val : tree.right_val;\r\n                            }\r\n                            if (stage_sum < stage_thresh) {\r\n                                found = false;\r\n                                break;\r\n                            }\r\n                        }\r\n                        \r\n                        if(found) {\r\n                            rects.push({\"x\" : x,\r\n                                        \"y\" : y,\r\n                                        \"width\" : win_w,\r\n                                        \"height\" : win_h,\r\n                                        \"neighbor\" : 1,\r\n                                        \"confidence\" : stage_sum});\r\n                            x += step_x, ii_a += step_x;\r\n                        }\r\n                    }\r\n                }\r\n                return rects;\r\n            },\r\n\r\n            detect_multi_scale: function(int_sum, int_sqsum, int_tilted, int_canny_sum, width, height, classifier, scale_factor, scale_min) {\r\n                if (typeof scale_factor === \"undefined\") { scale_factor = 1.2; }\r\n                if (typeof scale_min === \"undefined\") { scale_min = 1.0; }\r\n                var win_w = classifier.size[0];\r\n                var win_h = classifier.size[1];\r\n                var rects = [];\r\n                while (scale_min * win_w < width && scale_min * win_h < height) {\r\n                    rects = rects.concat(this.detect_single_scale(int_sum, int_sqsum, int_tilted, int_canny_sum, width, height, scale_min, classifier));\r\n                    scale_min *= scale_factor;\r\n                }\r\n                return rects;\r\n            },\r\n\r\n            // OpenCV method to group detected rectangles\r\n            group_rectangles: function(rects, min_neighbors) {\r\n                if (typeof min_neighbors === \"undefined\") { min_neighbors = 1; }\r\n                var i, j, n = rects.length;\r\n                var node = [];\r\n                for (i = 0; i < n; ++i) {\r\n                    node[i] = {\"parent\" : -1,\r\n                               \"element\" : rects[i],\r\n                               \"rank\" : 0};\r\n                }\r\n                for (i = 0; i < n; ++i) {\r\n                    if (!node[i].element)\r\n                        continue;\r\n                    var root = i;\r\n                    while (node[root].parent != -1)\r\n                        root = node[root].parent;\r\n                    for (j = 0; j < n; ++j) {\r\n                        if( i != j && node[j].element && _group_func(node[i].element, node[j].element)) {\r\n                            var root2 = j;\r\n\r\n                            while (node[root2].parent != -1)\r\n                                root2 = node[root2].parent;\r\n\r\n                            if(root2 != root) {\r\n                                if(node[root].rank > node[root2].rank)\r\n                                    node[root2].parent = root;\r\n                                else {\r\n                                    node[root].parent = root2;\r\n                                    if (node[root].rank == node[root2].rank)\r\n                                    node[root2].rank++;\r\n                                    root = root2;\r\n                                }\r\n\r\n                                /* compress path from node2 to the root: */\r\n                                var temp, node2 = j;\r\n                                while (node[node2].parent != -1) {\r\n                                    temp = node2;\r\n                                    node2 = node[node2].parent;\r\n                                    node[temp].parent = root;\r\n                                }\r\n\r\n                                /* compress path from node to the root: */\r\n                                node2 = i;\r\n                                while (node[node2].parent != -1) {\r\n                                    temp = node2;\r\n                                    node2 = node[node2].parent;\r\n                                    node[temp].parent = root;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                var idx_seq = [];\r\n                var class_idx = 0;\r\n                for(i = 0; i < n; i++) {\r\n                    j = -1;\r\n                    var node1 = i;\r\n                    if(node[node1].element) {\r\n                        while (node[node1].parent != -1)\r\n                            node1 = node[node1].parent;\r\n                        if(node[node1].rank >= 0)\r\n                            node[node1].rank = ~class_idx++;\r\n                        j = ~node[node1].rank;\r\n                    }\r\n                    idx_seq[i] = j;\r\n                }\r\n                \r\n                var comps = [];\r\n                for (i = 0; i < class_idx+1; ++i) {\r\n                    comps[i] = {\"neighbors\" : 0,\r\n                                \"x\" : 0,\r\n                                \"y\" : 0,\r\n                                \"width\" : 0,\r\n                                \"height\" : 0,\r\n                                \"confidence\" : 0};\r\n                }\r\n\r\n                // count number of neighbors\r\n                for(i = 0; i < n; ++i) {\r\n                    var r1 = rects[i];\r\n                    var idx = idx_seq[i];\r\n\r\n                    if (comps[idx].neighbors == 0)\r\n                        comps[idx].confidence = r1.confidence;\r\n\r\n                    ++comps[idx].neighbors;\r\n\r\n                    comps[idx].x += r1.x;\r\n                    comps[idx].y += r1.y;\r\n                    comps[idx].width += r1.width;\r\n                    comps[idx].height += r1.height;\r\n                    comps[idx].confidence = Math.max(comps[idx].confidence, r1.confidence);\r\n                }\r\n\r\n                var seq2 = [];\r\n                // calculate average bounding box\r\n                for(i = 0; i < class_idx; ++i) {\r\n                    n = comps[i].neighbors;\r\n                    if (n >= min_neighbors)\r\n                        seq2.push({\"x\" : (comps[i].x * 2 + n) / (2 * n),\r\n                                   \"y\" : (comps[i].y * 2 + n) / (2 * n),\r\n                                   \"width\" : (comps[i].width * 2 + n) / (2 * n),\r\n                                   \"height\" : (comps[i].height * 2 + n) / (2 * n),\r\n                                   \"neighbors\" : comps[i].neighbors,\r\n                                   \"confidence\" : comps[i].confidence});\r\n                }\r\n\r\n                var result_seq = [];\r\n                n = seq2.length;\r\n                // filter out small face rectangles inside large face rectangles\r\n                for(i = 0; i < n; ++i) {\r\n                    var r1 = seq2[i];\r\n                    var flag = true;\r\n                    for(j = 0; j < n; ++j) {\r\n                        var r2 = seq2[j];\r\n                        var distance = (r2.width * 0.25 + 0.5)|0;\r\n\r\n                        if(i != j &&\r\n                           r1.x >= r2.x - distance &&\r\n                           r1.y >= r2.y - distance &&\r\n                           r1.x + r1.width <= r2.x + r2.width + distance &&\r\n                           r1.y + r1.height <= r2.y + r2.height + distance &&\r\n                           (r2.neighbors > Math.max(3, r1.neighbors) || r1.neighbors < 3)) {\r\n                            flag = false;\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    if(flag)\r\n                        result_seq.push(r1);\r\n                }\r\n                return result_seq;\r\n            }\r\n        };\r\n\r\n    })();\r\n\r\n    global.haar = haar;\r\n\r\n})(jsfeat);\r\n/**\r\n * BBF: Brightness Binary Feature\r\n *\r\n * @author Eugene Zatepyakin / http://inspirit.ru/\r\n *\r\n * this code is a rewrite from https://github.com/liuliu/ccv implementation\r\n * @author Liu Liu / http://liuliu.me/\r\n *\r\n * The original paper refers to: YEF∗ Real-Time Object Detection, Yotam Abramson and Bruno Steux\r\n */\r\n\r\n(function(global) {\r\n    \"use strict\";\r\n    //\r\n    var bbf = (function() {\r\n\r\n        var _group_func = function(r1, r2) {\r\n            var distance = (r1.width * 0.25 + 0.5)|0;\r\n\r\n            return r2.x <= r1.x + distance &&\r\n                   r2.x >= r1.x - distance &&\r\n                   r2.y <= r1.y + distance &&\r\n                   r2.y >= r1.y - distance &&\r\n                   r2.width <= (r1.width * 1.5 + 0.5)|0 &&\r\n                   (r2.width * 1.5 + 0.5)|0 >= r1.width;\r\n        }\r\n\r\n        var img_pyr = new jsfeat.pyramid_t(1);\r\n\r\n        return {\r\n\r\n            interval: 4,\r\n            scale: 1.1486,\r\n            next: 5,\r\n            scale_to: 1,\r\n\r\n            // make features local copy\r\n            // to avoid array allocation with each scale\r\n            // this is strange but array works faster than Int32 version???\r\n            prepare_cascade: function(cascade) {\r\n                var sn = cascade.stage_classifier.length;\r\n                for (var j = 0; j < sn; j++) {\r\n                    var orig_feature = cascade.stage_classifier[j].feature;\r\n                    var f_cnt = cascade.stage_classifier[j].count;\r\n                    var feature = cascade.stage_classifier[j]._feature = new Array(f_cnt);\r\n                    for (var k = 0; k < f_cnt; k++) {\r\n                        feature[k] = {\"size\" : orig_feature[k].size,\r\n                                      \"px\" : new Array(orig_feature[k].size),\r\n                                      \"pz\" : new Array(orig_feature[k].size),\r\n                                      \"nx\" : new Array(orig_feature[k].size),\r\n                                      \"nz\" : new Array(orig_feature[k].size)};\r\n                    }\r\n                }\r\n            },\r\n\r\n            build_pyramid: function(src, min_width, min_height, interval) {\r\n                if (typeof interval === \"undefined\") { interval = 4; }\r\n\r\n                var sw=src.cols,sh=src.rows;\r\n                var i=0,nw=0,nh=0;\r\n                var new_pyr=false;\r\n                var src0=src,src1=src;\r\n                var data_type = jsfeat.U8_t | jsfeat.C1_t;\r\n\r\n                this.interval = interval;\r\n                this.scale = Math.pow(2, 1 / (this.interval + 1));\r\n                this.next = (this.interval + 1)|0;\r\n                this.scale_to = (Math.log(Math.min(sw / min_width, sh / min_height)) / Math.log(this.scale))|0;\r\n\r\n                var pyr_l = ((this.scale_to + this.next * 2) * 4) | 0;\r\n                if(img_pyr.levels != pyr_l) {\r\n                    img_pyr.levels = pyr_l;\r\n                    img_pyr.data = new Array(pyr_l);\r\n                    new_pyr = true;\r\n                    img_pyr.data[0] = src; // first is src\r\n                }\r\n\r\n                for (i = 1; i <= this.interval; ++i) {\r\n                    nw = (sw / Math.pow(this.scale, i))|0;\r\n                    nh = (sh / Math.pow(this.scale, i))|0;\r\n                    src0 = img_pyr.data[i<<2];\r\n                    if(new_pyr || nw != src0.cols || nh != src0.rows) {\r\n                        img_pyr.data[i<<2] = new jsfeat.matrix_t(nw, nh, data_type);\r\n                        src0 = img_pyr.data[i<<2];\r\n                    }\r\n                    jsfeat.imgproc.resample(src, src0, nw, nh);\r\n                }\r\n                for (i = this.next; i < this.scale_to + this.next * 2; ++i) {\r\n                    src1 = img_pyr.data[(i << 2) - (this.next << 2)];\r\n                    src0 = img_pyr.data[i<<2];\r\n                    nw = src1.cols >> 1;\r\n                    nh = src1.rows >> 1;\r\n                    if(new_pyr || nw != src0.cols || nh != src0.rows) {\r\n                        img_pyr.data[i<<2] = new jsfeat.matrix_t(nw, nh, data_type);\r\n                        src0 = img_pyr.data[i<<2];\r\n                    }\r\n                    jsfeat.imgproc.pyrdown(src1, src0);\r\n                }\r\n                for (i = this.next * 2; i < this.scale_to + this.next * 2; ++i) {\r\n                    src1 = img_pyr.data[(i << 2) - (this.next << 2)];\r\n                    nw = src1.cols >> 1;\r\n                    nh = src1.rows >> 1;\r\n                    src0 = img_pyr.data[(i<<2)+1];\r\n                    if(new_pyr || nw != src0.cols || nh != src0.rows) {\r\n                        img_pyr.data[(i<<2)+1] = new jsfeat.matrix_t(nw, nh, data_type);\r\n                        src0 = img_pyr.data[(i<<2)+1];\r\n                    }\r\n                    jsfeat.imgproc.pyrdown(src1, src0, 1, 0);\r\n                    //\r\n                    src0 = img_pyr.data[(i<<2)+2];\r\n                    if(new_pyr || nw != src0.cols || nh != src0.rows) {\r\n                        img_pyr.data[(i<<2)+2] = new jsfeat.matrix_t(nw, nh, data_type);\r\n                        src0 = img_pyr.data[(i<<2)+2];\r\n                    }\r\n                    jsfeat.imgproc.pyrdown(src1, src0, 0, 1);\r\n                    //\r\n                    src0 = img_pyr.data[(i<<2)+3];\r\n                    if(new_pyr || nw != src0.cols || nh != src0.rows) {\r\n                        img_pyr.data[(i<<2)+3] = new jsfeat.matrix_t(nw, nh, data_type);\r\n                        src0 = img_pyr.data[(i<<2)+3];\r\n                    }\r\n                    jsfeat.imgproc.pyrdown(src1, src0, 1, 1);\r\n                }\r\n                return img_pyr;\r\n            },\r\n\r\n            detect: function(pyramid, cascade) {\r\n                var interval = this.interval;\r\n                var scale = this.scale;\r\n                var next = this.next;\r\n                var scale_upto = this.scale_to;\r\n                var i=0,j=0,k=0,n=0,x=0,y=0,q=0,sn=0,f_cnt=0,q_cnt=0,p=0,pmin=0,nmax=0,f=0,i4=0,qw=0,qh=0;\r\n                var sum=0.0, alpha, feature, orig_feature, feature_k, feature_o, flag = true, shortcut=true;\r\n                var scale_x = 1.0, scale_y = 1.0;\r\n                var dx = [0, 1, 0, 1];\r\n                var dy = [0, 0, 1, 1];\r\n                var seq = [];\r\n                var pyr=pyramid.data, bpp = 1, bpp2 = 2, bpp4 = 4;\r\n\r\n                var u8 = [], u8o = [0,0,0];\r\n                var step = [0,0,0];\r\n                var paddings = [0,0,0];\r\n\r\n                for (i = 0; i < scale_upto; i++) {\r\n                    i4 = (i<<2);\r\n                    qw = pyr[i4 + (next << 3)].cols - (cascade.width >> 2);\r\n                    qh = pyr[i4 + (next << 3)].rows - (cascade.height >> 2);\r\n                    step[0] = pyr[i4].cols * bpp;\r\n                    step[1] = pyr[i4 + (next << 2)].cols * bpp;\r\n                    step[2] = pyr[i4 + (next << 3)].cols * bpp;\r\n                    paddings[0] = (pyr[i4].cols * bpp4) - (qw * bpp4);\r\n                    paddings[1] = (pyr[i4 + (next << 2)].cols * bpp2) - (qw * bpp2);\r\n                    paddings[2] = (pyr[i4 + (next << 3)].cols * bpp) - (qw * bpp);\r\n                    sn = cascade.stage_classifier.length;\r\n                    for (j = 0; j < sn; j++) {\r\n                        orig_feature = cascade.stage_classifier[j].feature;\r\n                        feature = cascade.stage_classifier[j]._feature;\r\n                        f_cnt = cascade.stage_classifier[j].count;\r\n                        for (k = 0; k < f_cnt; k++) {\r\n                            feature_k = feature[k];\r\n                            feature_o = orig_feature[k];\r\n                            q_cnt = feature_o.size|0;\r\n                            for (q = 0; q < q_cnt; q++) {\r\n                                feature_k.px[q] = (feature_o.px[q] * bpp) + feature_o.py[q] * step[feature_o.pz[q]];\r\n                                feature_k.pz[q] = feature_o.pz[q];\r\n                                feature_k.nx[q] = (feature_o.nx[q] * bpp) + feature_o.ny[q] * step[feature_o.nz[q]];\r\n                                feature_k.nz[q] = feature_o.nz[q];\r\n                            }\r\n                        }\r\n                    }\r\n                    u8[0] = pyr[i4].data; u8[1] = pyr[i4 + (next<<2)].data;\r\n                    for (q = 0; q < 4; q++) {\r\n                        u8[2] = pyr[i4 + (next<<3) + q].data;\r\n                        u8o[0] = (dx[q]*bpp2) + dy[q] * (pyr[i4].cols*bpp2); \r\n                        u8o[1] = (dx[q]*bpp) + dy[q] * (pyr[i4 + (next<<2)].cols*bpp); \r\n                        u8o[2] = 0;\r\n                        for (y = 0; y < qh; y++) {\r\n                            for (x = 0; x < qw; x++) {\r\n                                sum = 0;\r\n                                flag = true;\r\n                                sn = cascade.stage_classifier.length;\r\n                                for (j = 0; j < sn; j++) {\r\n                                    sum = 0;\r\n                                    alpha = cascade.stage_classifier[j].alpha;\r\n                                    feature = cascade.stage_classifier[j]._feature;\r\n                                    f_cnt = cascade.stage_classifier[j].count;\r\n                                    for (k = 0; k < f_cnt; k++) {\r\n                                        feature_k = feature[k];\r\n                                        pmin = u8[feature_k.pz[0]][u8o[feature_k.pz[0]] + feature_k.px[0]];\r\n                                        nmax = u8[feature_k.nz[0]][u8o[feature_k.nz[0]] + feature_k.nx[0]];\r\n                                        if (pmin <= nmax) {\r\n                                            sum += alpha[k << 1];\r\n                                        } else {\r\n                                            shortcut = true;\r\n                                            q_cnt = feature_k.size;\r\n                                            for (f = 1; f < q_cnt; f++) {\r\n                                                if (feature_k.pz[f] >= 0) {\r\n                                                    p = u8[feature_k.pz[f]][u8o[feature_k.pz[f]] + feature_k.px[f]];\r\n                                                    if (p < pmin) {\r\n                                                        if (p <= nmax) {\r\n                                                            shortcut = false;\r\n                                                            break;\r\n                                                        }\r\n                                                        pmin = p;\r\n                                                    }\r\n                                                }\r\n                                                if (feature_k.nz[f] >= 0) {\r\n                                                    n = u8[feature_k.nz[f]][u8o[feature_k.nz[f]] + feature_k.nx[f]];\r\n                                                    if (n > nmax) {\r\n                                                        if (pmin <= n) {\r\n                                                            shortcut = false;\r\n                                                            break;\r\n                                                        }\r\n                                                        nmax = n;\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                            sum += (shortcut) ? alpha[(k << 1) + 1] : alpha[k << 1];\r\n                                        }\r\n                                    }\r\n                                    if (sum < cascade.stage_classifier[j].threshold) {\r\n                                        flag = false;\r\n                                        break;\r\n                                    }\r\n                                }\r\n                                if (flag) {\r\n                                    seq.push({\"x\" : (x * 4 + dx[q] * 2) * scale_x,\r\n                                              \"y\" : (y * 4 + dy[q] * 2) * scale_y,\r\n                                              \"width\" : cascade.width * scale_x,\r\n                                              \"height\" : cascade.height * scale_y,\r\n                                              \"neighbor\" : 1,\r\n                                              \"confidence\" : sum});\r\n                                    ++x;\r\n                                    u8o[0] += bpp4;\r\n                                    u8o[1] += bpp2;\r\n                                    u8o[2] += bpp;\r\n                                }\r\n                                u8o[0] += bpp4;\r\n                                u8o[1] += bpp2;\r\n                                u8o[2] += bpp;\r\n                            }\r\n                            u8o[0] += paddings[0];\r\n                            u8o[1] += paddings[1];\r\n                            u8o[2] += paddings[2];\r\n                        }\r\n                    }\r\n                    scale_x *= scale;\r\n                    scale_y *= scale;\r\n                }\r\n\r\n                return seq;\r\n            },\r\n\r\n            // OpenCV method to group detected rectangles\r\n            group_rectangles: function(rects, min_neighbors) {\r\n                if (typeof min_neighbors === \"undefined\") { min_neighbors = 1; }\r\n                var i, j, n = rects.length;\r\n                var node = [];\r\n                for (i = 0; i < n; ++i) {\r\n                    node[i] = {\"parent\" : -1,\r\n                               \"element\" : rects[i],\r\n                               \"rank\" : 0};\r\n                }\r\n                for (i = 0; i < n; ++i) {\r\n                    if (!node[i].element)\r\n                        continue;\r\n                    var root = i;\r\n                    while (node[root].parent != -1)\r\n                        root = node[root].parent;\r\n                    for (j = 0; j < n; ++j) {\r\n                        if( i != j && node[j].element && _group_func(node[i].element, node[j].element)) {\r\n                            var root2 = j;\r\n\r\n                            while (node[root2].parent != -1)\r\n                                root2 = node[root2].parent;\r\n\r\n                            if(root2 != root) {\r\n                                if(node[root].rank > node[root2].rank)\r\n                                    node[root2].parent = root;\r\n                                else {\r\n                                    node[root].parent = root2;\r\n                                    if (node[root].rank == node[root2].rank)\r\n                                    node[root2].rank++;\r\n                                    root = root2;\r\n                                }\r\n\r\n                                /* compress path from node2 to the root: */\r\n                                var temp, node2 = j;\r\n                                while (node[node2].parent != -1) {\r\n                                    temp = node2;\r\n                                    node2 = node[node2].parent;\r\n                                    node[temp].parent = root;\r\n                                }\r\n\r\n                                /* compress path from node to the root: */\r\n                                node2 = i;\r\n                                while (node[node2].parent != -1) {\r\n                                    temp = node2;\r\n                                    node2 = node[node2].parent;\r\n                                    node[temp].parent = root;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                var idx_seq = [];\r\n                var class_idx = 0;\r\n                for(i = 0; i < n; i++) {\r\n                    j = -1;\r\n                    var node1 = i;\r\n                    if(node[node1].element) {\r\n                        while (node[node1].parent != -1)\r\n                            node1 = node[node1].parent;\r\n                        if(node[node1].rank >= 0)\r\n                            node[node1].rank = ~class_idx++;\r\n                        j = ~node[node1].rank;\r\n                    }\r\n                    idx_seq[i] = j;\r\n                }\r\n                \r\n                var comps = [];\r\n                for (i = 0; i < class_idx+1; ++i) {\r\n                    comps[i] = {\"neighbors\" : 0,\r\n                                \"x\" : 0,\r\n                                \"y\" : 0,\r\n                                \"width\" : 0,\r\n                                \"height\" : 0,\r\n                                \"confidence\" : 0};\r\n                }\r\n\r\n                // count number of neighbors\r\n                for(i = 0; i < n; ++i) {\r\n                    var r1 = rects[i];\r\n                    var idx = idx_seq[i];\r\n\r\n                    if (comps[idx].neighbors == 0)\r\n                        comps[idx].confidence = r1.confidence;\r\n\r\n                    ++comps[idx].neighbors;\r\n\r\n                    comps[idx].x += r1.x;\r\n                    comps[idx].y += r1.y;\r\n                    comps[idx].width += r1.width;\r\n                    comps[idx].height += r1.height;\r\n                    comps[idx].confidence = Math.max(comps[idx].confidence, r1.confidence);\r\n                }\r\n\r\n                var seq2 = [];\r\n                // calculate average bounding box\r\n                for(i = 0; i < class_idx; ++i) {\r\n                    n = comps[i].neighbors;\r\n                    if (n >= min_neighbors)\r\n                        seq2.push({\"x\" : (comps[i].x * 2 + n) / (2 * n),\r\n                                   \"y\" : (comps[i].y * 2 + n) / (2 * n),\r\n                                   \"width\" : (comps[i].width * 2 + n) / (2 * n),\r\n                                   \"height\" : (comps[i].height * 2 + n) / (2 * n),\r\n                                   \"neighbors\" : comps[i].neighbors,\r\n                                   \"confidence\" : comps[i].confidence});\r\n                }\r\n\r\n                var result_seq = [];\r\n                n = seq2.length;\r\n                // filter out small face rectangles inside large face rectangles\r\n                for(i = 0; i < n; ++i) {\r\n                    var r1 = seq2[i];\r\n                    var flag = true;\r\n                    for(j = 0; j < n; ++j) {\r\n                        var r2 = seq2[j];\r\n                        var distance = (r2.width * 0.25 + 0.5)|0;\r\n\r\n                        if(i != j &&\r\n                           r1.x >= r2.x - distance &&\r\n                           r1.y >= r2.y - distance &&\r\n                           r1.x + r1.width <= r2.x + r2.width + distance &&\r\n                           r1.y + r1.height <= r2.y + r2.height + distance &&\r\n                           (r2.neighbors > Math.max(3, r1.neighbors) || r1.neighbors < 3)) {\r\n                            flag = false;\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    if(flag)\r\n                        result_seq.push(r1);\r\n                }\r\n                return result_seq;\r\n            }\r\n\r\n        };\r\n\r\n    })();\r\n\r\n    global.bbf = bbf;\r\n\r\n})(jsfeat);\r\n/**\n * @author Eugene Zatepyakin / http://inspirit.ru/\n */\n\n(function(lib) {\n    \"use strict\";\n\n    if (typeof module === \"undefined\" || typeof module.exports === \"undefined\") {\n        // in a browser, define its namespaces in global\n        window.jsfeat = lib;\n    } else {\n        // in commonjs, or when AMD wrapping has been applied, define its namespaces as exports\n        module.exports = lib;\n    }\n})(jsfeat);\n",
    "\"use strict\";\n\nvar numeric = (typeof exports === \"undefined\")?(function numeric() {}):(exports);\nif(typeof global !== \"undefined\") { global.numeric = numeric; }\n\nnumeric.version = \"1.2.6\";\n\n// 1. Utility functions\nnumeric.bench = function bench (f,interval) {\n    var t1,t2,n,i;\n    if(typeof interval === \"undefined\") { interval = 15; }\n    n = 0.5;\n    t1 = new Date();\n    while(1) {\n        n*=2;\n        for(i=n;i>3;i-=4) { f(); f(); f(); f(); }\n        while(i>0) { f(); i--; }\n        t2 = new Date();\n        if(t2-t1 > interval) break;\n    }\n    for(i=n;i>3;i-=4) { f(); f(); f(); f(); }\n    while(i>0) { f(); i--; }\n    t2 = new Date();\n    return 1000*(3*n-1)/(t2-t1);\n}\n\nnumeric._myIndexOf = (function _myIndexOf(w) {\n    var n = this.length,k;\n    for(k=0;k<n;++k) if(this[k]===w) return k;\n    return -1;\n});\nnumeric.myIndexOf = (Array.prototype.indexOf)?Array.prototype.indexOf:numeric._myIndexOf;\n\nnumeric.Function = Function;\nnumeric.precision = 4;\nnumeric.largeArray = 50;\n\nnumeric.prettyPrint = function prettyPrint(x) {\n    function fmtnum(x) {\n        if(x === 0) { return '0'; }\n        if(isNaN(x)) { return 'NaN'; }\n        if(x<0) { return '-'+fmtnum(-x); }\n        if(isFinite(x)) {\n            var scale = Math.floor(Math.log(x) / Math.log(10));\n            var normalized = x / Math.pow(10,scale);\n            var basic = normalized.toPrecision(numeric.precision);\n            if(parseFloat(basic) === 10) { scale++; normalized = 1; basic = normalized.toPrecision(numeric.precision); }\n            return parseFloat(basic).toString()+'e'+scale.toString();\n        }\n        return 'Infinity';\n    }\n    var ret = [];\n    function foo(x) {\n        var k;\n        if(typeof x === \"undefined\") { ret.push(Array(numeric.precision+8).join(' ')); return false; }\n        if(typeof x === \"string\") { ret.push('\"'+x+'\"'); return false; }\n        if(typeof x === \"boolean\") { ret.push(x.toString()); return false; }\n        if(typeof x === \"number\") {\n            var a = fmtnum(x);\n            var b = x.toPrecision(numeric.precision);\n            var c = parseFloat(x.toString()).toString();\n            var d = [a,b,c,parseFloat(b).toString(),parseFloat(c).toString()];\n            for(k=1;k<d.length;k++) { if(d[k].length < a.length) a = d[k]; }\n            ret.push(Array(numeric.precision+8-a.length).join(' ')+a);\n            return false;\n        }\n        if(x === null) { ret.push(\"null\"); return false; }\n        if(typeof x === \"function\") { \n            ret.push(x.toString());\n            var flag = false;\n            for(k in x) { if(x.hasOwnProperty(k)) { \n                if(flag) ret.push(',\\n');\n                else ret.push('\\n{');\n                flag = true; \n                ret.push(k); \n                ret.push(': \\n'); \n                foo(x[k]); \n            } }\n            if(flag) ret.push('}\\n');\n            return true;\n        }\n        if(x instanceof Array) {\n            if(x.length > numeric.largeArray) { ret.push('...Large Array...'); return true; }\n            var flag = false;\n            ret.push('[');\n            for(k=0;k<x.length;k++) { if(k>0) { ret.push(','); if(flag) ret.push('\\n '); } flag = foo(x[k]); }\n            ret.push(']');\n            return true;\n        }\n        ret.push('{');\n        var flag = false;\n        for(k in x) { if(x.hasOwnProperty(k)) { if(flag) ret.push(',\\n'); flag = true; ret.push(k); ret.push(': \\n'); foo(x[k]); } }\n        ret.push('}');\n        return true;\n    }\n    foo(x);\n    return ret.join('');\n}\n\nnumeric.parseDate = function parseDate(d) {\n    function foo(d) {\n        if(typeof d === 'string') { return Date.parse(d.replace(/-/g,'/')); }\n        if(!(d instanceof Array)) { throw new Error(\"parseDate: parameter must be arrays of strings\"); }\n        var ret = [],k;\n        for(k=0;k<d.length;k++) { ret[k] = foo(d[k]); }\n        return ret;\n    }\n    return foo(d);\n}\n\nnumeric.parseFloat = function parseFloat_(d) {\n    function foo(d) {\n        if(typeof d === 'string') { return parseFloat(d); }\n        if(!(d instanceof Array)) { throw new Error(\"parseFloat: parameter must be arrays of strings\"); }\n        var ret = [],k;\n        for(k=0;k<d.length;k++) { ret[k] = foo(d[k]); }\n        return ret;\n    }\n    return foo(d);\n}\n\nnumeric.parseCSV = function parseCSV(t) {\n    var foo = t.split('\\n');\n    var j,k;\n    var ret = [];\n    var pat = /(([^'\",]*)|('[^']*')|(\"[^\"]*\")),/g;\n    var patnum = /^\\s*(([+-]?[0-9]+(\\.[0-9]*)?(e[+-]?[0-9]+)?)|([+-]?[0-9]*(\\.[0-9]+)?(e[+-]?[0-9]+)?))\\s*$/;\n    var stripper = function(n) { return n.substr(0,n.length-1); }\n    var count = 0;\n    for(k=0;k<foo.length;k++) {\n      var bar = (foo[k]+\",\").match(pat),baz;\n      if(bar.length>0) {\n          ret[count] = [];\n          for(j=0;j<bar.length;j++) {\n              baz = stripper(bar[j]);\n              if(patnum.test(baz)) { ret[count][j] = parseFloat(baz); }\n              else ret[count][j] = baz;\n          }\n          count++;\n      }\n    }\n    return ret;\n}\n\nnumeric.toCSV = function toCSV(A) {\n    var s = numeric.dim(A);\n    var i,j,m,n,row,ret;\n    m = s[0];\n    n = s[1];\n    ret = [];\n    for(i=0;i<m;i++) {\n        row = [];\n        for(j=0;j<m;j++) { row[j] = A[i][j].toString(); }\n        ret[i] = row.join(', ');\n    }\n    return ret.join('\\n')+'\\n';\n}\n\nnumeric.getURL = function getURL(url) {\n    var client = new XMLHttpRequest();\n    client.open(\"GET\",url,false);\n    client.send();\n    return client;\n}\n\nnumeric.imageURL = function imageURL(img) {\n    function base64(A) {\n        var n = A.length, i,x,y,z,p,q,r,s;\n        var key = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n        var ret = \"\";\n        for(i=0;i<n;i+=3) {\n            x = A[i];\n            y = A[i+1];\n            z = A[i+2];\n            p = x >> 2;\n            q = ((x & 3) << 4) + (y >> 4);\n            r = ((y & 15) << 2) + (z >> 6);\n            s = z & 63;\n            if(i+1>=n) { r = s = 64; }\n            else if(i+2>=n) { s = 64; }\n            ret += key.charAt(p) + key.charAt(q) + key.charAt(r) + key.charAt(s);\n            }\n        return ret;\n    }\n    function crc32Array (a,from,to) {\n        if(typeof from === \"undefined\") { from = 0; }\n        if(typeof to === \"undefined\") { to = a.length; }\n        var table = [0x00000000, 0x77073096, 0xEE0E612C, 0x990951BA, 0x076DC419, 0x706AF48F, 0xE963A535, 0x9E6495A3,\n                     0x0EDB8832, 0x79DCB8A4, 0xE0D5E91E, 0x97D2D988, 0x09B64C2B, 0x7EB17CBD, 0xE7B82D07, 0x90BF1D91, \n                     0x1DB71064, 0x6AB020F2, 0xF3B97148, 0x84BE41DE, 0x1ADAD47D, 0x6DDDE4EB, 0xF4D4B551, 0x83D385C7,\n                     0x136C9856, 0x646BA8C0, 0xFD62F97A, 0x8A65C9EC, 0x14015C4F, 0x63066CD9, 0xFA0F3D63, 0x8D080DF5, \n                     0x3B6E20C8, 0x4C69105E, 0xD56041E4, 0xA2677172, 0x3C03E4D1, 0x4B04D447, 0xD20D85FD, 0xA50AB56B, \n                     0x35B5A8FA, 0x42B2986C, 0xDBBBC9D6, 0xACBCF940, 0x32D86CE3, 0x45DF5C75, 0xDCD60DCF, 0xABD13D59, \n                     0x26D930AC, 0x51DE003A, 0xC8D75180, 0xBFD06116, 0x21B4F4B5, 0x56B3C423, 0xCFBA9599, 0xB8BDA50F,\n                     0x2802B89E, 0x5F058808, 0xC60CD9B2, 0xB10BE924, 0x2F6F7C87, 0x58684C11, 0xC1611DAB, 0xB6662D3D,\n                     0x76DC4190, 0x01DB7106, 0x98D220BC, 0xEFD5102A, 0x71B18589, 0x06B6B51F, 0x9FBFE4A5, 0xE8B8D433,\n                     0x7807C9A2, 0x0F00F934, 0x9609A88E, 0xE10E9818, 0x7F6A0DBB, 0x086D3D2D, 0x91646C97, 0xE6635C01, \n                     0x6B6B51F4, 0x1C6C6162, 0x856530D8, 0xF262004E, 0x6C0695ED, 0x1B01A57B, 0x8208F4C1, 0xF50FC457, \n                     0x65B0D9C6, 0x12B7E950, 0x8BBEB8EA, 0xFCB9887C, 0x62DD1DDF, 0x15DA2D49, 0x8CD37CF3, 0xFBD44C65, \n                     0x4DB26158, 0x3AB551CE, 0xA3BC0074, 0xD4BB30E2, 0x4ADFA541, 0x3DD895D7, 0xA4D1C46D, 0xD3D6F4FB, \n                     0x4369E96A, 0x346ED9FC, 0xAD678846, 0xDA60B8D0, 0x44042D73, 0x33031DE5, 0xAA0A4C5F, 0xDD0D7CC9, \n                     0x5005713C, 0x270241AA, 0xBE0B1010, 0xC90C2086, 0x5768B525, 0x206F85B3, 0xB966D409, 0xCE61E49F, \n                     0x5EDEF90E, 0x29D9C998, 0xB0D09822, 0xC7D7A8B4, 0x59B33D17, 0x2EB40D81, 0xB7BD5C3B, 0xC0BA6CAD, \n                     0xEDB88320, 0x9ABFB3B6, 0x03B6E20C, 0x74B1D29A, 0xEAD54739, 0x9DD277AF, 0x04DB2615, 0x73DC1683, \n                     0xE3630B12, 0x94643B84, 0x0D6D6A3E, 0x7A6A5AA8, 0xE40ECF0B, 0x9309FF9D, 0x0A00AE27, 0x7D079EB1, \n                     0xF00F9344, 0x8708A3D2, 0x1E01F268, 0x6906C2FE, 0xF762575D, 0x806567CB, 0x196C3671, 0x6E6B06E7, \n                     0xFED41B76, 0x89D32BE0, 0x10DA7A5A, 0x67DD4ACC, 0xF9B9DF6F, 0x8EBEEFF9, 0x17B7BE43, 0x60B08ED5, \n                     0xD6D6A3E8, 0xA1D1937E, 0x38D8C2C4, 0x4FDFF252, 0xD1BB67F1, 0xA6BC5767, 0x3FB506DD, 0x48B2364B, \n                     0xD80D2BDA, 0xAF0A1B4C, 0x36034AF6, 0x41047A60, 0xDF60EFC3, 0xA867DF55, 0x316E8EEF, 0x4669BE79, \n                     0xCB61B38C, 0xBC66831A, 0x256FD2A0, 0x5268E236, 0xCC0C7795, 0xBB0B4703, 0x220216B9, 0x5505262F, \n                     0xC5BA3BBE, 0xB2BD0B28, 0x2BB45A92, 0x5CB36A04, 0xC2D7FFA7, 0xB5D0CF31, 0x2CD99E8B, 0x5BDEAE1D, \n                     0x9B64C2B0, 0xEC63F226, 0x756AA39C, 0x026D930A, 0x9C0906A9, 0xEB0E363F, 0x72076785, 0x05005713, \n                     0x95BF4A82, 0xE2B87A14, 0x7BB12BAE, 0x0CB61B38, 0x92D28E9B, 0xE5D5BE0D, 0x7CDCEFB7, 0x0BDBDF21, \n                     0x86D3D2D4, 0xF1D4E242, 0x68DDB3F8, 0x1FDA836E, 0x81BE16CD, 0xF6B9265B, 0x6FB077E1, 0x18B74777, \n                     0x88085AE6, 0xFF0F6A70, 0x66063BCA, 0x11010B5C, 0x8F659EFF, 0xF862AE69, 0x616BFFD3, 0x166CCF45, \n                     0xA00AE278, 0xD70DD2EE, 0x4E048354, 0x3903B3C2, 0xA7672661, 0xD06016F7, 0x4969474D, 0x3E6E77DB, \n                     0xAED16A4A, 0xD9D65ADC, 0x40DF0B66, 0x37D83BF0, 0xA9BCAE53, 0xDEBB9EC5, 0x47B2CF7F, 0x30B5FFE9, \n                     0xBDBDF21C, 0xCABAC28A, 0x53B39330, 0x24B4A3A6, 0xBAD03605, 0xCDD70693, 0x54DE5729, 0x23D967BF, \n                     0xB3667A2E, 0xC4614AB8, 0x5D681B02, 0x2A6F2B94, 0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B, 0x2D02EF8D];\n     \n        var crc = -1, y = 0, n = a.length,i;\n\n        for (i = from; i < to; i++) {\n            y = (crc ^ a[i]) & 0xFF;\n            crc = (crc >>> 8) ^ table[y];\n        }\n     \n        return crc ^ (-1);\n    }\n\n    var h = img[0].length, w = img[0][0].length, s1, s2, next,k,length,a,b,i,j,adler32,crc32;\n    var stream = [\n                  137, 80, 78, 71, 13, 10, 26, 10,                           //  0: PNG signature\n                  0,0,0,13,                                                  //  8: IHDR Chunk length\n                  73, 72, 68, 82,                                            // 12: \"IHDR\" \n                  (w >> 24) & 255, (w >> 16) & 255, (w >> 8) & 255, w&255,   // 16: Width\n                  (h >> 24) & 255, (h >> 16) & 255, (h >> 8) & 255, h&255,   // 20: Height\n                  8,                                                         // 24: bit depth\n                  2,                                                         // 25: RGB\n                  0,                                                         // 26: deflate\n                  0,                                                         // 27: no filter\n                  0,                                                         // 28: no interlace\n                  -1,-2,-3,-4,                                               // 29: CRC\n                  -5,-6,-7,-8,                                               // 33: IDAT Chunk length\n                  73, 68, 65, 84,                                            // 37: \"IDAT\"\n                  // RFC 1950 header starts here\n                  8,                                                         // 41: RFC1950 CMF\n                  29                                                         // 42: RFC1950 FLG\n                  ];\n    crc32 = crc32Array(stream,12,29);\n    stream[29] = (crc32>>24)&255;\n    stream[30] = (crc32>>16)&255;\n    stream[31] = (crc32>>8)&255;\n    stream[32] = (crc32)&255;\n    s1 = 1;\n    s2 = 0;\n    for(i=0;i<h;i++) {\n        if(i<h-1) { stream.push(0); }\n        else { stream.push(1); }\n        a = (3*w+1+(i===0))&255; b = ((3*w+1+(i===0))>>8)&255;\n        stream.push(a); stream.push(b);\n        stream.push((~a)&255); stream.push((~b)&255);\n        if(i===0) stream.push(0);\n        for(j=0;j<w;j++) {\n            for(k=0;k<3;k++) {\n                a = img[k][i][j];\n                if(a>255) a = 255;\n                else if(a<0) a=0;\n                else a = Math.round(a);\n                s1 = (s1 + a )%65521;\n                s2 = (s2 + s1)%65521;\n                stream.push(a);\n            }\n        }\n        stream.push(0);\n    }\n    adler32 = (s2<<16)+s1;\n    stream.push((adler32>>24)&255);\n    stream.push((adler32>>16)&255);\n    stream.push((adler32>>8)&255);\n    stream.push((adler32)&255);\n    length = stream.length - 41;\n    stream[33] = (length>>24)&255;\n    stream[34] = (length>>16)&255;\n    stream[35] = (length>>8)&255;\n    stream[36] = (length)&255;\n    crc32 = crc32Array(stream,37);\n    stream.push((crc32>>24)&255);\n    stream.push((crc32>>16)&255);\n    stream.push((crc32>>8)&255);\n    stream.push((crc32)&255);\n    stream.push(0);\n    stream.push(0);\n    stream.push(0);\n    stream.push(0);\n//    a = stream.length;\n    stream.push(73);  // I\n    stream.push(69);  // E\n    stream.push(78);  // N\n    stream.push(68);  // D\n    stream.push(174); // CRC1\n    stream.push(66);  // CRC2\n    stream.push(96);  // CRC3\n    stream.push(130); // CRC4\n    return 'data:image/png;base64,'+base64(stream);\n}\n\n// 2. Linear algebra with Arrays.\nnumeric._dim = function _dim(x) {\n    var ret = [];\n    while(typeof x === \"object\") { ret.push(x.length); x = x[0]; }\n    return ret;\n}\n\nnumeric.dim = function dim(x) {\n    var y,z;\n    if(typeof x === \"object\") {\n        y = x[0];\n        if(typeof y === \"object\") {\n            z = y[0];\n            if(typeof z === \"object\") {\n                return numeric._dim(x);\n            }\n            return [x.length,y.length];\n        }\n        return [x.length];\n    }\n    return [];\n}\n\nnumeric.mapreduce = function mapreduce(body,init) {\n    return Function('x','accum','_s','_k',\n            'if(typeof accum === \"undefined\") accum = '+init+';\\n'+\n            'if(typeof x === \"number\") { var xi = x; '+body+'; return accum; }\\n'+\n            'if(typeof _s === \"undefined\") _s = numeric.dim(x);\\n'+\n            'if(typeof _k === \"undefined\") _k = 0;\\n'+\n            'var _n = _s[_k];\\n'+\n            'var i,xi;\\n'+\n            'if(_k < _s.length-1) {\\n'+\n            '    for(i=_n-1;i>=0;i--) {\\n'+\n            '        accum = arguments.callee(x[i],accum,_s,_k+1);\\n'+\n            '    }'+\n            '    return accum;\\n'+\n            '}\\n'+\n            'for(i=_n-1;i>=1;i-=2) { \\n'+\n            '    xi = x[i];\\n'+\n            '    '+body+';\\n'+\n            '    xi = x[i-1];\\n'+\n            '    '+body+';\\n'+\n            '}\\n'+\n            'if(i === 0) {\\n'+\n            '    xi = x[i];\\n'+\n            '    '+body+'\\n'+\n            '}\\n'+\n            'return accum;'\n            );\n}\nnumeric.mapreduce2 = function mapreduce2(body,setup) {\n    return Function('x',\n            'var n = x.length;\\n'+\n            'var i,xi;\\n'+setup+';\\n'+\n            'for(i=n-1;i!==-1;--i) { \\n'+\n            '    xi = x[i];\\n'+\n            '    '+body+';\\n'+\n            '}\\n'+\n            'return accum;'\n            );\n}\n\n\nnumeric.same = function same(x,y) {\n    var i,n;\n    if(!(x instanceof Array) || !(y instanceof Array)) { return false; }\n    n = x.length;\n    if(n !== y.length) { return false; }\n    for(i=0;i<n;i++) {\n        if(x[i] === y[i]) { continue; }\n        if(typeof x[i] === \"object\") { if(!same(x[i],y[i])) return false; }\n        else { return false; }\n    }\n    return true;\n}\n\nnumeric.rep = function rep(s,v,k) {\n    if(typeof k === \"undefined\") { k=0; }\n    var n = s[k], ret = Array(n), i;\n    if(k === s.length-1) {\n        for(i=n-2;i>=0;i-=2) { ret[i+1] = v; ret[i] = v; }\n        if(i===-1) { ret[0] = v; }\n        return ret;\n    }\n    for(i=n-1;i>=0;i--) { ret[i] = numeric.rep(s,v,k+1); }\n    return ret;\n}\n\n\nnumeric.dotMMsmall = function dotMMsmall(x,y) {\n    var i,j,k,p,q,r,ret,foo,bar,woo,i0,k0,p0,r0;\n    p = x.length; q = y.length; r = y[0].length;\n    ret = Array(p);\n    for(i=p-1;i>=0;i--) {\n        foo = Array(r);\n        bar = x[i];\n        for(k=r-1;k>=0;k--) {\n            woo = bar[q-1]*y[q-1][k];\n            for(j=q-2;j>=1;j-=2) {\n                i0 = j-1;\n                woo += bar[j]*y[j][k] + bar[i0]*y[i0][k];\n            }\n            if(j===0) { woo += bar[0]*y[0][k]; }\n            foo[k] = woo;\n        }\n        ret[i] = foo;\n    }\n    return ret;\n}\nnumeric._getCol = function _getCol(A,j,x) {\n    var n = A.length, i;\n    for(i=n-1;i>0;--i) {\n        x[i] = A[i][j];\n        --i;\n        x[i] = A[i][j];\n    }\n    if(i===0) x[0] = A[0][j];\n}\nnumeric.dotMMbig = function dotMMbig(x,y){\n    var gc = numeric._getCol, p = y.length, v = Array(p);\n    var m = x.length, n = y[0].length, A = new Array(m), xj;\n    var VV = numeric.dotVV;\n    var i,j,k,z;\n    --p;\n    --m;\n    for(i=m;i!==-1;--i) A[i] = Array(n);\n    --n;\n    for(i=n;i!==-1;--i) {\n        gc(y,i,v);\n        for(j=m;j!==-1;--j) {\n            z=0;\n            xj = x[j];\n            A[j][i] = VV(xj,v);\n        }\n    }\n    return A;\n}\n\nnumeric.dotMV = function dotMV(x,y) {\n    var p = x.length, q = y.length,i;\n    var ret = Array(p), dotVV = numeric.dotVV;\n    for(i=p-1;i>=0;i--) { ret[i] = dotVV(x[i],y); }\n    return ret;\n}\n\nnumeric.dotVM = function dotVM(x,y) {\n    var i,j,k,p,q,r,ret,foo,bar,woo,i0,k0,p0,r0,s1,s2,s3,baz,accum;\n    p = x.length; q = y[0].length;\n    ret = Array(q);\n    for(k=q-1;k>=0;k--) {\n        woo = x[p-1]*y[p-1][k];\n        for(j=p-2;j>=1;j-=2) {\n            i0 = j-1;\n            woo += x[j]*y[j][k] + x[i0]*y[i0][k];\n        }\n        if(j===0) { woo += x[0]*y[0][k]; }\n        ret[k] = woo;\n    }\n    return ret;\n}\n\nnumeric.dotVV = function dotVV(x,y) {\n    var i,n=x.length,i1,ret = x[n-1]*y[n-1];\n    for(i=n-2;i>=1;i-=2) {\n        i1 = i-1;\n        ret += x[i]*y[i] + x[i1]*y[i1];\n    }\n    if(i===0) { ret += x[0]*y[0]; }\n    return ret;\n}\n\nnumeric.dot = function dot(x,y) {\n    var d = numeric.dim;\n    switch(d(x).length*1000+d(y).length) {\n    case 2002:\n        if(y.length < 10) return numeric.dotMMsmall(x,y);\n        else return numeric.dotMMbig(x,y);\n    case 2001: return numeric.dotMV(x,y);\n    case 1002: return numeric.dotVM(x,y);\n    case 1001: return numeric.dotVV(x,y);\n    case 1000: return numeric.mulVS(x,y);\n    case 1: return numeric.mulSV(x,y);\n    case 0: return x*y;\n    default: throw new Error('numeric.dot only works on vectors and matrices');\n    }\n}\n\nnumeric.diag = function diag(d) {\n    var i,i1,j,n = d.length, A = Array(n), Ai;\n    for(i=n-1;i>=0;i--) {\n        Ai = Array(n);\n        i1 = i+2;\n        for(j=n-1;j>=i1;j-=2) {\n            Ai[j] = 0;\n            Ai[j-1] = 0;\n        }\n        if(j>i) { Ai[j] = 0; }\n        Ai[i] = d[i];\n        for(j=i-1;j>=1;j-=2) {\n            Ai[j] = 0;\n            Ai[j-1] = 0;\n        }\n        if(j===0) { Ai[0] = 0; }\n        A[i] = Ai;\n    }\n    return A;\n}\nnumeric.getDiag = function(A) {\n    var n = Math.min(A.length,A[0].length),i,ret = Array(n);\n    for(i=n-1;i>=1;--i) {\n        ret[i] = A[i][i];\n        --i;\n        ret[i] = A[i][i];\n    }\n    if(i===0) {\n        ret[0] = A[0][0];\n    }\n    return ret;\n}\n\nnumeric.identity = function identity(n) { return numeric.diag(numeric.rep([n],1)); }\nnumeric.pointwise = function pointwise(params,body,setup) {\n    if(typeof setup === \"undefined\") { setup = \"\"; }\n    var fun = [];\n    var k;\n    var avec = /\\[i\\]$/,p,thevec = '';\n    var haveret = false;\n    for(k=0;k<params.length;k++) {\n        if(avec.test(params[k])) {\n            p = params[k].substring(0,params[k].length-3);\n            thevec = p;\n        } else { p = params[k]; }\n        if(p==='ret') haveret = true;\n        fun.push(p);\n    }\n    fun[params.length] = '_s';\n    fun[params.length+1] = '_k';\n    fun[params.length+2] = (\n            'if(typeof _s === \"undefined\") _s = numeric.dim('+thevec+');\\n'+\n            'if(typeof _k === \"undefined\") _k = 0;\\n'+\n            'var _n = _s[_k];\\n'+\n            'var i'+(haveret?'':', ret = Array(_n)')+';\\n'+\n            'if(_k < _s.length-1) {\\n'+\n            '    for(i=_n-1;i>=0;i--) ret[i] = arguments.callee('+params.join(',')+',_s,_k+1);\\n'+\n            '    return ret;\\n'+\n            '}\\n'+\n            setup+'\\n'+\n            'for(i=_n-1;i!==-1;--i) {\\n'+\n            '    '+body+'\\n'+\n            '}\\n'+\n            'return ret;'\n            );\n    return Function.apply(null,fun);\n}\nnumeric.pointwise2 = function pointwise2(params,body,setup) {\n    if(typeof setup === \"undefined\") { setup = \"\"; }\n    var fun = [];\n    var k;\n    var avec = /\\[i\\]$/,p,thevec = '';\n    var haveret = false;\n    for(k=0;k<params.length;k++) {\n        if(avec.test(params[k])) {\n            p = params[k].substring(0,params[k].length-3);\n            thevec = p;\n        } else { p = params[k]; }\n        if(p==='ret') haveret = true;\n        fun.push(p);\n    }\n    fun[params.length] = (\n            'var _n = '+thevec+'.length;\\n'+\n            'var i'+(haveret?'':', ret = Array(_n)')+';\\n'+\n            setup+'\\n'+\n            'for(i=_n-1;i!==-1;--i) {\\n'+\n            body+'\\n'+\n            '}\\n'+\n            'return ret;'\n            );\n    return Function.apply(null,fun);\n}\nnumeric._biforeach = (function _biforeach(x,y,s,k,f) {\n    if(k === s.length-1) { f(x,y); return; }\n    var i,n=s[k];\n    for(i=n-1;i>=0;i--) { _biforeach(typeof x===\"object\"?x[i]:x,typeof y===\"object\"?y[i]:y,s,k+1,f); }\n});\nnumeric._biforeach2 = (function _biforeach2(x,y,s,k,f) {\n    if(k === s.length-1) { return f(x,y); }\n    var i,n=s[k],ret = Array(n);\n    for(i=n-1;i>=0;--i) { ret[i] = _biforeach2(typeof x===\"object\"?x[i]:x,typeof y===\"object\"?y[i]:y,s,k+1,f); }\n    return ret;\n});\nnumeric._foreach = (function _foreach(x,s,k,f) {\n    if(k === s.length-1) { f(x); return; }\n    var i,n=s[k];\n    for(i=n-1;i>=0;i--) { _foreach(x[i],s,k+1,f); }\n});\nnumeric._foreach2 = (function _foreach2(x,s,k,f) {\n    if(k === s.length-1) { return f(x); }\n    var i,n=s[k], ret = Array(n);\n    for(i=n-1;i>=0;i--) { ret[i] = _foreach2(x[i],s,k+1,f); }\n    return ret;\n});\n\n/*numeric.anyV = numeric.mapreduce('if(xi) return true;','false');\nnumeric.allV = numeric.mapreduce('if(!xi) return false;','true');\nnumeric.any = function(x) { if(typeof x.length === \"undefined\") return x; return numeric.anyV(x); }\nnumeric.all = function(x) { if(typeof x.length === \"undefined\") return x; return numeric.allV(x); }*/\n\nnumeric.ops2 = {\n        add: '+',\n        sub: '-',\n        mul: '*',\n        div: '/',\n        mod: '%',\n        and: '&&',\n        or:  '||',\n        eq:  '===',\n        neq: '!==',\n        lt:  '<',\n        gt:  '>',\n        leq: '<=',\n        geq: '>=',\n        band: '&',\n        bor: '|',\n        bxor: '^',\n        lshift: '<<',\n        rshift: '>>',\n        rrshift: '>>>'\n};\nnumeric.opseq = {\n        addeq: '+=',\n        subeq: '-=',\n        muleq: '*=',\n        diveq: '/=',\n        modeq: '%=',\n        lshifteq: '<<=',\n        rshifteq: '>>=',\n        rrshifteq: '>>>=',\n        bandeq: '&=',\n        boreq: '|=',\n        bxoreq: '^='\n};\nnumeric.mathfuns = ['abs','acos','asin','atan','ceil','cos',\n                    'exp','floor','log','round','sin','sqrt','tan',\n                    'isNaN','isFinite'];\nnumeric.mathfuns2 = ['atan2','pow','max','min'];\nnumeric.ops1 = {\n        neg: '-',\n        not: '!',\n        bnot: '~',\n        clone: ''\n};\nnumeric.mapreducers = {\n        any: ['if(xi) return true;','var accum = false;'],\n        all: ['if(!xi) return false;','var accum = true;'],\n        sum: ['accum += xi;','var accum = 0;'],\n        prod: ['accum *= xi;','var accum = 1;'],\n        norm2Squared: ['accum += xi*xi;','var accum = 0;'],\n        norminf: ['accum = max(accum,abs(xi));','var accum = 0, max = Math.max, abs = Math.abs;'],\n        norm1: ['accum += abs(xi)','var accum = 0, abs = Math.abs;'],\n        sup: ['accum = max(accum,xi);','var accum = -Infinity, max = Math.max;'],\n        inf: ['accum = min(accum,xi);','var accum = Infinity, min = Math.min;']\n};\n\n(function () {\n    var i,o;\n    for(i=0;i<numeric.mathfuns2.length;++i) {\n        o = numeric.mathfuns2[i];\n        numeric.ops2[o] = o;\n    }\n    for(i in numeric.ops2) {\n        if(numeric.ops2.hasOwnProperty(i)) {\n            o = numeric.ops2[i];\n            var code, codeeq, setup = '';\n            if(numeric.myIndexOf.call(numeric.mathfuns2,i)!==-1) {\n                setup = 'var '+o+' = Math.'+o+';\\n';\n                code = function(r,x,y) { return r+' = '+o+'('+x+','+y+')'; };\n                codeeq = function(x,y) { return x+' = '+o+'('+x+','+y+')'; };\n            } else {\n                code = function(r,x,y) { return r+' = '+x+' '+o+' '+y; };\n                if(numeric.opseq.hasOwnProperty(i+'eq')) {\n                    codeeq = function(x,y) { return x+' '+o+'= '+y; };\n                } else {\n                    codeeq = function(x,y) { return x+' = '+x+' '+o+' '+y; };                    \n                }\n            }\n            numeric[i+'VV'] = numeric.pointwise2(['x[i]','y[i]'],code('ret[i]','x[i]','y[i]'),setup);\n            numeric[i+'SV'] = numeric.pointwise2(['x','y[i]'],code('ret[i]','x','y[i]'),setup);\n            numeric[i+'VS'] = numeric.pointwise2(['x[i]','y'],code('ret[i]','x[i]','y'),setup);\n            numeric[i] = Function(\n                    'var n = arguments.length, i, x = arguments[0], y;\\n'+\n                    'var VV = numeric.'+i+'VV, VS = numeric.'+i+'VS, SV = numeric.'+i+'SV;\\n'+\n                    'var dim = numeric.dim;\\n'+\n                    'for(i=1;i!==n;++i) { \\n'+\n                    '  y = arguments[i];\\n'+\n                    '  if(typeof x === \"object\") {\\n'+\n                    '      if(typeof y === \"object\") x = numeric._biforeach2(x,y,dim(x),0,VV);\\n'+\n                    '      else x = numeric._biforeach2(x,y,dim(x),0,VS);\\n'+\n                    '  } else if(typeof y === \"object\") x = numeric._biforeach2(x,y,dim(y),0,SV);\\n'+\n                    '  else '+codeeq('x','y')+'\\n'+\n                    '}\\nreturn x;\\n');\n            numeric[o] = numeric[i];\n            numeric[i+'eqV'] = numeric.pointwise2(['ret[i]','x[i]'], codeeq('ret[i]','x[i]'),setup);\n            numeric[i+'eqS'] = numeric.pointwise2(['ret[i]','x'], codeeq('ret[i]','x'),setup);\n            numeric[i+'eq'] = Function(\n                    'var n = arguments.length, i, x = arguments[0], y;\\n'+\n                    'var V = numeric.'+i+'eqV, S = numeric.'+i+'eqS\\n'+\n                    'var s = numeric.dim(x);\\n'+\n                    'for(i=1;i!==n;++i) { \\n'+\n                    '  y = arguments[i];\\n'+\n                    '  if(typeof y === \"object\") numeric._biforeach(x,y,s,0,V);\\n'+\n                    '  else numeric._biforeach(x,y,s,0,S);\\n'+\n                    '}\\nreturn x;\\n');\n        }\n    }\n    for(i=0;i<numeric.mathfuns2.length;++i) {\n        o = numeric.mathfuns2[i];\n        delete numeric.ops2[o];\n    }\n    for(i=0;i<numeric.mathfuns.length;++i) {\n        o = numeric.mathfuns[i];\n        numeric.ops1[o] = o;\n    }\n    for(i in numeric.ops1) {\n        if(numeric.ops1.hasOwnProperty(i)) {\n            setup = '';\n            o = numeric.ops1[i];\n            if(numeric.myIndexOf.call(numeric.mathfuns,i)!==-1) {\n                if(Math.hasOwnProperty(o)) setup = 'var '+o+' = Math.'+o+';\\n';\n            }\n            numeric[i+'eqV'] = numeric.pointwise2(['ret[i]'],'ret[i] = '+o+'(ret[i]);',setup);\n            numeric[i+'eq'] = Function('x',\n                    'if(typeof x !== \"object\") return '+o+'x\\n'+\n                    'var i;\\n'+\n                    'var V = numeric.'+i+'eqV;\\n'+\n                    'var s = numeric.dim(x);\\n'+\n                    'numeric._foreach(x,s,0,V);\\n'+\n                    'return x;\\n');\n            numeric[i+'V'] = numeric.pointwise2(['x[i]'],'ret[i] = '+o+'(x[i]);',setup);\n            numeric[i] = Function('x',\n                    'if(typeof x !== \"object\") return '+o+'(x)\\n'+\n                    'var i;\\n'+\n                    'var V = numeric.'+i+'V;\\n'+\n                    'var s = numeric.dim(x);\\n'+\n                    'return numeric._foreach2(x,s,0,V);\\n');\n        }\n    }\n    for(i=0;i<numeric.mathfuns.length;++i) {\n        o = numeric.mathfuns[i];\n        delete numeric.ops1[o];\n    }\n    for(i in numeric.mapreducers) {\n        if(numeric.mapreducers.hasOwnProperty(i)) {\n            o = numeric.mapreducers[i];\n            numeric[i+'V'] = numeric.mapreduce2(o[0],o[1]);\n            numeric[i] = Function('x','s','k',\n                    o[1]+\n                    'if(typeof x !== \"object\") {'+\n                    '    xi = x;\\n'+\n                    o[0]+';\\n'+\n                    '    return accum;\\n'+\n                    '}'+\n                    'if(typeof s === \"undefined\") s = numeric.dim(x);\\n'+\n                    'if(typeof k === \"undefined\") k = 0;\\n'+\n                    'if(k === s.length-1) return numeric.'+i+'V(x);\\n'+\n                    'var xi;\\n'+\n                    'var n = x.length, i;\\n'+\n                    'for(i=n-1;i!==-1;--i) {\\n'+\n                    '   xi = arguments.callee(x[i]);\\n'+\n                    o[0]+';\\n'+\n                    '}\\n'+\n                    'return accum;\\n');\n        }\n    }\n}());\n\nnumeric.truncVV = numeric.pointwise(['x[i]','y[i]'],'ret[i] = round(x[i]/y[i])*y[i];','var round = Math.round;');\nnumeric.truncVS = numeric.pointwise(['x[i]','y'],'ret[i] = round(x[i]/y)*y;','var round = Math.round;');\nnumeric.truncSV = numeric.pointwise(['x','y[i]'],'ret[i] = round(x/y[i])*y[i];','var round = Math.round;');\nnumeric.trunc = function trunc(x,y) {\n    if(typeof x === \"object\") {\n        if(typeof y === \"object\") return numeric.truncVV(x,y);\n        return numeric.truncVS(x,y);\n    }\n    if (typeof y === \"object\") return numeric.truncSV(x,y);\n    return Math.round(x/y)*y;\n}\n\nnumeric.inv = function inv(x) {\n    var s = numeric.dim(x), abs = Math.abs, m = s[0], n = s[1];\n    var A = numeric.clone(x), Ai, Aj;\n    var I = numeric.identity(m), Ii, Ij;\n    var i,j,k,x;\n    for(j=0;j<n;++j) {\n        var i0 = -1;\n        var v0 = -1;\n        for(i=j;i!==m;++i) { k = abs(A[i][j]); if(k>v0) { i0 = i; v0 = k; } }\n        Aj = A[i0]; A[i0] = A[j]; A[j] = Aj;\n        Ij = I[i0]; I[i0] = I[j]; I[j] = Ij;\n        x = Aj[j];\n        for(k=j;k!==n;++k)    Aj[k] /= x; \n        for(k=n-1;k!==-1;--k) Ij[k] /= x;\n        for(i=m-1;i!==-1;--i) {\n            if(i!==j) {\n                Ai = A[i];\n                Ii = I[i];\n                x = Ai[j];\n                for(k=j+1;k!==n;++k)  Ai[k] -= Aj[k]*x;\n                for(k=n-1;k>0;--k) { Ii[k] -= Ij[k]*x; --k; Ii[k] -= Ij[k]*x; }\n                if(k===0) Ii[0] -= Ij[0]*x;\n            }\n        }\n    }\n    return I;\n}\n\nnumeric.det = function det(x) {\n    var s = numeric.dim(x);\n    if(s.length !== 2 || s[0] !== s[1]) { throw new Error('numeric: det() only works on square matrices'); }\n    var n = s[0], ret = 1,i,j,k,A = numeric.clone(x),Aj,Ai,alpha,temp,k1,k2,k3;\n    for(j=0;j<n-1;j++) {\n        k=j;\n        for(i=j+1;i<n;i++) { if(Math.abs(A[i][j]) > Math.abs(A[k][j])) { k = i; } }\n        if(k !== j) {\n            temp = A[k]; A[k] = A[j]; A[j] = temp;\n            ret *= -1;\n        }\n        Aj = A[j];\n        for(i=j+1;i<n;i++) {\n            Ai = A[i];\n            alpha = Ai[j]/Aj[j];\n            for(k=j+1;k<n-1;k+=2) {\n                k1 = k+1;\n                Ai[k] -= Aj[k]*alpha;\n                Ai[k1] -= Aj[k1]*alpha;\n            }\n            if(k!==n) { Ai[k] -= Aj[k]*alpha; }\n        }\n        if(Aj[j] === 0) { return 0; }\n        ret *= Aj[j];\n    }\n    return ret*A[j][j];\n}\n\nnumeric.transpose = function transpose(x) {\n    var i,j,m = x.length,n = x[0].length, ret=Array(n),A0,A1,Bj;\n    for(j=0;j<n;j++) ret[j] = Array(m);\n    for(i=m-1;i>=1;i-=2) {\n        A1 = x[i];\n        A0 = x[i-1];\n        for(j=n-1;j>=1;--j) {\n            Bj = ret[j]; Bj[i] = A1[j]; Bj[i-1] = A0[j];\n            --j;\n            Bj = ret[j]; Bj[i] = A1[j]; Bj[i-1] = A0[j];\n        }\n        if(j===0) {\n            Bj = ret[0]; Bj[i] = A1[0]; Bj[i-1] = A0[0];\n        }\n    }\n    if(i===0) {\n        A0 = x[0];\n        for(j=n-1;j>=1;--j) {\n            ret[j][0] = A0[j];\n            --j;\n            ret[j][0] = A0[j];\n        }\n        if(j===0) { ret[0][0] = A0[0]; }\n    }\n    return ret;\n}\nnumeric.negtranspose = function negtranspose(x) {\n    var i,j,m = x.length,n = x[0].length, ret=Array(n),A0,A1,Bj;\n    for(j=0;j<n;j++) ret[j] = Array(m);\n    for(i=m-1;i>=1;i-=2) {\n        A1 = x[i];\n        A0 = x[i-1];\n        for(j=n-1;j>=1;--j) {\n            Bj = ret[j]; Bj[i] = -A1[j]; Bj[i-1] = -A0[j];\n            --j;\n            Bj = ret[j]; Bj[i] = -A1[j]; Bj[i-1] = -A0[j];\n        }\n        if(j===0) {\n            Bj = ret[0]; Bj[i] = -A1[0]; Bj[i-1] = -A0[0];\n        }\n    }\n    if(i===0) {\n        A0 = x[0];\n        for(j=n-1;j>=1;--j) {\n            ret[j][0] = -A0[j];\n            --j;\n            ret[j][0] = -A0[j];\n        }\n        if(j===0) { ret[0][0] = -A0[0]; }\n    }\n    return ret;\n}\n\nnumeric._random = function _random(s,k) {\n    var i,n=s[k],ret=Array(n), rnd;\n    if(k === s.length-1) {\n        rnd = Math.random;\n        for(i=n-1;i>=1;i-=2) {\n            ret[i] = rnd();\n            ret[i-1] = rnd();\n        }\n        if(i===0) { ret[0] = rnd(); }\n        return ret;\n    }\n    for(i=n-1;i>=0;i--) ret[i] = _random(s,k+1);\n    return ret;\n}\nnumeric.random = function random(s) { return numeric._random(s,0); }\n\nnumeric.norm2 = function norm2(x) { return Math.sqrt(numeric.norm2Squared(x)); }\n\nnumeric.linspace = function linspace(a,b,n) {\n    if(typeof n === \"undefined\") n = Math.max(Math.round(b-a)+1,1);\n    if(n<2) { return n===1?[a]:[]; }\n    var i,ret = Array(n);\n    n--;\n    for(i=n;i>=0;i--) { ret[i] = (i*b+(n-i)*a)/n; }\n    return ret;\n}\n\nnumeric.getBlock = function getBlock(x,from,to) {\n    var s = numeric.dim(x);\n    function foo(x,k) {\n        var i,a = from[k], n = to[k]-a, ret = Array(n);\n        if(k === s.length-1) {\n            for(i=n;i>=0;i--) { ret[i] = x[i+a]; }\n            return ret;\n        }\n        for(i=n;i>=0;i--) { ret[i] = foo(x[i+a],k+1); }\n        return ret;\n    }\n    return foo(x,0);\n}\n\nnumeric.setBlock = function setBlock(x,from,to,B) {\n    var s = numeric.dim(x);\n    function foo(x,y,k) {\n        var i,a = from[k], n = to[k]-a;\n        if(k === s.length-1) { for(i=n;i>=0;i--) { x[i+a] = y[i]; } }\n        for(i=n;i>=0;i--) { foo(x[i+a],y[i],k+1); }\n    }\n    foo(x,B,0);\n    return x;\n}\n\nnumeric.getRange = function getRange(A,I,J) {\n    var m = I.length, n = J.length;\n    var i,j;\n    var B = Array(m), Bi, AI;\n    for(i=m-1;i!==-1;--i) {\n        B[i] = Array(n);\n        Bi = B[i];\n        AI = A[I[i]];\n        for(j=n-1;j!==-1;--j) Bi[j] = AI[J[j]];\n    }\n    return B;\n}\n\nnumeric.blockMatrix = function blockMatrix(X) {\n    var s = numeric.dim(X);\n    if(s.length<4) return numeric.blockMatrix([X]);\n    var m=s[0],n=s[1],M,N,i,j,Xij;\n    M = 0; N = 0;\n    for(i=0;i<m;++i) M+=X[i][0].length;\n    for(j=0;j<n;++j) N+=X[0][j][0].length;\n    var Z = Array(M);\n    for(i=0;i<M;++i) Z[i] = Array(N);\n    var I=0,J,ZI,k,l,Xijk;\n    for(i=0;i<m;++i) {\n        J=N;\n        for(j=n-1;j!==-1;--j) {\n            Xij = X[i][j];\n            J -= Xij[0].length;\n            for(k=Xij.length-1;k!==-1;--k) {\n                Xijk = Xij[k];\n                ZI = Z[I+k];\n                for(l = Xijk.length-1;l!==-1;--l) ZI[J+l] = Xijk[l];\n            }\n        }\n        I += X[i][0].length;\n    }\n    return Z;\n}\n\nnumeric.tensor = function tensor(x,y) {\n    if(typeof x === \"number\" || typeof y === \"number\") return numeric.mul(x,y);\n    var s1 = numeric.dim(x), s2 = numeric.dim(y);\n    if(s1.length !== 1 || s2.length !== 1) {\n        throw new Error('numeric: tensor product is only defined for vectors');\n    }\n    var m = s1[0], n = s2[0], A = Array(m), Ai, i,j,xi;\n    for(i=m-1;i>=0;i--) {\n        Ai = Array(n);\n        xi = x[i];\n        for(j=n-1;j>=3;--j) {\n            Ai[j] = xi * y[j];\n            --j;\n            Ai[j] = xi * y[j];\n            --j;\n            Ai[j] = xi * y[j];\n            --j;\n            Ai[j] = xi * y[j];\n        }\n        while(j>=0) { Ai[j] = xi * y[j]; --j; }\n        A[i] = Ai;\n    }\n    return A;\n}\n\n// 3. The Tensor type T\nnumeric.T = function T(x,y) { this.x = x; this.y = y; }\nnumeric.t = function t(x,y) { return new numeric.T(x,y); }\n\nnumeric.Tbinop = function Tbinop(rr,rc,cr,cc,setup) {\n    var io = numeric.indexOf;\n    if(typeof setup !== \"string\") {\n        var k;\n        setup = '';\n        for(k in numeric) {\n            if(numeric.hasOwnProperty(k) && (rr.indexOf(k)>=0 || rc.indexOf(k)>=0 || cr.indexOf(k)>=0 || cc.indexOf(k)>=0) && k.length>1) {\n                setup += 'var '+k+' = numeric.'+k+';\\n';\n            }\n        }\n    }\n    return Function(['y'],\n            'var x = this;\\n'+\n            'if(!(y instanceof numeric.T)) { y = new numeric.T(y); }\\n'+\n            setup+'\\n'+\n            'if(x.y) {'+\n            '  if(y.y) {'+\n            '    return new numeric.T('+cc+');\\n'+\n            '  }\\n'+\n            '  return new numeric.T('+cr+');\\n'+\n            '}\\n'+\n            'if(y.y) {\\n'+\n            '  return new numeric.T('+rc+');\\n'+\n            '}\\n'+\n            'return new numeric.T('+rr+');\\n'\n    );\n}\n\nnumeric.T.prototype.add = numeric.Tbinop(\n        'add(x.x,y.x)',\n        'add(x.x,y.x),y.y',\n        'add(x.x,y.x),x.y',\n        'add(x.x,y.x),add(x.y,y.y)');\nnumeric.T.prototype.sub = numeric.Tbinop(\n        'sub(x.x,y.x)',\n        'sub(x.x,y.x),neg(y.y)',\n        'sub(x.x,y.x),x.y',\n        'sub(x.x,y.x),sub(x.y,y.y)');\nnumeric.T.prototype.mul = numeric.Tbinop(\n        'mul(x.x,y.x)',\n        'mul(x.x,y.x),mul(x.x,y.y)',\n        'mul(x.x,y.x),mul(x.y,y.x)',\n        'sub(mul(x.x,y.x),mul(x.y,y.y)),add(mul(x.x,y.y),mul(x.y,y.x))');\n\nnumeric.T.prototype.reciprocal = function reciprocal() {\n    var mul = numeric.mul, div = numeric.div;\n    if(this.y) {\n        var d = numeric.add(mul(this.x,this.x),mul(this.y,this.y));\n        return new numeric.T(div(this.x,d),div(numeric.neg(this.y),d));\n    }\n    return new T(div(1,this.x));\n}\nnumeric.T.prototype.div = function div(y) {\n    if(!(y instanceof numeric.T)) y = new numeric.T(y);\n    if(y.y) { return this.mul(y.reciprocal()); }\n    var div = numeric.div;\n    if(this.y) { return new numeric.T(div(this.x,y.x),div(this.y,y.x)); }\n    return new numeric.T(div(this.x,y.x));\n}\nnumeric.T.prototype.dot = numeric.Tbinop(\n        'dot(x.x,y.x)',\n        'dot(x.x,y.x),dot(x.x,y.y)',\n        'dot(x.x,y.x),dot(x.y,y.x)',\n        'sub(dot(x.x,y.x),dot(x.y,y.y)),add(dot(x.x,y.y),dot(x.y,y.x))'\n        );\nnumeric.T.prototype.transpose = function transpose() {\n    var t = numeric.transpose, x = this.x, y = this.y;\n    if(y) { return new numeric.T(t(x),t(y)); }\n    return new numeric.T(t(x));\n}\nnumeric.T.prototype.transjugate = function transjugate() {\n    var t = numeric.transpose, x = this.x, y = this.y;\n    if(y) { return new numeric.T(t(x),numeric.negtranspose(y)); }\n    return new numeric.T(t(x));\n}\nnumeric.Tunop = function Tunop(r,c,s) {\n    if(typeof s !== \"string\") { s = ''; }\n    return Function(\n            'var x = this;\\n'+\n            s+'\\n'+\n            'if(x.y) {'+\n            '  '+c+';\\n'+\n            '}\\n'+\n            r+';\\n'\n    );\n}\n\nnumeric.T.prototype.exp = numeric.Tunop(\n        'return new numeric.T(ex)',\n        'return new numeric.T(mul(cos(x.y),ex),mul(sin(x.y),ex))',\n        'var ex = numeric.exp(x.x), cos = numeric.cos, sin = numeric.sin, mul = numeric.mul;');\nnumeric.T.prototype.conj = numeric.Tunop(\n        'return new numeric.T(x.x);',\n        'return new numeric.T(x.x,numeric.neg(x.y));');\nnumeric.T.prototype.neg = numeric.Tunop(\n        'return new numeric.T(neg(x.x));',\n        'return new numeric.T(neg(x.x),neg(x.y));',\n        'var neg = numeric.neg;');\nnumeric.T.prototype.sin = numeric.Tunop(\n        'return new numeric.T(numeric.sin(x.x))',\n        'return x.exp().sub(x.neg().exp()).div(new numeric.T(0,2));');\nnumeric.T.prototype.cos = numeric.Tunop(\n        'return new numeric.T(numeric.cos(x.x))',\n        'return x.exp().add(x.neg().exp()).div(2);');\nnumeric.T.prototype.abs = numeric.Tunop(\n        'return new numeric.T(numeric.abs(x.x));',\n        'return new numeric.T(numeric.sqrt(numeric.add(mul(x.x,x.x),mul(x.y,x.y))));',\n        'var mul = numeric.mul;');\nnumeric.T.prototype.log = numeric.Tunop(\n        'return new numeric.T(numeric.log(x.x));',\n        'var theta = new numeric.T(numeric.atan2(x.y,x.x)), r = x.abs();\\n'+\n        'return new numeric.T(numeric.log(r.x),theta.x);');\nnumeric.T.prototype.norm2 = numeric.Tunop(\n        'return numeric.norm2(x.x);',\n        'var f = numeric.norm2Squared;\\n'+\n        'return Math.sqrt(f(x.x)+f(x.y));');\nnumeric.T.prototype.inv = function inv() {\n    var A = this;\n    if(typeof A.y === \"undefined\") { return new numeric.T(numeric.inv(A.x)); }\n    var n = A.x.length, i, j, k;\n    var Rx = numeric.identity(n),Ry = numeric.rep([n,n],0);\n    var Ax = numeric.clone(A.x), Ay = numeric.clone(A.y);\n    var Aix, Aiy, Ajx, Ajy, Rix, Riy, Rjx, Rjy;\n    var i,j,k,d,d1,ax,ay,bx,by,temp;\n    for(i=0;i<n;i++) {\n        ax = Ax[i][i]; ay = Ay[i][i];\n        d = ax*ax+ay*ay;\n        k = i;\n        for(j=i+1;j<n;j++) {\n            ax = Ax[j][i]; ay = Ay[j][i];\n            d1 = ax*ax+ay*ay;\n            if(d1 > d) { k=j; d = d1; }\n        }\n        if(k!==i) {\n            temp = Ax[i]; Ax[i] = Ax[k]; Ax[k] = temp;\n            temp = Ay[i]; Ay[i] = Ay[k]; Ay[k] = temp;\n            temp = Rx[i]; Rx[i] = Rx[k]; Rx[k] = temp;\n            temp = Ry[i]; Ry[i] = Ry[k]; Ry[k] = temp;\n        }\n        Aix = Ax[i]; Aiy = Ay[i];\n        Rix = Rx[i]; Riy = Ry[i];\n        ax = Aix[i]; ay = Aiy[i];\n        for(j=i+1;j<n;j++) {\n            bx = Aix[j]; by = Aiy[j];\n            Aix[j] = (bx*ax+by*ay)/d;\n            Aiy[j] = (by*ax-bx*ay)/d;\n        }\n        for(j=0;j<n;j++) {\n            bx = Rix[j]; by = Riy[j];\n            Rix[j] = (bx*ax+by*ay)/d;\n            Riy[j] = (by*ax-bx*ay)/d;\n        }\n        for(j=i+1;j<n;j++) {\n            Ajx = Ax[j]; Ajy = Ay[j];\n            Rjx = Rx[j]; Rjy = Ry[j];\n            ax = Ajx[i]; ay = Ajy[i];\n            for(k=i+1;k<n;k++) {\n                bx = Aix[k]; by = Aiy[k];\n                Ajx[k] -= bx*ax-by*ay;\n                Ajy[k] -= by*ax+bx*ay;\n            }\n            for(k=0;k<n;k++) {\n                bx = Rix[k]; by = Riy[k];\n                Rjx[k] -= bx*ax-by*ay;\n                Rjy[k] -= by*ax+bx*ay;\n            }\n        }\n    }\n    for(i=n-1;i>0;i--) {\n        Rix = Rx[i]; Riy = Ry[i];\n        for(j=i-1;j>=0;j--) {\n            Rjx = Rx[j]; Rjy = Ry[j];\n            ax = Ax[j][i]; ay = Ay[j][i];\n            for(k=n-1;k>=0;k--) {\n                bx = Rix[k]; by = Riy[k];\n                Rjx[k] -= ax*bx - ay*by;\n                Rjy[k] -= ax*by + ay*bx;\n            }\n        }\n    }\n    return new numeric.T(Rx,Ry);\n}\nnumeric.T.prototype.get = function get(i) {\n    var x = this.x, y = this.y, k = 0, ik, n = i.length;\n    if(y) {\n        while(k<n) {\n            ik = i[k];\n            x = x[ik];\n            y = y[ik];\n            k++;\n        }\n        return new numeric.T(x,y);\n    }\n    while(k<n) {\n        ik = i[k];\n        x = x[ik];\n        k++;\n    }\n    return new numeric.T(x);\n}\nnumeric.T.prototype.set = function set(i,v) {\n    var x = this.x, y = this.y, k = 0, ik, n = i.length, vx = v.x, vy = v.y;\n    if(n===0) {\n        if(vy) { this.y = vy; }\n        else if(y) { this.y = undefined; }\n        this.x = x;\n        return this;\n    }\n    if(vy) {\n        if(y) { /* ok */ }\n        else {\n            y = numeric.rep(numeric.dim(x),0);\n            this.y = y;\n        }\n        while(k<n-1) {\n            ik = i[k];\n            x = x[ik];\n            y = y[ik];\n            k++;\n        }\n        ik = i[k];\n        x[ik] = vx;\n        y[ik] = vy;\n        return this;\n    }\n    if(y) {\n        while(k<n-1) {\n            ik = i[k];\n            x = x[ik];\n            y = y[ik];\n            k++;\n        }\n        ik = i[k];\n        x[ik] = vx;\n        if(vx instanceof Array) y[ik] = numeric.rep(numeric.dim(vx),0);\n        else y[ik] = 0;\n        return this;\n    }\n    while(k<n-1) {\n        ik = i[k];\n        x = x[ik];\n        k++;\n    }\n    ik = i[k];\n    x[ik] = vx;\n    return this;\n}\nnumeric.T.prototype.getRows = function getRows(i0,i1) {\n    var n = i1-i0+1, j;\n    var rx = Array(n), ry, x = this.x, y = this.y;\n    for(j=i0;j<=i1;j++) { rx[j-i0] = x[j]; }\n    if(y) {\n        ry = Array(n);\n        for(j=i0;j<=i1;j++) { ry[j-i0] = y[j]; }\n        return new numeric.T(rx,ry);\n    }\n    return new numeric.T(rx);\n}\nnumeric.T.prototype.setRows = function setRows(i0,i1,A) {\n    var j;\n    var rx = this.x, ry = this.y, x = A.x, y = A.y;\n    for(j=i0;j<=i1;j++) { rx[j] = x[j-i0]; }\n    if(y) {\n        if(!ry) { ry = numeric.rep(numeric.dim(rx),0); this.y = ry; }\n        for(j=i0;j<=i1;j++) { ry[j] = y[j-i0]; }\n    } else if(ry) {\n        for(j=i0;j<=i1;j++) { ry[j] = numeric.rep([x[j-i0].length],0); }\n    }\n    return this;\n}\nnumeric.T.prototype.getRow = function getRow(k) {\n    var x = this.x, y = this.y;\n    if(y) { return new numeric.T(x[k],y[k]); }\n    return new numeric.T(x[k]);\n}\nnumeric.T.prototype.setRow = function setRow(i,v) {\n    var rx = this.x, ry = this.y, x = v.x, y = v.y;\n    rx[i] = x;\n    if(y) {\n        if(!ry) { ry = numeric.rep(numeric.dim(rx),0); this.y = ry; }\n        ry[i] = y;\n    } else if(ry) {\n        ry = numeric.rep([x.length],0);\n    }\n    return this;\n}\n\nnumeric.T.prototype.getBlock = function getBlock(from,to) {\n    var x = this.x, y = this.y, b = numeric.getBlock;\n    if(y) { return new numeric.T(b(x,from,to),b(y,from,to)); }\n    return new numeric.T(b(x,from,to));\n}\nnumeric.T.prototype.setBlock = function setBlock(from,to,A) {\n    if(!(A instanceof numeric.T)) A = new numeric.T(A);\n    var x = this.x, y = this.y, b = numeric.setBlock, Ax = A.x, Ay = A.y;\n    if(Ay) {\n        if(!y) { this.y = numeric.rep(numeric.dim(this),0); y = this.y; }\n        b(x,from,to,Ax);\n        b(y,from,to,Ay);\n        return this;\n    }\n    b(x,from,to,Ax);\n    if(y) b(y,from,to,numeric.rep(numeric.dim(Ax),0));\n}\nnumeric.T.rep = function rep(s,v) {\n    var T = numeric.T;\n    if(!(v instanceof T)) v = new T(v);\n    var x = v.x, y = v.y, r = numeric.rep;\n    if(y) return new T(r(s,x),r(s,y));\n    return new T(r(s,x));\n}\nnumeric.T.diag = function diag(d) {\n    if(!(d instanceof numeric.T)) d = new numeric.T(d);\n    var x = d.x, y = d.y, diag = numeric.diag;\n    if(y) return new numeric.T(diag(x),diag(y));\n    return new numeric.T(diag(x));\n}\nnumeric.T.eig = function eig() {\n    if(this.y) { throw new Error('eig: not implemented for complex matrices.'); }\n    return numeric.eig(this.x);\n}\nnumeric.T.identity = function identity(n) { return new numeric.T(numeric.identity(n)); }\nnumeric.T.prototype.getDiag = function getDiag() {\n    var n = numeric;\n    var x = this.x, y = this.y;\n    if(y) { return new n.T(n.getDiag(x),n.getDiag(y)); }\n    return new n.T(n.getDiag(x));\n}\n\n// 4. Eigenvalues of real matrices\n\nnumeric.house = function house(x) {\n    var v = numeric.clone(x);\n    var s = x[0] >= 0 ? 1 : -1;\n    var alpha = s*numeric.norm2(x);\n    v[0] += alpha;\n    var foo = numeric.norm2(v);\n    if(foo === 0) { /* this should not happen */ throw new Error('eig: internal error'); }\n    return numeric.div(v,foo);\n}\n\nnumeric.toUpperHessenberg = function toUpperHessenberg(me) {\n    var s = numeric.dim(me);\n    if(s.length !== 2 || s[0] !== s[1]) { throw new Error('numeric: toUpperHessenberg() only works on square matrices'); }\n    var m = s[0], i,j,k,x,v,A = numeric.clone(me),B,C,Ai,Ci,Q = numeric.identity(m),Qi;\n    for(j=0;j<m-2;j++) {\n        x = Array(m-j-1);\n        for(i=j+1;i<m;i++) { x[i-j-1] = A[i][j]; }\n        if(numeric.norm2(x)>0) {\n            v = numeric.house(x);\n            B = numeric.getBlock(A,[j+1,j],[m-1,m-1]);\n            C = numeric.tensor(v,numeric.dot(v,B));\n            for(i=j+1;i<m;i++) { Ai = A[i]; Ci = C[i-j-1]; for(k=j;k<m;k++) Ai[k] -= 2*Ci[k-j]; }\n            B = numeric.getBlock(A,[0,j+1],[m-1,m-1]);\n            C = numeric.tensor(numeric.dot(B,v),v);\n            for(i=0;i<m;i++) { Ai = A[i]; Ci = C[i]; for(k=j+1;k<m;k++) Ai[k] -= 2*Ci[k-j-1]; }\n            B = Array(m-j-1);\n            for(i=j+1;i<m;i++) B[i-j-1] = Q[i];\n            C = numeric.tensor(v,numeric.dot(v,B));\n            for(i=j+1;i<m;i++) { Qi = Q[i]; Ci = C[i-j-1]; for(k=0;k<m;k++) Qi[k] -= 2*Ci[k]; }\n        }\n    }\n    return {H:A, Q:Q};\n}\n\nnumeric.epsilon = 2.220446049250313e-16;\n\nnumeric.QRFrancis = function(H,maxiter) {\n    if(typeof maxiter === \"undefined\") { maxiter = 10000; }\n    H = numeric.clone(H);\n    var H0 = numeric.clone(H);\n    var s = numeric.dim(H),m=s[0],x,v,a,b,c,d,det,tr, Hloc, Q = numeric.identity(m), Qi, Hi, B, C, Ci,i,j,k,iter;\n    if(m<3) { return {Q:Q, B:[ [0,m-1] ]}; }\n    var epsilon = numeric.epsilon;\n    for(iter=0;iter<maxiter;iter++) {\n        for(j=0;j<m-1;j++) {\n            if(Math.abs(H[j+1][j]) < epsilon*(Math.abs(H[j][j])+Math.abs(H[j+1][j+1]))) {\n                var QH1 = numeric.QRFrancis(numeric.getBlock(H,[0,0],[j,j]),maxiter);\n                var QH2 = numeric.QRFrancis(numeric.getBlock(H,[j+1,j+1],[m-1,m-1]),maxiter);\n                B = Array(j+1);\n                for(i=0;i<=j;i++) { B[i] = Q[i]; }\n                C = numeric.dot(QH1.Q,B);\n                for(i=0;i<=j;i++) { Q[i] = C[i]; }\n                B = Array(m-j-1);\n                for(i=j+1;i<m;i++) { B[i-j-1] = Q[i]; }\n                C = numeric.dot(QH2.Q,B);\n                for(i=j+1;i<m;i++) { Q[i] = C[i-j-1]; }\n                return {Q:Q,B:QH1.B.concat(numeric.add(QH2.B,j+1))};\n            }\n        }\n        a = H[m-2][m-2]; b = H[m-2][m-1];\n        c = H[m-1][m-2]; d = H[m-1][m-1];\n        tr = a+d;\n        det = (a*d-b*c);\n        Hloc = numeric.getBlock(H, [0,0], [2,2]);\n        if(tr*tr>=4*det) {\n            var s1,s2;\n            s1 = 0.5*(tr+Math.sqrt(tr*tr-4*det));\n            s2 = 0.5*(tr-Math.sqrt(tr*tr-4*det));\n            Hloc = numeric.add(numeric.sub(numeric.dot(Hloc,Hloc),\n                                           numeric.mul(Hloc,s1+s2)),\n                               numeric.diag(numeric.rep([3],s1*s2)));\n        } else {\n            Hloc = numeric.add(numeric.sub(numeric.dot(Hloc,Hloc),\n                                           numeric.mul(Hloc,tr)),\n                               numeric.diag(numeric.rep([3],det)));\n        }\n        x = [Hloc[0][0],Hloc[1][0],Hloc[2][0]];\n        v = numeric.house(x);\n        B = [H[0],H[1],H[2]];\n        C = numeric.tensor(v,numeric.dot(v,B));\n        for(i=0;i<3;i++) { Hi = H[i]; Ci = C[i]; for(k=0;k<m;k++) Hi[k] -= 2*Ci[k]; }\n        B = numeric.getBlock(H, [0,0],[m-1,2]);\n        C = numeric.tensor(numeric.dot(B,v),v);\n        for(i=0;i<m;i++) { Hi = H[i]; Ci = C[i]; for(k=0;k<3;k++) Hi[k] -= 2*Ci[k]; }\n        B = [Q[0],Q[1],Q[2]];\n        C = numeric.tensor(v,numeric.dot(v,B));\n        for(i=0;i<3;i++) { Qi = Q[i]; Ci = C[i]; for(k=0;k<m;k++) Qi[k] -= 2*Ci[k]; }\n        var J;\n        for(j=0;j<m-2;j++) {\n            for(k=j;k<=j+1;k++) {\n                if(Math.abs(H[k+1][k]) < epsilon*(Math.abs(H[k][k])+Math.abs(H[k+1][k+1]))) {\n                    var QH1 = numeric.QRFrancis(numeric.getBlock(H,[0,0],[k,k]),maxiter);\n                    var QH2 = numeric.QRFrancis(numeric.getBlock(H,[k+1,k+1],[m-1,m-1]),maxiter);\n                    B = Array(k+1);\n                    for(i=0;i<=k;i++) { B[i] = Q[i]; }\n                    C = numeric.dot(QH1.Q,B);\n                    for(i=0;i<=k;i++) { Q[i] = C[i]; }\n                    B = Array(m-k-1);\n                    for(i=k+1;i<m;i++) { B[i-k-1] = Q[i]; }\n                    C = numeric.dot(QH2.Q,B);\n                    for(i=k+1;i<m;i++) { Q[i] = C[i-k-1]; }\n                    return {Q:Q,B:QH1.B.concat(numeric.add(QH2.B,k+1))};\n                }\n            }\n            J = Math.min(m-1,j+3);\n            x = Array(J-j);\n            for(i=j+1;i<=J;i++) { x[i-j-1] = H[i][j]; }\n            v = numeric.house(x);\n            B = numeric.getBlock(H, [j+1,j],[J,m-1]);\n            C = numeric.tensor(v,numeric.dot(v,B));\n            for(i=j+1;i<=J;i++) { Hi = H[i]; Ci = C[i-j-1]; for(k=j;k<m;k++) Hi[k] -= 2*Ci[k-j]; }\n            B = numeric.getBlock(H, [0,j+1],[m-1,J]);\n            C = numeric.tensor(numeric.dot(B,v),v);\n            for(i=0;i<m;i++) { Hi = H[i]; Ci = C[i]; for(k=j+1;k<=J;k++) Hi[k] -= 2*Ci[k-j-1]; }\n            B = Array(J-j);\n            for(i=j+1;i<=J;i++) B[i-j-1] = Q[i];\n            C = numeric.tensor(v,numeric.dot(v,B));\n            for(i=j+1;i<=J;i++) { Qi = Q[i]; Ci = C[i-j-1]; for(k=0;k<m;k++) Qi[k] -= 2*Ci[k]; }\n        }\n    }\n    throw new Error('numeric: eigenvalue iteration does not converge -- increase maxiter?');\n}\n\nnumeric.eig = function eig(A,maxiter) {\n    var QH = numeric.toUpperHessenberg(A);\n    var QB = numeric.QRFrancis(QH.H,maxiter);\n    var T = numeric.T;\n    var n = A.length,i,k,flag = false,B = QB.B,H = numeric.dot(QB.Q,numeric.dot(QH.H,numeric.transpose(QB.Q)));\n    var Q = new T(numeric.dot(QB.Q,QH.Q)),Q0;\n    var m = B.length,j;\n    var a,b,c,d,p1,p2,disc,x,y,p,q,n1,n2;\n    var sqrt = Math.sqrt;\n    for(k=0;k<m;k++) {\n        i = B[k][0];\n        if(i === B[k][1]) {\n            // nothing\n        } else {\n            j = i+1;\n            a = H[i][i];\n            b = H[i][j];\n            c = H[j][i];\n            d = H[j][j];\n            if(b === 0 && c === 0) continue;\n            p1 = -a-d;\n            p2 = a*d-b*c;\n            disc = p1*p1-4*p2;\n            if(disc>=0) {\n                if(p1<0) x = -0.5*(p1-sqrt(disc));\n                else     x = -0.5*(p1+sqrt(disc));\n                n1 = (a-x)*(a-x)+b*b;\n                n2 = c*c+(d-x)*(d-x);\n                if(n1>n2) {\n                    n1 = sqrt(n1);\n                    p = (a-x)/n1;\n                    q = b/n1;\n                } else {\n                    n2 = sqrt(n2);\n                    p = c/n2;\n                    q = (d-x)/n2;\n                }\n                Q0 = new T([[q,-p],[p,q]]);\n                Q.setRows(i,j,Q0.dot(Q.getRows(i,j)));\n            } else {\n                x = -0.5*p1;\n                y = 0.5*sqrt(-disc);\n                n1 = (a-x)*(a-x)+b*b;\n                n2 = c*c+(d-x)*(d-x);\n                if(n1>n2) {\n                    n1 = sqrt(n1+y*y);\n                    p = (a-x)/n1;\n                    q = b/n1;\n                    x = 0;\n                    y /= n1;\n                } else {\n                    n2 = sqrt(n2+y*y);\n                    p = c/n2;\n                    q = (d-x)/n2;\n                    x = y/n2;\n                    y = 0;\n                }\n                Q0 = new T([[q,-p],[p,q]],[[x,y],[y,-x]]);\n                Q.setRows(i,j,Q0.dot(Q.getRows(i,j)));\n            }\n        }\n    }\n    var R = Q.dot(A).dot(Q.transjugate()), n = A.length, E = numeric.T.identity(n);\n    for(j=0;j<n;j++) {\n        if(j>0) {\n            for(k=j-1;k>=0;k--) {\n                var Rk = R.get([k,k]), Rj = R.get([j,j]);\n                if(numeric.neq(Rk.x,Rj.x) || numeric.neq(Rk.y,Rj.y)) {\n                    x = R.getRow(k).getBlock([k],[j-1]);\n                    y = E.getRow(j).getBlock([k],[j-1]);\n                    E.set([j,k],(R.get([k,j]).neg().sub(x.dot(y))).div(Rk.sub(Rj)));\n                } else {\n                    E.setRow(j,E.getRow(k));\n                    continue;\n                }\n            }\n        }\n    }\n    for(j=0;j<n;j++) {\n        x = E.getRow(j);\n        E.setRow(j,x.div(x.norm2()));\n    }\n    E = E.transpose();\n    E = Q.transjugate().dot(E);\n    return { lambda:R.getDiag(), E:E };\n};\n\n// 5. Compressed Column Storage matrices\nnumeric.ccsSparse = function ccsSparse(A) {\n    var m = A.length,n,foo, i,j, counts = [];\n    for(i=m-1;i!==-1;--i) {\n        foo = A[i];\n        for(j in foo) {\n            j = parseInt(j);\n            while(j>=counts.length) counts[counts.length] = 0;\n            if(foo[j]!==0) counts[j]++;\n        }\n    }\n    var n = counts.length;\n    var Ai = Array(n+1);\n    Ai[0] = 0;\n    for(i=0;i<n;++i) Ai[i+1] = Ai[i] + counts[i];\n    var Aj = Array(Ai[n]), Av = Array(Ai[n]);\n    for(i=m-1;i!==-1;--i) {\n        foo = A[i];\n        for(j in foo) {\n            if(foo[j]!==0) {\n                counts[j]--;\n                Aj[Ai[j]+counts[j]] = i;\n                Av[Ai[j]+counts[j]] = foo[j];\n            }\n        }\n    }\n    return [Ai,Aj,Av];\n}\nnumeric.ccsFull = function ccsFull(A) {\n    var Ai = A[0], Aj = A[1], Av = A[2], s = numeric.ccsDim(A), m = s[0], n = s[1], i,j,j0,j1,k;\n    var B = numeric.rep([m,n],0);\n    for(i=0;i<n;i++) {\n        j0 = Ai[i];\n        j1 = Ai[i+1];\n        for(j=j0;j<j1;++j) { B[Aj[j]][i] = Av[j]; }\n    }\n    return B;\n}\nnumeric.ccsTSolve = function ccsTSolve(A,b,x,bj,xj) {\n    var Ai = A[0], Aj = A[1], Av = A[2],m = Ai.length-1, max = Math.max,n=0;\n    if(typeof bj === \"undefined\") x = numeric.rep([m],0);\n    if(typeof bj === \"undefined\") bj = numeric.linspace(0,x.length-1);\n    if(typeof xj === \"undefined\") xj = [];\n    function dfs(j) {\n        var k;\n        if(x[j] !== 0) return;\n        x[j] = 1;\n        for(k=Ai[j];k<Ai[j+1];++k) dfs(Aj[k]);\n        xj[n] = j;\n        ++n;\n    }\n    var i,j,j0,j1,k,l,l0,l1,a;\n    for(i=bj.length-1;i!==-1;--i) { dfs(bj[i]); }\n    xj.length = n;\n    for(i=xj.length-1;i!==-1;--i) { x[xj[i]] = 0; }\n    for(i=bj.length-1;i!==-1;--i) { j = bj[i]; x[j] = b[j]; }\n    for(i=xj.length-1;i!==-1;--i) {\n        j = xj[i];\n        j0 = Ai[j];\n        j1 = max(Ai[j+1],j0);\n        for(k=j0;k!==j1;++k) { if(Aj[k] === j) { x[j] /= Av[k]; break; } }\n        a = x[j];\n        for(k=j0;k!==j1;++k) {\n            l = Aj[k];\n            if(l !== j) x[l] -= a*Av[k];\n        }\n    }\n    return x;\n}\nnumeric.ccsDFS = function ccsDFS(n) {\n    this.k = Array(n);\n    this.k1 = Array(n);\n    this.j = Array(n);\n}\nnumeric.ccsDFS.prototype.dfs = function dfs(J,Ai,Aj,x,xj,Pinv) {\n    var m = 0,foo,n=xj.length;\n    var k = this.k, k1 = this.k1, j = this.j,km,k11;\n    if(x[J]!==0) return;\n    x[J] = 1;\n    j[0] = J;\n    k[0] = km = Ai[J];\n    k1[0] = k11 = Ai[J+1];\n    while(1) {\n        if(km >= k11) {\n            xj[n] = j[m];\n            if(m===0) return;\n            ++n;\n            --m;\n            km = k[m];\n            k11 = k1[m];\n        } else {\n            foo = Pinv[Aj[km]];\n            if(x[foo] === 0) {\n                x[foo] = 1;\n                k[m] = km;\n                ++m;\n                j[m] = foo;\n                km = Ai[foo];\n                k1[m] = k11 = Ai[foo+1];\n            } else ++km;\n        }\n    }\n}\nnumeric.ccsLPSolve = function ccsLPSolve(A,B,x,xj,I,Pinv,dfs) {\n    var Ai = A[0], Aj = A[1], Av = A[2],m = Ai.length-1, n=0;\n    var Bi = B[0], Bj = B[1], Bv = B[2];\n    \n    var i,i0,i1,j,J,j0,j1,k,l,l0,l1,a;\n    i0 = Bi[I];\n    i1 = Bi[I+1];\n    xj.length = 0;\n    for(i=i0;i<i1;++i) { dfs.dfs(Pinv[Bj[i]],Ai,Aj,x,xj,Pinv); }\n    for(i=xj.length-1;i!==-1;--i) { x[xj[i]] = 0; }\n    for(i=i0;i!==i1;++i) { j = Pinv[Bj[i]]; x[j] = Bv[i]; }\n    for(i=xj.length-1;i!==-1;--i) {\n        j = xj[i];\n        j0 = Ai[j];\n        j1 = Ai[j+1];\n        for(k=j0;k<j1;++k) { if(Pinv[Aj[k]] === j) { x[j] /= Av[k]; break; } }\n        a = x[j];\n        for(k=j0;k<j1;++k) {\n            l = Pinv[Aj[k]];\n            if(l !== j) x[l] -= a*Av[k];\n        }\n    }\n    return x;\n}\nnumeric.ccsLUP1 = function ccsLUP1(A,threshold) {\n    var m = A[0].length-1;\n    var L = [numeric.rep([m+1],0),[],[]], U = [numeric.rep([m+1], 0),[],[]];\n    var Li = L[0], Lj = L[1], Lv = L[2], Ui = U[0], Uj = U[1], Uv = U[2];\n    var x = numeric.rep([m],0), xj = numeric.rep([m],0);\n    var i,j,k,j0,j1,a,e,c,d,K;\n    var sol = numeric.ccsLPSolve, max = Math.max, abs = Math.abs;\n    var P = numeric.linspace(0,m-1),Pinv = numeric.linspace(0,m-1);\n    var dfs = new numeric.ccsDFS(m);\n    if(typeof threshold === \"undefined\") { threshold = 1; }\n    for(i=0;i<m;++i) {\n        sol(L,A,x,xj,i,Pinv,dfs);\n        a = -1;\n        e = -1;\n        for(j=xj.length-1;j!==-1;--j) {\n            k = xj[j];\n            if(k <= i) continue;\n            c = abs(x[k]);\n            if(c > a) { e = k; a = c; }\n        }\n        if(abs(x[i])<threshold*a) {\n            j = P[i];\n            a = P[e];\n            P[i] = a; Pinv[a] = i;\n            P[e] = j; Pinv[j] = e;\n            a = x[i]; x[i] = x[e]; x[e] = a;\n        }\n        a = Li[i];\n        e = Ui[i];\n        d = x[i];\n        Lj[a] = P[i];\n        Lv[a] = 1;\n        ++a;\n        for(j=xj.length-1;j!==-1;--j) {\n            k = xj[j];\n            c = x[k];\n            xj[j] = 0;\n            x[k] = 0;\n            if(k<=i) { Uj[e] = k; Uv[e] = c;   ++e; }\n            else     { Lj[a] = P[k]; Lv[a] = c/d; ++a; }\n        }\n        Li[i+1] = a;\n        Ui[i+1] = e;\n    }\n    for(j=Lj.length-1;j!==-1;--j) { Lj[j] = Pinv[Lj[j]]; }\n    return {L:L, U:U, P:P, Pinv:Pinv};\n}\nnumeric.ccsDFS0 = function ccsDFS0(n) {\n    this.k = Array(n);\n    this.k1 = Array(n);\n    this.j = Array(n);\n}\nnumeric.ccsDFS0.prototype.dfs = function dfs(J,Ai,Aj,x,xj,Pinv,P) {\n    var m = 0,foo,n=xj.length;\n    var k = this.k, k1 = this.k1, j = this.j,km,k11;\n    if(x[J]!==0) return;\n    x[J] = 1;\n    j[0] = J;\n    k[0] = km = Ai[Pinv[J]];\n    k1[0] = k11 = Ai[Pinv[J]+1];\n    while(1) {\n        if(isNaN(km)) throw new Error(\"Ow!\");\n        if(km >= k11) {\n            xj[n] = Pinv[j[m]];\n            if(m===0) return;\n            ++n;\n            --m;\n            km = k[m];\n            k11 = k1[m];\n        } else {\n            foo = Aj[km];\n            if(x[foo] === 0) {\n                x[foo] = 1;\n                k[m] = km;\n                ++m;\n                j[m] = foo;\n                foo = Pinv[foo];\n                km = Ai[foo];\n                k1[m] = k11 = Ai[foo+1];\n            } else ++km;\n        }\n    }\n}\nnumeric.ccsLPSolve0 = function ccsLPSolve0(A,B,y,xj,I,Pinv,P,dfs) {\n    var Ai = A[0], Aj = A[1], Av = A[2],m = Ai.length-1, n=0;\n    var Bi = B[0], Bj = B[1], Bv = B[2];\n    \n    var i,i0,i1,j,J,j0,j1,k,l,l0,l1,a;\n    i0 = Bi[I];\n    i1 = Bi[I+1];\n    xj.length = 0;\n    for(i=i0;i<i1;++i) { dfs.dfs(Bj[i],Ai,Aj,y,xj,Pinv,P); }\n    for(i=xj.length-1;i!==-1;--i) { j = xj[i]; y[P[j]] = 0; }\n    for(i=i0;i!==i1;++i) { j = Bj[i]; y[j] = Bv[i]; }\n    for(i=xj.length-1;i!==-1;--i) {\n        j = xj[i];\n        l = P[j];\n        j0 = Ai[j];\n        j1 = Ai[j+1];\n        for(k=j0;k<j1;++k) { if(Aj[k] === l) { y[l] /= Av[k]; break; } }\n        a = y[l];\n        for(k=j0;k<j1;++k) y[Aj[k]] -= a*Av[k];\n        y[l] = a;\n    }\n}\nnumeric.ccsLUP0 = function ccsLUP0(A,threshold) {\n    var m = A[0].length-1;\n    var L = [numeric.rep([m+1],0),[],[]], U = [numeric.rep([m+1], 0),[],[]];\n    var Li = L[0], Lj = L[1], Lv = L[2], Ui = U[0], Uj = U[1], Uv = U[2];\n    var y = numeric.rep([m],0), xj = numeric.rep([m],0);\n    var i,j,k,j0,j1,a,e,c,d,K;\n    var sol = numeric.ccsLPSolve0, max = Math.max, abs = Math.abs;\n    var P = numeric.linspace(0,m-1),Pinv = numeric.linspace(0,m-1);\n    var dfs = new numeric.ccsDFS0(m);\n    if(typeof threshold === \"undefined\") { threshold = 1; }\n    for(i=0;i<m;++i) {\n        sol(L,A,y,xj,i,Pinv,P,dfs);\n        a = -1;\n        e = -1;\n        for(j=xj.length-1;j!==-1;--j) {\n            k = xj[j];\n            if(k <= i) continue;\n            c = abs(y[P[k]]);\n            if(c > a) { e = k; a = c; }\n        }\n        if(abs(y[P[i]])<threshold*a) {\n            j = P[i];\n            a = P[e];\n            P[i] = a; Pinv[a] = i;\n            P[e] = j; Pinv[j] = e;\n        }\n        a = Li[i];\n        e = Ui[i];\n        d = y[P[i]];\n        Lj[a] = P[i];\n        Lv[a] = 1;\n        ++a;\n        for(j=xj.length-1;j!==-1;--j) {\n            k = xj[j];\n            c = y[P[k]];\n            xj[j] = 0;\n            y[P[k]] = 0;\n            if(k<=i) { Uj[e] = k; Uv[e] = c;   ++e; }\n            else     { Lj[a] = P[k]; Lv[a] = c/d; ++a; }\n        }\n        Li[i+1] = a;\n        Ui[i+1] = e;\n    }\n    for(j=Lj.length-1;j!==-1;--j) { Lj[j] = Pinv[Lj[j]]; }\n    return {L:L, U:U, P:P, Pinv:Pinv};\n}\nnumeric.ccsLUP = numeric.ccsLUP0;\n\nnumeric.ccsDim = function ccsDim(A) { return [numeric.sup(A[1])+1,A[0].length-1]; }\nnumeric.ccsGetBlock = function ccsGetBlock(A,i,j) {\n    var s = numeric.ccsDim(A),m=s[0],n=s[1];\n    if(typeof i === \"undefined\") { i = numeric.linspace(0,m-1); }\n    else if(typeof i === \"number\") { i = [i]; }\n    if(typeof j === \"undefined\") { j = numeric.linspace(0,n-1); }\n    else if(typeof j === \"number\") { j = [j]; }\n    var p,p0,p1,P = i.length,q,Q = j.length,r,jq,ip;\n    var Bi = numeric.rep([n],0), Bj=[], Bv=[], B = [Bi,Bj,Bv];\n    var Ai = A[0], Aj = A[1], Av = A[2];\n    var x = numeric.rep([m],0),count=0,flags = numeric.rep([m],0);\n    for(q=0;q<Q;++q) {\n        jq = j[q];\n        var q0 = Ai[jq];\n        var q1 = Ai[jq+1];\n        for(p=q0;p<q1;++p) {\n            r = Aj[p];\n            flags[r] = 1;\n            x[r] = Av[p];\n        }\n        for(p=0;p<P;++p) {\n            ip = i[p];\n            if(flags[ip]) {\n                Bj[count] = p;\n                Bv[count] = x[i[p]];\n                ++count;\n            }\n        }\n        for(p=q0;p<q1;++p) {\n            r = Aj[p];\n            flags[r] = 0;\n        }\n        Bi[q+1] = count;\n    }\n    return B;\n}\n\nnumeric.ccsDot = function ccsDot(A,B) {\n    var Ai = A[0], Aj = A[1], Av = A[2];\n    var Bi = B[0], Bj = B[1], Bv = B[2];\n    var sA = numeric.ccsDim(A), sB = numeric.ccsDim(B);\n    var m = sA[0], n = sA[1], o = sB[1];\n    var x = numeric.rep([m],0), flags = numeric.rep([m],0), xj = Array(m);\n    var Ci = numeric.rep([o],0), Cj = [], Cv = [], C = [Ci,Cj,Cv];\n    var i,j,k,j0,j1,i0,i1,l,p,a,b;\n    for(k=0;k!==o;++k) {\n        j0 = Bi[k];\n        j1 = Bi[k+1];\n        p = 0;\n        for(j=j0;j<j1;++j) {\n            a = Bj[j];\n            b = Bv[j];\n            i0 = Ai[a];\n            i1 = Ai[a+1];\n            for(i=i0;i<i1;++i) {\n                l = Aj[i];\n                if(flags[l]===0) {\n                    xj[p] = l;\n                    flags[l] = 1;\n                    p = p+1;\n                }\n                x[l] = x[l] + Av[i]*b;\n            }\n        }\n        j0 = Ci[k];\n        j1 = j0+p;\n        Ci[k+1] = j1;\n        for(j=p-1;j!==-1;--j) {\n            b = j0+j;\n            i = xj[j];\n            Cj[b] = i;\n            Cv[b] = x[i];\n            flags[i] = 0;\n            x[i] = 0;\n        }\n        Ci[k+1] = Ci[k]+p;\n    }\n    return C;\n}\n\nnumeric.ccsLUPSolve = function ccsLUPSolve(LUP,B) {\n    var L = LUP.L, U = LUP.U, P = LUP.P;\n    var Bi = B[0];\n    var flag = false;\n    if(typeof Bi !== \"object\") { B = [[0,B.length],numeric.linspace(0,B.length-1),B]; Bi = B[0]; flag = true; }\n    var Bj = B[1], Bv = B[2];\n    var n = L[0].length-1, m = Bi.length-1;\n    var x = numeric.rep([n],0), xj = Array(n);\n    var b = numeric.rep([n],0), bj = Array(n);\n    var Xi = numeric.rep([m+1],0), Xj = [], Xv = [];\n    var sol = numeric.ccsTSolve;\n    var i,j,j0,j1,k,J,N=0;\n    for(i=0;i<m;++i) {\n        k = 0;\n        j0 = Bi[i];\n        j1 = Bi[i+1];\n        for(j=j0;j<j1;++j) { \n            J = LUP.Pinv[Bj[j]];\n            bj[k] = J;\n            b[J] = Bv[j];\n            ++k;\n        }\n        bj.length = k;\n        sol(L,b,x,bj,xj);\n        for(j=bj.length-1;j!==-1;--j) b[bj[j]] = 0;\n        sol(U,x,b,xj,bj);\n        if(flag) return b;\n        for(j=xj.length-1;j!==-1;--j) x[xj[j]] = 0;\n        for(j=bj.length-1;j!==-1;--j) {\n            J = bj[j];\n            Xj[N] = J;\n            Xv[N] = b[J];\n            b[J] = 0;\n            ++N;\n        }\n        Xi[i+1] = N;\n    }\n    return [Xi,Xj,Xv];\n}\n\nnumeric.ccsbinop = function ccsbinop(body,setup) {\n    if(typeof setup === \"undefined\") setup='';\n    return Function('X','Y',\n            'var Xi = X[0], Xj = X[1], Xv = X[2];\\n'+\n            'var Yi = Y[0], Yj = Y[1], Yv = Y[2];\\n'+\n            'var n = Xi.length-1,m = Math.max(numeric.sup(Xj),numeric.sup(Yj))+1;\\n'+\n            'var Zi = numeric.rep([n+1],0), Zj = [], Zv = [];\\n'+\n            'var x = numeric.rep([m],0),y = numeric.rep([m],0);\\n'+\n            'var xk,yk,zk;\\n'+\n            'var i,j,j0,j1,k,p=0;\\n'+\n            setup+\n            'for(i=0;i<n;++i) {\\n'+\n            '  j0 = Xi[i]; j1 = Xi[i+1];\\n'+\n            '  for(j=j0;j!==j1;++j) {\\n'+\n            '    k = Xj[j];\\n'+\n            '    x[k] = 1;\\n'+\n            '    Zj[p] = k;\\n'+\n            '    ++p;\\n'+\n            '  }\\n'+\n            '  j0 = Yi[i]; j1 = Yi[i+1];\\n'+\n            '  for(j=j0;j!==j1;++j) {\\n'+\n            '    k = Yj[j];\\n'+\n            '    y[k] = Yv[j];\\n'+\n            '    if(x[k] === 0) {\\n'+\n            '      Zj[p] = k;\\n'+\n            '      ++p;\\n'+\n            '    }\\n'+\n            '  }\\n'+\n            '  Zi[i+1] = p;\\n'+\n            '  j0 = Xi[i]; j1 = Xi[i+1];\\n'+\n            '  for(j=j0;j!==j1;++j) x[Xj[j]] = Xv[j];\\n'+\n            '  j0 = Zi[i]; j1 = Zi[i+1];\\n'+\n            '  for(j=j0;j!==j1;++j) {\\n'+\n            '    k = Zj[j];\\n'+\n            '    xk = x[k];\\n'+\n            '    yk = y[k];\\n'+\n            body+'\\n'+\n            '    Zv[j] = zk;\\n'+\n            '  }\\n'+\n            '  j0 = Xi[i]; j1 = Xi[i+1];\\n'+\n            '  for(j=j0;j!==j1;++j) x[Xj[j]] = 0;\\n'+\n            '  j0 = Yi[i]; j1 = Yi[i+1];\\n'+\n            '  for(j=j0;j!==j1;++j) y[Yj[j]] = 0;\\n'+\n            '}\\n'+\n            'return [Zi,Zj,Zv];'\n            );\n};\n\n(function() {\n    var k,A,B,C;\n    for(k in numeric.ops2) {\n        if(isFinite(eval('1'+numeric.ops2[k]+'0'))) A = '[Y[0],Y[1],numeric.'+k+'(X,Y[2])]';\n        else A = 'NaN';\n        if(isFinite(eval('0'+numeric.ops2[k]+'1'))) B = '[X[0],X[1],numeric.'+k+'(X[2],Y)]';\n        else B = 'NaN';\n        if(isFinite(eval('1'+numeric.ops2[k]+'0')) && isFinite(eval('0'+numeric.ops2[k]+'1'))) C = 'numeric.ccs'+k+'MM(X,Y)';\n        else C = 'NaN';\n        numeric['ccs'+k+'MM'] = numeric.ccsbinop('zk = xk '+numeric.ops2[k]+'yk;');\n        numeric['ccs'+k] = Function('X','Y',\n                'if(typeof X === \"number\") return '+A+';\\n'+\n                'if(typeof Y === \"number\") return '+B+';\\n'+\n                'return '+C+';\\n'\n                );\n    }\n}());\n\nnumeric.ccsScatter = function ccsScatter(A) {\n    var Ai = A[0], Aj = A[1], Av = A[2];\n    var n = numeric.sup(Aj)+1,m=Ai.length;\n    var Ri = numeric.rep([n],0),Rj=Array(m), Rv = Array(m);\n    var counts = numeric.rep([n],0),i;\n    for(i=0;i<m;++i) counts[Aj[i]]++;\n    for(i=0;i<n;++i) Ri[i+1] = Ri[i] + counts[i];\n    var ptr = Ri.slice(0),k,Aii;\n    for(i=0;i<m;++i) {\n        Aii = Aj[i];\n        k = ptr[Aii];\n        Rj[k] = Ai[i];\n        Rv[k] = Av[i];\n        ptr[Aii]=ptr[Aii]+1;\n    }\n    return [Ri,Rj,Rv];\n}\n\nnumeric.ccsGather = function ccsGather(A) {\n    var Ai = A[0], Aj = A[1], Av = A[2];\n    var n = Ai.length-1,m = Aj.length;\n    var Ri = Array(m), Rj = Array(m), Rv = Array(m);\n    var i,j,j0,j1,p;\n    p=0;\n    for(i=0;i<n;++i) {\n        j0 = Ai[i];\n        j1 = Ai[i+1];\n        for(j=j0;j!==j1;++j) {\n            Rj[p] = i;\n            Ri[p] = Aj[j];\n            Rv[p] = Av[j];\n            ++p;\n        }\n    }\n    return [Ri,Rj,Rv];\n}\n\n// The following sparse linear algebra routines are deprecated.\n\nnumeric.sdim = function dim(A,ret,k) {\n    if(typeof ret === \"undefined\") { ret = []; }\n    if(typeof A !== \"object\") return ret;\n    if(typeof k === \"undefined\") { k=0; }\n    if(!(k in ret)) { ret[k] = 0; }\n    if(A.length > ret[k]) ret[k] = A.length;\n    var i;\n    for(i in A) {\n        if(A.hasOwnProperty(i)) dim(A[i],ret,k+1);\n    }\n    return ret;\n};\n\nnumeric.sclone = function clone(A,k,n) {\n    if(typeof k === \"undefined\") { k=0; }\n    if(typeof n === \"undefined\") { n = numeric.sdim(A).length; }\n    var i,ret = Array(A.length);\n    if(k === n-1) {\n        for(i in A) { if(A.hasOwnProperty(i)) ret[i] = A[i]; }\n        return ret;\n    }\n    for(i in A) {\n        if(A.hasOwnProperty(i)) ret[i] = clone(A[i],k+1,n);\n    }\n    return ret;\n}\n\nnumeric.sdiag = function diag(d) {\n    var n = d.length,i,ret = Array(n),i1,i2,i3;\n    for(i=n-1;i>=1;i-=2) {\n        i1 = i-1;\n        ret[i] = []; ret[i][i] = d[i];\n        ret[i1] = []; ret[i1][i1] = d[i1];\n    }\n    if(i===0) { ret[0] = []; ret[0][0] = d[i]; }\n    return ret;\n}\n\nnumeric.sidentity = function identity(n) { return numeric.sdiag(numeric.rep([n],1)); }\n\nnumeric.stranspose = function transpose(A) {\n    var ret = [], n = A.length, i,j,Ai;\n    for(i in A) {\n        if(!(A.hasOwnProperty(i))) continue;\n        Ai = A[i];\n        for(j in Ai) {\n            if(!(Ai.hasOwnProperty(j))) continue;\n            if(typeof ret[j] !== \"object\") { ret[j] = []; }\n            ret[j][i] = Ai[j];\n        }\n    }\n    return ret;\n}\n\nnumeric.sLUP = function LUP(A,tol) {\n    throw new Error(\"The function numeric.sLUP had a bug in it and has been removed. Please use the new numeric.ccsLUP function instead.\");\n};\n\nnumeric.sdotMM = function dotMM(A,B) {\n    var p = A.length, q = B.length, BT = numeric.stranspose(B), r = BT.length, Ai, BTk;\n    var i,j,k,accum;\n    var ret = Array(p),reti;\n    for(i=p-1;i>=0;i--) {\n        reti = [];\n        Ai = A[i];\n        for(k=r-1;k>=0;k--) {\n            accum = 0;\n            BTk = BT[k];\n            for(j in Ai) {\n                if(!(Ai.hasOwnProperty(j))) continue;\n                if(j in BTk) { accum += Ai[j]*BTk[j]; }\n            }\n            if(accum) reti[k] = accum;\n        }\n        ret[i] = reti;\n    }\n    return ret;\n}\n\nnumeric.sdotMV = function dotMV(A,x) {\n    var p = A.length, Ai, i,j;\n    var ret = Array(p), accum;\n    for(i=p-1;i>=0;i--) {\n        Ai = A[i];\n        accum = 0;\n        for(j in Ai) {\n            if(!(Ai.hasOwnProperty(j))) continue;\n            if(x[j]) accum += Ai[j]*x[j];\n        }\n        if(accum) ret[i] = accum;\n    }\n    return ret;\n}\n\nnumeric.sdotVM = function dotMV(x,A) {\n    var i,j,Ai,alpha;\n    var ret = [], accum;\n    for(i in x) {\n        if(!x.hasOwnProperty(i)) continue;\n        Ai = A[i];\n        alpha = x[i];\n        for(j in Ai) {\n            if(!Ai.hasOwnProperty(j)) continue;\n            if(!ret[j]) { ret[j] = 0; }\n            ret[j] += alpha*Ai[j];\n        }\n    }\n    return ret;\n}\n\nnumeric.sdotVV = function dotVV(x,y) {\n    var i,ret=0;\n    for(i in x) { if(x[i] && y[i]) ret+= x[i]*y[i]; }\n    return ret;\n}\n\nnumeric.sdot = function dot(A,B) {\n    var m = numeric.sdim(A).length, n = numeric.sdim(B).length;\n    var k = m*1000+n;\n    switch(k) {\n    case 0: return A*B;\n    case 1001: return numeric.sdotVV(A,B);\n    case 2001: return numeric.sdotMV(A,B);\n    case 1002: return numeric.sdotVM(A,B);\n    case 2002: return numeric.sdotMM(A,B);\n    default: throw new Error('numeric.sdot not implemented for tensors of order '+m+' and '+n);\n    }\n}\n\nnumeric.sscatter = function scatter(V) {\n    var n = V[0].length, Vij, i, j, m = V.length, A = [], Aj;\n    for(i=n-1;i>=0;--i) {\n        if(!V[m-1][i]) continue;\n        Aj = A;\n        for(j=0;j<m-2;j++) {\n            Vij = V[j][i];\n            if(!Aj[Vij]) Aj[Vij] = [];\n            Aj = Aj[Vij];\n        }\n        Aj[V[j][i]] = V[j+1][i];\n    }\n    return A;\n}\n\nnumeric.sgather = function gather(A,ret,k) {\n    if(typeof ret === \"undefined\") ret = [];\n    if(typeof k === \"undefined\") k = [];\n    var n,i,Ai;\n    n = k.length;\n    for(i in A) {\n        if(A.hasOwnProperty(i)) {\n            k[n] = parseInt(i);\n            Ai = A[i];\n            if(typeof Ai === \"number\") {\n                if(Ai) {\n                    if(ret.length === 0) {\n                        for(i=n+1;i>=0;--i) ret[i] = [];\n                    }\n                    for(i=n;i>=0;--i) ret[i].push(k[i]);\n                    ret[n+1].push(Ai);\n                }\n            } else gather(Ai,ret,k);\n        }\n    }\n    if(k.length>n) k.pop();\n    return ret;\n}\n\n// 6. Coordinate matrices\nnumeric.cLU = function LU(A) {\n    var I = A[0], J = A[1], V = A[2];\n    var p = I.length, m=0, i,j,k,a,b,c;\n    for(i=0;i<p;i++) if(I[i]>m) m=I[i];\n    m++;\n    var L = Array(m), U = Array(m), left = numeric.rep([m],Infinity), right = numeric.rep([m],-Infinity);\n    var Ui, Uj,alpha;\n    for(k=0;k<p;k++) {\n        i = I[k];\n        j = J[k];\n        if(j<left[i]) left[i] = j;\n        if(j>right[i]) right[i] = j;\n    }\n    for(i=0;i<m-1;i++) { if(right[i] > right[i+1]) right[i+1] = right[i]; }\n    for(i=m-1;i>=1;i--) { if(left[i]<left[i-1]) left[i-1] = left[i]; }\n    var countL = 0, countU = 0;\n    for(i=0;i<m;i++) {\n        U[i] = numeric.rep([right[i]-left[i]+1],0);\n        L[i] = numeric.rep([i-left[i]],0);\n        countL += i-left[i]+1;\n        countU += right[i]-i+1;\n    }\n    for(k=0;k<p;k++) { i = I[k]; U[i][J[k]-left[i]] = V[k]; }\n    for(i=0;i<m-1;i++) {\n        a = i-left[i];\n        Ui = U[i];\n        for(j=i+1;left[j]<=i && j<m;j++) {\n            b = i-left[j];\n            c = right[i]-i;\n            Uj = U[j];\n            alpha = Uj[b]/Ui[a];\n            if(alpha) {\n                for(k=1;k<=c;k++) { Uj[k+b] -= alpha*Ui[k+a]; }\n                L[j][i-left[j]] = alpha;\n            }\n        }\n    }\n    var Ui = [], Uj = [], Uv = [], Li = [], Lj = [], Lv = [];\n    var p,q,foo;\n    p=0; q=0;\n    for(i=0;i<m;i++) {\n        a = left[i];\n        b = right[i];\n        foo = U[i];\n        for(j=i;j<=b;j++) {\n            if(foo[j-a]) {\n                Ui[p] = i;\n                Uj[p] = j;\n                Uv[p] = foo[j-a];\n                p++;\n            }\n        }\n        foo = L[i];\n        for(j=a;j<i;j++) {\n            if(foo[j-a]) {\n                Li[q] = i;\n                Lj[q] = j;\n                Lv[q] = foo[j-a];\n                q++;\n            }\n        }\n        Li[q] = i;\n        Lj[q] = i;\n        Lv[q] = 1;\n        q++;\n    }\n    return {U:[Ui,Uj,Uv], L:[Li,Lj,Lv]};\n};\n\nnumeric.cLUsolve = function LUsolve(lu,b) {\n    var L = lu.L, U = lu.U, ret = numeric.clone(b);\n    var Li = L[0], Lj = L[1], Lv = L[2];\n    var Ui = U[0], Uj = U[1], Uv = U[2];\n    var p = Ui.length, q = Li.length;\n    var m = ret.length,i,j,k;\n    k = 0;\n    for(i=0;i<m;i++) {\n        while(Lj[k] < i) {\n            ret[i] -= Lv[k]*ret[Lj[k]];\n            k++;\n        }\n        k++;\n    }\n    k = p-1;\n    for(i=m-1;i>=0;i--) {\n        while(Uj[k] > i) {\n            ret[i] -= Uv[k]*ret[Uj[k]];\n            k--;\n        }\n        ret[i] /= Uv[k];\n        k--;\n    }\n    return ret;\n};\n\nnumeric.cgrid = function grid(n,shape) {\n    if(typeof n === \"number\") n = [n,n];\n    var ret = numeric.rep(n,-1);\n    var i,j,count;\n    if(typeof shape !== \"function\") {\n        switch(shape) {\n        case 'L':\n            shape = function(i,j) { return (i>=n[0]/2 || j<n[1]/2); }\n            break;\n        default:\n            shape = function(i,j) { return true; };\n            break;\n        }\n    }\n    count=0;\n    for(i=1;i<n[0]-1;i++) for(j=1;j<n[1]-1;j++) \n        if(shape(i,j)) {\n            ret[i][j] = count;\n            count++;\n        }\n    return ret;\n}\n\nnumeric.cdelsq = function delsq(g) {\n    var dir = [[-1,0],[0,-1],[0,1],[1,0]];\n    var s = numeric.dim(g), m = s[0], n = s[1], i,j,k,p,q;\n    var Li = [], Lj = [], Lv = [];\n    for(i=1;i<m-1;i++) for(j=1;j<n-1;j++) {\n        if(g[i][j]<0) continue;\n        for(k=0;k<4;k++) {\n            p = i+dir[k][0];\n            q = j+dir[k][1];\n            if(g[p][q]<0) continue;\n            Li.push(g[i][j]);\n            Lj.push(g[p][q]);\n            Lv.push(-1);\n        }\n        Li.push(g[i][j]);\n        Lj.push(g[i][j]);\n        Lv.push(4);\n    }\n    return [Li,Lj,Lv];\n}\n\nnumeric.cdotMV = function dotMV(A,x) {\n    var ret, Ai = A[0], Aj = A[1], Av = A[2],k,p=Ai.length,N;\n    N=0;\n    for(k=0;k<p;k++) { if(Ai[k]>N) N = Ai[k]; }\n    N++;\n    ret = numeric.rep([N],0);\n    for(k=0;k<p;k++) { ret[Ai[k]]+=Av[k]*x[Aj[k]]; }\n    return ret;\n}\n\n// 7. Splines\n\nnumeric.Spline = function Spline(x,yl,yr,kl,kr) { this.x = x; this.yl = yl; this.yr = yr; this.kl = kl; this.kr = kr; }\nnumeric.Spline.prototype._at = function _at(x1,p) {\n    var x = this.x;\n    var yl = this.yl;\n    var yr = this.yr;\n    var kl = this.kl;\n    var kr = this.kr;\n    var x1,a,b,t;\n    var add = numeric.add, sub = numeric.sub, mul = numeric.mul;\n    a = sub(mul(kl[p],x[p+1]-x[p]),sub(yr[p+1],yl[p]));\n    b = add(mul(kr[p+1],x[p]-x[p+1]),sub(yr[p+1],yl[p]));\n    t = (x1-x[p])/(x[p+1]-x[p]);\n    var s = t*(1-t);\n    return add(add(add(mul(1-t,yl[p]),mul(t,yr[p+1])),mul(a,s*(1-t))),mul(b,s*t));\n}\nnumeric.Spline.prototype.at = function at(x0) {\n    if(typeof x0 === \"number\") {\n        var x = this.x;\n        var n = x.length;\n        var p,q,mid,floor = Math.floor,a,b,t;\n        p = 0;\n        q = n-1;\n        while(q-p>1) {\n            mid = floor((p+q)/2);\n            if(x[mid] <= x0) p = mid;\n            else q = mid;\n        }\n        return this._at(x0,p);\n    }\n    var n = x0.length, i, ret = Array(n);\n    for(i=n-1;i!==-1;--i) ret[i] = this.at(x0[i]);\n    return ret;\n}\nnumeric.Spline.prototype.diff = function diff() {\n    var x = this.x;\n    var yl = this.yl;\n    var yr = this.yr;\n    var kl = this.kl;\n    var kr = this.kr;\n    var n = yl.length;\n    var i,dx,dy;\n    var zl = kl, zr = kr, pl = Array(n), pr = Array(n);\n    var add = numeric.add, mul = numeric.mul, div = numeric.div, sub = numeric.sub;\n    for(i=n-1;i!==-1;--i) {\n        dx = x[i+1]-x[i];\n        dy = sub(yr[i+1],yl[i]);\n        pl[i] = div(add(mul(dy, 6),mul(kl[i],-4*dx),mul(kr[i+1],-2*dx)),dx*dx);\n        pr[i+1] = div(add(mul(dy,-6),mul(kl[i], 2*dx),mul(kr[i+1], 4*dx)),dx*dx);\n    }\n    return new numeric.Spline(x,zl,zr,pl,pr);\n}\nnumeric.Spline.prototype.roots = function roots() {\n    function sqr(x) { return x*x; }\n    function heval(y0,y1,k0,k1,x) {\n        var A = k0*2-(y1-y0);\n        var B = -k1*2+(y1-y0);\n        var t = (x+1)*0.5;\n        var s = t*(1-t);\n        return (1-t)*y0+t*y1+A*s*(1-t)+B*s*t;\n    }\n    var ret = [];\n    var x = this.x, yl = this.yl, yr = this.yr, kl = this.kl, kr = this.kr;\n    if(typeof yl[0] === \"number\") {\n        yl = [yl];\n        yr = [yr];\n        kl = [kl];\n        kr = [kr];\n    }\n    var m = yl.length,n=x.length-1,i,j,k,y,s,t;\n    var ai,bi,ci,di, ret = Array(m),ri,k0,k1,y0,y1,A,B,D,dx,cx,stops,z0,z1,zm,t0,t1,tm;\n    var sqrt = Math.sqrt;\n    for(i=0;i!==m;++i) {\n        ai = yl[i];\n        bi = yr[i];\n        ci = kl[i];\n        di = kr[i];\n        ri = [];\n        for(j=0;j!==n;j++) {\n            if(j>0 && bi[j]*ai[j]<0) ri.push(x[j]);\n            dx = (x[j+1]-x[j]);\n            cx = x[j];\n            y0 = ai[j];\n            y1 = bi[j+1];\n            k0 = ci[j]/dx;\n            k1 = di[j+1]/dx;\n            D = sqr(k0-k1+3*(y0-y1)) + 12*k1*y0;\n            A = k1+3*y0+2*k0-3*y1;\n            B = 3*(k1+k0+2*(y0-y1));\n            if(D<=0) {\n                z0 = A/B;\n                if(z0>x[j] && z0<x[j+1]) stops = [x[j],z0,x[j+1]];\n                else stops = [x[j],x[j+1]];\n            } else {\n                z0 = (A-sqrt(D))/B;\n                z1 = (A+sqrt(D))/B;\n                stops = [x[j]];\n                if(z0>x[j] && z0<x[j+1]) stops.push(z0);\n                if(z1>x[j] && z1<x[j+1]) stops.push(z1);\n                stops.push(x[j+1]);\n            }\n            t0 = stops[0];\n            z0 = this._at(t0,j);\n            for(k=0;k<stops.length-1;k++) {\n                t1 = stops[k+1];\n                z1 = this._at(t1,j);\n                if(z0 === 0) {\n                    ri.push(t0); \n                    t0 = t1;\n                    z0 = z1;\n                    continue;\n                }\n                if(z1 === 0 || z0*z1>0) {\n                    t0 = t1;\n                    z0 = z1;\n                    continue;\n                }\n                var side = 0;\n                while(1) {\n                    tm = (z0*t1-z1*t0)/(z0-z1);\n                    if(tm <= t0 || tm >= t1) { break; }\n                    zm = this._at(tm,j);\n                    if(zm*z1>0) {\n                        t1 = tm;\n                        z1 = zm;\n                        if(side === -1) z0*=0.5;\n                        side = -1;\n                    } else if(zm*z0>0) {\n                        t0 = tm;\n                        z0 = zm;\n                        if(side === 1) z1*=0.5;\n                        side = 1;\n                    } else break;\n                }\n                ri.push(tm);\n                t0 = stops[k+1];\n                z0 = this._at(t0, j);\n            }\n            if(z1 === 0) ri.push(t1);\n        }\n        ret[i] = ri;\n    }\n    if(typeof this.yl[0] === \"number\") return ret[0];\n    return ret;\n}\nnumeric.spline = function spline(x,y,k1,kn) {\n    var n = x.length, b = [], dx = [], dy = [];\n    var i;\n    var sub = numeric.sub,mul = numeric.mul,add = numeric.add;\n    for(i=n-2;i>=0;i--) { dx[i] = x[i+1]-x[i]; dy[i] = sub(y[i+1],y[i]); }\n    if(typeof k1 === \"string\" || typeof kn === \"string\") { \n        k1 = kn = \"periodic\";\n    }\n    // Build sparse tridiagonal system\n    var T = [[],[],[]];\n    switch(typeof k1) {\n    case \"undefined\":\n        b[0] = mul(3/(dx[0]*dx[0]),dy[0]);\n        T[0].push(0,0);\n        T[1].push(0,1);\n        T[2].push(2/dx[0],1/dx[0]);\n        break;\n    case \"string\":\n        b[0] = add(mul(3/(dx[n-2]*dx[n-2]),dy[n-2]),mul(3/(dx[0]*dx[0]),dy[0]));\n        T[0].push(0,0,0);\n        T[1].push(n-2,0,1);\n        T[2].push(1/dx[n-2],2/dx[n-2]+2/dx[0],1/dx[0]);\n        break;\n    default:\n        b[0] = k1;\n        T[0].push(0);\n        T[1].push(0);\n        T[2].push(1);\n        break;\n    }\n    for(i=1;i<n-1;i++) {\n        b[i] = add(mul(3/(dx[i-1]*dx[i-1]),dy[i-1]),mul(3/(dx[i]*dx[i]),dy[i]));\n        T[0].push(i,i,i);\n        T[1].push(i-1,i,i+1);\n        T[2].push(1/dx[i-1],2/dx[i-1]+2/dx[i],1/dx[i]);\n    }\n    switch(typeof kn) {\n    case \"undefined\":\n        b[n-1] = mul(3/(dx[n-2]*dx[n-2]),dy[n-2]);\n        T[0].push(n-1,n-1);\n        T[1].push(n-2,n-1);\n        T[2].push(1/dx[n-2],2/dx[n-2]);\n        break;\n    case \"string\":\n        T[1][T[1].length-1] = 0;\n        break;\n    default:\n        b[n-1] = kn;\n        T[0].push(n-1);\n        T[1].push(n-1);\n        T[2].push(1);\n        break;\n    }\n    if(typeof b[0] !== \"number\") b = numeric.transpose(b);\n    else b = [b];\n    var k = Array(b.length);\n    if(typeof k1 === \"string\") {\n        for(i=k.length-1;i!==-1;--i) {\n            k[i] = numeric.ccsLUPSolve(numeric.ccsLUP(numeric.ccsScatter(T)),b[i]);\n            k[i][n-1] = k[i][0];\n        }\n    } else {\n        for(i=k.length-1;i!==-1;--i) {\n            k[i] = numeric.cLUsolve(numeric.cLU(T),b[i]);\n        }\n    }\n    if(typeof y[0] === \"number\") k = k[0];\n    else k = numeric.transpose(k);\n    return new numeric.Spline(x,y,y,k,k);\n}\n\n// 8. FFT\nnumeric.fftpow2 = function fftpow2(x,y) {\n    var n = x.length;\n    if(n === 1) return;\n    var cos = Math.cos, sin = Math.sin, i,j;\n    var xe = Array(n/2), ye = Array(n/2), xo = Array(n/2), yo = Array(n/2);\n    j = n/2;\n    for(i=n-1;i!==-1;--i) {\n        --j;\n        xo[j] = x[i];\n        yo[j] = y[i];\n        --i;\n        xe[j] = x[i];\n        ye[j] = y[i];\n    }\n    fftpow2(xe,ye);\n    fftpow2(xo,yo);\n    j = n/2;\n    var t,k = (-6.2831853071795864769252867665590057683943387987502116419/n),ci,si;\n    for(i=n-1;i!==-1;--i) {\n        --j;\n        if(j === -1) j = n/2-1;\n        t = k*i;\n        ci = cos(t);\n        si = sin(t);\n        x[i] = xe[j] + ci*xo[j] - si*yo[j];\n        y[i] = ye[j] + ci*yo[j] + si*xo[j];\n    }\n}\nnumeric._ifftpow2 = function _ifftpow2(x,y) {\n    var n = x.length;\n    if(n === 1) return;\n    var cos = Math.cos, sin = Math.sin, i,j;\n    var xe = Array(n/2), ye = Array(n/2), xo = Array(n/2), yo = Array(n/2);\n    j = n/2;\n    for(i=n-1;i!==-1;--i) {\n        --j;\n        xo[j] = x[i];\n        yo[j] = y[i];\n        --i;\n        xe[j] = x[i];\n        ye[j] = y[i];\n    }\n    _ifftpow2(xe,ye);\n    _ifftpow2(xo,yo);\n    j = n/2;\n    var t,k = (6.2831853071795864769252867665590057683943387987502116419/n),ci,si;\n    for(i=n-1;i!==-1;--i) {\n        --j;\n        if(j === -1) j = n/2-1;\n        t = k*i;\n        ci = cos(t);\n        si = sin(t);\n        x[i] = xe[j] + ci*xo[j] - si*yo[j];\n        y[i] = ye[j] + ci*yo[j] + si*xo[j];\n    }\n}\nnumeric.ifftpow2 = function ifftpow2(x,y) {\n    numeric._ifftpow2(x,y);\n    numeric.diveq(x,x.length);\n    numeric.diveq(y,y.length);\n}\nnumeric.convpow2 = function convpow2(ax,ay,bx,by) {\n    numeric.fftpow2(ax,ay);\n    numeric.fftpow2(bx,by);\n    var i,n = ax.length,axi,bxi,ayi,byi;\n    for(i=n-1;i!==-1;--i) {\n        axi = ax[i]; ayi = ay[i]; bxi = bx[i]; byi = by[i];\n        ax[i] = axi*bxi-ayi*byi;\n        ay[i] = axi*byi+ayi*bxi;\n    }\n    numeric.ifftpow2(ax,ay);\n}\nnumeric.T.prototype.fft = function fft() {\n    var x = this.x, y = this.y;\n    var n = x.length, log = Math.log, log2 = log(2),\n        p = Math.ceil(log(2*n-1)/log2), m = Math.pow(2,p);\n    var cx = numeric.rep([m],0), cy = numeric.rep([m],0), cos = Math.cos, sin = Math.sin;\n    var k, c = (-3.141592653589793238462643383279502884197169399375105820/n),t;\n    var a = numeric.rep([m],0), b = numeric.rep([m],0),nhalf = Math.floor(n/2);\n    for(k=0;k<n;k++) a[k] = x[k];\n    if(typeof y !== \"undefined\") for(k=0;k<n;k++) b[k] = y[k];\n    cx[0] = 1;\n    for(k=1;k<=m/2;k++) {\n        t = c*k*k;\n        cx[k] = cos(t);\n        cy[k] = sin(t);\n        cx[m-k] = cos(t);\n        cy[m-k] = sin(t)\n    }\n    var X = new numeric.T(a,b), Y = new numeric.T(cx,cy);\n    X = X.mul(Y);\n    numeric.convpow2(X.x,X.y,numeric.clone(Y.x),numeric.neg(Y.y));\n    X = X.mul(Y);\n    X.x.length = n;\n    X.y.length = n;\n    return X;\n}\nnumeric.T.prototype.ifft = function ifft() {\n    var x = this.x, y = this.y;\n    var n = x.length, log = Math.log, log2 = log(2),\n        p = Math.ceil(log(2*n-1)/log2), m = Math.pow(2,p);\n    var cx = numeric.rep([m],0), cy = numeric.rep([m],0), cos = Math.cos, sin = Math.sin;\n    var k, c = (3.141592653589793238462643383279502884197169399375105820/n),t;\n    var a = numeric.rep([m],0), b = numeric.rep([m],0),nhalf = Math.floor(n/2);\n    for(k=0;k<n;k++) a[k] = x[k];\n    if(typeof y !== \"undefined\") for(k=0;k<n;k++) b[k] = y[k];\n    cx[0] = 1;\n    for(k=1;k<=m/2;k++) {\n        t = c*k*k;\n        cx[k] = cos(t);\n        cy[k] = sin(t);\n        cx[m-k] = cos(t);\n        cy[m-k] = sin(t)\n    }\n    var X = new numeric.T(a,b), Y = new numeric.T(cx,cy);\n    X = X.mul(Y);\n    numeric.convpow2(X.x,X.y,numeric.clone(Y.x),numeric.neg(Y.y));\n    X = X.mul(Y);\n    X.x.length = n;\n    X.y.length = n;\n    return X.div(n);\n}\n\n//9. Unconstrained optimization\nnumeric.gradient = function gradient(f,x) {\n    var n = x.length;\n    var f0 = f(x);\n    if(isNaN(f0)) throw new Error('gradient: f(x) is a NaN!');\n    var max = Math.max;\n    var i,x0 = numeric.clone(x),f1,f2, J = Array(n);\n    var div = numeric.div, sub = numeric.sub,errest,roundoff,max = Math.max,eps = 1e-3,abs = Math.abs, min = Math.min;\n    var t0,t1,t2,it=0,d1,d2,N;\n    for(i=0;i<n;i++) {\n        var h = max(1e-6*f0,1e-8);\n        while(1) {\n            ++it;\n            if(it>20) { throw new Error(\"Numerical gradient fails\"); }\n            x0[i] = x[i]+h;\n            f1 = f(x0);\n            x0[i] = x[i]-h;\n            f2 = f(x0);\n            x0[i] = x[i];\n            if(isNaN(f1) || isNaN(f2)) { h/=16; continue; }\n            J[i] = (f1-f2)/(2*h);\n            t0 = x[i]-h;\n            t1 = x[i];\n            t2 = x[i]+h;\n            d1 = (f1-f0)/h;\n            d2 = (f0-f2)/h;\n            N = max(abs(J[i]),abs(f0),abs(f1),abs(f2),abs(t0),abs(t1),abs(t2),1e-8);\n            errest = min(max(abs(d1-J[i]),abs(d2-J[i]),abs(d1-d2))/N,h/N);\n            if(errest>eps) { h/=16; }\n            else break;\n            }\n    }\n    return J;\n}\n\nnumeric.uncmin = function uncmin(f,x0,tol,gradient,maxit,callback,options) {\n    var grad = numeric.gradient;\n    if(typeof options === \"undefined\") { options = {}; }\n    if(typeof tol === \"undefined\") { tol = 1e-8; }\n    if(typeof gradient === \"undefined\") { gradient = function(x) { return grad(f,x); }; }\n    if(typeof maxit === \"undefined\") maxit = 1000;\n    x0 = numeric.clone(x0);\n    var n = x0.length;\n    var f0 = f(x0),f1,df0;\n    if(isNaN(f0)) throw new Error('uncmin: f(x0) is a NaN!');\n    var max = Math.max, norm2 = numeric.norm2;\n    tol = max(tol,numeric.epsilon);\n    var step,g0,g1,H1 = options.Hinv || numeric.identity(n);\n    var dot = numeric.dot, inv = numeric.inv, sub = numeric.sub, add = numeric.add, ten = numeric.tensor, div = numeric.div, mul = numeric.mul;\n    var all = numeric.all, isfinite = numeric.isFinite, neg = numeric.neg;\n    var it=0,i,s,x1,y,Hy,Hs,ys,i0,t,nstep,t1,t2;\n    var msg = \"\";\n    g0 = gradient(x0);\n    while(it<maxit) {\n        if(typeof callback === \"function\") { if(callback(it,x0,f0,g0,H1)) { msg = \"Callback returned true\"; break; } }\n        if(!all(isfinite(g0))) { msg = \"Gradient has Infinity or NaN\"; break; }\n        step = neg(dot(H1,g0));\n        if(!all(isfinite(step))) { msg = \"Search direction has Infinity or NaN\"; break; }\n        nstep = norm2(step);\n        if(nstep < tol) { msg=\"Newton step smaller than tol\"; break; }\n        t = 1;\n        df0 = dot(g0,step);\n        // line search\n        x1 = x0;\n        while(it < maxit) {\n            if(t*nstep < tol) { break; }\n            s = mul(step,t);\n            x1 = add(x0,s);\n            f1 = f(x1);\n            if(f1-f0 >= 0.1*t*df0 || isNaN(f1)) {\n                t *= 0.5;\n                ++it;\n                continue;\n            }\n            break;\n        }\n        if(t*nstep < tol) { msg = \"Line search step size smaller than tol\"; break; }\n        if(it === maxit) { msg = \"maxit reached during line search\"; break; }\n        g1 = gradient(x1);\n        y = sub(g1,g0);\n        ys = dot(y,s);\n        Hy = dot(H1,y);\n        H1 = sub(add(H1,\n                mul(\n                        (ys+dot(y,Hy))/(ys*ys),\n                        ten(s,s)    )),\n                div(add(ten(Hy,s),ten(s,Hy)),ys));\n        x0 = x1;\n        f0 = f1;\n        g0 = g1;\n        ++it;\n    }\n    return {solution: x0, f: f0, gradient: g0, invHessian: H1, iterations:it, message: msg};\n}\n\n// 10. Ode solver (Dormand-Prince)\nnumeric.Dopri = function Dopri(x,y,f,ymid,iterations,msg,events) {\n    this.x = x;\n    this.y = y;\n    this.f = f;\n    this.ymid = ymid;\n    this.iterations = iterations;\n    this.events = events;\n    this.message = msg;\n}\nnumeric.Dopri.prototype._at = function _at(xi,j) {\n    function sqr(x) { return x*x; }\n    var sol = this;\n    var xs = sol.x;\n    var ys = sol.y;\n    var k1 = sol.f;\n    var ymid = sol.ymid;\n    var n = xs.length;\n    var x0,x1,xh,y0,y1,yh,xi;\n    var floor = Math.floor,h;\n    var c = 0.5;\n    var add = numeric.add, mul = numeric.mul,sub = numeric.sub, p,q,w;\n    x0 = xs[j];\n    x1 = xs[j+1];\n    y0 = ys[j];\n    y1 = ys[j+1];\n    h  = x1-x0;\n    xh = x0+c*h;\n    yh = ymid[j];\n    p = sub(k1[j  ],mul(y0,1/(x0-xh)+2/(x0-x1)));\n    q = sub(k1[j+1],mul(y1,1/(x1-xh)+2/(x1-x0)));\n    w = [sqr(xi - x1) * (xi - xh) / sqr(x0 - x1) / (x0 - xh),\n         sqr(xi - x0) * sqr(xi - x1) / sqr(x0 - xh) / sqr(x1 - xh),\n         sqr(xi - x0) * (xi - xh) / sqr(x1 - x0) / (x1 - xh),\n         (xi - x0) * sqr(xi - x1) * (xi - xh) / sqr(x0-x1) / (x0 - xh),\n         (xi - x1) * sqr(xi - x0) * (xi - xh) / sqr(x0-x1) / (x1 - xh)];\n    return add(add(add(add(mul(y0,w[0]),\n                           mul(yh,w[1])),\n                           mul(y1,w[2])),\n                           mul( p,w[3])),\n                           mul( q,w[4]));\n}\nnumeric.Dopri.prototype.at = function at(x) {\n    var i,j,k,floor = Math.floor;\n    if(typeof x !== \"number\") {\n        var n = x.length, ret = Array(n);\n        for(i=n-1;i!==-1;--i) {\n            ret[i] = this.at(x[i]);\n        }\n        return ret;\n    }\n    var x0 = this.x;\n    i = 0; j = x0.length-1;\n    while(j-i>1) {\n        k = floor(0.5*(i+j));\n        if(x0[k] <= x) i = k;\n        else j = k;\n    }\n    return this._at(x,i);\n}\n\nnumeric.dopri = function dopri(x0,x1,y0,f,tol,maxit,event) {\n    if(typeof tol === \"undefined\") { tol = 1e-6; }\n    if(typeof maxit === \"undefined\") { maxit = 1000; }\n    var xs = [x0], ys = [y0], k1 = [f(x0,y0)], k2,k3,k4,k5,k6,k7, ymid = [];\n    var A2 = 1/5;\n    var A3 = [3/40,9/40];\n    var A4 = [44/45,-56/15,32/9];\n    var A5 = [19372/6561,-25360/2187,64448/6561,-212/729];\n    var A6 = [9017/3168,-355/33,46732/5247,49/176,-5103/18656];\n    var b = [35/384,0,500/1113,125/192,-2187/6784,11/84];\n    var bm = [0.5*6025192743/30085553152,\n              0,\n              0.5*51252292925/65400821598,\n              0.5*-2691868925/45128329728,\n              0.5*187940372067/1594534317056,\n              0.5*-1776094331/19743644256,\n              0.5*11237099/235043384];\n    var c = [1/5,3/10,4/5,8/9,1,1];\n    var e = [-71/57600,0,71/16695,-71/1920,17253/339200,-22/525,1/40];\n    var i = 0,er,j;\n    var h = (x1-x0)/10;\n    var it = 0;\n    var add = numeric.add, mul = numeric.mul, y1,erinf;\n    var max = Math.max, min = Math.min, abs = Math.abs, norminf = numeric.norminf,pow = Math.pow;\n    var any = numeric.any, lt = numeric.lt, and = numeric.and, sub = numeric.sub;\n    var e0, e1, ev;\n    var ret = new numeric.Dopri(xs,ys,k1,ymid,-1,\"\");\n    if(typeof event === \"function\") e0 = event(x0,y0);\n    while(x0<x1 && it<maxit) {\n        ++it;\n        if(x0+h>x1) h = x1-x0;\n        k2 = f(x0+c[0]*h,                add(y0,mul(   A2*h,k1[i])));\n        k3 = f(x0+c[1]*h,            add(add(y0,mul(A3[0]*h,k1[i])),mul(A3[1]*h,k2)));\n        k4 = f(x0+c[2]*h,        add(add(add(y0,mul(A4[0]*h,k1[i])),mul(A4[1]*h,k2)),mul(A4[2]*h,k3)));\n        k5 = f(x0+c[3]*h,    add(add(add(add(y0,mul(A5[0]*h,k1[i])),mul(A5[1]*h,k2)),mul(A5[2]*h,k3)),mul(A5[3]*h,k4)));\n        k6 = f(x0+c[4]*h,add(add(add(add(add(y0,mul(A6[0]*h,k1[i])),mul(A6[1]*h,k2)),mul(A6[2]*h,k3)),mul(A6[3]*h,k4)),mul(A6[4]*h,k5)));\n        y1 = add(add(add(add(add(y0,mul(k1[i],h*b[0])),mul(k3,h*b[2])),mul(k4,h*b[3])),mul(k5,h*b[4])),mul(k6,h*b[5]));\n        k7 = f(x0+h,y1);\n        er = add(add(add(add(add(mul(k1[i],h*e[0]),mul(k3,h*e[2])),mul(k4,h*e[3])),mul(k5,h*e[4])),mul(k6,h*e[5])),mul(k7,h*e[6]));\n        if(typeof er === \"number\") erinf = abs(er);\n        else erinf = norminf(er);\n        if(erinf > tol) { // reject\n            h = 0.2*h*pow(tol/erinf,0.25);\n            if(x0+h === x0) {\n                ret.msg = \"Step size became too small\";\n                break;\n            }\n            continue;\n        }\n        ymid[i] = add(add(add(add(add(add(y0,\n                mul(k1[i],h*bm[0])),\n                mul(k3   ,h*bm[2])),\n                mul(k4   ,h*bm[3])),\n                mul(k5   ,h*bm[4])),\n                mul(k6   ,h*bm[5])),\n                mul(k7   ,h*bm[6]));\n        ++i;\n        xs[i] = x0+h;\n        ys[i] = y1;\n        k1[i] = k7;\n        if(typeof event === \"function\") {\n            var yi,xl = x0,xr = x0+0.5*h,xi;\n            e1 = event(xr,ymid[i-1]);\n            ev = and(lt(e0,0),lt(0,e1));\n            if(!any(ev)) { xl = xr; xr = x0+h; e0 = e1; e1 = event(xr,y1); ev = and(lt(e0,0),lt(0,e1)); }\n            if(any(ev)) {\n                var xc, yc, en,ei;\n                var side=0, sl = 1.0, sr = 1.0;\n                while(1) {\n                    if(typeof e0 === \"number\") xi = (sr*e1*xl-sl*e0*xr)/(sr*e1-sl*e0);\n                    else {\n                        xi = xr;\n                        for(j=e0.length-1;j!==-1;--j) {\n                            if(e0[j]<0 && e1[j]>0) xi = min(xi,(sr*e1[j]*xl-sl*e0[j]*xr)/(sr*e1[j]-sl*e0[j]));\n                        }\n                    }\n                    if(xi <= xl || xi >= xr) break;\n                    yi = ret._at(xi, i-1);\n                    ei = event(xi,yi);\n                    en = and(lt(e0,0),lt(0,ei));\n                    if(any(en)) {\n                        xr = xi;\n                        e1 = ei;\n                        ev = en;\n                        sr = 1.0;\n                        if(side === -1) sl *= 0.5;\n                        else sl = 1.0;\n                        side = -1;\n                    } else {\n                        xl = xi;\n                        e0 = ei;\n                        sl = 1.0;\n                        if(side === 1) sr *= 0.5;\n                        else sr = 1.0;\n                        side = 1;\n                    }\n                }\n                y1 = ret._at(0.5*(x0+xi),i-1);\n                ret.f[i] = f(xi,yi);\n                ret.x[i] = xi;\n                ret.y[i] = yi;\n                ret.ymid[i-1] = y1;\n                ret.events = ev;\n                ret.iterations = it;\n                return ret;\n            }\n        }\n        x0 += h;\n        y0 = y1;\n        e0 = e1;\n        h = min(0.8*h*pow(tol/erinf,0.25),4*h);\n    }\n    ret.iterations = it;\n    return ret;\n}\n\n// 11. Ax = b\nnumeric.LU = function(A, fast) {\n  fast = fast || false;\n\n  var abs = Math.abs;\n  var i, j, k, absAjk, Akk, Ak, Pk, Ai;\n  var max;\n  var n = A.length, n1 = n-1;\n  var P = new Array(n);\n  if(!fast) A = numeric.clone(A);\n\n  for (k = 0; k < n; ++k) {\n    Pk = k;\n    Ak = A[k];\n    max = abs(Ak[k]);\n    for (j = k + 1; j < n; ++j) {\n      absAjk = abs(A[j][k]);\n      if (max < absAjk) {\n        max = absAjk;\n        Pk = j;\n      }\n    }\n    P[k] = Pk;\n\n    if (Pk != k) {\n      A[k] = A[Pk];\n      A[Pk] = Ak;\n      Ak = A[k];\n    }\n\n    Akk = Ak[k];\n\n    for (i = k + 1; i < n; ++i) {\n      A[i][k] /= Akk;\n    }\n\n    for (i = k + 1; i < n; ++i) {\n      Ai = A[i];\n      for (j = k + 1; j < n1; ++j) {\n        Ai[j] -= Ai[k] * Ak[j];\n        ++j;\n        Ai[j] -= Ai[k] * Ak[j];\n      }\n      if(j===n1) Ai[j] -= Ai[k] * Ak[j];\n    }\n  }\n\n  return {\n    LU: A,\n    P:  P\n  };\n}\n\nnumeric.LUsolve = function LUsolve(LUP, b) {\n  var i, j;\n  var LU = LUP.LU;\n  var n   = LU.length;\n  var x = numeric.clone(b);\n  var P   = LUP.P;\n  var Pi, LUi, LUii, tmp;\n\n  for (i=n-1;i!==-1;--i) x[i] = b[i];\n  for (i = 0; i < n; ++i) {\n    Pi = P[i];\n    if (P[i] !== i) {\n      tmp = x[i];\n      x[i] = x[Pi];\n      x[Pi] = tmp;\n    }\n\n    LUi = LU[i];\n    for (j = 0; j < i; ++j) {\n      x[i] -= x[j] * LUi[j];\n    }\n  }\n\n  for (i = n - 1; i >= 0; --i) {\n    LUi = LU[i];\n    for (j = i + 1; j < n; ++j) {\n      x[i] -= x[j] * LUi[j];\n    }\n\n    x[i] /= LUi[i];\n  }\n\n  return x;\n}\n\nnumeric.solve = function solve(A,b,fast) { return numeric.LUsolve(numeric.LU(A,fast), b); }\n\n// 12. Linear programming\nnumeric.echelonize = function echelonize(A) {\n    var s = numeric.dim(A), m = s[0], n = s[1];\n    var I = numeric.identity(m);\n    var P = Array(m);\n    var i,j,k,l,Ai,Ii,Z,a;\n    var abs = Math.abs;\n    var diveq = numeric.diveq;\n    A = numeric.clone(A);\n    for(i=0;i<m;++i) {\n        k = 0;\n        Ai = A[i];\n        Ii = I[i];\n        for(j=1;j<n;++j) if(abs(Ai[k])<abs(Ai[j])) k=j;\n        P[i] = k;\n        diveq(Ii,Ai[k]);\n        diveq(Ai,Ai[k]);\n        for(j=0;j<m;++j) if(j!==i) {\n            Z = A[j]; a = Z[k];\n            for(l=n-1;l!==-1;--l) Z[l] -= Ai[l]*a;\n            Z = I[j];\n            for(l=m-1;l!==-1;--l) Z[l] -= Ii[l]*a;\n        }\n    }\n    return {I:I, A:A, P:P};\n}\n\nnumeric.__solveLP = function __solveLP(c,A,b,tol,maxit,x,flag) {\n    var sum = numeric.sum, log = numeric.log, mul = numeric.mul, sub = numeric.sub, dot = numeric.dot, div = numeric.div, add = numeric.add;\n    var m = c.length, n = b.length,y;\n    var unbounded = false, cb,i0=0;\n    var alpha = 1.0;\n    var f0,df0,AT = numeric.transpose(A), svd = numeric.svd,transpose = numeric.transpose,leq = numeric.leq, sqrt = Math.sqrt, abs = Math.abs;\n    var muleq = numeric.muleq;\n    var norm = numeric.norminf, any = numeric.any,min = Math.min;\n    var all = numeric.all, gt = numeric.gt;\n    var p = Array(m), A0 = Array(n),e=numeric.rep([n],1), H;\n    var solve = numeric.solve, z = sub(b,dot(A,x)),count;\n    var dotcc = dot(c,c);\n    var g;\n    for(count=i0;count<maxit;++count) {\n        var i,j,d;\n        for(i=n-1;i!==-1;--i) A0[i] = div(A[i],z[i]);\n        var A1 = transpose(A0);\n        for(i=m-1;i!==-1;--i) p[i] = (/*x[i]+*/sum(A1[i]));\n        alpha = 0.25*abs(dotcc/dot(c,p));\n        var a1 = 100*sqrt(dotcc/dot(p,p));\n        if(!isFinite(alpha) || alpha>a1) alpha = a1;\n        g = add(c,mul(alpha,p));\n        H = dot(A1,A0);\n        for(i=m-1;i!==-1;--i) H[i][i] += 1;\n        d = solve(H,div(g,alpha),true);\n        var t0 = div(z,dot(A,d));\n        var t = 1.0;\n        for(i=n-1;i!==-1;--i) if(t0[i]<0) t = min(t,-0.999*t0[i]);\n        y = sub(x,mul(d,t));\n        z = sub(b,dot(A,y));\n        if(!all(gt(z,0))) return { solution: x, message: \"\", iterations: count };\n        x = y;\n        if(alpha<tol) return { solution: y, message: \"\", iterations: count };\n        if(flag) {\n            var s = dot(c,g), Ag = dot(A,g);\n            unbounded = true;\n            for(i=n-1;i!==-1;--i) if(s*Ag[i]<0) { unbounded = false; break; }\n        } else {\n            if(x[m-1]>=0) unbounded = false;\n            else unbounded = true;\n        }\n        if(unbounded) return { solution: y, message: \"Unbounded\", iterations: count };\n    }\n    return { solution: x, message: \"maximum iteration count exceeded\", iterations:count };\n}\n\nnumeric._solveLP = function _solveLP(c,A,b,tol,maxit) {\n    var m = c.length, n = b.length,y;\n    var sum = numeric.sum, log = numeric.log, mul = numeric.mul, sub = numeric.sub, dot = numeric.dot, div = numeric.div, add = numeric.add;\n    var c0 = numeric.rep([m],0).concat([1]);\n    var J = numeric.rep([n,1],-1);\n    var A0 = numeric.blockMatrix([[A                   ,   J  ]]);\n    var b0 = b;\n    var y = numeric.rep([m],0).concat(Math.max(0,numeric.sup(numeric.neg(b)))+1);\n    var x0 = numeric.__solveLP(c0,A0,b0,tol,maxit,y,false);\n    var x = numeric.clone(x0.solution);\n    x.length = m;\n    var foo = numeric.inf(sub(b,dot(A,x)));\n    if(foo<0) { return { solution: NaN, message: \"Infeasible\", iterations: x0.iterations }; }\n    var ret = numeric.__solveLP(c, A, b, tol, maxit-x0.iterations, x, true);\n    ret.iterations += x0.iterations;\n    return ret;\n};\n\nnumeric.solveLP = function solveLP(c,A,b,Aeq,beq,tol,maxit) {\n    if(typeof maxit === \"undefined\") maxit = 1000;\n    if(typeof tol === \"undefined\") tol = numeric.epsilon;\n    if(typeof Aeq === \"undefined\") return numeric._solveLP(c,A,b,tol,maxit);\n    var m = Aeq.length, n = Aeq[0].length, o = A.length;\n    var B = numeric.echelonize(Aeq);\n    var flags = numeric.rep([n],0);\n    var P = B.P;\n    var Q = [];\n    var i;\n    for(i=P.length-1;i!==-1;--i) flags[P[i]] = 1;\n    for(i=n-1;i!==-1;--i) if(flags[i]===0) Q.push(i);\n    var g = numeric.getRange;\n    var I = numeric.linspace(0,m-1), J = numeric.linspace(0,o-1);\n    var Aeq2 = g(Aeq,I,Q), A1 = g(A,J,P), A2 = g(A,J,Q), dot = numeric.dot, sub = numeric.sub;\n    var A3 = dot(A1,B.I);\n    var A4 = sub(A2,dot(A3,Aeq2)), b4 = sub(b,dot(A3,beq));\n    var c1 = Array(P.length), c2 = Array(Q.length);\n    for(i=P.length-1;i!==-1;--i) c1[i] = c[P[i]];\n    for(i=Q.length-1;i!==-1;--i) c2[i] = c[Q[i]];\n    var c4 = sub(c2,dot(c1,dot(B.I,Aeq2)));\n    var S = numeric._solveLP(c4,A4,b4,tol,maxit);\n    var x2 = S.solution;\n    if(x2!==x2) return S;\n    var x1 = dot(B.I,sub(beq,dot(Aeq2,x2)));\n    var x = Array(c.length);\n    for(i=P.length-1;i!==-1;--i) x[P[i]] = x1[i];\n    for(i=Q.length-1;i!==-1;--i) x[Q[i]] = x2[i];\n    return { solution: x, message:S.message, iterations: S.iterations };\n}\n\nnumeric.MPStoLP = function MPStoLP(MPS) {\n    if(MPS instanceof String) { MPS.split('\\n'); }\n    var state = 0;\n    var states = ['Initial state','NAME','ROWS','COLUMNS','RHS','BOUNDS','ENDATA'];\n    var n = MPS.length;\n    var i,j,z,N=0,rows = {}, sign = [], rl = 0, vars = {}, nv = 0;\n    var name;\n    var c = [], A = [], b = [];\n    function err(e) { throw new Error('MPStoLP: '+e+'\\nLine '+i+': '+MPS[i]+'\\nCurrent state: '+states[state]+'\\n'); }\n    for(i=0;i<n;++i) {\n        z = MPS[i];\n        var w0 = z.match(/\\S*/g);\n        var w = [];\n        for(j=0;j<w0.length;++j) if(w0[j]!==\"\") w.push(w0[j]);\n        if(w.length === 0) continue;\n        for(j=0;j<states.length;++j) if(z.substr(0,states[j].length) === states[j]) break;\n        if(j<states.length) {\n            state = j;\n            if(j===1) { name = w[1]; }\n            if(j===6) return { name:name, c:c, A:numeric.transpose(A), b:b, rows:rows, vars:vars };\n            continue;\n        }\n        switch(state) {\n        case 0: case 1: err('Unexpected line');\n        case 2: \n            switch(w[0]) {\n            case 'N': if(N===0) N = w[1]; else err('Two or more N rows'); break;\n            case 'L': rows[w[1]] = rl; sign[rl] = 1; b[rl] = 0; ++rl; break;\n            case 'G': rows[w[1]] = rl; sign[rl] = -1;b[rl] = 0; ++rl; break;\n            case 'E': rows[w[1]] = rl; sign[rl] = 0;b[rl] = 0; ++rl; break;\n            default: err('Parse error '+numeric.prettyPrint(w));\n            }\n            break;\n        case 3:\n            if(!vars.hasOwnProperty(w[0])) { vars[w[0]] = nv; c[nv] = 0; A[nv] = numeric.rep([rl],0); ++nv; }\n            var p = vars[w[0]];\n            for(j=1;j<w.length;j+=2) {\n                if(w[j] === N) { c[p] = parseFloat(w[j+1]); continue; }\n                var q = rows[w[j]];\n                A[p][q] = (sign[q]<0?-1:1)*parseFloat(w[j+1]);\n            }\n            break;\n        case 4:\n            for(j=1;j<w.length;j+=2) b[rows[w[j]]] = (sign[rows[w[j]]]<0?-1:1)*parseFloat(w[j+1]);\n            break;\n        case 5: /*FIXME*/ break;\n        case 6: err('Internal error');\n        }\n    }\n    err('Reached end of file without ENDATA');\n}\n// seedrandom.js version 2.0.\n// Author: David Bau 4/2/2011\n//\n// Defines a method Math.seedrandom() that, when called, substitutes\n// an explicitly seeded RC4-based algorithm for Math.random().  Also\n// supports automatic seeding from local or network sources of entropy.\n//\n// Usage:\n//\n//   <script src=http://davidbau.com/encode/seedrandom-min.js></script>\n//\n//   Math.seedrandom('yipee'); Sets Math.random to a function that is\n//                             initialized using the given explicit seed.\n//\n//   Math.seedrandom();        Sets Math.random to a function that is\n//                             seeded using the current time, dom state,\n//                             and other accumulated local entropy.\n//                             The generated seed string is returned.\n//\n//   Math.seedrandom('yowza', true);\n//                             Seeds using the given explicit seed mixed\n//                             together with accumulated entropy.\n//\n//   <script src=\"http://bit.ly/srandom-512\"></script>\n//                             Seeds using physical random bits downloaded\n//                             from random.org.\n//\n//   <script src=\"https://jsonlib.appspot.com/urandom?callback=Math.seedrandom\">\n//   </script>                 Seeds using urandom bits from call.jsonlib.com,\n//                             which is faster than random.org.\n//\n// Examples:\n//\n//   Math.seedrandom(\"hello\");            // Use \"hello\" as the seed.\n//   document.write(Math.random());       // Always 0.5463663768140734\n//   document.write(Math.random());       // Always 0.43973793770592234\n//   var rng1 = Math.random;              // Remember the current prng.\n//\n//   var autoseed = Math.seedrandom();    // New prng with an automatic seed.\n//   document.write(Math.random());       // Pretty much unpredictable.\n//\n//   Math.random = rng1;                  // Continue \"hello\" prng sequence.\n//   document.write(Math.random());       // Always 0.554769432473455\n//\n//   Math.seedrandom(autoseed);           // Restart at the previous seed.\n//   document.write(Math.random());       // Repeat the 'unpredictable' value.\n//\n// Notes:\n//\n// Each time seedrandom('arg') is called, entropy from the passed seed\n// is accumulated in a pool to help generate future seeds for the\n// zero-argument form of Math.seedrandom, so entropy can be injected over\n// time by calling seedrandom with explicit data repeatedly.\n//\n// On speed - This javascript implementation of Math.random() is about\n// 3-10x slower than the built-in Math.random() because it is not native\n// code, but this is typically fast enough anyway.  Seeding is more expensive,\n// especially if you use auto-seeding.  Some details (timings on Chrome 4):\n//\n// Our Math.random()            - avg less than 0.002 milliseconds per call\n// seedrandom('explicit')       - avg less than 0.5 milliseconds per call\n// seedrandom('explicit', true) - avg less than 2 milliseconds per call\n// seedrandom()                 - avg about 38 milliseconds per call\n//\n// LICENSE (BSD):\n//\n// Copyright 2010 David Bau, all rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are met:\n// \n//   1. Redistributions of source code must retain the above copyright\n//      notice, this list of conditions and the following disclaimer.\n//\n//   2. Redistributions in binary form must reproduce the above copyright\n//      notice, this list of conditions and the following disclaimer in the\n//      documentation and/or other materials provided with the distribution.\n// \n//   3. Neither the name of this module nor the names of its contributors may\n//      be used to endorse or promote products derived from this software\n//      without specific prior written permission.\n// \n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n//\n/**\n * All code is in an anonymous closure to keep the global namespace clean.\n *\n * @param {number=} overflow \n * @param {number=} startdenom\n */\n\n// Patched by Seb so that seedrandom.js does not pollute the Math object.\n// My tests suggest that doing Math.trouble = 1 makes Math lookups about 5%\n// slower.\nnumeric.seedrandom = { pow:Math.pow, random:Math.random };\n\n(function (pool, math, width, chunks, significance, overflow, startdenom) {\n\n\n//\n// seedrandom()\n// This is the seedrandom function described above.\n//\nmath['seedrandom'] = function seedrandom(seed, use_entropy) {\n  var key = [];\n  var arc4;\n\n  // Flatten the seed string or build one from local entropy if needed.\n  seed = mixkey(flatten(\n    use_entropy ? [seed, pool] :\n    arguments.length ? seed :\n    [new Date().getTime(), pool, window], 3), key);\n\n  // Use the seed to initialize an ARC4 generator.\n  arc4 = new ARC4(key);\n\n  // Mix the randomness into accumulated entropy.\n  mixkey(arc4.S, pool);\n\n  // Override Math.random\n\n  // This function returns a random double in [0, 1) that contains\n  // randomness in every bit of the mantissa of the IEEE 754 value.\n\n  math['random'] = function random() {  // Closure to return a random double:\n    var n = arc4.g(chunks);             // Start with a numerator n < 2 ^ 48\n    var d = startdenom;                 //   and denominator d = 2 ^ 48.\n    var x = 0;                          //   and no 'extra last byte'.\n    while (n < significance) {          // Fill up all significant digits by\n      n = (n + x) * width;              //   shifting numerator and\n      d *= width;                       //   denominator and generating a\n      x = arc4.g(1);                    //   new least-significant-byte.\n    }\n    while (n >= overflow) {             // To avoid rounding up, before adding\n      n /= 2;                           //   last byte, shift everything\n      d /= 2;                           //   right using integer math until\n      x >>>= 1;                         //   we have exactly the desired bits.\n    }\n    return (n + x) / d;                 // Form the number within [0, 1).\n  };\n\n  // Return the seed that was used\n  return seed;\n};\n\n//\n// ARC4\n//\n// An ARC4 implementation.  The constructor takes a key in the form of\n// an array of at most (width) integers that should be 0 <= x < (width).\n//\n// The g(count) method returns a pseudorandom integer that concatenates\n// the next (count) outputs from ARC4.  Its return value is a number x\n// that is in the range 0 <= x < (width ^ count).\n//\n/** @constructor */\nfunction ARC4(key) {\n  var t, u, me = this, keylen = key.length;\n  var i = 0, j = me.i = me.j = me.m = 0;\n  me.S = [];\n  me.c = [];\n\n  // The empty key [] is treated as [0].\n  if (!keylen) { key = [keylen++]; }\n\n  // Set up S using the standard key scheduling algorithm.\n  while (i < width) { me.S[i] = i++; }\n  for (i = 0; i < width; i++) {\n    t = me.S[i];\n    j = lowbits(j + t + key[i % keylen]);\n    u = me.S[j];\n    me.S[i] = u;\n    me.S[j] = t;\n  }\n\n  // The \"g\" method returns the next (count) outputs as one number.\n  me.g = function getnext(count) {\n    var s = me.S;\n    var i = lowbits(me.i + 1); var t = s[i];\n    var j = lowbits(me.j + t); var u = s[j];\n    s[i] = u;\n    s[j] = t;\n    var r = s[lowbits(t + u)];\n    while (--count) {\n      i = lowbits(i + 1); t = s[i];\n      j = lowbits(j + t); u = s[j];\n      s[i] = u;\n      s[j] = t;\n      r = r * width + s[lowbits(t + u)];\n    }\n    me.i = i;\n    me.j = j;\n    return r;\n  };\n  // For robust unpredictability discard an initial batch of values.\n  // See http://www.rsa.com/rsalabs/node.asp?id=2009\n  me.g(width);\n}\n\n//\n// flatten()\n// Converts an object tree to nested arrays of strings.\n//\n/** @param {Object=} result \n  * @param {string=} prop\n  * @param {string=} typ */\nfunction flatten(obj, depth, result, prop, typ) {\n  result = [];\n  typ = typeof(obj);\n  if (depth && typ == 'object') {\n    for (prop in obj) {\n      if (prop.indexOf('S') < 5) {    // Avoid FF3 bug (local/sessionStorage)\n        try { result.push(flatten(obj[prop], depth - 1)); } catch (e) {}\n      }\n    }\n  }\n  return (result.length ? result : obj + (typ != 'string' ? '\\0' : ''));\n}\n\n//\n// mixkey()\n// Mixes a string seed into a key that is an array of integers, and\n// returns a shortened string seed that is equivalent to the result key.\n//\n/** @param {number=} smear \n  * @param {number=} j */\nfunction mixkey(seed, key, smear, j) {\n  seed += '';                         // Ensure the seed is a string\n  smear = 0;\n  for (j = 0; j < seed.length; j++) {\n    key[lowbits(j)] =\n      lowbits((smear ^= key[lowbits(j)] * 19) + seed.charCodeAt(j));\n  }\n  seed = '';\n  for (j in key) { seed += String.fromCharCode(key[j]); }\n  return seed;\n}\n\n//\n// lowbits()\n// A quick \"n mod width\" for width a power of 2.\n//\nfunction lowbits(n) { return n & (width - 1); }\n\n//\n// The following constants are related to IEEE 754 limits.\n//\nstartdenom = math.pow(width, chunks);\nsignificance = math.pow(2, significance);\noverflow = significance * 2;\n\n//\n// When seedrandom.js is loaded, we immediately mix a few bits\n// from the built-in RNG into the entropy pool.  Because we do\n// not want to intefere with determinstic PRNG state later,\n// seedrandom will not call math.random on its own again after\n// initialization.\n//\nmixkey(math.random(), pool);\n\n// End anonymous scope, and pass initial values.\n}(\n  [],   // pool: entropy pool starts empty\n  numeric.seedrandom, // math: package containing random, pow, and seedrandom\n  256,  // width: each RC4 output is 0 <= x < 256\n  6,    // chunks: at least six RC4 outputs for each double\n  52    // significance: there are 52 significant digits in a double\n  ));\n/* This file is a slightly modified version of quadprog.js from Alberto Santini.\n * It has been slightly modified by Sébastien Loisel to make sure that it handles\n * 0-based Arrays instead of 1-based Arrays.\n * License is in resources/LICENSE.quadprog */\n(function(exports) {\n\nfunction base0to1(A) {\n    if(typeof A !== \"object\") { return A; }\n    var ret = [], i,n=A.length;\n    for(i=0;i<n;i++) ret[i+1] = base0to1(A[i]);\n    return ret;\n}\nfunction base1to0(A) {\n    if(typeof A !== \"object\") { return A; }\n    var ret = [], i,n=A.length;\n    for(i=1;i<n;i++) ret[i-1] = base1to0(A[i]);\n    return ret;\n}\n\nfunction dpori(a, lda, n) {\n    var i, j, k, kp1, t;\n\n    for (k = 1; k <= n; k = k + 1) {\n        a[k][k] = 1 / a[k][k];\n        t = -a[k][k];\n        //~ dscal(k - 1, t, a[1][k], 1);\n        for (i = 1; i < k; i = i + 1) {\n            a[i][k] = t * a[i][k];\n        }\n\n        kp1 = k + 1;\n        if (n < kp1) {\n            break;\n        }\n        for (j = kp1; j <= n; j = j + 1) {\n            t = a[k][j];\n            a[k][j] = 0;\n            //~ daxpy(k, t, a[1][k], 1, a[1][j], 1);\n            for (i = 1; i <= k; i = i + 1) {\n                a[i][j] = a[i][j] + (t * a[i][k]);\n            }\n        }\n    }\n\n}\n\nfunction dposl(a, lda, n, b) {\n    var i, k, kb, t;\n\n    for (k = 1; k <= n; k = k + 1) {\n        //~ t = ddot(k - 1, a[1][k], 1, b[1], 1);\n        t = 0;\n        for (i = 1; i < k; i = i + 1) {\n            t = t + (a[i][k] * b[i]);\n        }\n\n        b[k] = (b[k] - t) / a[k][k];\n    }\n\n    for (kb = 1; kb <= n; kb = kb + 1) {\n        k = n + 1 - kb;\n        b[k] = b[k] / a[k][k];\n        t = -b[k];\n        //~ daxpy(k - 1, t, a[1][k], 1, b[1], 1);\n        for (i = 1; i < k; i = i + 1) {\n            b[i] = b[i] + (t * a[i][k]);\n        }\n    }\n}\n\nfunction dpofa(a, lda, n, info) {\n    var i, j, jm1, k, t, s;\n\n    for (j = 1; j <= n; j = j + 1) {\n        info[1] = j;\n        s = 0;\n        jm1 = j - 1;\n        if (jm1 < 1) {\n            s = a[j][j] - s;\n            if (s <= 0) {\n                break;\n            }\n            a[j][j] = Math.sqrt(s);\n        } else {\n            for (k = 1; k <= jm1; k = k + 1) {\n                //~ t = a[k][j] - ddot(k - 1, a[1][k], 1, a[1][j], 1);\n                t = a[k][j];\n                for (i = 1; i < k; i = i + 1) {\n                    t = t - (a[i][j] * a[i][k]);\n                }\n                t = t / a[k][k];\n                a[k][j] = t;\n                s = s + t * t;\n            }\n            s = a[j][j] - s;\n            if (s <= 0) {\n                break;\n            }\n            a[j][j] = Math.sqrt(s);\n        }\n        info[1] = 0;\n    }\n}\n\nfunction qpgen2(dmat, dvec, fddmat, n, sol, crval, amat,\n    bvec, fdamat, q, meq, iact, nact, iter, work, ierr) {\n\n    var i, j, l, l1, info, it1, iwzv, iwrv, iwrm, iwsv, iwuv, nvl, r, iwnbv,\n        temp, sum, t1, tt, gc, gs, nu,\n        t1inf, t2min,\n        vsmall, tmpa, tmpb,\n        go;\n\n    r = Math.min(n, q);\n    l = 2 * n + (r * (r + 5)) / 2 + 2 * q + 1;\n\n    vsmall = 1.0e-60;\n    do {\n        vsmall = vsmall + vsmall;\n        tmpa = 1 + 0.1 * vsmall;\n        tmpb = 1 + 0.2 * vsmall;\n    } while (tmpa <= 1 || tmpb <= 1);\n\n    for (i = 1; i <= n; i = i + 1) {\n        work[i] = dvec[i];\n    }\n    for (i = n + 1; i <= l; i = i + 1) {\n        work[i] = 0;\n    }\n    for (i = 1; i <= q; i = i + 1) {\n        iact[i] = 0;\n    }\n\n    info = [];\n\n    if (ierr[1] === 0) {\n        dpofa(dmat, fddmat, n, info);\n        if (info[1] !== 0) {\n            ierr[1] = 2;\n            return;\n        }\n        dposl(dmat, fddmat, n, dvec);\n        dpori(dmat, fddmat, n);\n    } else {\n        for (j = 1; j <= n; j = j + 1) {\n            sol[j] = 0;\n            for (i = 1; i <= j; i = i + 1) {\n                sol[j] = sol[j] + dmat[i][j] * dvec[i];\n            }\n        }\n        for (j = 1; j <= n; j = j + 1) {\n            dvec[j] = 0;\n            for (i = j; i <= n; i = i + 1) {\n                dvec[j] = dvec[j] + dmat[j][i] * sol[i];\n            }\n        }\n    }\n\n    crval[1] = 0;\n    for (j = 1; j <= n; j = j + 1) {\n        sol[j] = dvec[j];\n        crval[1] = crval[1] + work[j] * sol[j];\n        work[j] = 0;\n        for (i = j + 1; i <= n; i = i + 1) {\n            dmat[i][j] = 0;\n        }\n    }\n    crval[1] = -crval[1] / 2;\n    ierr[1] = 0;\n\n    iwzv = n;\n    iwrv = iwzv + n;\n    iwuv = iwrv + r;\n    iwrm = iwuv + r + 1;\n    iwsv = iwrm + (r * (r + 1)) / 2;\n    iwnbv = iwsv + q;\n\n    for (i = 1; i <= q; i = i + 1) {\n        sum = 0;\n        for (j = 1; j <= n; j = j + 1) {\n            sum = sum + amat[j][i] * amat[j][i];\n        }\n        work[iwnbv + i] = Math.sqrt(sum);\n    }\n    nact = 0;\n    iter[1] = 0;\n    iter[2] = 0;\n\n    function fn_goto_50() {\n        iter[1] = iter[1] + 1;\n\n        l = iwsv;\n        for (i = 1; i <= q; i = i + 1) {\n            l = l + 1;\n            sum = -bvec[i];\n            for (j = 1; j <= n; j = j + 1) {\n                sum = sum + amat[j][i] * sol[j];\n            }\n            if (Math.abs(sum) < vsmall) {\n                sum = 0;\n            }\n            if (i > meq) {\n                work[l] = sum;\n            } else {\n                work[l] = -Math.abs(sum);\n                if (sum > 0) {\n                    for (j = 1; j <= n; j = j + 1) {\n                        amat[j][i] = -amat[j][i];\n                    }\n                    bvec[i] = -bvec[i];\n                }\n            }\n        }\n\n        for (i = 1; i <= nact; i = i + 1) {\n            work[iwsv + iact[i]] = 0;\n        }\n\n        nvl = 0;\n        temp = 0;\n        for (i = 1; i <= q; i = i + 1) {\n            if (work[iwsv + i] < temp * work[iwnbv + i]) {\n                nvl = i;\n                temp = work[iwsv + i] / work[iwnbv + i];\n            }\n        }\n        if (nvl === 0) {\n            return 999;\n        }\n\n        return 0;\n    }\n\n    function fn_goto_55() {\n        for (i = 1; i <= n; i = i + 1) {\n            sum = 0;\n            for (j = 1; j <= n; j = j + 1) {\n                sum = sum + dmat[j][i] * amat[j][nvl];\n            }\n            work[i] = sum;\n        }\n\n        l1 = iwzv;\n        for (i = 1; i <= n; i = i + 1) {\n            work[l1 + i] = 0;\n        }\n        for (j = nact + 1; j <= n; j = j + 1) {\n            for (i = 1; i <= n; i = i + 1) {\n                work[l1 + i] = work[l1 + i] + dmat[i][j] * work[j];\n            }\n        }\n\n        t1inf = true;\n        for (i = nact; i >= 1; i = i - 1) {\n            sum = work[i];\n            l = iwrm + (i * (i + 3)) / 2;\n            l1 = l - i;\n            for (j = i + 1; j <= nact; j = j + 1) {\n                sum = sum - work[l] * work[iwrv + j];\n                l = l + j;\n            }\n            sum = sum / work[l1];\n            work[iwrv + i] = sum;\n            if (iact[i] < meq) {\n                // continue;\n                break;\n            }\n            if (sum < 0) {\n                // continue;\n                break;\n            }\n            t1inf = false;\n            it1 = i;\n        }\n\n        if (!t1inf) {\n            t1 = work[iwuv + it1] / work[iwrv + it1];\n            for (i = 1; i <= nact; i = i + 1) {\n                if (iact[i] < meq) {\n                    // continue;\n                    break;\n                }\n                if (work[iwrv + i] < 0) {\n                    // continue;\n                    break;\n                }\n                temp = work[iwuv + i] / work[iwrv + i];\n                if (temp < t1) {\n                    t1 = temp;\n                    it1 = i;\n                }\n            }\n        }\n\n        sum = 0;\n        for (i = iwzv + 1; i <= iwzv + n; i = i + 1) {\n            sum = sum + work[i] * work[i];\n        }\n        if (Math.abs(sum) <= vsmall) {\n            if (t1inf) {\n                ierr[1] = 1;\n                // GOTO 999\n                return 999;\n            } else {\n                for (i = 1; i <= nact; i = i + 1) {\n                    work[iwuv + i] = work[iwuv + i] - t1 * work[iwrv + i];\n                }\n                work[iwuv + nact + 1] = work[iwuv + nact + 1] + t1;\n                // GOTO 700\n                return 700;\n            }\n        } else {\n            sum = 0;\n            for (i = 1; i <= n; i = i + 1) {\n                sum = sum + work[iwzv + i] * amat[i][nvl];\n            }\n            tt = -work[iwsv + nvl] / sum;\n            t2min = true;\n            if (!t1inf) {\n                if (t1 < tt) {\n                    tt = t1;\n                    t2min = false;\n                }\n            }\n\n            for (i = 1; i <= n; i = i + 1) {\n                sol[i] = sol[i] + tt * work[iwzv + i];\n                if (Math.abs(sol[i]) < vsmall) {\n                    sol[i] = 0;\n                }\n            }\n\n            crval[1] = crval[1] + tt * sum * (tt / 2 + work[iwuv + nact + 1]);\n            for (i = 1; i <= nact; i = i + 1) {\n                work[iwuv + i] = work[iwuv + i] - tt * work[iwrv + i];\n            }\n            work[iwuv + nact + 1] = work[iwuv + nact + 1] + tt;\n\n            if (t2min) {\n                nact = nact + 1;\n                iact[nact] = nvl;\n\n                l = iwrm + ((nact - 1) * nact) / 2 + 1;\n                for (i = 1; i <= nact - 1; i = i + 1) {\n                    work[l] = work[i];\n                    l = l + 1;\n                }\n\n                if (nact === n) {\n                    work[l] = work[n];\n                } else {\n                    for (i = n; i >= nact + 1; i = i - 1) {\n                        if (work[i] === 0) {\n                            // continue;\n                            break;\n                        }\n                        gc = Math.max(Math.abs(work[i - 1]), Math.abs(work[i]));\n                        gs = Math.min(Math.abs(work[i - 1]), Math.abs(work[i]));\n                        if (work[i - 1] >= 0) {\n                            temp = Math.abs(gc * Math.sqrt(1 + gs * gs / (gc * gc)));\n                        } else {\n                            temp = -Math.abs(gc * Math.sqrt(1 + gs * gs / (gc * gc)));\n                        }\n                        gc = work[i - 1] / temp;\n                        gs = work[i] / temp;\n\n                        if (gc === 1) {\n                            // continue;\n                            break;\n                        }\n                        if (gc === 0) {\n                            work[i - 1] = gs * temp;\n                            for (j = 1; j <= n; j = j + 1) {\n                                temp = dmat[j][i - 1];\n                                dmat[j][i - 1] = dmat[j][i];\n                                dmat[j][i] = temp;\n                            }\n                        } else {\n                            work[i - 1] = temp;\n                            nu = gs / (1 + gc);\n                            for (j = 1; j <= n; j = j + 1) {\n                                temp = gc * dmat[j][i - 1] + gs * dmat[j][i];\n                                dmat[j][i] = nu * (dmat[j][i - 1] + temp) - dmat[j][i];\n                                dmat[j][i - 1] = temp;\n\n                            }\n                        }\n                    }\n                    work[l] = work[nact];\n                }\n            } else {\n                sum = -bvec[nvl];\n                for (j = 1; j <= n; j = j + 1) {\n                    sum = sum + sol[j] * amat[j][nvl];\n                }\n                if (nvl > meq) {\n                    work[iwsv + nvl] = sum;\n                } else {\n                    work[iwsv + nvl] = -Math.abs(sum);\n                    if (sum > 0) {\n                        for (j = 1; j <= n; j = j + 1) {\n                            amat[j][nvl] = -amat[j][nvl];\n                        }\n                        bvec[nvl] = -bvec[nvl];\n                    }\n                }\n                // GOTO 700\n                return 700;\n            }\n        }\n\n        return 0;\n    }\n\n    function fn_goto_797() {\n        l = iwrm + (it1 * (it1 + 1)) / 2 + 1;\n        l1 = l + it1;\n        if (work[l1] === 0) {\n            // GOTO 798\n            return 798;\n        }\n        gc = Math.max(Math.abs(work[l1 - 1]), Math.abs(work[l1]));\n        gs = Math.min(Math.abs(work[l1 - 1]), Math.abs(work[l1]));\n        if (work[l1 - 1] >= 0) {\n            temp = Math.abs(gc * Math.sqrt(1 + gs * gs / (gc * gc)));\n        } else {\n            temp = -Math.abs(gc * Math.sqrt(1 + gs * gs / (gc * gc)));\n        }\n        gc = work[l1 - 1] / temp;\n        gs = work[l1] / temp;\n\n        if (gc === 1) {\n            // GOTO 798\n            return 798;\n        }\n        if (gc === 0) {\n            for (i = it1 + 1; i <= nact; i = i + 1) {\n                temp = work[l1 - 1];\n                work[l1 - 1] = work[l1];\n                work[l1] = temp;\n                l1 = l1 + i;\n            }\n            for (i = 1; i <= n; i = i + 1) {\n                temp = dmat[i][it1];\n                dmat[i][it1] = dmat[i][it1 + 1];\n                dmat[i][it1 + 1] = temp;\n            }\n        } else {\n            nu = gs / (1 + gc);\n            for (i = it1 + 1; i <= nact; i = i + 1) {\n                temp = gc * work[l1 - 1] + gs * work[l1];\n                work[l1] = nu * (work[l1 - 1] + temp) - work[l1];\n                work[l1 - 1] = temp;\n                l1 = l1 + i;\n            }\n            for (i = 1; i <= n; i = i + 1) {\n                temp = gc * dmat[i][it1] + gs * dmat[i][it1 + 1];\n                dmat[i][it1 + 1] = nu * (dmat[i][it1] + temp) - dmat[i][it1 + 1];\n                dmat[i][it1] = temp;\n            }\n        }\n\n        return 0;\n    }\n\n    function fn_goto_798() {\n        l1 = l - it1;\n        for (i = 1; i <= it1; i = i + 1) {\n            work[l1] = work[l];\n            l = l + 1;\n            l1 = l1 + 1;\n        }\n\n        work[iwuv + it1] = work[iwuv + it1 + 1];\n        iact[it1] = iact[it1 + 1];\n        it1 = it1 + 1;\n        if (it1 < nact) {\n            // GOTO 797\n            return 797;\n        }\n\n        return 0;\n    }\n\n    function fn_goto_799() {\n        work[iwuv + nact] = work[iwuv + nact + 1];\n        work[iwuv + nact + 1] = 0;\n        iact[nact] = 0;\n        nact = nact - 1;\n        iter[2] = iter[2] + 1;\n\n        return 0;\n    }\n\n    go = 0;\n    while (true) {\n        go = fn_goto_50();\n        if (go === 999) {\n            return;\n        }\n        while (true) {\n            go = fn_goto_55();\n            if (go === 0) {\n                break;\n            }\n            if (go === 999) {\n                return;\n            }\n            if (go === 700) {\n                if (it1 === nact) {\n                    fn_goto_799();\n                } else {\n                    while (true) {\n                        fn_goto_797();\n                        go = fn_goto_798();\n                        if (go !== 797) {\n                            break;\n                        }\n                    }\n                    fn_goto_799();\n                }\n            }\n        }\n    }\n\n}\n\nfunction solveQP(Dmat, dvec, Amat, bvec, meq, factorized) {\n    Dmat = base0to1(Dmat);\n    dvec = base0to1(dvec);\n    Amat = base0to1(Amat);\n    var i, n, q,\n        nact, r,\n        crval = [], iact = [], sol = [], work = [], iter = [],\n        message;\n\n    meq = meq || 0;\n    factorized = factorized ? base0to1(factorized) : [undefined, 0];\n    bvec = bvec ? base0to1(bvec) : [];\n\n    // In Fortran the array index starts from 1\n    n = Dmat.length - 1;\n    q = Amat[1].length - 1;\n\n    if (!bvec) {\n        for (i = 1; i <= q; i = i + 1) {\n            bvec[i] = 0;\n        }\n    }\n    for (i = 1; i <= q; i = i + 1) {\n        iact[i] = 0;\n    }\n    nact = 0;\n    r = Math.min(n, q);\n    for (i = 1; i <= n; i = i + 1) {\n        sol[i] = 0;\n    }\n    crval[1] = 0;\n    for (i = 1; i <= (2 * n + (r * (r + 5)) / 2 + 2 * q + 1); i = i + 1) {\n        work[i] = 0;\n    }\n    for (i = 1; i <= 2; i = i + 1) {\n        iter[i] = 0;\n    }\n\n    qpgen2(Dmat, dvec, n, n, sol, crval, Amat,\n        bvec, n, q, meq, iact, nact, iter, work, factorized);\n\n    message = \"\";\n    if (factorized[1] === 1) {\n        message = \"constraints are inconsistent, no solution!\";\n    }\n    if (factorized[1] === 2) {\n        message = \"matrix D in quadratic function is not positive definite!\";\n    }\n\n    return {\n        solution: base1to0(sol),\n        value: base1to0(crval),\n        unconstrained_solution: base1to0(dvec),\n        iterations: base1to0(iter),\n        iact: base1to0(iact),\n        message: message\n    };\n}\nexports.solveQP = solveQP;\n}(numeric));\n/*\r\nShanti Rao sent me this routine by private email. I had to modify it\r\nslightly to work on Arrays instead of using a Matrix object.\r\nIt is apparently translated from http://stitchpanorama.sourceforge.net/Python/svd.py\r\n*/\r\n\r\nnumeric.svd= function svd(A) {\r\n    var temp;\r\n//Compute the thin SVD from G. H. Golub and C. Reinsch, Numer. Math. 14, 403-420 (1970)\r\n\tvar prec= numeric.epsilon; //Math.pow(2,-52) // assumes double prec\r\n\tvar tolerance= 1.e-64/prec;\r\n\tvar itmax= 50;\r\n\tvar c=0;\r\n\tvar i=0;\r\n\tvar j=0;\r\n\tvar k=0;\r\n\tvar l=0;\r\n\t\r\n\tvar u= numeric.clone(A);\r\n\tvar m= u.length;\r\n\t\r\n\tvar n= u[0].length;\r\n\t\r\n\tif (m < n) throw \"Need more rows than columns\"\r\n\t\r\n\tvar e = new Array(n);\r\n\tvar q = new Array(n);\r\n\tfor (i=0; i<n; i++) e[i] = q[i] = 0.0;\r\n\tvar v = numeric.rep([n,n],0);\r\n//\tv.zero();\r\n\t\r\n \tfunction pythag(a,b)\r\n \t{\r\n\t\ta = Math.abs(a)\r\n\t\tb = Math.abs(b)\r\n\t\tif (a > b)\r\n\t\t\treturn a*Math.sqrt(1.0+(b*b/a/a))\r\n\t\telse if (b == 0.0) \r\n\t\t\treturn a\r\n\t\treturn b*Math.sqrt(1.0+(a*a/b/b))\r\n\t}\r\n\r\n\t//Householder's reduction to bidiagonal form\r\n\r\n\tvar f= 0.0;\r\n\tvar g= 0.0;\r\n\tvar h= 0.0;\r\n\tvar x= 0.0;\r\n\tvar y= 0.0;\r\n\tvar z= 0.0;\r\n\tvar s= 0.0;\r\n\t\r\n\tfor (i=0; i < n; i++)\r\n\t{\t\r\n\t\te[i]= g;\r\n\t\ts= 0.0;\r\n\t\tl= i+1;\r\n\t\tfor (j=i; j < m; j++) \r\n\t\t\ts += (u[j][i]*u[j][i]);\r\n\t\tif (s <= tolerance)\r\n\t\t\tg= 0.0;\r\n\t\telse\r\n\t\t{\t\r\n\t\t\tf= u[i][i];\r\n\t\t\tg= Math.sqrt(s);\r\n\t\t\tif (f >= 0.0) g= -g;\r\n\t\t\th= f*g-s\r\n\t\t\tu[i][i]=f-g;\r\n\t\t\tfor (j=l; j < n; j++)\r\n\t\t\t{\r\n\t\t\t\ts= 0.0\r\n\t\t\t\tfor (k=i; k < m; k++) \r\n\t\t\t\t\ts += u[k][i]*u[k][j]\r\n\t\t\t\tf= s/h\r\n\t\t\t\tfor (k=i; k < m; k++) \r\n\t\t\t\t\tu[k][j]+=f*u[k][i]\r\n\t\t\t}\r\n\t\t}\r\n\t\tq[i]= g\r\n\t\ts= 0.0\r\n\t\tfor (j=l; j < n; j++) \r\n\t\t\ts= s + u[i][j]*u[i][j]\r\n\t\tif (s <= tolerance)\r\n\t\t\tg= 0.0\r\n\t\telse\r\n\t\t{\t\r\n\t\t\tf= u[i][i+1]\r\n\t\t\tg= Math.sqrt(s)\r\n\t\t\tif (f >= 0.0) g= -g\r\n\t\t\th= f*g - s\r\n\t\t\tu[i][i+1] = f-g;\r\n\t\t\tfor (j=l; j < n; j++) e[j]= u[i][j]/h\r\n\t\t\tfor (j=l; j < m; j++)\r\n\t\t\t{\t\r\n\t\t\t\ts=0.0\r\n\t\t\t\tfor (k=l; k < n; k++) \r\n\t\t\t\t\ts += (u[j][k]*u[i][k])\r\n\t\t\t\tfor (k=l; k < n; k++) \r\n\t\t\t\t\tu[j][k]+=s*e[k]\r\n\t\t\t}\t\r\n\t\t}\r\n\t\ty= Math.abs(q[i])+Math.abs(e[i])\r\n\t\tif (y>x) \r\n\t\t\tx=y\r\n\t}\r\n\t\r\n\t// accumulation of right hand gtransformations\r\n\tfor (i=n-1; i != -1; i+= -1)\r\n\t{\t\r\n\t\tif (g != 0.0)\r\n\t\t{\r\n\t\t \th= g*u[i][i+1]\r\n\t\t\tfor (j=l; j < n; j++) \r\n\t\t\t\tv[j][i]=u[i][j]/h\r\n\t\t\tfor (j=l; j < n; j++)\r\n\t\t\t{\t\r\n\t\t\t\ts=0.0\r\n\t\t\t\tfor (k=l; k < n; k++) \r\n\t\t\t\t\ts += u[i][k]*v[k][j]\r\n\t\t\t\tfor (k=l; k < n; k++) \r\n\t\t\t\t\tv[k][j]+=(s*v[k][i])\r\n\t\t\t}\t\r\n\t\t}\r\n\t\tfor (j=l; j < n; j++)\r\n\t\t{\r\n\t\t\tv[i][j] = 0;\r\n\t\t\tv[j][i] = 0;\r\n\t\t}\r\n\t\tv[i][i] = 1;\r\n\t\tg= e[i]\r\n\t\tl= i\r\n\t}\r\n\t\r\n\t// accumulation of left hand transformations\r\n\tfor (i=n-1; i != -1; i+= -1)\r\n\t{\t\r\n\t\tl= i+1\r\n\t\tg= q[i]\r\n\t\tfor (j=l; j < n; j++) \r\n\t\t\tu[i][j] = 0;\r\n\t\tif (g != 0.0)\r\n\t\t{\r\n\t\t\th= u[i][i]*g\r\n\t\t\tfor (j=l; j < n; j++)\r\n\t\t\t{\r\n\t\t\t\ts=0.0\r\n\t\t\t\tfor (k=l; k < m; k++) s += u[k][i]*u[k][j];\r\n\t\t\t\tf= s/h\r\n\t\t\t\tfor (k=i; k < m; k++) u[k][j]+=f*u[k][i];\r\n\t\t\t}\r\n\t\t\tfor (j=i; j < m; j++) u[j][i] = u[j][i]/g;\r\n\t\t}\r\n\t\telse\r\n\t\t\tfor (j=i; j < m; j++) u[j][i] = 0;\r\n\t\tu[i][i] += 1;\r\n\t}\r\n\t\r\n\t// diagonalization of the bidiagonal form\r\n\tprec= prec*x\r\n\tfor (k=n-1; k != -1; k+= -1)\r\n\t{\r\n\t\tfor (var iteration=0; iteration < itmax; iteration++)\r\n\t\t{\t// test f splitting\r\n\t\t\tvar test_convergence = false\r\n\t\t\tfor (l=k; l != -1; l+= -1)\r\n\t\t\t{\t\r\n\t\t\t\tif (Math.abs(e[l]) <= prec)\r\n\t\t\t\t{\ttest_convergence= true\r\n\t\t\t\t\tbreak \r\n\t\t\t\t}\r\n\t\t\t\tif (Math.abs(q[l-1]) <= prec)\r\n\t\t\t\t\tbreak \r\n\t\t\t}\r\n\t\t\tif (!test_convergence)\r\n\t\t\t{\t// cancellation of e[l] if l>0\r\n\t\t\t\tc= 0.0\r\n\t\t\t\ts= 1.0\r\n\t\t\t\tvar l1= l-1\r\n\t\t\t\tfor (i =l; i<k+1; i++)\r\n\t\t\t\t{\t\r\n\t\t\t\t\tf= s*e[i]\r\n\t\t\t\t\te[i]= c*e[i]\r\n\t\t\t\t\tif (Math.abs(f) <= prec)\r\n\t\t\t\t\t\tbreak\r\n\t\t\t\t\tg= q[i]\r\n\t\t\t\t\th= pythag(f,g)\r\n\t\t\t\t\tq[i]= h\r\n\t\t\t\t\tc= g/h\r\n\t\t\t\t\ts= -f/h\r\n\t\t\t\t\tfor (j=0; j < m; j++)\r\n\t\t\t\t\t{\t\r\n\t\t\t\t\t\ty= u[j][l1]\r\n\t\t\t\t\t\tz= u[j][i]\r\n\t\t\t\t\t\tu[j][l1] =  y*c+(z*s)\r\n\t\t\t\t\t\tu[j][i] = -y*s+(z*c)\r\n\t\t\t\t\t} \r\n\t\t\t\t}\t\r\n\t\t\t}\r\n\t\t\t// test f convergence\r\n\t\t\tz= q[k]\r\n\t\t\tif (l== k)\r\n\t\t\t{\t//convergence\r\n\t\t\t\tif (z<0.0)\r\n\t\t\t\t{\t//q[k] is made non-negative\r\n\t\t\t\t\tq[k]= -z\r\n\t\t\t\t\tfor (j=0; j < n; j++)\r\n\t\t\t\t\t\tv[j][k] = -v[j][k]\r\n\t\t\t\t}\r\n\t\t\t\tbreak  //break out of iteration loop and move on to next k value\r\n\t\t\t}\r\n\t\t\tif (iteration >= itmax-1)\r\n\t\t\t\tthrow 'Error: no convergence.'\r\n\t\t\t// shift from bottom 2x2 minor\r\n\t\t\tx= q[l]\r\n\t\t\ty= q[k-1]\r\n\t\t\tg= e[k-1]\r\n\t\t\th= e[k]\r\n\t\t\tf= ((y-z)*(y+z)+(g-h)*(g+h))/(2.0*h*y)\r\n\t\t\tg= pythag(f,1.0)\r\n\t\t\tif (f < 0.0)\r\n\t\t\t\tf= ((x-z)*(x+z)+h*(y/(f-g)-h))/x\r\n\t\t\telse\r\n\t\t\t\tf= ((x-z)*(x+z)+h*(y/(f+g)-h))/x\r\n\t\t\t// next QR transformation\r\n\t\t\tc= 1.0\r\n\t\t\ts= 1.0\r\n\t\t\tfor (i=l+1; i< k+1; i++)\r\n\t\t\t{\t\r\n\t\t\t\tg= e[i]\r\n\t\t\t\ty= q[i]\r\n\t\t\t\th= s*g\r\n\t\t\t\tg= c*g\r\n\t\t\t\tz= pythag(f,h)\r\n\t\t\t\te[i-1]= z\r\n\t\t\t\tc= f/z\r\n\t\t\t\ts= h/z\r\n\t\t\t\tf= x*c+g*s\r\n\t\t\t\tg= -x*s+g*c\r\n\t\t\t\th= y*s\r\n\t\t\t\ty= y*c\r\n\t\t\t\tfor (j=0; j < n; j++)\r\n\t\t\t\t{\t\r\n\t\t\t\t\tx= v[j][i-1]\r\n\t\t\t\t\tz= v[j][i]\r\n\t\t\t\t\tv[j][i-1] = x*c+z*s\r\n\t\t\t\t\tv[j][i] = -x*s+z*c\r\n\t\t\t\t}\r\n\t\t\t\tz= pythag(f,h)\r\n\t\t\t\tq[i-1]= z\r\n\t\t\t\tc= f/z\r\n\t\t\t\ts= h/z\r\n\t\t\t\tf= c*g+s*y\r\n\t\t\t\tx= -s*g+c*y\r\n\t\t\t\tfor (j=0; j < m; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\ty= u[j][i-1]\r\n\t\t\t\t\tz= u[j][i]\r\n\t\t\t\t\tu[j][i-1] = y*c+z*s\r\n\t\t\t\t\tu[j][i] = -y*s+z*c\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\te[l]= 0.0\r\n\t\t\te[k]= f\r\n\t\t\tq[k]= x\r\n\t\t} \r\n\t}\r\n\t\t\r\n\t//vt= transpose(v)\r\n\t//return (u,q,vt)\r\n\tfor (i=0;i<q.length; i++) \r\n\t  if (q[i] < prec) q[i] = 0\r\n\t  \r\n\t//sort eigenvalues\t\r\n\tfor (i=0; i< n; i++)\r\n\t{\t \r\n\t//writeln(q)\r\n\t for (j=i-1; j >= 0; j--)\r\n\t {\r\n\t  if (q[j] < q[i])\r\n\t  {\r\n\t//  writeln(i,'-',j)\r\n\t   c = q[j]\r\n\t   q[j] = q[i]\r\n\t   q[i] = c\r\n\t   for(k=0;k<u.length;k++) { temp = u[k][i]; u[k][i] = u[k][j]; u[k][j] = temp; }\r\n\t   for(k=0;k<v.length;k++) { temp = v[k][i]; v[k][i] = v[k][j]; v[k][j] = temp; }\r\n//\t   u.swapCols(i,j)\r\n//\t   v.swapCols(i,j)\r\n\t   i = j\t   \r\n\t  }\r\n\t }\t\r\n\t}\r\n\t\r\n\treturn {U:u,S:q,V:v}\r\n};\r\n\r\n",
    "var numeric = require('numeric')\n// var jsfeat = require('jsfeat')\nvar jsfeat_face = require('jsfeat')\nObject.keys(jsfeat_face).forEach(function (name) { console.log(name) })\n\n// 'examples/js/libs/jsfeat-min.js',\n// 'examples/js/libs/jsfeat_detect.js',\n\nvar frontalface = require('_frontalface')\n// 'examples/js/libs/frontalface.js',\n\nvar left_eye_filter = require('_left-eye-filter')\n// 'examples/js/libs/left_eye_filter.js'\n\nvar right_eye_filter = require('_right-eye-filter')\n// 'examples/js/libs/right_eye_filter.js'\n\nvar nose_filter = require('_nose-filter')\n// 'examples/js/libs/nose_filter.js'\n\njsfeat.haar.frontalface = frontalface()\n\nvar webglFilter = require('_svmfilter-webgl')\nvar mosseFilter = require('_mossefilter')\n// 'examples/js/libs/mosse.js',\n\nvar svmFilter = require('_svmfilter-fft')\n// var faceDeformer = require('_face-deformer')\n\n/******************************************************************************\nclmtrackr library (https://www.github.com/serapath-contribution/clmtracker/)\n\nCopyright (c) 2013, Audun Mathias Øygard\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"),\nto deal in the Software without restriction, including without limitation\nthe rights to use, copy, modify, merge, publish, distribute, sublicense,\nand/or sell copies of the Software, and to permit persons to whom the Software\nis furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\nDAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE\nOR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n******************************************************************************/\nmodule.exports = clmtracker\n\nfunction clmtracker () {\n  return {\n  \ttracker : function(params) {\n\n  \t\tif (!params) params = {};\n  \t\tif (params.constantVelocity === undefined) params.constantVelocity = true;\n  \t\tif (params.searchWindow === undefined) params.searchWindow = 11;\n  \t\tif (params.useWebGL === undefined) params.useWebGL = true;\n  \t\tif (params.scoreThreshold === undefined) params.scoreThreshold = 0.5;\n  \t\tif (params.stopOnConvergence === undefined) params.stopOnConvergence = false;\n  \t\tif (params.weightPoints === undefined) params.weightPoints = undefined;\n  \t\tif (params.sharpenResponse === undefined) params.sharpenResponse = false;\n\n  \t\tif (params.faceDetection === undefined) params.faceDetection = {};\n  \t\tif (params.faceDetection.workSize === undefined) params.faceDetection.workSize = 160;\n  \t\tif (params.faceDetection.minScale === undefined) params.faceDetection.minScale = 2;\n  \t\tif (params.faceDetection.scaleFactor === undefined) params.faceDetection.scaleFactor = 1.15;\n  \t\tif (params.faceDetection.useCanny === undefined) params.faceDetection.useCanny = false;\n  \t\tif (params.faceDetection.edgesDensity === undefined) params.faceDetection.edgesDensity = 0.13;\n  \t\tif (params.faceDetection.equalizeHistogram === undefined) params.faceDetection.equalizeHistogram = true;\n  \t\tif (params.useWebWorkers === undefined) params.useWebWorkers = true;\n\n  \t\tvar numPatches, patchSize, numParameters, patchType;\n  \t\tvar gaussianPD;\n  \t\tvar eigenVectors, eigenValues;\n  \t\tvar sketchCC, sketchW, sketchH, sketchCanvas;\n  \t\tvar candidate;\n  \t\tvar weights, model, biases;\n\n  \t\tvar sobelInit = false;\n  \t\tvar lbpInit = false;\n\n  \t\tvar currentParameters = [];\n  \t\tvar currentPositions = [];\n  \t\tvar previousParameters = [];\n  \t\tvar previousPositions = [];\n\n  \t\tvar patches = [];\n  \t\tvar responses = [];\n  \t\tvar meanShape = [];\n\n  \t\tvar responseMode = 'single';\n  \t\tvar responseList = ['raw'];\n  \t\tvar responseIndex = 0;\n\n  \t\t/*\n  \t\tIt's possible to experiment with the sequence of variances used for the finding the maximum in the KDE.\n  \t\tThis sequence is pretty arbitrary, but was found to be okay using some manual testing.\n  \t\t*/\n  \t\tvar varianceSeq = [10,5,1];\n  \t\t//var varianceSeq = [3,1.5,0.75];\n  \t\t//var varianceSeq = [6,3,0.75];\n  \t\tvar PDMVariance = 0.7;\n\n  \t\tvar relaxation = 0.1;\n\n  \t\tvar first = true;\n  \t\tvar detectingFace = false;\n  \t\tvar faceDetectionResult;\n\n  \t\tvar convergenceLimit = 0.01;\n\n  \t\tvar learningRate = [];\n  \t\tvar stepParameter = 1.25;\n  \t\tvar prevCostFunc = []\n\n  \t\tvar searchWindow;\n  \t\tvar modelWidth, modelHeight;\n  \t\tvar halfSearchWindow, vecProbs, responsePixels;\n\n  \t\tif(typeof Float64Array !== 'undefined') {\n  \t\t\tvar updatePosition = new Float64Array(2);\n  \t\t\tvar vecpos = new Float64Array(2);\n  \t\t} else {\n  \t\t\tvar updatePosition = new Array(2);\n  \t\t\tvar vecpos = new Array(2);\n  \t\t}\n  \t\tvar pw, pl, pdataLength;\n\n  \t\tvar facecheck_count = 0;\n\n  \t\tvar webglFi, svmFi, mosseCalc, jf;\n\n  \t\tvar scoringCanvas = document.createElement('canvas');\n  \t\t//document.body.appendChild(scoringCanvas);\n  \t\tvar scoringContext = scoringCanvas.getContext('2d');\n  \t\tvar msxmin, msymin, msxmax, msymax;\n  \t\tvar msmodelwidth, msmodelheight;\n  \t\tvar scoringWeights, scoringBias;\n  \t\tvar scoringHistory = [];\n  \t\tvar meanscore = 0;\n\n  \t\tvar mossef_lefteye, mossef_righteye, mossef_nose;\n  \t\tvar right_eye_position = [0.0,0.0];\n  \t\tvar left_eye_position = [0.0,0.0];\n  \t\tvar nose_position = [0.0,0.0];\n  \t\tvar lep, rep, mep;\n  \t\tvar runnerTimeout, runnerElement, runnerBox;\n\n  \t\tvar pointWeights;\n\n  \t\tvar halfPI = Math.PI/2;\n\n  \t\t/*\n  \t\t *\tload model data, initialize filters, etc.\n  \t\t *\n  \t\t *\t@param\t<Object>\tpdm model object\n  \t\t */\n  \t\tthis.init = function(pdmmodel) {\n\n  \t\t\tmodel = pdmmodel;\n\n  \t\t\t// load from model\n  \t\t\tpatchType = model.patchModel.patchType;\n  \t\t\tnumPatches = model.patchModel.numPatches;\n  \t\t\tpatchSize = model.patchModel.patchSize[0];\n  \t\t\tif (patchType == \"MOSSE\") {\n  \t\t\t\tsearchWindow = patchSize;\n  \t\t\t} else {\n  \t\t\t\tsearchWindow = params.searchWindow;\n  \t\t\t}\n  \t\t\tnumParameters = model.shapeModel.numEvalues;\n  \t\t\tmodelWidth = model.patchModel.canvasSize[0];\n  \t\t\tmodelHeight = model.patchModel.canvasSize[1];\n\n  \t\t\t// set up canvas to work on\n  \t\t\tsketchCanvas = document.createElement('canvas');\n  \t\t\tsketchCC = sketchCanvas.getContext('2d');\n\n  \t\t\tsketchW = sketchCanvas.width = modelWidth + (searchWindow-1) + patchSize-1;\n  \t\t\tsketchH = sketchCanvas.height = modelHeight + (searchWindow-1) + patchSize-1;\n\n  \t\t\tif (model.hints && mosseFilter && left_eye_filter && right_eye_filter && nose_filter) {\n  \t\t\t\t//var mossef_lefteye = new mosseFilter({drawResponse : document.getElementById('overlay2')});\n  \t\t\t\tmossef_lefteye = new mosseFilter();\n  \t\t\t\tmossef_lefteye.load(left_eye_filter);\n  \t\t\t\t//var mossef_righteye = new mosseFilter({drawResponse : document.getElementById('overlay2')});\n  \t\t\t\tmossef_righteye = new mosseFilter();\n  \t\t\t\tmossef_righteye.load(right_eye_filter);\n  \t\t\t\t//var mossef_nose = new mosseFilter({drawResponse : document.getElementById('overlay2')});\n  \t\t\t\tmossef_nose = new mosseFilter();\n  \t\t\t\tmossef_nose.load(nose_filter);\n  \t\t\t} else {\n  \t\t\t\tconsole.log(\"MOSSE filters not found, using rough approximation for initialization.\");\n  \t\t\t}\n\n  \t\t\t// load eigenvectors\n  \t\t\teigenVectors = numeric.rep([numPatches*2,numParameters],0.0);\n  \t\t\tfor (var i = 0;i < numPatches*2;i++) {\n  \t\t\t\tfor (var j = 0;j < numParameters;j++) {\n  \t\t\t\t\teigenVectors[i][j] = model.shapeModel.eigenVectors[i][j];\n  \t\t\t\t}\n  \t\t\t}\n\n  \t\t\t// load mean shape\n  \t\t\tfor (var i = 0; i < numPatches;i++) {\n  \t\t\t\tmeanShape[i] = [model.shapeModel.meanShape[i][0], model.shapeModel.meanShape[i][1]];\n  \t\t\t}\n\n  \t\t\t// get max and mins, width and height of meanshape\n  \t\t\tmsxmax = msymax = 0;\n  \t\t\tmsxmin = msymin = 1000000;\n  \t\t\tfor (var i = 0;i < numPatches;i++) {\n  \t\t\t\tif (meanShape[i][0] < msxmin) msxmin = meanShape[i][0];\n  \t\t\t\tif (meanShape[i][1] < msymin) msymin = meanShape[i][1];\n  \t\t\t\tif (meanShape[i][0] > msxmax) msxmax = meanShape[i][0];\n  \t\t\t\tif (meanShape[i][1] > msymax) msymax = meanShape[i][1];\n  \t\t\t}\n  \t\t\tmsmodelwidth = msxmax-msxmin;\n  \t\t\tmsmodelheight = msymax-msymin;\n\n  \t\t\t// get scoringweights if they exist\n  \t\t\tif (model.scoring) {\n  \t\t\t\tscoringWeights = new Float64Array(model.scoring.coef);\n  \t\t\t\tscoringBias = model.scoring.bias;\n  \t\t\t\tscoringCanvas.width = model.scoring.size[0];\n  \t\t\t\tscoringCanvas.height = model.scoring.size[1];\n  \t\t\t}\n\n  \t\t\t// load eigenvalues\n  \t\t\teigenValues = model.shapeModel.eigenValues;\n\n  \t\t\tweights = model.patchModel.weights;\n  \t\t\tbiases = model.patchModel.bias;\n\n  \t\t\t// precalculate gaussianPriorDiagonal\n  \t\t\tgaussianPD = numeric.rep([numParameters+4, numParameters+4],0);\n  \t\t\t// set values and append manual inverse\n  \t\t\tfor (var i = 0;i < numParameters;i++) {\n  \t\t\t\tif (model.shapeModel.nonRegularizedVectors.indexOf(i) >= 0) {\n  \t\t\t\t\tgaussianPD[i+4][i+4] = 1/10000000;\n  \t\t\t\t} else {\n  \t\t\t\t\tgaussianPD[i+4][i+4] = 1/eigenValues[i];\n  \t\t\t\t}\n  \t\t\t}\n\n  \t\t\tfor (var i = 0;i < numParameters+4;i++) {\n  \t\t\t\tcurrentParameters[i] = 0;\n  \t\t\t}\n\n  \t\t\tif (patchType == \"SVM\") {\n  \t\t\t\tvar webGLContext;\n  \t\t\t\tvar webGLTestCanvas = document.createElement('canvas');\n  \t\t\t\tif (window.WebGLRenderingContext) {\n  \t\t\t\t\twebGLContext = webGLTestCanvas.getContext('webgl') || webGLTestCanvas.getContext('experimental-webgl');\n  \t\t\t\t\tif (!webGLContext || !webGLContext.getExtension('OES_texture_float')) {\n  \t\t\t\t\t\twebGLContext = null;\n  \t\t\t\t\t}\n  \t\t\t\t}\n\n  \t\t\t\tif (webGLContext && params.useWebGL && (typeof(webglFilter) !== \"undefined\")) {\n  \t\t\t\t\twebglFi = new webglFilter();\n  \t\t\t\t\ttry {\n  \t\t\t\t\t\twebglFi.init(weights, biases, numPatches, searchWindow+patchSize-1, searchWindow+patchSize-1, patchSize, patchSize);\n  \t\t\t\t\t\tif ('lbp' in weights) lbpInit = true;\n  \t\t\t\t\t\tif ('sobel' in weights) sobelInit = true;\n  \t\t\t\t\t}\n  \t\t\t\t\tcatch(err) {\n  \t\t\t\t\t\talert(\"There was a problem setting up webGL programs, falling back to slightly slower javascript version. :(\");\n  \t\t\t\t\t\twebglFi = undefined;\n  \t\t\t\t\t\tsvmFi = new svmFilter();\n  \t\t\t\t\t\tsvmFi.init(weights['raw'], biases['raw'], numPatches, patchSize, searchWindow);\n  \t\t\t\t\t}\n  \t\t\t\t} else if (typeof(svmFilter) !== \"undefined\") {\n  \t\t\t\t\t// use fft convolution if no webGL is available\n  \t\t\t\t\tsvmFi = new svmFilter();\n  \t\t\t\t\tsvmFi.init(weights['raw'], biases['raw'], numPatches, patchSize, searchWindow);\n  \t\t\t\t} else {\n  \t\t\t\t\tthrow \"Could not initiate filters, please make sure that svmfilter.js or svmfilter_conv_js.js is loaded.\"\n  \t\t\t\t}\n  \t\t\t} else if (patchType == \"MOSSE\") {\n  \t\t\t\tmosseCalc = new mosseFilterResponses();\n  \t\t\t\tmosseCalc.init(weights, numPatches, patchSize, patchSize);\n  \t\t\t}\n\n  \t\t\tif (patchType == \"SVM\") {\n  \t\t\t\tpw = pl = patchSize+searchWindow-1;\n  \t\t\t} else {\n  \t\t\t\tpw = pl = searchWindow;\n  \t\t\t}\n  \t\t\tpdataLength = pw*pl;\n  \t\t\thalfSearchWindow = (searchWindow-1)/2;\n  \t\t\tresponsePixels = searchWindow*searchWindow;\n  \t\t\tif(typeof Float64Array !== 'undefined') {\n  \t\t\t\tvecProbs = new Float64Array(responsePixels);\n  \t\t\t\tfor (var i = 0;i < numPatches;i++) {\n  \t\t\t\t\tpatches[i] = new Float64Array(pdataLength);\n  \t\t\t\t}\n  \t\t\t} else {\n  \t\t\t\tvecProbs = new Array(responsePixels);\n  \t\t\t\tfor (var i = 0;i < numPatches;i++) {\n  \t\t\t\t\tpatches[i] = new Array(pdataLength);\n  \t\t\t\t}\n  \t\t\t}\n\n  \t\t\tfor (var i = 0;i < numPatches;i++) {\n  \t\t\t\tlearningRate[i] = 1.0;\n  \t\t\t\tprevCostFunc[i] = 0.0;\n  \t\t\t}\n\n  \t\t\tif (params.weightPoints) {\n  \t\t\t\t// weighting of points\n  \t\t\t\tpointWeights = [];\n  \t\t\t\tfor (var i = 0;i < numPatches;i++) {\n  \t\t\t\t\tif (i in params.weightPoints) {\n  \t\t\t\t\t\tpointWeights[(i*2)] = params.weightPoints[i];\n  \t\t\t\t\t\tpointWeights[(i*2)+1] = params.weightPoints[i];\n  \t\t\t\t\t} else {\n  \t\t\t\t\t\tpointWeights[(i*2)] = 1;\n  \t\t\t\t\t\tpointWeights[(i*2)+1] = 1;\n  \t\t\t\t\t}\n  \t\t\t\t}\n  \t\t\t\tpointWeights = numeric.diag(pointWeights);\n  \t\t\t}\n  \t\t}\n\n  \t\t/*\n  \t\t *\tstarts the tracker to run on a regular interval\n  \t\t */\n  \t\tthis.start = function(element, box) {\n  \t\t\t// check if model is initalized, else return false\n  \t\t\tif (typeof(model) === \"undefined\") {\n  \t\t\t\tconsole.log(\"tracker needs to be initalized before starting to track.\");\n  \t\t\t\treturn false;\n  \t\t\t}\n  \t\t\t//check if a runnerelement already exists, if not, use passed parameters\n  \t\t\tif (typeof(runnerElement) === \"undefined\") {\n  \t\t\t\trunnerElement = element;\n  \t\t\t\trunnerBox = box;\n  \t\t\t}\n  \t\t\t// setup the jsfeat face tracker with the element\n  \t\t\tjf = new jsfeat_face(element, params.faceDetection.workSize, params.useWebWorkers);\n  \t\t\t// start named timeout function\n  \t\t\trunnerTimeout = requestAnimFrame(runnerFunction);\n  \t\t}\n\n  \t\t/*\n  \t\t *\tstop the running tracker\n  \t\t */\n  \t\tthis.stop = function() {\n  \t\t\t// stop the running tracker if any exists\n  \t\t\tcancelRequestAnimFrame(runnerTimeout);\n  \t\t}\n\n  \t\tvar detectionCallback = function(element, box, result) {\n  \t\t\tfaceDetectionResult = result;\n  \t\t\tthis.track(element, box);\n  \t\t}\n\n  \t\t/*\n  \t\t *  element : canvas or video element\n  \t\t *  TODO: should be able to take img element as well\n  \t\t */\n  \t\tthis.track = function(element, box) {\n  \t\t\tvar evt = document.createEvent(\"Event\");\n  \t\t\tevt.initEvent(\"clmtrackrBeforeTrack\", true, true);\n  \t\t\tdocument.dispatchEvent(evt)\n\n  \t\t\tvar scaling, translateX, translateY, rotation;\n  \t\t\tvar croppedPatches = [];\n  \t\t\tvar ptch, px, py;\n\n  \t\t\tif (first) {\n  \t\t\t\tif (params.useWebWorkers) {\n  \t\t\t\t\tif (!detectingFace) {\n  \t\t\t\t\t\tdetectingFace = true;\n  \t\t\t\t\t\tgetInitialPosition(element, box, detectionCallback.bind(this));\n  \t\t\t\t\t\treturn;\n  \t\t\t\t\t} else {\n  \t\t\t\t\t\t// check if we've received results\n  \t\t\t\t\t\tif (faceDetectionResult !== undefined) {\n  \t\t\t\t\t\t\tdetectingFace = false;\n  \t\t\t\t\t\t} else {\n  \t\t\t\t\t\t\t// still waiting for results\n  \t\t\t\t\t\t\treturn;\n  \t\t\t\t\t\t}\n  \t\t\t\t\t}\n  \t\t\t\t} else {\n  \t\t\t\t\tfaceDetectionResult = getInitialPosition(element, box);\n  \t\t\t\t}\n\n  \t\t\t\tif (!faceDetectionResult) {\n  \t\t\t\t\t// send an event on no face found\n  \t\t\t\t\tvar evt = document.createEvent(\"Event\");\n  \t\t\t\t\tevt.initEvent(\"clmtrackrNotFound\", true, true);\n  \t\t\t\t\tdocument.dispatchEvent(evt);\n\n  \t\t\t\t\tfaceDetectionResult = undefined\n  \t\t\t\t\treturn false;\n  \t\t\t\t}\n\n  \t\t\t\tscaling = faceDetectionResult[0];\n  \t\t\t\trotation = faceDetectionResult[1];\n  \t\t\t\ttranslateX = faceDetectionResult[2];\n  \t\t\t\ttranslateY = faceDetectionResult[3];\n  \t\t\t\tfaceDetectionResult = undefined;\n\n  \t\t\t\tfirst = false;\n  \t\t\t} else {\n  \t\t\t\tfacecheck_count += 1;\n\n  \t\t\t\tif (params.constantVelocity) {\n  \t\t\t\t\t// calculate where to get patches via constant velocity prediction\n  \t\t\t\t\tif (previousParameters.length >= 2) {\n  \t\t\t\t\t\tfor (var i = 0;i < currentParameters.length;i++) {\n  \t\t\t\t\t\t\tcurrentParameters[i] = (relaxation)*previousParameters[1][i] + (1-relaxation)*((2*previousParameters[1][i]) - previousParameters[0][i]);\n  \t\t\t\t\t\t\t//currentParameters[i] = (3*previousParameters[2][i]) - (3*previousParameters[1][i]) + previousParameters[0][i];\n  \t\t\t\t\t\t}\n  \t\t\t\t\t}\n  \t\t\t\t}\n\n  \t\t\t\t// change translation, rotation and scale parameters\n  \t\t\t\trotation = halfPI - Math.atan((currentParameters[0]+1)/currentParameters[1]);\n  \t\t\t\tif (rotation > halfPI) {\n  \t\t\t\t\trotation -= Math.PI;\n  \t\t\t\t}\n  \t\t\t\tscaling = currentParameters[1] / Math.sin(rotation);\n  \t\t\t\ttranslateX = currentParameters[2];\n  \t\t\t\ttranslateY = currentParameters[3];\n  \t\t\t}\n\n  \t\t\t// copy canvas to a new dirty canvas\n  \t\t\tsketchCC.save();\n\n  \t\t\t// clear canvas\n  \t\t\tsketchCC.clearRect(0, 0, sketchW, sketchH);\n\n  \t\t\tsketchCC.scale(1/scaling, 1/scaling);\n  \t\t\tsketchCC.rotate(-rotation);\n  \t\t\tsketchCC.translate(-translateX, -translateY);\n\n  \t\t\tsketchCC.drawImage(element, 0, 0, element.width, element.height);\n\n  \t\t\tsketchCC.restore();\n  \t\t\t//\tget cropped images around new points based on model parameters (not scaled and translated)\n  \t\t\tvar patchPositions = calculatePositions(currentParameters, false);\n\n  \t\t\t// check whether tracking is ok\n  \t\t\tif (scoringWeights && (facecheck_count % 10 == 0)) {\n  \t\t\t\tif (!checkTracking()) {\n  \t\t\t\t\t// reset all parameters\n  \t\t\t\t\tfirst = true;\n  \t\t\t\t\tscoringHistory = [];\n  \t\t\t\t\tfor (var i = 0;i < currentParameters.length;i++) {\n  \t\t\t\t\t\tcurrentParameters[i] = 0;\n  \t\t\t\t\t\tpreviousParameters = [];\n  \t\t\t\t\t}\n\n  \t\t\t\t\t// send event to signal that tracking was lost\n  \t\t\t\t\tvar evt = document.createEvent(\"Event\");\n  \t\t\t\t\tevt.initEvent(\"clmtrackrLost\", true, true);\n  \t\t\t\t\tdocument.dispatchEvent(evt);\n\n  \t\t\t\t\treturn false;\n  \t\t\t\t}\n  \t\t\t}\n\n\n  \t\t\tvar pdata, pmatrix, grayscaleColor;\n  \t\t\tfor (var i = 0; i < numPatches; i++) {\n  \t\t\t\tpx = patchPositions[i][0]-(pw/2);\n  \t\t\t\tpy = patchPositions[i][1]-(pl/2);\n  \t\t\t\tptch = sketchCC.getImageData(Math.round(px), Math.round(py), pw, pl);\n  \t\t\t\tpdata = ptch.data;\n\n  \t\t\t\t// convert to grayscale\n  \t\t\t\tpmatrix = patches[i];\n  \t\t\t\tfor (var j = 0;j < pdataLength;j++) {\n  \t\t\t\t\tgrayscaleColor = pdata[j*4]*0.3 + pdata[(j*4)+1]*0.59 + pdata[(j*4)+2]*0.11;\n  \t\t\t\t\tpmatrix[j] = grayscaleColor;\n  \t\t\t\t}\n  \t\t\t}\n\n  \t\t\t/*print weights*/\n  \t\t\t/*sketchCC.clearRect(0, 0, sketchW, sketchH);\n  \t\t\tvar nuWeights;\n  \t\t\tfor (var i = 0;i < numPatches;i++) {\n  \t\t\t\tnuWeights = weights[i].map(function(x) {return x*2000+127;});\n  \t\t\t\tdrawData(sketchCC, nuWeights, patchSize, patchSize, false, patchPositions[i][0]-(patchSize/2), patchPositions[i][1]-(patchSize/2));\n  \t\t\t}*/\n\n  \t\t\t// print patches\n  \t\t\t/*sketchCC.clearRect(0, 0, sketchW, sketchH);\n  \t\t\tfor (var i = 0;i < numPatches;i++) {\n  \t\t\t\tif ([27,32,44,50].indexOf(i) > -1) {\n  \t\t\t\t\tdrawData(sketchCC, patches[i], pw, pl, false, patchPositions[i][0]-(pw/2), patchPositions[i][1]-(pl/2));\n  \t\t\t\t}\n  \t\t\t}*/\n  \t\t\tif (patchType == \"SVM\") {\n  \t\t\t\tif (typeof(webglFi) !== \"undefined\") {\n  \t\t\t\t\tresponses = getWebGLResponses(patches);\n  \t\t\t\t} else if (typeof(svmFi) !== \"undefined\"){\n  \t\t\t\t\tresponses = svmFi.getResponses(patches);\n  \t\t\t\t} else {\n  \t\t\t\t\tthrow \"SVM-filters do not seem to be initiated properly.\"\n  \t\t\t\t}\n  \t\t\t} else if (patchType == \"MOSSE\") {\n  \t\t\t\tresponses = mosseCalc.getResponses(patches);\n  \t\t\t}\n\n  \t\t\t// option to increase sharpness of responses\n  \t\t\tif (params.sharpenResponse) {\n  \t\t\t\tfor (var i = 0;i < numPatches;i++) {\n  \t\t\t\t\tfor (var j = 0;j < responses[i].length;j++) {\n  \t\t\t\t\t\tresponses[i][j] = Math.pow(responses[i][j], params.sharpenResponse);\n  \t\t\t\t\t}\n  \t\t\t\t}\n  \t\t\t}\n\n  \t\t\t// print responses\n  \t\t\t/*sketchCC.clearRect(0, 0, sketchW, sketchH);\n  \t\t\tvar nuWeights;\n  \t\t\tfor (var i = 0;i < numPatches;i++) {\n\n  \t\t\t\tnuWeights = [];\n  \t\t\t\tfor (var j = 0;j < responses[i].length;j++) {\n  \t\t\t\t\tnuWeights.push(responses[i][j]*255);\n  \t\t\t\t}\n\n  \t\t\t\t//if ([27,32,44,50].indexOf(i) > -1) {\n  \t\t\t\t//\tdrawData(sketchCC, nuWeights, searchWindow, searchWindow, false, patchPositions[i][0]-((searchWindow-1)/2), patchPositions[i][1]-((searchWindow-1)/2));\n  \t\t\t\t//}\n  \t\t\t\tdrawData(sketchCC, nuWeights, searchWindow, searchWindow, false, patchPositions[i][0]-((searchWindow-1)/2), patchPositions[i][1]-((searchWindow-1)/2));\n  \t\t\t}*/\n\n  \t\t\t// iterate until convergence or max 10, 20 iterations?:\n  \t\t\tvar originalPositions = currentPositions;\n  \t\t\tvar jac;\n  \t\t\tvar meanshiftVectors = [];\n\n  \t\t\tfor (var i = 0; i < varianceSeq.length; i++) {\n\n  \t\t\t\t// calculate jacobian\n  \t\t\t\tjac = createJacobian(currentParameters, eigenVectors);\n\n  \t\t\t\t// for debugging\n  \t\t\t\t//var debugMVs = [];\n  \t\t\t\t//\n\n  \t\t\t\tvar opj0, opj1;\n\n  \t\t\t\tfor (var j = 0;j < numPatches;j++) {\n  \t\t\t\t\topj0 = originalPositions[j][0]-((searchWindow-1)*scaling/2);\n  \t\t\t\t\topj1 = originalPositions[j][1]-((searchWindow-1)*scaling/2);\n\n  \t\t\t\t\t// calculate PI x gaussians\n  \t\t\t\t\tvar vpsum = gpopt(searchWindow, currentPositions[j], updatePosition, vecProbs, responses, opj0, opj1, j, varianceSeq[i], scaling);\n\n  \t\t\t\t\t// calculate meanshift-vector\n  \t\t\t\t\tgpopt2(searchWindow, vecpos, updatePosition, vecProbs, vpsum, opj0, opj1, scaling);\n\n  \t\t\t\t\t// for debugging\n  \t\t\t\t\t//var debugMatrixMV = gpopt2(searchWindow, vecpos, updatePosition, vecProbs, vpsum, opj0, opj1);\n\n  \t\t\t\t\t// evaluate here whether to increase/decrease stepSize\n  \t\t\t\t\t/*if (vpsum >= prevCostFunc[j]) {\n  \t\t\t\t\t\tlearningRate[j] *= stepParameter;\n  \t\t\t\t\t} else {\n  \t\t\t\t\t\tlearningRate[j] = 1.0;\n  \t\t\t\t\t}\n  \t\t\t\t\tprevCostFunc[j] = vpsum;*/\n\n  \t\t\t\t\t// compute mean shift vectors\n  \t\t\t\t\t// extrapolate meanshiftvectors\n  \t\t\t\t\t/*var msv = [];\n  \t\t\t\t\tmsv[0] = learningRate[j]*(vecpos[0] - currentPositions[j][0]);\n  \t\t\t\t\tmsv[1] = learningRate[j]*(vecpos[1] - currentPositions[j][1]);\n  \t\t\t\t\tmeanshiftVectors[j] = msv;*/\n  \t\t\t\t\tmeanshiftVectors[j] = [vecpos[0] - currentPositions[j][0], vecpos[1] - currentPositions[j][1]];\n\n  \t\t\t\t\t//if (isNaN(msv[0]) || isNaN(msv[1])) debugger;\n\n  \t\t\t\t\t//for debugging\n  \t\t\t\t\t//debugMVs[j] = debugMatrixMV;\n  \t\t\t\t\t//\n  \t\t\t\t}\n\n  \t\t\t\t// draw meanshiftVector\n  \t\t\t\t/*sketchCC.clearRect(0, 0, sketchW, sketchH);\n  \t\t\t\tvar nuWeights;\n  \t\t\t\tfor (var npidx = 0;npidx < numPatches;npidx++) {\n  \t\t\t\t\tnuWeights = debugMVs[npidx].map(function(x) {return x*255*500;});\n  \t\t\t\t\tdrawData(sketchCC, nuWeights, searchWindow, searchWindow, false, patchPositions[npidx][0]-((searchWindow-1)/2), patchPositions[npidx][1]-((searchWindow-1)/2));\n  \t\t\t\t}*/\n\n  \t\t\t\tvar meanShiftVector = numeric.rep([numPatches*2, 1],0.0);\n  \t\t\t\tfor (var k = 0;k < numPatches;k++) {\n  \t\t\t\t\tmeanShiftVector[k*2][0] = meanshiftVectors[k][0];\n  \t\t\t\t\tmeanShiftVector[(k*2)+1][0] = meanshiftVectors[k][1];\n  \t\t\t\t}\n\n  \t\t\t\t// compute pdm parameter update\n  \t\t\t\t//var prior = numeric.mul(gaussianPD, PDMVariance);\n  \t\t\t\tvar prior = numeric.mul(gaussianPD, varianceSeq[i]);\n  \t\t\t\tif (params.weightPoints) {\n  \t\t\t\t\tvar jtj = numeric.dot(numeric.transpose(jac), numeric.dot(pointWeights, jac));\n  \t\t\t\t} else {\n  \t\t\t\t\tvar jtj = numeric.dot(numeric.transpose(jac), jac);\n  \t\t\t\t}\n  \t\t\t\tvar cpMatrix = numeric.rep([numParameters+4, 1],0.0);\n  \t\t\t\tfor (var l = 0;l < (numParameters+4);l++) {\n  \t\t\t\t\tcpMatrix[l][0] = currentParameters[l];\n  \t\t\t\t}\n  \t\t\t\tvar priorP = numeric.dot(prior, cpMatrix);\n  \t\t\t\tif (params.weightPoints) {\n  \t\t\t\t\tvar jtv = numeric.dot(numeric.transpose(jac), numeric.dot(pointWeights, meanShiftVector));\n  \t\t\t\t} else {\n  \t\t\t\t\tvar jtv = numeric.dot(numeric.transpose(jac), meanShiftVector);\n  \t\t\t\t}\n  \t\t\t\tvar paramUpdateLeft = numeric.add(prior, jtj);\n  \t\t\t\tvar paramUpdateRight = numeric.sub(priorP, jtv);\n\n  \t\t\t\tvar paramUpdate = numeric.dot(numeric.inv(paramUpdateLeft), paramUpdateRight);\n  \t\t\t\t//var paramUpdate = numeric.solve(paramUpdateLeft, paramUpdateRight, true);\n\n  \t\t\t\tvar oldPositions = currentPositions;\n\n  \t\t\t\t// update estimated parameters\n  \t\t\t\tfor (var k = 0;k < numParameters+4;k++) {\n  \t\t\t\t\tcurrentParameters[k] -= paramUpdate[k];\n  \t\t\t\t}\n\n  \t\t\t\t// clipping of parameters if they're too high\n  \t\t\t\tvar clip;\n  \t\t\t\tfor (var k = 0;k < numParameters;k++) {\n  \t\t\t\t\tclip = Math.abs(3*Math.sqrt(eigenValues[k]));\n  \t\t\t\t\tif (Math.abs(currentParameters[k+4]) > clip) {\n  \t\t\t\t\t\tif (currentParameters[k+4] > 0) {\n  \t\t\t\t\t\t\tcurrentParameters[k+4] = clip;\n  \t\t\t\t\t\t} else {\n  \t\t\t\t\t\t\tcurrentParameters[k+4] = -clip;\n  \t\t\t\t\t\t}\n  \t\t\t\t\t}\n\n  \t\t\t\t}\n\n  \t\t\t\t// update current coordinates\n  \t\t\t\tcurrentPositions = calculatePositions(currentParameters, true);\n\n  \t\t\t\t// check if converged\n  \t\t\t\t// calculate norm of parameterdifference\n  \t\t\t\tvar positionNorm = 0;\n  \t\t\t\tvar pnsq_x, pnsq_y;\n  \t\t\t\tfor (var k = 0;k < currentPositions.length;k++) {\n  \t\t\t\t\tpnsq_x = (currentPositions[k][0]-oldPositions[k][0]);\n  \t\t\t\t\tpnsq_y = (currentPositions[k][1]-oldPositions[k][1]);\n  \t\t\t\t\tpositionNorm += ((pnsq_x*pnsq_x) + (pnsq_y*pnsq_y));\n  \t\t\t\t}\n  \t\t\t\t//console.log(\"positionnorm:\"+positionNorm);\n\n  \t\t\t\t// if norm < limit, then break\n  \t\t\t\tif (positionNorm < convergenceLimit) {\n  \t\t\t\t\tbreak;\n  \t\t\t\t}\n\n  \t\t\t}\n\n  \t\t\tif (params.constantVelocity) {\n  \t\t\t\t// add current parameter to array of previous parameters\n  \t\t\t\tpreviousParameters.push(currentParameters.slice());\n  \t\t\t\tpreviousParameters.splice(0, previousParameters.length == 3 ? 1 : 0);\n  \t\t\t}\n\n  \t\t\t// store positions, for checking convergence\n  \t\t\tpreviousPositions.splice(0, previousPositions.length == 10 ? 1 : 0);\n  \t\t\tpreviousPositions.push(currentPositions.slice(0));\n\n  \t\t\t// send an event on each iteration\n  \t\t\tvar evt = document.createEvent(\"Event\");\n  \t\t\tevt.initEvent(\"clmtrackrIteration\", true, true);\n  \t\t\tdocument.dispatchEvent(evt)\n\n  \t\t\tif (this.getConvergence() < 0.5) {\n  \t\t\t\t// we must get a score before we can say we've converged\n  \t\t\t\tif (scoringHistory.length >= 5) {\n  \t\t\t\t\tif (params.stopOnConvergence) {\n  \t\t\t\t\t\tthis.stop();\n  \t\t\t\t\t}\n\n  \t\t\t\t\tvar evt = document.createEvent(\"Event\");\n  \t\t\t\t\tevt.initEvent(\"clmtrackrConverged\", true, true);\n  \t\t\t\t\tdocument.dispatchEvent(evt)\n  \t\t\t\t}\n  \t\t\t}\n\n  \t\t\t// return new points\n  \t\t\treturn currentPositions;\n  \t\t}\n\n  \t\t/*\n  \t\t *\treset tracking, so that track() will start a new detection\n  \t\t */\n  \t\tthis.reset = function() {\n  \t\t\tfirst = true;\n  \t\t\tscoringHistory = [];\n  \t\t\tfor (var i = 0;i < currentParameters.length;i++) {\n  \t\t\t\tcurrentParameters[i] = 0;\n  \t\t\t\tpreviousParameters = [];\n  \t\t\t}\n  \t\t\trunnerElement = undefined;\n  \t\t\trunnerBox = undefined;\n  \t\t}\n\n  \t\t/*\n  \t\t *\tdraw model on given canvas\n  \t\t */\n  \t\tthis.draw = function(canvas, pv, path) {\n  \t\t\t// if no previous points, just draw in the middle of canvas\n\n  \t\t\tvar params;\n  \t\t\tif (pv === undefined) {\n  \t\t\t\tparams = currentParameters.slice(0);\n  \t\t\t} else {\n  \t\t\t\tparams = pv.slice(0);\n  \t\t\t}\n\n  \t\t\tvar cc = canvas.getContext('2d');\n  \t\t\tcc.fillStyle = \"rgb(200,200,200)\";\n  \t\t\tcc.strokeStyle = \"rgb(130,255,50)\";\n  \t\t\t//cc.lineWidth = 1;\n\n  \t\t\tvar paths;\n  \t\t\tif (path === undefined) {\n  \t\t\t\tpaths = model.path.normal;\n  \t\t\t} else {\n  \t\t\t\tpaths = model.path[path];\n  \t\t\t}\n\n  \t\t\tfor (var i = 0;i < paths.length;i++) {\n  \t\t\t\tif (typeof(paths[i]) == 'number') {\n  \t\t\t\t\tdrawPoint(cc, paths[i], params);\n  \t\t\t\t} else {\n  \t\t\t\t\tdrawPath(cc, paths[i], params);\n  \t\t\t\t}\n  \t\t\t}\n  \t\t}\n\n  \t\t/*\n  \t\t * \tget the score of the current model fit\n  \t\t *\t(based on svm of face according to current model)\n  \t\t */\n  \t\tthis.getScore = function() {\n  \t\t\treturn meanscore;\n  \t\t}\n\n  \t\t/*\n  \t\t *\tcalculate positions based on parameters\n  \t\t */\n  \t\tthis.calculatePositions = function(parameters) {\n  \t\t\treturn calculatePositions(parameters, true);\n  \t\t}\n\n  \t\t/*\n  \t\t *\tget coordinates of current model fit\n  \t\t */\n  \t\tthis.getCurrentPosition = function() {\n  \t\t\tif (first) {\n  \t\t\t\treturn false;\n  \t\t\t} else {\n  \t\t\t\treturn currentPositions;\n  \t\t\t}\n  \t\t}\n\n  \t\t/*\n  \t\t *\tget parameters of current model fit\n  \t\t */\n  \t\tthis.getCurrentParameters = function() {\n  \t\t\treturn currentParameters;\n  \t\t}\n\n  \t\t/*\n  \t\t *\tGet the average of recent model movements\n  \t\t *\tUsed for checking whether model fit has converged\n  \t\t */\n  \t\tthis.getConvergence = function() {\n  \t\t\tif (previousPositions.length < 10) return 999999;\n\n  \t\t\tvar prevX = 0.0;\n  \t\t\tvar prevY = 0.0;\n  \t\t\tvar currX = 0.0;\n  \t\t\tvar currY = 0.0;\n\n  \t\t\t// average 5 previous positions\n  \t\t\tfor (var i = 0;i < 5;i++) {\n  \t\t\t\tfor (var j = 0;j < numPatches;j++) {\n  \t\t\t\t\tprevX += previousPositions[i][j][0];\n  \t\t\t\t\tprevY += previousPositions[i][j][1];\n  \t\t\t\t}\n  \t\t\t}\n  \t\t\tprevX /= 5;\n  \t\t\tprevY /= 5;\n\n  \t\t\t// average 5 positions before that\n  \t\t\tfor (var i = 5;i < 10;i++) {\n  \t\t\t\tfor (var j = 0;j < numPatches;j++) {\n  \t\t\t\t\tcurrX += previousPositions[i][j][0];\n  \t\t\t\t\tcurrY += previousPositions[i][j][1];\n  \t\t\t\t}\n  \t\t\t}\n  \t\t\tcurrX /= 5;\n  \t\t\tcurrY /= 5;\n\n  \t\t\t// calculate difference\n  \t\t\tvar diffX = currX-prevX;\n  \t\t\tvar diffY = currY-prevY;\n  \t\t\tvar msavg = ((diffX*diffX) + (diffY*diffY));\n  \t\t\tmsavg /= previousPositions.length\n  \t\t\treturn msavg;\n  \t\t}\n\n  \t\t/*\n  \t\t * Set response mode (only useful if webGL is available)\n  \t\t * mode : either \"single\", \"blend\" or \"cycle\"\n  \t\t * list : array of values \"raw\", \"sobel\", \"lbp\"\n  \t\t */\n  \t\tthis.setResponseMode = function(mode, list) {\n  \t\t\t// clmtrackr must be initialized with model first\n  \t\t\tif (typeof(model) === \"undefined\") {\n  \t\t\t\tconsole.log(\"Clmtrackr has not been initialized with a model yet. No changes made.\");\n  \t\t\t\treturn;\n  \t\t\t}\n  \t\t\t// must check whether webGL or not\n  \t\t\tif (typeof(webglFi) === \"undefined\") {\n  \t\t\t\tconsole.log(\"Responsemodes are only allowed when using webGL. In pure JS, only 'raw' mode is available.\");\n  \t\t\t\treturn;\n  \t\t\t}\n  \t\t\tif (['single', 'blend', 'cycle'].indexOf(mode) < 0) {\n  \t\t\t\tconsole.log(\"Tried to set an unknown responsemode : '\"+mode+\"'. No changes made.\");\n  \t\t\t\treturn;\n  \t\t\t}\n  \t\t\tif (!(list instanceof Array)) {\n  \t\t\t\tconsole.log(\"List in setResponseMode must be an array of strings! No changes made.\");\n  \t\t\t\treturn;\n  \t\t\t} else {\n  \t\t\t\tfor (var i = 0;i < list.length;i++) {\n  \t\t\t\t\tif (['raw', 'sobel', 'lbp'].indexOf(list[i]) < 0) {\n  \t\t\t\t\t\tconsole.log(\"Unknown element in responsemode list : '\"+list[i]+\"'. No changes made.\");\n  \t\t\t\t\t}\n  \t\t\t\t\t// check whether filters are initialized\n  \t\t\t\t\tif (list[i] == 'sobel' && sobelInit == false) {\n  \t\t\t\t\t\tconsole.log(\"The sobel filters have not been initialized! No changes made.\");\n  \t\t\t\t\t}\n  \t\t\t\t\tif (list[i] == 'lbp' && lbpInit == false) {\n  \t\t\t\t\t\tconsole.log(\"The LBP filters have not been initialized! No changes made.\");\n  \t\t\t\t\t}\n  \t\t\t\t}\n  \t\t\t}\n  \t\t\t// reset index\n  \t\t\tresponseIndex = 0;\n  \t\t\tresponseMode = mode;\n  \t\t\tresponseList = list;\n  \t\t}\n\n  \t\tvar runnerFunction = function() {\n  \t\t\trunnerTimeout = requestAnimFrame(runnerFunction);\n  \t\t\t// schedule as many iterations as we can during each request\n  \t\t\tvar startTime = (new Date()).getTime();\n  \t\t\twhile (((new Date()).getTime() - startTime) < 16) {\n  \t\t\t\tvar tracking = this.track(runnerElement, runnerBox);\n  \t\t\t\tif (!tracking) break;\n  \t\t\t}\n  \t\t}.bind(this);\n\n  \t\tvar getWebGLResponsesType = function(type, patches) {\n  \t\t\tif (type == 'lbp') {\n  \t\t\t\treturn webglFi.getLBPResponses(patches);\n  \t\t\t} else if (type == 'raw') {\n  \t\t\t\treturn webglFi.getRawResponses(patches);\n  \t\t\t} else if (type == 'sobel') {\n  \t\t\t\treturn webglFi.getSobelResponses(patches);\n  \t\t\t}\n  \t\t}\n\n  \t\tvar getWebGLResponses = function(patches) {\n  \t\t\tif (responseMode == 'single') {\n  \t\t\t\treturn getWebGLResponsesType(responseList[0], patches);\n  \t\t\t} else if (responseMode == 'cycle') {\n  \t\t\t\tvar response = getWebGLResponsesType(responseList[responseIndex], patches);\n  \t\t\t\tresponseIndex++;\n  \t\t\t\tif (responseIndex >= responseList.length) responseIndex = 0;\n  \t\t\t\treturn response;\n  \t\t\t} else {\n  \t\t\t\t// blend\n  \t\t\t\tvar responses = [];\n  \t\t\t\tfor (var i = 0;i < responseList.length;i++) {\n  \t\t\t\t\tresponses[i] = getWebGLResponsesType(responseList[i], patches);\n  \t\t\t\t}\n  \t\t\t\tvar blendedResponses = [];\n  \t\t\t\tfor (var i = 0;i < numPatches;i++) {\n  \t\t\t\t\tvar response = Array(searchWindow*searchWindow);\n  \t\t\t\t\tfor (var k = 0;k < searchWindow*searchWindow;k++) response[k] = 0;\n  \t\t\t\t\tfor (var j = 0;j < responseList.length;j++) {\n  \t\t\t\t\t\tfor (var k = 0;k < searchWindow*searchWindow;k++) {\n  \t\t\t\t\t\t\tresponse[k] += (responses[j][i][k]/responseList.length);\n  \t\t\t\t\t\t}\n  \t\t\t\t\t}\n  \t\t\t\t\tblendedResponses[i] = response;\n  \t\t\t\t}\n  \t\t\t\treturn blendedResponses;\n  \t\t\t}\n  \t\t}\n\n  \t\t// generates the jacobian matrix used for optimization calculations\n  \t\tvar createJacobian = function(parameters, eigenVectors) {\n\n  \t\t\tvar jacobian = numeric.rep([2*numPatches, numParameters+4],0.0);\n  \t\t\tvar j0,j1;\n  \t\t\tfor (var i = 0;i < numPatches;i ++) {\n  \t\t\t\t// 1\n  \t\t\t\tj0 = meanShape[i][0];\n  \t\t\t\tj1 = meanShape[i][1];\n  \t\t\t\tfor (var p = 0;p < numParameters;p++) {\n  \t\t\t\t\tj0 += parameters[p+4]*eigenVectors[i*2][p];\n  \t\t\t\t\tj1 += parameters[p+4]*eigenVectors[(i*2)+1][p];\n  \t\t\t\t}\n  \t\t\t\tjacobian[i*2][0] = j0;\n  \t\t\t\tjacobian[(i*2)+1][0] = j1;\n  \t\t\t\t// 2\n  \t\t\t\tj0 = meanShape[i][1];\n  \t\t\t\tj1 = meanShape[i][0];\n  \t\t\t\tfor (var p = 0;p < numParameters;p++) {\n  \t\t\t\t\tj0 += parameters[p+4]*eigenVectors[(i*2)+1][p];\n  \t\t\t\t\tj1 += parameters[p+4]*eigenVectors[i*2][p];\n  \t\t\t\t}\n  \t\t\t\tjacobian[i*2][1] = -j0;\n  \t\t\t\tjacobian[(i*2)+1][1] = j1;\n  \t\t\t\t// 3\n  \t\t\t\tjacobian[i*2][2] = 1;\n  \t\t\t\tjacobian[(i*2)+1][2] = 0;\n  \t\t\t\t// 4\n  \t\t\t\tjacobian[i*2][3] = 0;\n  \t\t\t\tjacobian[(i*2)+1][3] = 1;\n  \t\t\t\t// the rest\n  \t\t\t\tfor (var j = 0;j < numParameters;j++) {\n  \t\t\t\t\tj0 = parameters[0]*eigenVectors[i*2][j] - parameters[1]*eigenVectors[(i*2)+1][j] + eigenVectors[i*2][j];\n  \t\t\t\t\tj1 = parameters[0]*eigenVectors[(i*2)+1][j] + parameters[1]*eigenVectors[i*2][j] + eigenVectors[(i*2)+1][j];\n  \t\t\t\t\tjacobian[i*2][j+4] = j0;\n  \t\t\t\t\tjacobian[(i*2)+1][j+4] = j1;\n  \t\t\t\t}\n  \t\t\t}\n\n  \t\t\treturn jacobian;\n  \t\t}\n\n  \t\t// calculate positions from parameters\n  \t\tvar calculatePositions = function(parameters, useTransforms) {\n  \t\t\tvar x, y, a, b;\n  \t\t\tvar numParameters = parameters.length;\n  \t\t\tvar positions = [];\n  \t\t\tfor (var i = 0;i < numPatches;i++) {\n  \t\t\t\tx = meanShape[i][0];\n  \t\t\t\ty = meanShape[i][1];\n  \t\t\t\tfor (var j = 0;j < numParameters-4;j++) {\n  \t\t\t\t\tx += model.shapeModel.eigenVectors[(i*2)][j]*parameters[j+4];\n  \t\t\t\t\ty += model.shapeModel.eigenVectors[(i*2)+1][j]*parameters[j+4];\n  \t\t\t\t}\n  \t\t\t\tif (useTransforms) {\n  \t\t\t\t\ta = parameters[0]*x - parameters[1]*y + parameters[2];\n  \t\t\t\t\tb = parameters[0]*y + parameters[1]*x + parameters[3];\n  \t\t\t\t\tx += a;\n  \t\t\t\t\ty += b;\n  \t\t\t\t}\n  \t\t\t\tpositions[i] = [x,y];\n  \t\t\t}\n\n  \t\t\treturn positions;\n  \t\t}\n\n  \t\t// detect position of face on canvas/video element\n  \t\tvar detectPosition = function(el, callback) {\n  \t\t\tif (callback) {\n  \t\t\t\tjf.faceDetected = function (e, callback) {\n  \t\t\t\t\tcandidate = e.data.comp;\n\n  \t\t\t\t\tif (candidate) {\n  \t\t\t\t\t\tcallback(candidate);\n  \t\t\t\t\t} else {\n  \t\t\t\t\t\tcallback(false);\n  \t\t\t\t\t\treturn false;\n  \t\t\t\t\t}\n  \t\t\t\t}\n  \t\t\t\tvar comp = jf.findFace(params, callback);\n  \t\t\t} else {\n  \t\t\t\tcandidate = jf.findFace(params);\n  \t\t\t\tif (candidate) {\n  \t\t\t\t\treturn candidate\n  \t\t\t\t} else {\n  \t\t\t\t\treturn false;\n  \t\t\t\t}\n  \t\t\t}\n  \t\t}\n\n  \t\t// part one of meanshift calculation\n  \t\tvar gpopt = function(responseWidth, currentPositionsj, updatePosition, vecProbs, responses, opj0, opj1, j, variance, scaling) {\n  \t\t\tvar pos_idx = 0;\n  \t\t\tvar vpsum = 0;\n  \t\t\tvar dx, dy;\n  \t\t\tfor (var k = 0;k < responseWidth;k++) {\n  \t\t\t\tupdatePosition[1] = opj1+(k*scaling);\n  \t\t\t\tfor (var l = 0;l < responseWidth;l++) {\n  \t\t\t\t\tupdatePosition[0] = opj0+(l*scaling);\n\n  \t\t\t\t\tdx = currentPositionsj[0] - updatePosition[0];\n  \t\t\t\t\tdy = currentPositionsj[1] - updatePosition[1];\n  \t\t\t\t\tvecProbs[pos_idx] = responses[j][pos_idx] * Math.exp(-0.5*((dx*dx)+(dy*dy))/(variance*scaling));\n\n  \t\t\t\t\tvpsum += vecProbs[pos_idx];\n  \t\t\t\t\tpos_idx++;\n  \t\t\t\t}\n  \t\t\t}\n\n  \t\t\treturn vpsum;\n  \t\t}\n\n  \t\t// part two of meanshift calculation\n  \t\tvar gpopt2 = function(responseWidth, vecpos, updatePosition, vecProbs, vpsum, opj0, opj1, scaling) {\n  \t\t\t//for debugging\n  \t\t\t//var vecmatrix = [];\n\n  \t\t\tvar pos_idx = 0;\n  \t\t\tvar vecsum = 0;\n  \t\t\tvecpos[0] = 0;\n  \t\t\tvecpos[1] = 0;\n  \t\t\tfor (var k = 0;k < responseWidth;k++) {\n  \t\t\t\tupdatePosition[1] = opj1+(k*scaling);\n  \t\t\t\tfor (var l = 0;l < responseWidth;l++) {\n  \t\t\t\t\tupdatePosition[0] = opj0+(l*scaling);\n  \t\t\t\t\tvecsum = vecProbs[pos_idx]/vpsum;\n\n  \t\t\t\t\t//for debugging\n  \t\t\t\t\t//vecmatrix[k*responseWidth + l] = vecsum;\n\n  \t\t\t\t\tvecpos[0] += vecsum*updatePosition[0];\n  \t\t\t\t\tvecpos[1] += vecsum*updatePosition[1];\n  \t\t\t\t\tpos_idx++;\n  \t\t\t\t}\n  \t\t\t}\n  \t\t\t// for debugging\n  \t\t\t//return vecmatrix;\n  \t\t}\n\n  \t\t// calculate score of current fit\n  \t\tvar checkTracking = function() {\n  \t\t\tscoringContext.drawImage(sketchCanvas, Math.round(msxmin+(msmodelwidth/4.5)), Math.round(msymin-(msmodelheight/12)), Math.round(msmodelwidth-(msmodelwidth*2/4.5)), Math.round(msmodelheight-(msmodelheight/12)), 0, 0, 20, 22);\n  \t\t\t// getImageData of canvas\n  \t\t\tvar imgData = scoringContext.getImageData(0,0,20,22);\n  \t\t\t// convert data to grayscale\n  \t\t\tvar scoringData = new Array(20*22);\n  \t\t\tvar scdata = imgData.data;\n  \t\t\tvar scmax = 0;\n  \t\t\tfor (var i = 0;i < 20*22;i++) {\n  \t\t\t\tscoringData[i] = scdata[i*4]*0.3 + scdata[(i*4)+1]*0.59 + scdata[(i*4)+2]*0.11;\n  \t\t\t\tscoringData[i] = Math.log(scoringData[i]+1);\n  \t\t\t\tif (scoringData[i] > scmax) scmax = scoringData[i];\n  \t\t\t}\n\n  \t\t\tif (scmax > 0) {\n  \t\t\t\t// normalize & multiply by svmFilter\n  \t\t\t\tvar mean = 0;\n  \t\t\t\tfor (var i = 0;i < 20*22;i++) {\n  \t\t\t\t\tmean += scoringData[i];\n  \t\t\t\t}\n  \t\t\t\tmean /= (20*22);\n  \t\t\t\tvar sd = 0;\n  \t\t\t\tfor (var i = 0;i < 20*22;i++) {\n  \t\t\t\t\tsd += (scoringData[i]-mean)*(scoringData[i]-mean);\n  \t\t\t\t}\n  \t\t\t\tsd /= (20*22 - 1)\n  \t\t\t\tsd = Math.sqrt(sd);\n\n  \t\t\t\tvar score = 0;\n  \t\t\t\tfor (var i = 0;i < 20*22;i++) {\n  \t\t\t\t\tscoringData[i] = (scoringData[i]-mean)/sd;\n  \t\t\t\t\tscore += (scoringData[i])*scoringWeights[i];\n  \t\t\t\t}\n  \t\t\t\tscore += scoringBias;\n  \t\t\t\tscore = 1/(1+Math.exp(-score));\n\n  \t\t\t\tscoringHistory.splice(0, scoringHistory.length == 5 ? 1 : 0);\n  \t\t\t\tscoringHistory.push(score);\n\n  \t\t\t\tif (scoringHistory.length > 4) {\n  \t\t\t\t\t// get average\n  \t\t\t\t\tmeanscore = 0;\n  \t\t\t\t\tfor (var i = 0;i < 5;i++) {\n  \t\t\t\t\t\tmeanscore += scoringHistory[i];\n  \t\t\t\t\t}\n  \t\t\t\t\tmeanscore /= 5;\n  \t\t\t\t\t// if below threshold, then reset (return false)\n  \t\t\t\t\tif (meanscore < params.scoreThreshold) return false;\n  \t\t\t\t}\n  \t\t\t}\n  \t\t\treturn true;\n  \t\t}\n\n  \t\t// get initial starting point for model\n  \t\tvar getInitialPosition = function(element, box, callback, positionResult) {\n\n  \t\t\tvar translateX, translateY, scaling, rotation;\n  \t\t\tif (box) {\n  \t\t\t\tcandidate = {x : box[0], y : box[1], width : box[2], height : box[3]};\n  \t\t\t} else {\n  \t\t\t\tif (callback) {\n  \t\t\t\t\tif (!positionResult) {\n  \t\t\t\t\t\tdetectPosition(element, function (positionResult) {\n  \t\t\t\t\t\t\tif (!positionResult) {\n  \t\t\t\t\t\t\t\t// if no face found, stop.\n  \t\t\t\t\t\t\t\tcallback(element, box, false);\n  \t\t\t\t\t\t\t} else {\n  \t\t\t\t\t\t\t\tgetInitialPosition(element, box, callback, positionResult);\n  \t\t\t\t\t\t\t}\n  \t\t\t\t\t\t});\n  \t\t\t\t\t\treturn;\n  \t\t\t\t\t} else {\n  \t\t\t\t\t\tcandidate = positionResult[0];\n  \t\t\t\t\t}\n  \t\t\t\t} else {\n  \t\t\t\t\tcandidate = detectPosition(element);\n  \t\t\t\t\tif (!candidate) return false;\n  \t\t\t\t}\n  \t\t\t}\n\n  \t\t\tif (model.hints && mosseFilter && left_eye_filter && right_eye_filter && nose_filter) {\n  \t\t\t\tvar noseFilterWidth = candidate.width * 4.5/10;\n  \t\t\t\tvar eyeFilterWidth = candidate.width * 6/10;\n\n  \t\t\t\t// detect position of eyes and nose via mosse filter\n  \t\t\t\t//\n  \t\t\t\t/*element.pause();\n\n  \t\t\t\tvar canvasContext = document.getElementById('overlay2').getContext('2d')\n  \t\t\t\tcanvasContext.clearRect(0,0,500,375);\n  \t\t\t\tcanvasContext.strokeRect(candidate.x, candidate.y, candidate.width, candidate.height);*/\n  \t\t\t\t//\n\n  \t\t\t\tvar nose_result = mossef_nose.track(element, Math.round(candidate.x+(candidate.width/2)-(noseFilterWidth/2)), Math.round(candidate.y+candidate.height*(5/8)-(noseFilterWidth/2)), noseFilterWidth, noseFilterWidth, false);\n  \t\t\t\tvar right_result = mossef_righteye.track(element, Math.round(candidate.x+(candidate.width*3/4)-(eyeFilterWidth/2)), Math.round(candidate.y+candidate.height*(2/5)-(eyeFilterWidth/2)), eyeFilterWidth, eyeFilterWidth, false);\n  \t\t\t\tvar left_result = mossef_lefteye.track(element, Math.round(candidate.x+(candidate.width/4)-(eyeFilterWidth/2)), Math.round(candidate.y+candidate.height*(2/5)-(eyeFilterWidth/2)), eyeFilterWidth, eyeFilterWidth, false);\n  \t\t\t\tright_eye_position[0] = Math.round(candidate.x+(candidate.width*3/4)-(eyeFilterWidth/2))+right_result[0];\n  \t\t\t\tright_eye_position[1] = Math.round(candidate.y+candidate.height*(2/5)-(eyeFilterWidth/2))+right_result[1];\n  \t\t\t\tleft_eye_position[0] = Math.round(candidate.x+(candidate.width/4)-(eyeFilterWidth/2))+left_result[0];\n  \t\t\t\tleft_eye_position[1] = Math.round(candidate.y+candidate.height*(2/5)-(eyeFilterWidth/2))+left_result[1];\n  \t\t\t\tnose_position[0] = Math.round(candidate.x+(candidate.width/2)-(noseFilterWidth/2))+nose_result[0];\n  \t\t\t\tnose_position[1] = Math.round(candidate.y+candidate.height*(5/8)-(noseFilterWidth/2))+nose_result[1];\n\n  \t\t\t\t//\n  \t\t\t\t/*canvasContext.strokeRect(Math.round(candidate.x+(candidate.width*3/4)-(eyeFilterWidth/2)), Math.round(candidate.y+candidate.height*(2/5)-(eyeFilterWidth/2)), eyeFilterWidth, eyeFilterWidth);\n  \t\t\t\tcanvasContext.strokeRect(Math.round(candidate.x+(candidate.width/4)-(eyeFilterWidth/2)), Math.round(candidate.y+candidate.height*(2/5)-(eyeFilterWidth/2)), eyeFilterWidth, eyeFilterWidth);\n  \t\t\t\t//canvasContext.strokeRect(Math.round(candidate.x+(candidate.width/2)-(noseFilterWidth/2)), Math.round(candidate.y+candidate.height*(3/4)-(noseFilterWidth/2)), noseFilterWidth, noseFilterWidth);\n  \t\t\t\tcanvasContext.strokeRect(Math.round(candidate.x+(candidate.width/2)-(noseFilterWidth/2)), Math.round(candidate.y+candidate.height*(5/8)-(noseFilterWidth/2)), noseFilterWidth, noseFilterWidth);\n\n  \t\t\t\tcanvasContext.fillStyle = \"rgb(0,0,250)\";\n  \t\t\t\tcanvasContext.beginPath();\n  \t\t\t\tcanvasContext.arc(left_eye_position[0], left_eye_position[1], 3, 0, Math.PI*2, true);\n  \t\t\t\tcanvasContext.closePath();\n  \t\t\t\tcanvasContext.fill();\n\n  \t\t\t\tcanvasContext.beginPath();\n  \t\t\t\tcanvasContext.arc(right_eye_position[0], right_eye_position[1], 3, 0, Math.PI*2, true);\n  \t\t\t\tcanvasContext.closePath();\n  \t\t\t\tcanvasContext.fill();\n\n  \t\t\t\tcanvasContext.beginPath();\n  \t\t\t\tcanvasContext.arc(nose_position[0], nose_position[1], 3, 0, Math.PI*2, true);\n  \t\t\t\tcanvasContext.closePath();\n  \t\t\t\tcanvasContext.fill();\n\n  \t\t\t\tdebugger;\n  \t\t\t\telement.play()\n  \t\t\t\tcanvasContext.clearRect(0,0,element.width,element.height);*/\n  \t\t\t\t//\n\n  \t\t\t\t// get eye and nose positions of model\n  \t\t\t\tvar lep = model.hints.leftEye;\n  \t\t\t\tvar rep = model.hints.rightEye;\n  \t\t\t\tvar mep = model.hints.nose;\n\n  \t\t\t\t// get scaling, rotation, etc. via procrustes analysis\n  \t\t\t\tvar procrustes_params = procrustes([left_eye_position, right_eye_position, nose_position], [lep, rep, mep]);\n  \t\t\t\ttranslateX = procrustes_params[0];\n  \t\t\t\ttranslateY = procrustes_params[1];\n  \t\t\t\tscaling = procrustes_params[2];\n  \t\t\t\trotation = procrustes_params[3];\n\n  \t\t\t\t//element.play();\n\n  \t\t\t\t//var maxscale = 1.10;\n  \t\t\t\t//if ((scaling*modelHeight)/candidate.height < maxscale*0.7) scaling = (maxscale*0.7*candidate.height)/modelHeight;\n  \t\t\t\t//if ((scaling*modelHeight)/candidate.height > maxscale*1.2) scaling = (maxscale*1.2*candidate.height)/modelHeight;\n\n  \t\t\t\t/*var smean = [0,0];\n  \t\t\t\tsmean[0] += lep[0];\n  \t\t\t\tsmean[1] += lep[1];\n  \t\t\t\tsmean[0] += rep[0];\n  \t\t\t\tsmean[1] += rep[1];\n  \t\t\t\tsmean[0] += mep[0];\n  \t\t\t\tsmean[1] += mep[1];\n  \t\t\t\tsmean[0] /= 3;\n  \t\t\t\tsmean[1] /= 3;\n\n  \t\t\t\tvar nulep = [(lep[0]*scaling*Math.cos(-rotation)+lep[1]*scaling*Math.sin(-rotation))+translateX, (lep[0]*scaling*(-Math.sin(-rotation)) + lep[1]*scaling*Math.cos(-rotation))+translateY];\n  \t\t\t\tvar nurep = [(rep[0]*scaling*Math.cos(-rotation)+rep[1]*scaling*Math.sin(-rotation))+translateX, (rep[0]*scaling*(-Math.sin(-rotation)) + rep[1]*scaling*Math.cos(-rotation))+translateY];\n  \t\t\t\tvar numep = [(mep[0]*scaling*Math.cos(-rotation)+mep[1]*scaling*Math.sin(-rotation))+translateX, (mep[0]*scaling*(-Math.sin(-rotation)) + mep[1]*scaling*Math.cos(-rotation))+translateY];\n\n  \t\t\t\tcanvasContext.fillStyle = \"rgb(200,10,100)\";\n  \t\t\t\tcanvasContext.beginPath();\n  \t\t\t\tcanvasContext.arc(nulep[0], nulep[1], 3, 0, Math.PI*2, true);\n  \t\t\t\tcanvasContext.closePath();\n  \t\t\t\tcanvasContext.fill();\n\n  \t\t\t\tcanvasContext.beginPath();\n  \t\t\t\tcanvasContext.arc(nurep[0], nurep[1], 3, 0, Math.PI*2, true);\n  \t\t\t\tcanvasContext.closePath();\n  \t\t\t\tcanvasContext.fill();\n\n  \t\t\t\tcanvasContext.beginPath();\n  \t\t\t\tcanvasContext.arc(numep[0], numep[1], 3, 0, Math.PI*2, true);\n  \t\t\t\tcanvasContext.closePath();\n  \t\t\t\tcanvasContext.fill();*/\n\n  \t\t\t\tcurrentParameters[0] = (scaling*Math.cos(rotation))-1;\n  \t\t\t\tcurrentParameters[1] = (scaling*Math.sin(rotation));\n  \t\t\t\tcurrentParameters[2] = translateX;\n  \t\t\t\tcurrentParameters[3] = translateY;\n\n  \t\t\t\t//this.draw(document.getElementById('overlay'), currentParameters);\n\n  \t\t\t} else {\n  \t\t\t\tscaling = candidate.width/msmodelheight;\n  \t\t\t\t//var ccc = document.getElementById('overlay').getContext('2d');\n  \t\t\t\t//ccc.strokeRect(candidate.x,candidate.y,candidate.width,candidate.height);\n  \t\t\t\ttranslateX = candidate.x-(msxmin*scaling)+0.1*candidate.width;\n  \t\t\t\ttranslateY = candidate.y-(msymin*scaling)+0.25*candidate.height;\n  \t\t\t\tcurrentParameters[0] = scaling-1;\n  \t\t\t\tcurrentParameters[2] = translateX;\n  \t\t\t\tcurrentParameters[3] = translateY;\n  \t\t\t}\n\n  \t\t\tcurrentPositions = calculatePositions(currentParameters, true);\n\n  \t\t\tif (callback) {\n  \t\t\t\tcallback(element, box, [scaling, rotation, translateX, translateY]);\n  \t\t\t} else {\n  \t\t\t\treturn [scaling, rotation, translateX, translateY];\n  \t\t\t}\n  \t\t}\n\n  \t\t// draw a parametrized line on a canvas\n  \t\tvar drawPath = function(canvasContext, path, dp) {\n  \t\t\tcanvasContext.beginPath();\n  \t\t\tvar i, x, y, a, b;\n  \t\t\tfor (var p = 0;p < path.length;p++) {\n  \t\t\t\ti = path[p]*2;\n  \t\t\t\tx = meanShape[i/2][0];\n  \t\t\t\ty = meanShape[i/2][1];\n  \t\t\t\tfor (var j = 0;j < numParameters;j++) {\n  \t\t\t\t\tx += model.shapeModel.eigenVectors[i][j]*dp[j+4];\n  \t\t\t\t\ty += model.shapeModel.eigenVectors[i+1][j]*dp[j+4];\n  \t\t\t\t}\n  \t\t\t\ta = dp[0]*x - dp[1]*y + dp[2];\n  \t\t\t\tb = dp[0]*y + dp[1]*x + dp[3];\n  \t\t\t\tx += a;\n  \t\t\t\ty += b;\n\n  \t\t\t\tif (i == 0) {\n  \t\t\t\t\tcanvasContext.moveTo(x,y);\n  \t\t\t\t} else {\n  \t\t\t\t\tcanvasContext.lineTo(x,y);\n  \t\t\t\t}\n  \t\t\t}\n  \t\t\tcanvasContext.moveTo(0,0);\n  \t\t\tcanvasContext.closePath();\n  \t\t\tcanvasContext.stroke();\n  \t\t}\n\n  \t\t// draw a point on a canvas\n  \t\tfunction drawPoint(canvasContext, point, dp) {\n  \t\t\tvar i, x, y, a, b;\n  \t\t\ti = point*2;\n  \t\t\tx = meanShape[i/2][0];\n  \t\t\ty = meanShape[i/2][1];\n  \t\t\tfor (var j = 0;j < numParameters;j++) {\n  \t\t\t\tx += model.shapeModel.eigenVectors[i][j]*dp[j+4];\n  \t\t\t\ty += model.shapeModel.eigenVectors[i+1][j]*dp[j+4];\n  \t\t\t}\n  \t\t\ta = dp[0]*x - dp[1]*y + dp[2];\n  \t\t\tb = dp[0]*y + dp[1]*x + dp[3];\n  \t\t\tx += a;\n  \t\t\ty += b;\n  \t\t\tcanvasContext.beginPath();\n  \t\t\tcanvasContext.arc(x, y, 1, 0, Math.PI*2, true);\n  \t\t\tcanvasContext.closePath();\n  \t\t\tcanvasContext.fill();\n  \t\t}\n\n  \t\t// procrustes analysis\n  \t\tfunction procrustes(template, shape) {\n  \t\t\t// assume template and shape is a vector of x,y-coordinates\n  \t\t\t//i.e. template = [[x1,y1], [x2,y2], [x3,y3]];\n  \t\t\tvar templateClone = [];\n  \t\t\tvar shapeClone = [];\n  \t\t\tfor (var i = 0;i < template.length;i++) {\n  \t\t\t\ttemplateClone[i] = [template[i][0], template[i][1]];\n  \t\t\t}\n  \t\t\tfor (var i = 0;i < shape.length;i++) {\n  \t\t\t\tshapeClone[i] = [shape[i][0], shape[i][1]];\n  \t\t\t}\n  \t\t\tshape = shapeClone;\n  \t\t\ttemplate = templateClone;\n\n  \t\t\t// calculate translation\n  \t\t\tvar templateMean = [0.0, 0.0];\n  \t\t\tfor (var i = 0;i < template.length;i++) {\n  \t\t\t\ttemplateMean[0] += template[i][0];\n  \t\t\t\ttemplateMean[1] += template[i][1];\n  \t\t\t}\n  \t\t\ttemplateMean[0] /= template.length;\n  \t\t\ttemplateMean[1] /= template.length;\n\n  \t\t\tvar shapeMean = [0.0, 0.0];\n  \t\t\tfor (var i = 0;i < shape.length;i++) {\n  \t\t\t\tshapeMean[0] += shape[i][0];\n  \t\t\t\tshapeMean[1] += shape[i][1];\n  \t\t\t}\n  \t\t\tshapeMean[0] /= shape.length;\n  \t\t\tshapeMean[1] /= shape.length;\n\n  \t\t\tvar translationX = templateMean[0] - shapeMean[0];\n  \t\t\tvar translationY = templateMean[1] - shapeMean[1];\n\n  \t\t\t// centralize\n  \t\t\tfor (var i = 0;i < shape.length;i++) {\n  \t\t\t\tshape[i][0] -= shapeMean[0];\n  \t\t\t\tshape[i][1] -= shapeMean[1];\n  \t\t\t}\n  \t\t\tfor (var i = 0;i < template.length;i++) {\n  \t\t\t\ttemplate[i][0] -= templateMean[0];\n  \t\t\t\ttemplate[i][1] -= templateMean[1];\n  \t\t\t}\n\n  \t\t\t// scaling\n\n  \t\t\tvar scaleS = 0.0;\n  \t\t\tfor (var i = 0;i < shape.length;i++) {\n  \t\t\t\tscaleS += ((shape[i][0])*(shape[i][0]));\n  \t\t\t\tscaleS += ((shape[i][1])*(shape[i][1]));\n  \t\t\t}\n  \t\t\tscaleS = Math.sqrt(scaleS/shape.length);\n\n  \t\t\tvar scaleT = 0.0;\n  \t\t\tfor (var i = 0;i < template.length;i++) {\n  \t\t\t\tscaleT += ((template[i][0])*(template[i][0]));\n  \t\t\t\tscaleT += ((template[i][1])*(template[i][1]));\n  \t\t\t}\n  \t\t\tscaleT = Math.sqrt(scaleT/template.length);\n\n  \t\t\tvar scaling = scaleT/scaleS;\n\n  \t\t\tfor (var i = 0;i < shape.length;i++) {\n  \t\t\t\tshape[i][0] *= scaling;\n  \t\t\t\tshape[i][1] *= scaling;\n  \t\t\t}\n\n  \t\t\t// rotation\n\n  \t\t\tvar top = 0.0;\n  \t\t\tvar bottom = 0.0;\n  \t\t\tfor (var i = 0;i < shape.length;i++) {\n  \t\t\t\ttop += (shape[i][0]*template[i][1] - shape[i][1]*template[i][0]);\n  \t\t\t\tbottom += (shape[i][0]*template[i][0] + shape[i][1]*template[i][1]);\n  \t\t\t}\n  \t\t\tvar rotation = Math.atan(top/bottom);\n\n  \t\t\ttranslationX += (shapeMean[0]-(scaling*Math.cos(-rotation)*shapeMean[0])-(scaling*shapeMean[1]*Math.sin(-rotation)));\n  \t\t\ttranslationY += (shapeMean[1]+(scaling*Math.sin(-rotation)*shapeMean[0])-(scaling*shapeMean[1]*Math.cos(-rotation)));\n\n  \t\t\t//returns rotation, scaling, transformx and transformx\n  \t\t\treturn [translationX, translationY, scaling, rotation];\n  \t\t}\n\n  \t\t// function to draw pixeldata on some canvas, only used for debugging\n  \t\tvar drawData = function(canvasContext, data, width, height, transposed, drawX, drawY) {\n  \t\t\tvar psci = canvasContext.createImageData(width, height);\n  \t\t\tvar pscidata = psci.data;\n  \t\t\tfor (var j = 0;j < width*height;j++) {\n  \t\t\t\tif (!transposed) {\n  \t\t\t\t\tvar val = data[(j%width)+((j/width) >> 0)*width];\n  \t\t\t\t} else {\n  \t\t\t\t\tvar val = data[(j%height)*height+((j/height) >> 0)];\n  \t\t\t\t}\n  \t\t\t\tval = val > 255 ? 255 : val;\n  \t\t\t\tval = val < 0 ? 0 : val;\n  \t\t\t\tpscidata[j*4] = val;\n  \t\t\t\tpscidata[(j*4)+1] = val;\n  \t\t\t\tpscidata[(j*4)+2] = val;\n  \t\t\t\tpscidata[(j*4)+3] = 255;\n  \t\t\t}\n  \t\t\tcanvasContext.putImageData(psci, drawX, drawY);\n  \t\t}\n\n  \t\tvar requestAnimFrame = (function() {\n  \t\t\treturn window.requestAnimationFrame ||\n  \t\t\twindow.webkitRequestAnimationFrame ||\n  \t\t\twindow.mozRequestAnimationFrame ||\n  \t\t\twindow.oRequestAnimationFrame ||\n  \t\t\twindow.msRequestAnimationFrame ||\n  \t\t\tfunction(/* function FrameRequestCallback */ callback, /* DOMElement Element */ element) {\n  \t\t\t\treturn window.setTimeout(callback, 1000/60);\n  \t\t\t};\n  \t\t})();\n\n  \t\tvar cancelRequestAnimFrame = (function() {\n  \t\t\treturn window.cancelAnimationFrame ||\n  \t\t\t\twindow.webkitCancelRequestAnimationFrame ||\n  \t\t\t\twindow.mozCancelRequestAnimationFrame ||\n  \t\t\t\twindow.oCancelRequestAnimationFrame ||\n  \t\t\t\twindow.msCancelRequestAnimationFrame ||\n  \t\t\t\twindow.clearTimeout;\n  \t\t})();\n\n  \t\treturn true;\n  \t}\n  }\n}\n",
    "module.exports = frontalface\r\n\r\nfunction frontalface () {\r\n  return {complexClassifiers:[{simpleClassifiers:[{features:[[3,7,14,4,-1.],[3,9,14,2,2.]],threshold:4.0141958743333817e-003,right_val:0.8378106951713562,left_val:0.0337941907346249},{features:[[1,2,18,4,-1.],[7,2,6,4,3.]],threshold:0.0151513395830989,right_val:0.7488812208175659,left_val:0.1514132022857666},{features:[[1,7,15,9,-1.],[1,10,15,3,3.]],threshold:4.2109931819140911e-003,right_val:0.6374819874763489,left_val:0.0900492817163467}],threshold:0.8226894140243530},{simpleClassifiers:[{features:[[5,6,2,6,-1.],[5,9,2,3,2.]],threshold:1.6227109590545297e-003,right_val:0.7110946178436279,left_val:0.0693085864186287},{features:[[7,5,6,3,-1.],[9,5,2,3,3.]],threshold:2.2906649392098188e-003,right_val:0.6668692231178284,left_val:0.1795803010463715},{features:[[4,0,12,9,-1.],[4,3,12,3,3.]],threshold:5.0025708042085171e-003,right_val:0.6554006934165955,left_val:0.1693672984838486},{features:[[6,9,10,8,-1.],[6,13,10,4,2.]],threshold:7.9659894108772278e-003,right_val:0.0914145186543465,left_val:0.5866332054138184},{features:[[3,6,14,8,-1.],[3,10,14,4,2.]],threshold:-3.5227010957896709e-003,right_val:0.6031895875930786,left_val:0.1413166970014572},{features:[[14,1,6,10,-1.],[14,1,3,10,2.]],threshold:0.0366676896810532,right_val:0.7920318245887756,left_val:0.3675672113895416},{features:[[7,8,5,12,-1.],[7,12,5,4,3.]],threshold:9.3361474573612213e-003,right_val:0.2088509947061539,left_val:0.6161385774612427},{features:[[1,1,18,3,-1.],[7,1,6,3,3.]],threshold:8.6961314082145691e-003,right_val:0.6360273957252502,left_val:0.2836230993270874},{features:[[1,8,17,2,-1.],[1,9,17,1,2.]],threshold:1.1488880263641477e-003,right_val:0.5800700783729553,left_val:0.2223580926656723},{features:[[16,6,4,2,-1.],[16,7,4,1,2.]],threshold:-2.1484689787030220e-003,right_val:0.5787054896354675,left_val:0.2406464070081711},{features:[[5,17,2,2,-1.],[5,18,2,1,2.]],threshold:2.1219060290604830e-003,right_val:0.1362237036228180,left_val:0.5559654831886292},{features:[[14,2,6,12,-1.],[14,2,3,12,2.]],threshold:-0.0939491465687752,right_val:0.4717740118503571,left_val:0.8502737283706665},{features:[[4,0,4,12,-1.],[4,0,2,6,2.],[6,6,2,6,2.]],threshold:1.3777789426967502e-003,right_val:0.2834529876708984,left_val:0.5993673801422119},{features:[[2,11,18,8,-1.],[8,11,6,8,3.]],threshold:0.0730631574988365,right_val:0.7060034275054932,left_val:0.4341886043548584},{features:[[5,7,10,2,-1.],[5,8,10,1,2.]],threshold:3.6767389974556863e-004,right_val:0.6051574945449829,left_val:0.3027887940406799},{features:[[15,11,5,3,-1.],[15,12,5,1,3.]],threshold:-6.0479710809886456e-003,right_val:0.5675256848335266,left_val:0.1798433959484100}],threshold:6.9566087722778320},{simpleClassifiers:[{features:[[5,3,10,9,-1.],[5,6,10,3,3.]],threshold:-0.0165106896311045,right_val:0.1424857974052429,left_val:0.6644225120544434},{features:[[9,4,2,14,-1.],[9,11,2,7,2.]],threshold:2.7052499353885651e-003,right_val:0.1288477033376694,left_val:0.6325352191925049},{features:[[3,5,4,12,-1.],[3,9,4,4,3.]],threshold:2.8069869149476290e-003,right_val:0.6193193197250366,left_val:0.1240288019180298},{features:[[4,5,12,5,-1.],[8,5,4,5,3.]],threshold:-1.5402400167658925e-003,right_val:0.5670015811920166,left_val:0.1432143002748489},{features:[[5,6,10,8,-1.],[5,10,10,4,2.]],threshold:-5.6386279175058007e-004,right_val:0.5905207991600037,left_val:0.1657433062791824},{features:[[8,0,6,9,-1.],[8,3,6,3,3.]],threshold:1.9253729842603207e-003,right_val:0.5738824009895325,left_val:0.2695507109165192},{features:[[9,12,1,8,-1.],[9,16,1,4,2.]],threshold:-5.0214841030538082e-003,right_val:0.5782774090766907,left_val:0.1893538981676102},{features:[[0,7,20,6,-1.],[0,9,20,2,3.]],threshold:2.6365420781075954e-003,right_val:0.5695425868034363,left_val:0.2309329062700272},{features:[[7,0,6,17,-1.],[9,0,2,17,3.]],threshold:-1.5127769438549876e-003,right_val:0.5956642031669617,left_val:0.2759602069854736},{features:[[9,0,6,4,-1.],[11,0,2,4,3.]],threshold:-0.0101574398577213,right_val:0.5522047281265259,left_val:0.1732538044452667},{features:[[5,1,6,4,-1.],[7,1,2,4,3.]],threshold:-0.0119536602869630,right_val:0.5559014081954956,left_val:0.1339409947395325},{features:[[12,1,6,16,-1.],[14,1,2,16,3.]],threshold:4.8859491944313049e-003,right_val:0.6188849210739136,left_val:0.3628703951835632},{features:[[0,5,18,8,-1.],[0,5,9,4,2.],[9,9,9,4,2.]],threshold:-0.0801329165697098,right_val:0.5475944876670837,left_val:0.0912110507488251},{features:[[8,15,10,4,-1.],[13,15,5,2,2.],[8,17,5,2,2.]],threshold:1.0643280111253262e-003,right_val:0.5711399912834168,left_val:0.3715142905712128},{features:[[3,1,4,8,-1.],[3,1,2,4,2.],[5,5,2,4,2.]],threshold:-1.3419450260698795e-003,right_val:0.3318097889423370,left_val:0.5953313708305359},{features:[[3,6,14,10,-1.],[10,6,7,5,2.],[3,11,7,5,2.]],threshold:-0.0546011403203011,right_val:0.5602846145629883,left_val:0.1844065934419632},{features:[[2,1,6,16,-1.],[4,1,2,16,3.]],threshold:2.9071690514683723e-003,right_val:0.6131715178489685,left_val:0.3594244122505188},{features:[[0,18,20,2,-1.],[0,19,20,1,2.]],threshold:7.4718717951327562e-004,right_val:0.3459562957286835,left_val:0.5994353294372559},{features:[[8,13,4,3,-1.],[8,14,4,1,3.]],threshold:4.3013808317482471e-003,right_val:0.6990845203399658,left_val:0.4172652065753937},{features:[[9,14,2,3,-1.],[9,15,2,1,3.]],threshold:4.5017572119832039e-003,right_val:0.7801457047462463,left_val:0.4509715139865875},{features:[[0,12,9,6,-1.],[0,14,9,2,3.]],threshold:0.0241385009139776,right_val:0.1319826990365982,left_val:0.5438212752342224}],threshold:9.4985427856445313},{simpleClassifiers:[{features:[[5,7,3,4,-1.],[5,9,3,2,2.]],threshold:1.9212230108678341e-003,right_val:0.6199870705604553,left_val:0.1415266990661621},{features:[[9,3,2,16,-1.],[9,11,2,8,2.]],threshold:-1.2748669541906565e-004,right_val:0.1884928941726685,left_val:0.6191074252128601},{features:[[3,6,13,8,-1.],[3,10,13,4,2.]],threshold:5.1409931620582938e-004,right_val:0.5857927799224854,left_val:0.1487396955490112},{features:[[12,3,8,2,-1.],[12,3,4,2,2.]],threshold:4.1878609918057919e-003,right_val:0.6359239816665649,left_val:0.2746909856796265},{features:[[8,8,4,12,-1.],[8,12,4,4,3.]],threshold:5.1015717908740044e-003,right_val:0.2175628989934921,left_val:0.5870851278305054},{features:[[11,3,8,6,-1.],[15,3,4,3,2.],[11,6,4,3,2.]],threshold:-2.1448440384119749e-003,right_val:0.2979590892791748,left_val:0.5880944728851318},{features:[[7,1,6,19,-1.],[9,1,2,19,3.]],threshold:-2.8977119363844395e-003,right_val:0.5876647233963013,left_val:0.2373327016830444},{features:[[9,0,6,4,-1.],[11,0,2,4,3.]],threshold:-0.0216106791049242,right_val:0.5194202065467835,left_val:0.1220654994249344},{features:[[3,1,9,3,-1.],[6,1,3,3,3.]],threshold:-4.6299318782985210e-003,right_val:0.5817409157752991,left_val:0.2631230950355530},{features:[[8,15,10,4,-1.],[13,15,5,2,2.],[8,17,5,2,2.]],threshold:5.9393711853772402e-004,right_val:0.5698544979095459,left_val:0.3638620078563690},{features:[[0,3,6,10,-1.],[3,3,3,10,2.]],threshold:0.0538786612451077,right_val:0.7559366226196289,left_val:0.4303531050682068},{features:[[3,4,15,15,-1.],[3,9,15,5,3.]],threshold:1.8887349870055914e-003,right_val:0.5613427162170410,left_val:0.2122603058815002},{features:[[6,5,8,6,-1.],[6,7,8,2,3.]],threshold:-2.3635339457541704e-003,right_val:0.2642767131328583,left_val:0.5631849169731140},{features:[[4,4,12,10,-1.],[10,4,6,5,2.],[4,9,6,5,2.]],threshold:0.0240177996456623,right_val:0.2751705944538117,left_val:0.5797107815742493},{features:[[6,4,4,4,-1.],[8,4,2,4,2.]],threshold:2.0543030404951423e-004,right_val:0.5752568840980530,left_val:0.2705242037773132},{features:[[15,11,1,2,-1.],[15,12,1,1,2.]],threshold:8.4790197433903813e-004,right_val:0.2334876954555512,left_val:0.5435624718666077},{features:[[3,11,2,2,-1.],[3,12,2,1,2.]],threshold:1.4091329649090767e-003,right_val:0.2063155025243759,left_val:0.5319424867630005},{features:[[16,11,1,3,-1.],[16,12,1,1,3.]],threshold:1.4642629539594054e-003,right_val:0.3068861067295075,left_val:0.5418980717658997},{features:[[3,15,6,4,-1.],[3,15,3,2,2.],[6,17,3,2,2.]],threshold:1.6352549428120255e-003,right_val:0.6112868189811707,left_val:0.3695372939109802},{features:[[6,7,8,2,-1.],[6,8,8,1,2.]],threshold:8.3172752056270838e-004,right_val:0.6025236248970032,left_val:0.3565036952495575},{features:[[3,11,1,3,-1.],[3,12,1,1,3.]],threshold:-2.0998890977352858e-003,right_val:0.5362827181816101,left_val:0.1913982033729553},{features:[[6,0,12,2,-1.],[6,1,12,1,2.]],threshold:-7.4213981861248612e-004,right_val:0.5529310107231140,left_val:0.3835555016994476},{features:[[9,14,2,3,-1.],[9,15,2,1,3.]],threshold:3.2655049581080675e-003,right_val:0.7101895809173584,left_val:0.4312896132469177},{features:[[7,15,6,2,-1.],[7,16,6,1,2.]],threshold:8.9134991867467761e-004,right_val:0.6391963958740234,left_val:0.3984830975532532},{features:[[0,5,4,6,-1.],[0,7,4,2,3.]],threshold:-0.0152841797098517,right_val:0.5433713793754578,left_val:0.2366732954978943},{features:[[4,12,12,2,-1.],[8,12,4,2,3.]],threshold:4.8381411470472813e-003,right_val:0.3239189088344574,left_val:0.5817500948905945},{features:[[6,3,1,9,-1.],[6,6,1,3,3.]],threshold:-9.1093179071322083e-004,right_val:0.2911868989467621,left_val:0.5540593862533569},{features:[[10,17,3,2,-1.],[11,17,1,2,3.]],threshold:-6.1275060288608074e-003,right_val:0.5196629166603088,left_val:0.1775255054235458},{features:[[9,9,2,2,-1.],[9,10,2,1,2.]],threshold:-4.4576259097084403e-004,right_val:0.5533593893051148,left_val:0.3024170100688934},{features:[[7,6,6,4,-1.],[9,6,2,4,3.]],threshold:0.0226465407758951,right_val:0.6975377202033997,left_val:0.4414930939674377},{features:[[7,17,3,2,-1.],[8,17,1,2,3.]],threshold:-1.8804960418492556e-003,right_val:0.5497952103614807,left_val:0.2791394889354706},{features:[[10,17,3,3,-1.],[11,17,1,3,3.]],threshold:7.0889107882976532e-003,right_val:0.2385547012090683,left_val:0.5263199210166931},{features:[[8,12,3,2,-1.],[8,13,3,1,2.]],threshold:1.7318050377070904e-003,right_val:0.6983600854873657,left_val:0.4319379031658173},{features:[[9,3,6,2,-1.],[11,3,2,2,3.]],threshold:-6.8482700735330582e-003,right_val:0.5390920042991638,left_val:0.3082042932510376},{features:[[3,11,14,4,-1.],[3,13,14,2,2.]],threshold:-1.5062530110299122e-005,right_val:0.3120366036891937,left_val:0.5521922111511231},{features:[[1,10,18,4,-1.],[10,10,9,2,2.],[1,12,9,2,2.]],threshold:0.0294755697250366,right_val:0.1770603060722351,left_val:0.5401322841644287},{features:[[0,10,3,3,-1.],[0,11,3,1,3.]],threshold:8.1387329846620560e-003,right_val:0.1211019009351730,left_val:0.5178617835044861},{features:[[9,1,6,6,-1.],[11,1,2,6,3.]],threshold:0.0209429506212473,right_val:0.3311221897602081,left_val:0.5290294289588928},{features:[[8,7,3,6,-1.],[9,7,1,6,3.]],threshold:-9.5665529370307922e-003,right_val:0.4451968967914581,left_val:0.7471994161605835}],threshold:18.4129695892333980},{simpleClassifiers:[{features:[[1,0,18,9,-1.],[1,3,18,3,3.]],threshold:-2.8206960996612906e-004,right_val:0.6076732277870178,left_val:0.2064086049795151},{features:[[12,10,2,6,-1.],[12,13,2,3,2.]],threshold:1.6790600493550301e-003,right_val:0.1255383938550949,left_val:0.5851997137069702},{features:[[0,5,19,8,-1.],[0,9,19,4,2.]],threshold:6.9827912375330925e-004,right_val:0.5728961229324341,left_val:0.0940184295177460},{features:[[7,0,6,9,-1.],[9,0,2,9,3.]],threshold:7.8959012171253562e-004,right_val:0.5694308876991272,left_val:0.1781987994909287},{features:[[5,3,6,1,-1.],[7,3,2,1,3.]],threshold:-2.8560499195009470e-003,right_val:0.5788664817810059,left_val:0.1638399064540863},{features:[[11,3,6,1,-1.],[13,3,2,1,3.]],threshold:-3.8122469559311867e-003,right_val:0.5508564710617065,left_val:0.2085440009832382},{features:[[5,10,4,6,-1.],[5,13,4,3,2.]],threshold:1.5896620461717248e-003,right_val:0.1857215017080307,left_val:0.5702760815620422},{features:[[11,3,6,1,-1.],[13,3,2,1,3.]],threshold:0.0100783398374915,right_val:0.2189770042896271,left_val:0.5116943120956421},{features:[[4,4,12,6,-1.],[4,6,12,2,3.]],threshold:-0.0635263025760651,right_val:0.4043813049793243,left_val:0.7131379842758179},{features:[[15,12,2,6,-1.],[15,14,2,2,3.]],threshold:-9.1031491756439209e-003,right_val:0.5463973283767700,left_val:0.2567181885242462},{features:[[9,3,2,2,-1.],[10,3,1,2,2.]],threshold:-2.4035000242292881e-003,right_val:0.5590974092483521,left_val:0.1700665950775147},{features:[[9,3,3,1,-1.],[10,3,1,1,3.]],threshold:1.5226360410451889e-003,right_val:0.2619054019451141,left_val:0.5410556793212891},{features:[[1,1,4,14,-1.],[3,1,2,14,2.]],threshold:0.0179974399507046,right_val:0.6535220742225647,left_val:0.3732436895370483},{features:[[9,0,4,4,-1.],[11,0,2,2,2.],[9,2,2,2,2.]],threshold:-6.4538191072642803e-003,right_val:0.5537446141242981,left_val:0.2626481950283051},{features:[[7,5,1,14,-1.],[7,12,1,7,2.]],threshold:-0.0118807600811124,right_val:0.5544745922088623,left_val:0.2003753930330277},{features:[[19,0,1,4,-1.],[19,2,1,2,2.]],threshold:1.2713660253211856e-003,right_val:0.3031975924968720,left_val:0.5591902732849121},{features:[[5,5,6,4,-1.],[8,5,3,4,2.]],threshold:1.1376109905540943e-003,right_val:0.5646508932113648,left_val:0.2730407118797302},{features:[[9,18,3,2,-1.],[10,18,1,2,3.]],threshold:-4.2651998810470104e-003,right_val:0.5461820960044861,left_val:0.1405909061431885},{features:[[8,18,3,2,-1.],[9,18,1,2,3.]],threshold:-2.9602861031889915e-003,right_val:0.5459290146827698,left_val:0.1795035004615784},{features:[[4,5,12,6,-1.],[4,7,12,2,3.]],threshold:-8.8448226451873779e-003,right_val:0.2809219956398010,left_val:0.5736783146858215},{features:[[3,12,2,6,-1.],[3,14,2,2,3.]],threshold:-6.6430689767003059e-003,right_val:0.5503826141357422,left_val:0.2370675951242447},{features:[[10,8,2,12,-1.],[10,12,2,4,3.]],threshold:3.9997808635234833e-003,right_val:0.3304282128810883,left_val:0.5608199834823608},{features:[[7,18,3,2,-1.],[8,18,1,2,3.]],threshold:-4.1221720166504383e-003,right_val:0.5378993153572083,left_val:0.1640105992555618},{features:[[9,0,6,2,-1.],[11,0,2,2,3.]],threshold:0.0156249096617103,right_val:0.2288603931665421,left_val:0.5227649211883545},{features:[[5,11,9,3,-1.],[5,12,9,1,3.]],threshold:-0.0103564197197557,right_val:0.4252927899360657,left_val:0.7016193866729736},{features:[[9,0,6,2,-1.],[11,0,2,2,3.]],threshold:-8.7960809469223022e-003,right_val:0.5355830192565918,left_val:0.2767347097396851},{features:[[1,1,18,5,-1.],[7,1,6,5,3.]],threshold:0.1622693985700607,right_val:0.7442579269409180,left_val:0.4342240095138550},{features:[[8,0,4,4,-1.],[10,0,2,2,2.],[8,2,2,2,2.]],threshold:4.5542530715465546e-003,right_val:0.2582125067710877,left_val:0.5726485848426819},{features:[[3,12,1,3,-1.],[3,13,1,1,3.]],threshold:-2.1309209987521172e-003,right_val:0.5361018776893616,left_val:0.2106848061084747},{features:[[8,14,5,3,-1.],[8,15,5,1,3.]],threshold:-0.0132084200158715,right_val:0.4552468061447144,left_val:0.7593790888786316},{features:[[5,4,10,12,-1.],[5,4,5,6,2.],[10,10,5,6,2.]],threshold:-0.0659966766834259,right_val:0.5344039797782898,left_val:0.1252475976943970},{features:[[9,6,9,12,-1.],[9,10,9,4,3.]],threshold:7.9142656177282333e-003,right_val:0.5601043105125427,left_val:0.3315384089946747},{features:[[2,2,12,14,-1.],[2,2,6,7,2.],[8,9,6,7,2.]],threshold:0.0208942797034979,right_val:0.2768838107585907,left_val:0.5506049990653992}],threshold:15.3241395950317380},{simpleClassifiers:[{features:[[4,7,12,2,-1.],[8,7,4,2,3.]],threshold:1.1961159761995077e-003,right_val:0.6156241297721863,left_val:0.1762690991163254},{features:[[7,4,6,4,-1.],[7,6,6,2,2.]],threshold:-1.8679830245673656e-003,right_val:0.1832399964332581,left_val:0.6118106842041016},{features:[[4,5,11,8,-1.],[4,9,11,4,2.]],threshold:-1.9579799845814705e-004,right_val:0.5723816156387329,left_val:0.0990442633628845},{features:[[3,10,16,4,-1.],[3,12,16,2,2.]],threshold:-8.0255657667294145e-004,right_val:0.2377282977104187,left_val:0.5579879879951477},{features:[[0,0,16,2,-1.],[0,1,16,1,2.]],threshold:-2.4510810617357492e-003,right_val:0.5858935117721558,left_val:0.2231457978487015},{features:[[7,5,6,2,-1.],[9,5,2,2,3.]],threshold:5.0361850298941135e-004,right_val:0.5794103741645813,left_val:0.2653993964195252},{features:[[3,2,6,10,-1.],[3,2,3,5,2.],[6,7,3,5,2.]],threshold:4.0293349884450436e-003,right_val:0.2484865039587021,left_val:0.5803827047348023},{features:[[10,5,8,15,-1.],[10,10,8,5,3.]],threshold:-0.0144517095759511,right_val:0.5484204888343811,left_val:0.1830351948738098},{features:[[3,14,8,6,-1.],[3,14,4,3,2.],[7,17,4,3,2.]],threshold:2.0380979403853416e-003,right_val:0.6051092743873596,left_val:0.3363558948040009},{features:[[14,2,2,2,-1.],[14,3,2,1,2.]],threshold:-1.6155190533027053e-003,right_val:0.5441246032714844,left_val:0.2286642044782639},{features:[[1,10,7,6,-1.],[1,13,7,3,2.]],threshold:3.3458340913057327e-003,right_val:0.2392338067293167,left_val:0.5625913143157959},{features:[[15,4,4,3,-1.],[15,4,2,3,2.]],threshold:1.6379579901695251e-003,right_val:0.5964621901512146,left_val:0.3906993865966797},{features:[[2,9,14,6,-1.],[2,9,7,3,2.],[9,12,7,3,2.]],threshold:0.0302512105554342,right_val:0.1575746983289719,left_val:0.5248482227325440},{features:[[5,7,10,4,-1.],[5,9,10,2,2.]],threshold:0.0372519902884960,right_val:0.6748418807983398,left_val:0.4194310903549194},{features:[[6,9,8,8,-1.],[6,9,4,4,2.],[10,13,4,4,2.]],threshold:-0.0251097902655602,right_val:0.5473451018333435,left_val:0.1882549971342087},{features:[[14,1,3,2,-1.],[14,2,3,1,2.]],threshold:-5.3099058568477631e-003,right_val:0.5227110981941223,left_val:0.1339973062276840},{features:[[1,4,4,2,-1.],[3,4,2,2,2.]],threshold:1.2086479691788554e-003,right_val:0.6109635829925537,left_val:0.3762088119983673},{features:[[11,10,2,8,-1.],[11,14,2,4,2.]],threshold:-0.0219076797366142,right_val:0.5404006838798523,left_val:0.2663142979145050},{features:[[0,0,5,3,-1.],[0,1,5,1,3.]],threshold:5.4116579703986645e-003,right_val:0.2232273072004318,left_val:0.5363578796386719},{features:[[2,5,18,8,-1.],[11,5,9,4,2.],[2,9,9,4,2.]],threshold:0.0699463263154030,right_val:0.2453698068857193,left_val:0.5358232855796814},{features:[[6,6,1,6,-1.],[6,9,1,3,2.]],threshold:3.4520021290518343e-004,right_val:0.5376930236816406,left_val:0.2409671992063522},{features:[[19,1,1,3,-1.],[19,2,1,1,3.]],threshold:1.2627709656953812e-003,right_val:0.3155693113803864,left_val:0.5425856709480286},{features:[[7,6,6,6,-1.],[9,6,2,6,3.]],threshold:0.0227195098996162,right_val:0.6597865223884583,left_val:0.4158405959606171},{features:[[19,1,1,3,-1.],[19,2,1,1,3.]],threshold:-1.8111000536009669e-003,right_val:0.5505244731903076,left_val:0.2811253070831299},{features:[[3,13,2,3,-1.],[3,14,2,1,3.]],threshold:3.3469670452177525e-003,right_val:0.1891465038061142,left_val:0.5260028243064880},{features:[[8,4,8,12,-1.],[12,4,4,6,2.],[8,10,4,6,2.]],threshold:4.0791751234792173e-004,right_val:0.3344210088253021,left_val:0.5673509240150452},{features:[[5,2,6,3,-1.],[7,2,2,3,3.]],threshold:0.0127347996458411,right_val:0.2395612001419067,left_val:0.5343592166900635},{features:[[6,1,9,10,-1.],[6,6,9,5,2.]],threshold:-7.3119727894663811e-003,right_val:0.4022207856178284,left_val:0.6010890007019043},{features:[[0,4,6,12,-1.],[2,4,2,12,3.]],threshold:-0.0569487512111664,right_val:0.4543190896511078,left_val:0.8199151158332825},{features:[[15,13,2,3,-1.],[15,14,2,1,3.]],threshold:-5.0116591155529022e-003,right_val:0.5357710719108582,left_val:0.2200281023979187},{features:[[7,14,5,3,-1.],[7,15,5,1,3.]],threshold:6.0334368608891964e-003,right_val:0.7181751132011414,left_val:0.4413081109523773},{features:[[15,13,3,3,-1.],[15,14,3,1,3.]],threshold:3.9437441155314445e-003,right_val:0.2791733145713806,left_val:0.5478860735893250},{features:[[6,14,8,3,-1.],[6,15,8,1,3.]],threshold:-3.6591119132936001e-003,right_val:0.3989723920822144,left_val:0.6357867717742920},{features:[[15,13,3,3,-1.],[15,14,3,1,3.]],threshold:-3.8456181064248085e-003,right_val:0.5300664901733398,left_val:0.3493686020374298},{features:[[2,13,3,3,-1.],[2,14,3,1,3.]],threshold:-7.1926261298358440e-003,right_val:0.5229672789573669,left_val:0.1119614988565445},{features:[[4,7,12,12,-1.],[10,7,6,6,2.],[4,13,6,6,2.]],threshold:-0.0527989417314529,right_val:0.5453451275825501,left_val:0.2387102991342545},{features:[[9,7,2,6,-1.],[10,7,1,6,2.]],threshold:-7.9537667334079742e-003,right_val:0.4439376890659332,left_val:0.7586917877197266},{features:[[8,9,5,2,-1.],[8,10,5,1,2.]],threshold:-2.7344180271029472e-003,right_val:0.5489321947097778,left_val:0.2565476894378662},{features:[[8,6,3,4,-1.],[9,6,1,4,3.]],threshold:-1.8507939530536532e-003,right_val:0.4252474904060364,left_val:0.6734347939491272},{features:[[9,6,2,8,-1.],[9,10,2,4,2.]],threshold:0.0159189198166132,right_val:0.2292661964893341,left_val:0.5488352775573731},{features:[[7,7,3,6,-1.],[8,7,1,6,3.]],threshold:-1.2687679845839739e-003,right_val:0.4022389948368073,left_val:0.6104331016540527},{features:[[11,3,3,3,-1.],[12,3,1,3,3.]],threshold:6.2883910723030567e-003,right_val:0.1536193042993546,left_val:0.5310853123664856},{features:[[5,4,6,1,-1.],[7,4,2,1,3.]],threshold:-6.2259892001748085e-003,right_val:0.5241606235504150,left_val:0.1729111969470978},{features:[[5,6,10,3,-1.],[5,7,10,1,3.]],threshold:-0.0121325999498367,right_val:0.4325182139873505,left_val:0.6597759723663330}],threshold:21.0106391906738280},{simpleClassifiers:[{features:[[7,3,6,9,-1.],[7,6,6,3,3.]],threshold:-3.9184908382594585e-003,right_val:0.1469330936670303,left_val:0.6103435158729553},{features:[[6,7,9,1,-1.],[9,7,3,1,3.]],threshold:1.5971299726516008e-003,right_val:0.5896466970443726,left_val:0.2632363140583038},{features:[[2,8,16,8,-1.],[2,12,16,4,2.]],threshold:0.0177801102399826,right_val:0.1760361939668655,left_val:0.5872874259948731},{features:[[14,6,2,6,-1.],[14,9,2,3,2.]],threshold:6.5334769897162914e-004,right_val:0.5596066117286682,left_val:0.1567801982164383},{features:[[1,5,6,15,-1.],[1,10,6,5,3.]],threshold:-2.8353091329336166e-004,right_val:0.5732036232948303,left_val:0.1913153976202011},{features:[[10,0,6,9,-1.],[10,3,6,3,3.]],threshold:1.6104689566418529e-003,right_val:0.5623080730438232,left_val:0.2914913892745972},{features:[[6,6,7,14,-1.],[6,13,7,7,2.]],threshold:-0.0977506190538406,right_val:0.5648233294487000,left_val:0.1943476945161820},{features:[[13,7,3,6,-1.],[13,9,3,2,3.]],threshold:5.5182358482852578e-004,right_val:0.5504639744758606,left_val:0.3134616911411285},{features:[[1,8,15,4,-1.],[6,8,5,4,3.]],threshold:-0.0128582203760743,right_val:0.5760142803192139,left_val:0.2536481916904450},{features:[[11,2,3,10,-1.],[11,7,3,5,2.]],threshold:4.1530239395797253e-003,right_val:0.3659774065017700,left_val:0.5767722129821777},{features:[[3,7,4,6,-1.],[3,9,4,2,3.]],threshold:1.7092459602281451e-003,right_val:0.5918939113616943,left_val:0.2843191027641296},{features:[[13,3,6,10,-1.],[15,3,2,10,3.]],threshold:7.5217359699308872e-003,right_val:0.6183109283447266,left_val:0.4052427113056183},{features:[[5,7,8,10,-1.],[5,7,4,5,2.],[9,12,4,5,2.]],threshold:2.2479810286313295e-003,right_val:0.3135401010513306,left_val:0.5783755183219910},{features:[[4,4,12,12,-1.],[10,4,6,6,2.],[4,10,6,6,2.]],threshold:0.0520062111318111,right_val:0.1916636973619461,left_val:0.5541312098503113},{features:[[1,4,6,9,-1.],[3,4,2,9,3.]],threshold:0.0120855299755931,right_val:0.6644591093063355,left_val:0.4032655954360962},{features:[[11,3,2,5,-1.],[11,3,1,5,2.]],threshold:1.4687820112158079e-005,right_val:0.5709382891654968,left_val:0.3535977900028229},{features:[[7,3,2,5,-1.],[8,3,1,5,2.]],threshold:7.1395188570022583e-006,right_val:0.5610269904136658,left_val:0.3037444949150085},{features:[[10,14,2,3,-1.],[10,15,2,1,3.]],threshold:-4.6001640148460865e-003,right_val:0.4580326080322266,left_val:0.7181087136268616},{features:[[5,12,6,2,-1.],[8,12,3,2,2.]],threshold:2.0058949012309313e-003,right_val:0.2953684031963348,left_val:0.5621951818466187},{features:[[9,14,2,3,-1.],[9,15,2,1,3.]],threshold:4.5050270855426788e-003,right_val:0.7619017958641052,left_val:0.4615387916564941},{features:[[4,11,12,6,-1.],[4,14,12,3,2.]],threshold:0.0117468303069472,right_val:0.1772529035806656,left_val:0.5343837141990662},{features:[[11,11,5,9,-1.],[11,14,5,3,3.]],threshold:-0.0583163388073444,right_val:0.5340772271156311,left_val:0.1686245948076248},{features:[[6,15,3,2,-1.],[6,16,3,1,2.]],threshold:2.3629379575140774e-004,right_val:0.6026803851127625,left_val:0.3792056143283844},{features:[[11,0,3,5,-1.],[12,0,1,5,3.]],threshold:-7.8156180679798126e-003,right_val:0.5324323773384094,left_val:0.1512867063283920},{features:[[5,5,6,7,-1.],[8,5,3,7,2.]],threshold:-0.0108761601150036,right_val:0.5319945216178894,left_val:0.2081822007894516},{features:[[13,0,1,9,-1.],[13,3,1,3,3.]],threshold:-2.7745519764721394e-003,right_val:0.5210328102111816,left_val:0.4098246991634369},{features:[[3,2,4,8,-1.],[3,2,2,4,2.],[5,6,2,4,2.]],threshold:-7.8276381827890873e-004,right_val:0.3478842079639435,left_val:0.5693274140357971},{features:[[13,12,4,6,-1.],[13,14,4,2,3.]],threshold:0.0138704096898437,right_val:0.2257698029279709,left_val:0.5326750874519348},{features:[[3,12,4,6,-1.],[3,14,4,2,3.]],threshold:-0.0236749108880758,right_val:0.5200707912445068,left_val:0.1551305055618286},{features:[[13,11,3,4,-1.],[13,13,3,2,2.]],threshold:-1.4879409718560055e-005,right_val:0.3820176124572754,left_val:0.5500566959381104},{features:[[4,4,4,3,-1.],[4,5,4,1,3.]],threshold:3.6190641112625599e-003,right_val:0.6639748215675354,left_val:0.4238683879375458},{features:[[7,5,11,8,-1.],[7,9,11,4,2.]],threshold:-0.0198171101510525,right_val:0.5382357835769653,left_val:0.2150038033723831},{features:[[7,8,3,4,-1.],[8,8,1,4,3.]],threshold:-3.8154039066284895e-003,right_val:0.4215297102928162,left_val:0.6675711274147034},{features:[[9,1,6,1,-1.],[11,1,2,1,3.]],threshold:-4.9775829538702965e-003,right_val:0.5386328101158142,left_val:0.2267289012670517},{features:[[5,5,3,3,-1.],[5,6,3,1,3.]],threshold:2.2441020701080561e-003,right_val:0.6855735778808594,left_val:0.4308691024780273},{features:[[0,9,20,6,-1.],[10,9,10,3,2.],[0,12,10,3,2.]],threshold:0.0122824599966407,right_val:0.3467479050159454,left_val:0.5836614966392517},{features:[[8,6,3,5,-1.],[9,6,1,5,3.]],threshold:-2.8548699337989092e-003,right_val:0.4311453998088837,left_val:0.7016944885253906},{features:[[11,0,1,3,-1.],[11,1,1,1,3.]],threshold:-3.7875669077038765e-003,right_val:0.5224946141242981,left_val:0.2895345091819763},{features:[[4,2,4,2,-1.],[4,3,4,1,2.]],threshold:-1.2201230274513364e-003,right_val:0.5481644868850708,left_val:0.2975570857524872},{features:[[12,6,4,3,-1.],[12,7,4,1,3.]],threshold:0.0101605998352170,right_val:0.8182697892189026,left_val:0.4888817965984345},{features:[[5,0,6,4,-1.],[7,0,2,4,3.]],threshold:-0.0161745697259903,right_val:0.5239992737770081,left_val:0.1481492966413498},{features:[[9,7,3,8,-1.],[10,7,1,8,3.]],threshold:0.0192924607545137,right_val:0.7378190755844116,left_val:0.4786309897899628},{features:[[9,7,2,2,-1.],[10,7,1,2,2.]],threshold:-3.2479539513587952e-003,right_val:0.4470643997192383,left_val:0.7374222874641419},{features:[[6,7,14,4,-1.],[13,7,7,2,2.],[6,9,7,2,2.]],threshold:-9.3803480267524719e-003,right_val:0.5537996292114258,left_val:0.3489154875278473},{features:[[0,5,3,6,-1.],[0,7,3,2,3.]],threshold:-0.0126061299815774,right_val:0.5315443277359009,left_val:0.2379686981439591},{features:[[13,11,3,4,-1.],[13,13,3,2,2.]],threshold:-0.0256219301372766,right_val:0.5138769745826721,left_val:0.1964688003063202},{features:[[4,11,3,4,-1.],[4,13,3,2,2.]],threshold:-7.5741496402770281e-005,right_val:0.3365853130817413,left_val:0.5590522885322571},{features:[[5,9,12,8,-1.],[11,9,6,4,2.],[5,13,6,4,2.]],threshold:-0.0892108827829361,right_val:0.5162634849548340,left_val:0.0634046569466591},{features:[[9,12,1,3,-1.],[9,13,1,1,3.]],threshold:-2.7670480776578188e-003,right_val:0.4490706026554108,left_val:0.7323467731475830},{features:[[10,15,2,4,-1.],[10,17,2,2,2.]],threshold:2.7152578695677221e-004,right_val:0.5985518097877502,left_val:0.4114834964275360}],threshold:23.9187908172607420},{simpleClassifiers:[{features:[[7,7,6,1,-1.],[9,7,2,1,3.]],threshold:1.4786219689995050e-003,right_val:0.6643316745758057,left_val:0.2663545012474060},{features:[[12,3,6,6,-1.],[15,3,3,3,2.],[12,6,3,3,2.]],threshold:-1.8741659587249160e-003,right_val:0.2518512904644013,left_val:0.6143848896026611},{features:[[0,4,10,6,-1.],[0,6,10,2,3.]],threshold:-1.7151009524241090e-003,right_val:0.2397463023662567,left_val:0.5766341090202332},{features:[[8,3,8,14,-1.],[12,3,4,7,2.],[8,10,4,7,2.]],threshold:-1.8939269939437509e-003,right_val:0.2529144883155823,left_val:0.5682045817375183},{features:[[4,4,7,15,-1.],[4,9,7,5,3.]],threshold:-5.3006052039563656e-003,right_val:0.5556079745292664,left_val:0.1640675961971283},{features:[[12,2,6,8,-1.],[15,2,3,4,2.],[12,6,3,4,2.]],threshold:-0.0466625317931175,right_val:0.4762830138206482,left_val:0.6123154163360596},{features:[[2,2,6,8,-1.],[2,2,3,4,2.],[5,6,3,4,2.]],threshold:-7.9431332414969802e-004,right_val:0.2839404046535492,left_val:0.5707858800888062},{features:[[2,13,18,7,-1.],[8,13,6,7,3.]],threshold:0.0148916700854898,right_val:0.6006367206573486,left_val:0.4089672863483429},{features:[[4,3,8,14,-1.],[4,3,4,7,2.],[8,10,4,7,2.]],threshold:-1.2046529445797205e-003,right_val:0.2705289125442505,left_val:0.5712450742721558},{features:[[18,1,2,6,-1.],[18,3,2,2,3.]],threshold:6.0619381256401539e-003,right_val:0.3262225985527039,left_val:0.5262504220008850},{features:[[9,11,2,3,-1.],[9,12,2,1,3.]],threshold:-2.5286648888140917e-003,right_val:0.4199256896972656,left_val:0.6853830814361572},{features:[[18,1,2,6,-1.],[18,3,2,2,3.]],threshold:-5.9010218828916550e-003,right_val:0.5434812903404236,left_val:0.3266282081604004},{features:[[0,1,2,6,-1.],[0,3,2,2,3.]],threshold:5.6702760048210621e-003,right_val:0.2319003939628601,left_val:0.5468410849571228},{features:[[1,5,18,6,-1.],[1,7,18,2,3.]],threshold:-3.0304100364446640e-003,right_val:0.2708238065242767,left_val:0.5570667982101440},{features:[[0,2,6,7,-1.],[3,2,3,7,2.]],threshold:2.9803649522364140e-003,right_val:0.5890625715255737,left_val:0.3700568974018097},{features:[[7,3,6,14,-1.],[7,10,6,7,2.]],threshold:-0.0758405104279518,right_val:0.5419948101043701,left_val:0.2140070050954819},{features:[[3,7,13,10,-1.],[3,12,13,5,2.]],threshold:0.0192625392228365,right_val:0.2726590037345886,left_val:0.5526772141456604},{features:[[11,15,2,2,-1.],[11,16,2,1,2.]],threshold:1.8888259364757687e-004,right_val:0.6017209887504578,left_val:0.3958011865615845},{features:[[2,11,16,4,-1.],[2,11,8,2,2.],[10,13,8,2,2.]],threshold:0.0293695498257875,right_val:0.1435758024454117,left_val:0.5241373777389526},{features:[[13,7,6,4,-1.],[16,7,3,2,2.],[13,9,3,2,2.]],threshold:1.0417619487270713e-003,right_val:0.5929983258247376,left_val:0.3385409116744995},{features:[[6,10,3,9,-1.],[6,13,3,3,3.]],threshold:2.6125640142709017e-003,right_val:0.3021597862243652,left_val:0.5485377907752991},{features:[[14,6,1,6,-1.],[14,9,1,3,2.]],threshold:9.6977467183023691e-004,right_val:0.5532032847404480,left_val:0.3375276029109955},{features:[[5,10,4,1,-1.],[7,10,2,1,2.]],threshold:5.9512659208849072e-004,right_val:0.3359399139881134,left_val:0.5631743073463440},{features:[[3,8,15,5,-1.],[8,8,5,5,3.]],threshold:-0.1015655994415283,right_val:0.5230425000190735,left_val:0.0637350380420685},{features:[[1,6,5,4,-1.],[1,8,5,2,2.]],threshold:0.0361566990613937,right_val:0.1029528975486755,left_val:0.5136963129043579},{features:[[3,1,17,6,-1.],[3,3,17,2,3.]],threshold:3.4624140243977308e-003,right_val:0.5558289289474487,left_val:0.3879320025444031},{features:[[6,7,8,2,-1.],[10,7,4,2,2.]],threshold:0.0195549800992012,right_val:0.1875859946012497,left_val:0.5250086784362793},{features:[[9,7,3,2,-1.],[10,7,1,2,3.]],threshold:-2.3121440317481756e-003,right_val:0.4679641127586365,left_val:0.6672028899192810},{features:[[8,7,3,2,-1.],[9,7,1,2,3.]],threshold:-1.8605289515107870e-003,right_val:0.4334670901298523,left_val:0.7163379192352295},{features:[[8,9,4,2,-1.],[8,10,4,1,2.]],threshold:-9.4026362057775259e-004,right_val:0.5650203227996826,left_val:0.3021360933780670},{features:[[8,8,4,3,-1.],[8,9,4,1,3.]],threshold:-5.2418331615626812e-003,right_val:0.5250256061553955,left_val:0.1820009052753449},{features:[[9,5,6,4,-1.],[9,5,3,4,2.]],threshold:1.1729019752237946e-004,right_val:0.5445973277091980,left_val:0.3389188051223755},{features:[[8,13,4,3,-1.],[8,14,4,1,3.]],threshold:1.1878840159624815e-003,right_val:0.6253563165664673,left_val:0.4085349142551422},{features:[[4,7,12,6,-1.],[10,7,6,3,2.],[4,10,6,3,2.]],threshold:-0.0108813596889377,right_val:0.5700082778930664,left_val:0.3378399014472961},{features:[[8,14,4,3,-1.],[8,15,4,1,3.]],threshold:1.7354859737679362e-003,right_val:0.6523038744926453,left_val:0.4204635918140411},{features:[[9,7,3,3,-1.],[9,8,3,1,3.]],threshold:-6.5119052305817604e-003,right_val:0.5428143739700317,left_val:0.2595216035842896},{features:[[7,4,3,8,-1.],[8,4,1,8,3.]],threshold:-1.2136430013924837e-003,right_val:0.3977893888950348,left_val:0.6165143847465515},{features:[[10,0,3,6,-1.],[11,0,1,6,3.]],threshold:-0.0103542404249310,right_val:0.5219504833221436,left_val:0.1628028005361557},{features:[[6,3,4,8,-1.],[8,3,2,8,2.]],threshold:5.5858830455690622e-004,right_val:0.5503574013710022,left_val:0.3199650943279266},{features:[[14,3,6,13,-1.],[14,3,3,13,2.]],threshold:0.0152996499091387,right_val:0.6122388243675232,left_val:0.4103994071483612},{features:[[8,13,3,6,-1.],[8,16,3,3,2.]],threshold:-0.0215882100164890,right_val:0.5197384953498840,left_val:0.1034912988543510},{features:[[14,3,6,13,-1.],[14,3,3,13,2.]],threshold:-0.1283462941646576,right_val:0.4893102943897247,left_val:0.8493865132331848},{features:[[0,7,10,4,-1.],[0,7,5,2,2.],[5,9,5,2,2.]],threshold:-2.2927189711481333e-003,right_val:0.5471575260162354,left_val:0.3130157887935638},{features:[[14,3,6,13,-1.],[14,3,3,13,2.]],threshold:0.0799151062965393,right_val:0.6073989272117615,left_val:0.4856320917606354},{features:[[0,3,6,13,-1.],[3,3,3,13,2.]],threshold:-0.0794410929083824,right_val:0.4624533057212830,left_val:0.8394674062728882},{features:[[9,1,4,1,-1.],[9,1,2,1,2.]],threshold:-5.2800010889768600e-003,right_val:0.5306698083877564,left_val:0.1881695985794067},{features:[[8,0,2,1,-1.],[9,0,1,1,2.]],threshold:1.0463109938427806e-003,right_val:0.2583065927028656,left_val:0.5271229147911072},{features:[[10,16,4,4,-1.],[12,16,2,2,2.],[10,18,2,2,2.]],threshold:2.6317298761568964e-004,right_val:0.5735440850257874,left_val:0.4235304892063141},{features:[[9,6,2,3,-1.],[10,6,1,3,2.]],threshold:-3.6173160187900066e-003,right_val:0.4495444893836975,left_val:0.6934396028518677},{features:[[4,5,12,2,-1.],[8,5,4,2,3.]],threshold:0.0114218797534704,right_val:0.4138193130493164,left_val:0.5900921225547791},{features:[[8,7,3,5,-1.],[9,7,1,5,3.]],threshold:-1.9963278900831938e-003,right_val:0.4327239990234375,left_val:0.6466382741928101}],threshold:24.5278797149658200},{simpleClassifiers:[{features:[[6,4,8,6,-1.],[6,6,8,2,3.]],threshold:-9.9691245704889297e-003,right_val:0.2482212036848068,left_val:0.6142324209213257},{features:[[9,5,2,12,-1.],[9,11,2,6,2.]],threshold:7.3073059320449829e-004,right_val:0.2321965992450714,left_val:0.5704951882362366},{features:[[4,6,6,8,-1.],[4,10,6,4,2.]],threshold:6.4045301405712962e-004,right_val:0.5814933180809021,left_val:0.2112251967191696},{features:[[12,2,8,5,-1.],[12,2,4,5,2.]],threshold:4.5424019917845726e-003,right_val:0.5866311788558960,left_val:0.2950482070446014},{features:[[0,8,18,3,-1.],[0,9,18,1,3.]],threshold:9.2477443104144186e-005,right_val:0.5791326761245728,left_val:0.2990990877151489},{features:[[8,12,4,8,-1.],[8,16,4,4,2.]],threshold:-8.6603146046400070e-003,right_val:0.5635542273521423,left_val:0.2813029885292053},{features:[[0,2,8,5,-1.],[4,2,4,5,2.]],threshold:8.0515816807746887e-003,right_val:0.6054757237434387,left_val:0.3535369038581848},{features:[[13,11,3,4,-1.],[13,13,3,2,2.]],threshold:4.3835240649059415e-004,right_val:0.2731510996818543,left_val:0.5596532225608826},{features:[[5,11,6,1,-1.],[7,11,2,1,3.]],threshold:-9.8168973636347800e-005,right_val:0.3638561069965363,left_val:0.5978031754493713},{features:[[11,3,3,1,-1.],[12,3,1,1,3.]],threshold:-1.1298790341243148e-003,right_val:0.5432729125022888,left_val:0.2755252122879028},{features:[[7,13,5,3,-1.],[7,14,5,1,3.]],threshold:6.4356150105595589e-003,right_val:0.7069833278656006,left_val:0.4305641949176788},{features:[[11,11,7,6,-1.],[11,14,7,3,2.]],threshold:-0.0568293295800686,right_val:0.5294997096061707,left_val:0.2495242953300476},{features:[[2,11,7,6,-1.],[2,14,7,3,2.]],threshold:4.0668169967830181e-003,right_val:0.2497723996639252,left_val:0.5478553175926209},{features:[[12,14,2,6,-1.],[12,16,2,2,3.]],threshold:4.8164798499783501e-005,right_val:0.5706356167793274,left_val:0.3938601016998291},{features:[[8,14,3,3,-1.],[8,15,3,1,3.]],threshold:6.1795017682015896e-003,right_val:0.7394766807556152,left_val:0.4407606124877930},{features:[[11,0,3,5,-1.],[12,0,1,5,3.]],threshold:6.4985752105712891e-003,right_val:0.2479152977466583,left_val:0.5445243120193481},{features:[[6,1,4,9,-1.],[8,1,2,9,2.]],threshold:-1.0211090557277203e-003,right_val:0.5338971018791199,left_val:0.2544766962528229},{features:[[10,3,6,1,-1.],[12,3,2,1,3.]],threshold:-5.4247528314590454e-003,right_val:0.5324069261550903,left_val:0.2718858122825623},{features:[[8,8,3,4,-1.],[8,10,3,2,2.]],threshold:-1.0559899965301156e-003,right_val:0.5534508824348450,left_val:0.3178288042545319},{features:[[8,12,4,2,-1.],[8,13,4,1,2.]],threshold:6.6465808777138591e-004,right_val:0.6558194160461426,left_val:0.4284219145774841},{features:[[5,18,4,2,-1.],[5,19,4,1,2.]],threshold:-2.7524109464138746e-004,right_val:0.3810262978076935,left_val:0.5902860760688782},{features:[[2,1,18,6,-1.],[2,3,18,2,3.]],threshold:4.2293202131986618e-003,right_val:0.5709385871887207,left_val:0.3816489875316620},{features:[[6,0,3,2,-1.],[7,0,1,2,3.]],threshold:-3.2868210691958666e-003,right_val:0.5259544253349304,left_val:0.1747743934392929},{features:[[13,8,6,2,-1.],[16,8,3,1,2.],[13,9,3,1,2.]],threshold:1.5611879643984139e-004,right_val:0.5725612044334412,left_val:0.3601722121238709},{features:[[6,10,3,6,-1.],[6,13,3,3,2.]],threshold:-7.3621381488919724e-006,right_val:0.3044497072696686,left_val:0.5401858091354370},{features:[[0,13,20,4,-1.],[10,13,10,2,2.],[0,15,10,2,2.]],threshold:-0.0147672500461340,right_val:0.5573434829711914,left_val:0.3220770061016083},{features:[[7,7,6,5,-1.],[9,7,2,5,3.]],threshold:0.0244895908981562,right_val:0.6518812775611877,left_val:0.4301528036594391},{features:[[11,0,2,2,-1.],[11,1,2,1,2.]],threshold:-3.7652091123163700e-004,right_val:0.5598236918449402,left_val:0.3564583063125610},{features:[[1,8,6,2,-1.],[1,8,3,1,2.],[4,9,3,1,2.]],threshold:7.3657688517414499e-006,right_val:0.5561897754669190,left_val:0.3490782976150513},{features:[[0,2,20,2,-1.],[10,2,10,1,2.],[0,3,10,1,2.]],threshold:-0.0150999398902059,right_val:0.5335299968719482,left_val:0.1776272058486939},{features:[[7,14,5,3,-1.],[7,15,5,1,3.]],threshold:-3.8316650316119194e-003,right_val:0.4221394062042236,left_val:0.6149687767028809},{features:[[7,13,6,6,-1.],[10,13,3,3,2.],[7,16,3,3,2.]],threshold:0.0169254001230001,right_val:0.2166585028171539,left_val:0.5413014888763428},{features:[[9,12,2,3,-1.],[9,13,2,1,3.]],threshold:-3.0477850232273340e-003,right_val:0.4354617893695831,left_val:0.6449490785598755},{features:[[16,11,1,6,-1.],[16,13,1,2,3.]],threshold:3.2140589319169521e-003,right_val:0.3523217141628265,left_val:0.5400155186653137},{features:[[3,11,1,6,-1.],[3,13,1,2,3.]],threshold:-4.0023201145231724e-003,right_val:0.5338417291641235,left_val:0.2774524092674255},{features:[[4,4,14,12,-1.],[11,4,7,6,2.],[4,10,7,6,2.]],threshold:7.4182129465043545e-003,right_val:0.3702817857265472,left_val:0.5676739215850830},{features:[[5,4,3,3,-1.],[5,5,3,1,3.]],threshold:-8.8764587417244911e-003,right_val:0.4583688974380493,left_val:0.7749221920967102},{features:[[12,3,3,3,-1.],[13,3,1,3,3.]],threshold:2.7311739977449179e-003,right_val:0.3996661007404327,left_val:0.5338721871376038},{features:[[6,6,8,3,-1.],[6,7,8,1,3.]],threshold:-2.5082379579544067e-003,right_val:0.3777498900890350,left_val:0.5611963272094727},{features:[[12,3,3,3,-1.],[13,3,1,3,3.]],threshold:-8.0541074275970459e-003,right_val:0.5179182887077332,left_val:0.2915228903293610},{features:[[3,1,4,10,-1.],[3,1,2,5,2.],[5,6,2,5,2.]],threshold:-9.7938813269138336e-004,right_val:0.3700192868709564,left_val:0.5536432862281799},{features:[[5,7,10,2,-1.],[5,7,5,2,2.]],threshold:-5.8745909482240677e-003,right_val:0.5679376125335693,left_val:0.3754391074180603},{features:[[8,7,3,3,-1.],[9,7,1,3,3.]],threshold:-4.4936719350516796e-003,right_val:0.4480949938297272,left_val:0.7019699215888977},{features:[[15,12,2,3,-1.],[15,13,2,1,3.]],threshold:-5.4389229044318199e-003,right_val:0.5313386917114258,left_val:0.2310364991426468},{features:[[7,8,3,4,-1.],[8,8,1,4,3.]],threshold:-7.5094640487805009e-004,right_val:0.4129343032836914,left_val:0.5864868760108948},{features:[[13,4,1,12,-1.],[13,10,1,6,2.]],threshold:1.4528800420521293e-005,right_val:0.5619621276855469,left_val:0.3732407093048096},{features:[[4,5,12,12,-1.],[4,5,6,6,2.],[10,11,6,6,2.]],threshold:0.0407580696046352,right_val:0.2720521986484528,left_val:0.5312091112136841},{features:[[7,14,7,3,-1.],[7,15,7,1,3.]],threshold:6.6505931317806244e-003,right_val:0.6693493723869324,left_val:0.4710015952587128},{features:[[3,12,2,3,-1.],[3,13,2,1,3.]],threshold:4.5759351924061775e-003,right_val:0.1637275964021683,left_val:0.5167819261550903},{features:[[3,2,14,2,-1.],[10,2,7,1,2.],[3,3,7,1,2.]],threshold:6.5269311890006065e-003,right_val:0.2938531935214996,left_val:0.5397608876228333},{features:[[0,1,3,10,-1.],[1,1,1,10,3.]],threshold:-0.0136603796854615,right_val:0.4532200098037720,left_val:0.7086488008499146},{features:[[9,0,6,5,-1.],[11,0,2,5,3.]],threshold:0.0273588690906763,right_val:0.3589231967926025,left_val:0.5206481218338013},{features:[[5,7,6,2,-1.],[8,7,3,2,2.]],threshold:6.2197551596909761e-004,right_val:0.5441123247146606,left_val:0.3507075905799866},{features:[[7,1,6,10,-1.],[7,6,6,5,2.]],threshold:-3.3077080734074116e-003,right_val:0.4024891853332520,left_val:0.5859522819519043},{features:[[1,1,18,3,-1.],[7,1,6,3,3.]],threshold:-0.0106311095878482,right_val:0.4422602951526642,left_val:0.6743267178535461},{features:[[16,3,3,6,-1.],[16,5,3,2,3.]],threshold:0.0194416493177414,right_val:0.1797904968261719,left_val:0.5282716155052185}],threshold:27.1533508300781250},{simpleClassifiers:[{features:[[6,3,7,6,-1.],[6,6,7,3,2.]],threshold:-5.5052167735993862e-003,right_val:0.2626559138298035,left_val:0.5914731025695801},{features:[[4,7,12,2,-1.],[8,7,4,2,3.]],threshold:1.9562279339879751e-003,right_val:0.5741627216339111,left_val:0.2312581986188889},{features:[[0,4,17,10,-1.],[0,9,17,5,2.]],threshold:-8.8924784213304520e-003,right_val:0.5626654028892517,left_val:0.1656530052423477},{features:[[3,4,15,16,-1.],[3,12,15,8,2.]],threshold:0.0836383774876595,right_val:0.1957294940948486,left_val:0.5423449873924255},{features:[[7,15,6,4,-1.],[7,17,6,2,2.]],threshold:1.2282270472496748e-003,right_val:0.5992503762245178,left_val:0.3417904078960419},{features:[[15,2,4,9,-1.],[15,2,2,9,2.]],threshold:5.7629169896245003e-003,right_val:0.6079903841018677,left_val:0.3719581961631775},{features:[[2,3,3,2,-1.],[2,4,3,1,2.]],threshold:-1.6417410224676132e-003,right_val:0.5576915740966797,left_val:0.2577486038208008},{features:[[13,6,7,9,-1.],[13,9,7,3,3.]],threshold:3.4113149158656597e-003,right_val:0.5514171719551086,left_val:0.2950749099254608},{features:[[8,11,4,3,-1.],[8,12,4,1,3.]],threshold:-0.0110693201422691,right_val:0.4477078914642334,left_val:0.7569358944892883},{features:[[0,2,20,6,-1.],[10,2,10,3,2.],[0,5,10,3,2.]],threshold:0.0348659716546535,right_val:0.2669621109962463,left_val:0.5583708882331848},{features:[[3,2,6,10,-1.],[3,2,3,5,2.],[6,7,3,5,2.]],threshold:6.5701099811121821e-004,right_val:0.2988890111446381,left_val:0.5627313256263733},{features:[[13,10,3,4,-1.],[13,12,3,2,2.]],threshold:-0.0243391301482916,right_val:0.5108863115310669,left_val:0.2771185040473938},{features:[[4,10,3,4,-1.],[4,12,3,2,2.]],threshold:5.9435202274471521e-004,right_val:0.3120341897010803,left_val:0.5580651760101318},{features:[[7,5,6,3,-1.],[9,5,2,3,3.]],threshold:2.2971509024500847e-003,right_val:0.5679075717926025,left_val:0.3330250084400177},{features:[[7,6,6,8,-1.],[7,10,6,4,2.]],threshold:-3.7801829166710377e-003,right_val:0.5344808101654053,left_val:0.2990534901618958},{features:[[0,11,20,6,-1.],[0,14,20,3,2.]],threshold:-0.1342066973447800,right_val:0.5392568111419678,left_val:0.1463858932256699},{features:[[4,13,4,6,-1.],[4,13,2,3,2.],[6,16,2,3,2.]],threshold:7.5224548345431685e-004,right_val:0.5692734718322754,left_val:0.3746953904628754},{features:[[6,0,8,12,-1.],[10,0,4,6,2.],[6,6,4,6,2.]],threshold:-0.0405455417931080,right_val:0.5484297871589661,left_val:0.2754747867584229},{features:[[2,0,15,2,-1.],[2,1,15,1,2.]],threshold:1.2572970008477569e-003,right_val:0.5756075978279114,left_val:0.3744584023952484},{features:[[9,12,2,3,-1.],[9,13,2,1,3.]],threshold:-7.4249948374927044e-003,right_val:0.4728231132030487,left_val:0.7513859272003174},{features:[[3,12,1,2,-1.],[3,13,1,1,2.]],threshold:5.0908129196614027e-004,right_val:0.2932321131229401,left_val:0.5404896736145020},{features:[[9,11,2,3,-1.],[9,12,2,1,3.]],threshold:-1.2808450264856219e-003,right_val:0.4273349046707153,left_val:0.6169779896736145},{features:[[7,3,3,1,-1.],[8,3,1,1,3.]],threshold:-1.8348860321566463e-003,right_val:0.5206472277641296,left_val:0.2048496007919312},{features:[[17,7,3,6,-1.],[17,9,3,2,3.]],threshold:0.0274848695844412,right_val:0.1675522029399872,left_val:0.5252984762191773},{features:[[7,2,3,2,-1.],[8,2,1,2,3.]],threshold:2.2372419480234385e-003,right_val:0.2777658104896545,left_val:0.5267782807350159},{features:[[11,4,5,3,-1.],[11,5,5,1,3.]],threshold:-8.8635291904211044e-003,right_val:0.4812048971652985,left_val:0.6954557895660400},{features:[[4,4,5,3,-1.],[4,5,5,1,3.]],threshold:4.1753971017897129e-003,right_val:0.6349195837974548,left_val:0.4291887879371643},{features:[[19,3,1,2,-1.],[19,4,1,1,2.]],threshold:-1.7098189564421773e-003,right_val:0.5361248850822449,left_val:0.2930536866188049},{features:[[5,5,4,3,-1.],[5,6,4,1,3.]],threshold:6.5328548662364483e-003,right_val:0.7409694194793701,left_val:0.4495325088500977},{features:[[17,7,3,6,-1.],[17,9,3,2,3.]],threshold:-9.5372907817363739e-003,right_val:0.5416501760482788,left_val:0.3149119913578033},{features:[[0,7,3,6,-1.],[0,9,3,2,3.]],threshold:0.0253109894692898,right_val:0.1311707943677902,left_val:0.5121892094612122},{features:[[14,2,6,9,-1.],[14,5,6,3,3.]],threshold:0.0364609695971012,right_val:0.2591339945793152,left_val:0.5175911784172058},{features:[[0,4,5,6,-1.],[0,6,5,2,3.]],threshold:0.0208543296903372,right_val:0.1582316011190414,left_val:0.5137140154838562},{features:[[10,5,6,2,-1.],[12,5,2,2,3.]],threshold:-8.7207747856155038e-004,right_val:0.4398978948593140,left_val:0.5574309825897217},{features:[[4,5,6,2,-1.],[6,5,2,2,3.]],threshold:-1.5227000403683633e-005,right_val:0.3708069920539856,left_val:0.5548940896987915},{features:[[8,1,4,6,-1.],[8,3,4,2,3.]],threshold:-8.4316509310156107e-004,right_val:0.5554211139678955,left_val:0.3387419879436493},{features:[[0,2,3,6,-1.],[0,4,3,2,3.]],threshold:3.6037859972566366e-003,right_val:0.3411171138286591,left_val:0.5358061790466309},{features:[[6,6,8,3,-1.],[6,7,8,1,3.]],threshold:-6.8057891912758350e-003,right_val:0.4345862865447998,left_val:0.6125202775001526},{features:[[0,1,5,9,-1.],[0,4,5,3,3.]],threshold:-0.0470216609537601,right_val:0.5193738937377930,left_val:0.2358165979385376},{features:[[16,0,4,15,-1.],[16,0,2,15,2.]],threshold:-0.0369541086256504,right_val:0.4760943949222565,left_val:0.7323111295700073},{features:[[1,10,3,2,-1.],[1,11,3,1,2.]],threshold:1.0439479956403375e-003,right_val:0.3411330878734589,left_val:0.5419455170631409},{features:[[14,4,1,10,-1.],[14,9,1,5,2.]],threshold:-2.1050689974799752e-004,right_val:0.5554947257041931,left_val:0.2821694016456604},{features:[[0,1,4,12,-1.],[2,1,2,12,2.]],threshold:-0.0808315873146057,right_val:0.4697434902191162,left_val:0.9129930138587952},{features:[[11,11,4,2,-1.],[11,11,2,2,2.]],threshold:-3.6579059087671340e-004,right_val:0.3978292942047119,left_val:0.6022670269012451},{features:[[5,11,4,2,-1.],[7,11,2,2,2.]],threshold:-1.2545920617412776e-004,right_val:0.3845539987087250,left_val:0.5613213181495667},{features:[[3,8,15,5,-1.],[8,8,5,5,3.]],threshold:-0.0687864869832993,right_val:0.5300496816635132,left_val:0.2261611968278885},{features:[[0,0,6,10,-1.],[3,0,3,10,2.]],threshold:0.0124157899990678,right_val:0.5828812122344971,left_val:0.4075691998004913},{features:[[11,4,3,2,-1.],[12,4,1,2,3.]],threshold:-4.7174817882478237e-003,right_val:0.5267757773399353,left_val:0.2827253937721252},{features:[[8,12,3,8,-1.],[8,16,3,4,2.]],threshold:0.0381368584930897,right_val:0.1023615971207619,left_val:0.5074741244316101},{features:[[8,14,5,3,-1.],[8,15,5,1,3.]],threshold:-2.8168049175292253e-003,right_val:0.4359692931175232,left_val:0.6169006824493408},{features:[[7,14,4,3,-1.],[7,15,4,1,3.]],threshold:8.1303603947162628e-003,right_val:0.7606095075607300,left_val:0.4524433016777039},{features:[[11,4,3,2,-1.],[12,4,1,2,3.]],threshold:6.0056019574403763e-003,right_val:0.1859712004661560,left_val:0.5240408778190613},{features:[[3,15,14,4,-1.],[3,15,7,2,2.],[10,17,7,2,2.]],threshold:0.0191393196582794,right_val:0.2332071959972382,left_val:0.5209379196166992},{features:[[2,2,16,4,-1.],[10,2,8,2,2.],[2,4,8,2,2.]],threshold:0.0164457596838474,right_val:0.3264234960079193,left_val:0.5450702905654907},{features:[[0,8,6,12,-1.],[3,8,3,12,2.]],threshold:-0.0373568907380104,right_val:0.4533241987228394,left_val:0.6999046802520752},{features:[[5,7,10,2,-1.],[5,7,5,2,2.]],threshold:-0.0197279006242752,right_val:0.5412809848785400,left_val:0.2653664946556091},{features:[[9,7,2,5,-1.],[10,7,1,5,2.]],threshold:6.6972579807043076e-003,right_val:0.7138652205467224,left_val:0.4480566084384918},{features:[[13,7,6,4,-1.],[16,7,3,2,2.],[13,9,3,2,2.]],threshold:7.4457528535276651e-004,right_val:0.5471320152282715,left_val:0.4231350123882294},{features:[[0,13,8,2,-1.],[0,14,8,1,2.]],threshold:1.1790640419349074e-003,right_val:0.3130455017089844,left_val:0.5341702103614807},{features:[[13,7,6,4,-1.],[16,7,3,2,2.],[13,9,3,2,2.]],threshold:0.0349806100130081,right_val:0.3430530130863190,left_val:0.5118659734725952},{features:[[1,7,6,4,-1.],[1,7,3,2,2.],[4,9,3,2,2.]],threshold:5.6859792675822973e-004,right_val:0.5468639731407166,left_val:0.3532187044620514},{features:[[12,6,1,12,-1.],[12,12,1,6,2.]],threshold:-0.0113406497985125,right_val:0.5348700881004334,left_val:0.2842353880405426},{features:[[9,5,2,6,-1.],[10,5,1,6,2.]],threshold:-6.6228108480572701e-003,right_val:0.4492664933204651,left_val:0.6883640289306641},{features:[[14,12,2,3,-1.],[14,13,2,1,3.]],threshold:-8.0160330981016159e-003,right_val:0.5224308967590332,left_val:0.1709893941879273},{features:[[4,12,2,3,-1.],[4,13,2,1,3.]],threshold:1.4206819469109178e-003,right_val:0.2993383109569550,left_val:0.5290846228599548},{features:[[8,12,4,3,-1.],[8,13,4,1,3.]],threshold:-2.7801711112260818e-003,right_val:0.4460499882698059,left_val:0.6498854160308838},{features:[[5,2,2,4,-1.],[5,2,1,2,2.],[6,4,1,2,2.]],threshold:-1.4747589593753219e-003,right_val:0.5388113260269165,left_val:0.3260438144207001},{features:[[5,5,11,3,-1.],[5,6,11,1,3.]],threshold:-0.0238303393125534,right_val:0.4801219999790192,left_val:0.7528941035270691},{features:[[7,6,4,12,-1.],[7,12,4,6,2.]],threshold:6.9369790144264698e-003,right_val:0.3261427879333496,left_val:0.5335165858268738},{features:[[12,13,8,5,-1.],[12,13,4,5,2.]],threshold:8.2806255668401718e-003,right_val:0.5737829804420471,left_val:0.4580394029617310},{features:[[7,6,1,12,-1.],[7,12,1,6,2.]],threshold:-0.0104395002126694,right_val:0.5233827829360962,left_val:0.2592320144176483}],threshold:34.5541114807128910},{simpleClassifiers:[{features:[[1,2,6,3,-1.],[4,2,3,3,2.]],threshold:7.2006587870419025e-003,right_val:0.6849808096885681,left_val:0.3258886039257050},{features:[[9,5,6,10,-1.],[12,5,3,5,2.],[9,10,3,5,2.]],threshold:-2.8593589086085558e-003,right_val:0.2537829875946045,left_val:0.5838881134986877},{features:[[5,5,8,12,-1.],[5,5,4,6,2.],[9,11,4,6,2.]],threshold:6.8580528022721410e-004,right_val:0.2812424004077911,left_val:0.5708081722259522},{features:[[0,7,20,6,-1.],[0,9,20,2,3.]],threshold:7.9580191522836685e-003,right_val:0.5544260740280151,left_val:0.2501051127910614},{features:[[4,2,2,2,-1.],[4,3,2,1,2.]],threshold:-1.2124150525778532e-003,right_val:0.5433350205421448,left_val:0.2385368049144745},{features:[[4,18,12,2,-1.],[8,18,4,2,3.]],threshold:7.9426132142543793e-003,right_val:0.6220757961273193,left_val:0.3955070972442627},{features:[[7,4,4,16,-1.],[7,12,4,8,2.]],threshold:2.4630590341985226e-003,right_val:0.2992357909679413,left_val:0.5639708042144775},{features:[[7,6,7,8,-1.],[7,10,7,4,2.]],threshold:-6.0396599583327770e-003,right_val:0.5411676764488220,left_val:0.2186512947082520},{features:[[6,3,3,1,-1.],[7,3,1,1,3.]],threshold:-1.2988339876756072e-003,right_val:0.5364584922790527,left_val:0.2350706011056900},{features:[[11,15,2,4,-1.],[11,17,2,2,2.]],threshold:2.2299369447864592e-004,right_val:0.5729606151580811,left_val:0.3804112970829010},{features:[[3,5,4,8,-1.],[3,9,4,4,2.]],threshold:1.4654280385002494e-003,right_val:0.5258268713951111,left_val:0.2510167956352234},{features:[[7,1,6,12,-1.],[7,7,6,6,2.]],threshold:-8.1210042117163539e-004,right_val:0.3851158916950226,left_val:0.5992823839187622},{features:[[4,6,6,2,-1.],[6,6,2,2,3.]],threshold:-1.3836020370945334e-003,right_val:0.3636586964130402,left_val:0.5681396126747131},{features:[[16,4,4,6,-1.],[16,6,4,2,3.]],threshold:-0.0279364492744207,right_val:0.5377560257911682,left_val:0.1491317003965378},{features:[[3,3,5,2,-1.],[3,4,5,1,2.]],threshold:-4.6919551095925272e-004,right_val:0.5572484731674194,left_val:0.3692429959774017},{features:[[9,11,2,3,-1.],[9,12,2,1,3.]],threshold:-4.9829659983515739e-003,right_val:0.4532504081726074,left_val:0.6758509278297424},{features:[[2,16,4,2,-1.],[2,17,4,1,2.]],threshold:1.8815309740602970e-003,right_val:0.2932539880275726,left_val:0.5368022918701172},{features:[[7,13,6,6,-1.],[10,13,3,3,2.],[7,16,3,3,2.]],threshold:-0.0190675500780344,right_val:0.5330067276954651,left_val:0.1649377048015595},{features:[[7,0,3,4,-1.],[8,0,1,4,3.]],threshold:-4.6906559728085995e-003,right_val:0.5119361877441406,left_val:0.1963925957679749},{features:[[8,15,4,3,-1.],[8,16,4,1,3.]],threshold:5.9777139686048031e-003,right_val:0.7008398175239563,left_val:0.4671171903610230},{features:[[0,4,4,6,-1.],[0,6,4,2,3.]],threshold:-0.0333031304180622,right_val:0.5104162096977234,left_val:0.1155416965484619},{features:[[5,6,12,3,-1.],[9,6,4,3,3.]],threshold:0.0907441079616547,right_val:0.1306173056364059,left_val:0.5149660110473633},{features:[[7,6,6,14,-1.],[9,6,2,14,3.]],threshold:9.3555898638442159e-004,right_val:0.5439859032630920,left_val:0.3605481088161469},{features:[[9,7,3,3,-1.],[10,7,1,3,3.]],threshold:0.0149016501381993,right_val:0.7687569856643677,left_val:0.4886212050914764},{features:[[6,12,2,4,-1.],[6,14,2,2,2.]],threshold:6.1594118596985936e-004,right_val:0.3240939080715179,left_val:0.5356813073158264},{features:[[10,12,7,6,-1.],[10,14,7,2,3.]],threshold:-0.0506709888577461,right_val:0.5230404138565064,left_val:0.1848621964454651},{features:[[1,0,15,2,-1.],[1,1,15,1,2.]],threshold:6.8665749859064817e-004,right_val:0.5517945885658264,left_val:0.3840579986572266},{features:[[14,0,6,6,-1.],[14,0,3,6,2.]],threshold:8.3712432533502579e-003,right_val:0.6131753921508789,left_val:0.4288564026355743},{features:[[5,3,3,1,-1.],[6,3,1,1,3.]],threshold:-1.2953069526702166e-003,right_val:0.5280737876892090,left_val:0.2913674116134644},{features:[[14,0,6,6,-1.],[14,0,3,6,2.]],threshold:-0.0419416800141335,right_val:0.4856030941009522,left_val:0.7554799914360046},{features:[[0,3,20,10,-1.],[0,8,20,5,2.]],threshold:-0.0235293805599213,right_val:0.5256081223487854,left_val:0.2838279902935028},{features:[[14,0,6,6,-1.],[14,0,3,6,2.]],threshold:0.0408574491739273,right_val:0.6277297139167786,left_val:0.4870935082435608},{features:[[0,0,6,6,-1.],[3,0,3,6,2.]],threshold:-0.0254068691283464,right_val:0.4575029015541077,left_val:0.7099707722663879},{features:[[19,15,1,2,-1.],[19,16,1,1,2.]],threshold:-4.1415440500713885e-004,right_val:0.5469412207603455,left_val:0.4030886888504028},{features:[[0,2,4,8,-1.],[2,2,2,8,2.]],threshold:0.0218241196125746,right_val:0.6768701076507568,left_val:0.4502024054527283},{features:[[2,1,18,4,-1.],[11,1,9,2,2.],[2,3,9,2,2.]],threshold:0.0141140399500728,right_val:0.3791700005531311,left_val:0.5442860722541809},{features:[[8,12,1,2,-1.],[8,13,1,1,2.]],threshold:6.7214590671937913e-005,right_val:0.5873476266860962,left_val:0.4200463891029358},{features:[[5,2,10,6,-1.],[10,2,5,3,2.],[5,5,5,3,2.]],threshold:-7.9417638480663300e-003,right_val:0.5585265755653381,left_val:0.3792561888694763},{features:[[9,7,2,4,-1.],[10,7,1,4,2.]],threshold:-7.2144409641623497e-003,right_val:0.4603548943996429,left_val:0.7253103852272034},{features:[[9,7,3,3,-1.],[10,7,1,3,3.]],threshold:2.5817339774221182e-003,right_val:0.5900238752365112,left_val:0.4693301916122437},{features:[[4,5,12,8,-1.],[8,5,4,8,3.]],threshold:0.1340931951999664,right_val:0.1808844953775406,left_val:0.5149213075637817},{features:[[15,15,4,3,-1.],[15,16,4,1,3.]],threshold:2.2962710354477167e-003,right_val:0.3717867136001587,left_val:0.5399743914604187},{features:[[8,18,3,1,-1.],[9,18,1,1,3.]],threshold:-2.1575849968940020e-003,right_val:0.5148863792419434,left_val:0.2408495992422104},{features:[[9,13,4,3,-1.],[9,14,4,1,3.]],threshold:-4.9196188338100910e-003,right_val:0.4738740026950836,left_val:0.6573588252067566},{features:[[7,13,4,3,-1.],[7,14,4,1,3.]],threshold:1.6267469618469477e-003,right_val:0.6303114295005798,left_val:0.4192821979522705},{features:[[19,15,1,2,-1.],[19,16,1,1,2.]],threshold:3.3413388882763684e-004,right_val:0.3702101111412048,left_val:0.5540298223495483},{features:[[0,15,8,4,-1.],[0,17,8,2,2.]],threshold:-0.0266980808228254,right_val:0.5101410746574402,left_val:0.1710917949676514},{features:[[9,3,6,4,-1.],[11,3,2,4,3.]],threshold:-0.0305618792772293,right_val:0.5168793797492981,left_val:0.1904218047857285},{features:[[8,14,4,3,-1.],[8,15,4,1,3.]],threshold:2.8511548880487680e-003,right_val:0.6313853859901428,left_val:0.4447506964206696},{features:[[3,14,14,6,-1.],[3,16,14,2,3.]],threshold:-0.0362114794552326,right_val:0.5377349257469177,left_val:0.2490727007389069},{features:[[6,3,6,6,-1.],[6,6,6,3,2.]],threshold:-2.4115189444273710e-003,right_val:0.3664236962795258,left_val:0.5381243228912354},{features:[[5,11,10,6,-1.],[5,14,10,3,2.]],threshold:-7.7253201743587852e-004,right_val:0.3541550040245056,left_val:0.5530232191085815},{features:[[3,10,3,4,-1.],[4,10,1,4,3.]],threshold:2.9481729143299162e-004,right_val:0.5667243003845215,left_val:0.4132699072360992},{features:[[13,9,2,2,-1.],[13,9,1,2,2.]],threshold:-6.2334560789167881e-003,right_val:0.5198668837547302,left_val:0.0987872332334518},{features:[[5,3,6,4,-1.],[7,3,2,4,3.]],threshold:-0.0262747295200825,right_val:0.5028107166290283,left_val:0.0911274924874306},{features:[[9,7,3,3,-1.],[10,7,1,3,3.]],threshold:5.3212260827422142e-003,right_val:0.6222720742225647,left_val:0.4726648926734924},{features:[[2,12,2,3,-1.],[2,13,2,1,3.]],threshold:-4.1129058226943016e-003,right_val:0.5137804746627808,left_val:0.2157457023859024},{features:[[9,8,3,12,-1.],[9,12,3,4,3.]],threshold:3.2457809429615736e-003,right_val:0.3721776902675629,left_val:0.5410770773887634},{features:[[3,14,4,6,-1.],[3,14,2,3,2.],[5,17,2,3,2.]],threshold:-0.0163597092032433,right_val:0.4685291945934296,left_val:0.7787874937057495},{features:[[16,15,2,2,-1.],[16,16,2,1,2.]],threshold:3.2166109303943813e-004,right_val:0.4240373969078064,left_val:0.5478987097740173},{features:[[2,15,2,2,-1.],[2,16,2,1,2.]],threshold:6.4452440710738301e-004,right_val:0.3501324951648712,left_val:0.5330560803413391},{features:[[8,12,4,3,-1.],[8,13,4,1,3.]],threshold:-7.8909732401371002e-003,right_val:0.4726569056510925,left_val:0.6923521161079407},{features:[[0,7,20,1,-1.],[10,7,10,1,2.]],threshold:0.0483362115919590,right_val:0.0757492035627365,left_val:0.5055900216102600},{features:[[7,6,8,3,-1.],[7,6,4,3,2.]],threshold:-7.5178127735853195e-004,right_val:0.5538573861122131,left_val:0.3783741891384125},{features:[[5,7,8,2,-1.],[9,7,4,2,2.]],threshold:-2.4953910615295172e-003,right_val:0.5359612107276917,left_val:0.3081651031970978},{features:[[9,7,3,5,-1.],[10,7,1,5,3.]],threshold:-2.2385010961443186e-003,right_val:0.4649342894554138,left_val:0.6633958816528320},{features:[[8,7,3,5,-1.],[9,7,1,5,3.]],threshold:-1.7988430336117744e-003,right_val:0.4347187876701355,left_val:0.6596844792366028},{features:[[11,1,3,5,-1.],[12,1,1,5,3.]],threshold:8.7860915809869766e-003,right_val:0.2315579950809479,left_val:0.5231832861900330},{features:[[6,2,3,6,-1.],[7,2,1,6,3.]],threshold:3.6715380847454071e-003,right_val:0.2977376878261566,left_val:0.5204250216484070},{features:[[14,14,6,5,-1.],[14,14,3,5,2.]],threshold:-0.0353364497423172,right_val:0.4861505031585693,left_val:0.7238878011703491},{features:[[9,8,2,2,-1.],[9,9,2,1,2.]],threshold:-6.9189240457490087e-004,right_val:0.5229824781417847,left_val:0.3105022013187408},{features:[[10,7,1,3,-1.],[10,8,1,1,3.]],threshold:-3.3946109469980001e-003,right_val:0.5210173726081848,left_val:0.3138968050479889},{features:[[6,6,2,2,-1.],[6,6,1,1,2.],[7,7,1,1,2.]],threshold:9.8569283727556467e-004,right_val:0.6585097908973694,left_val:0.4536580145359039},{features:[[2,11,18,4,-1.],[11,11,9,2,2.],[2,13,9,2,2.]],threshold:-0.0501631014049053,right_val:0.5198916792869568,left_val:0.1804454028606415},{features:[[6,6,2,2,-1.],[6,6,1,1,2.],[7,7,1,1,2.]],threshold:-2.2367259953171015e-003,right_val:0.4651359021663666,left_val:0.7255702018737793},{features:[[0,15,20,2,-1.],[0,16,20,1,2.]],threshold:7.4326287722215056e-004,right_val:0.5898545980453491,left_val:0.4412921071052551},{features:[[4,14,2,3,-1.],[4,15,2,1,3.]],threshold:-9.3485182151198387e-004,right_val:0.5366017818450928,left_val:0.3500052988529205},{features:[[8,14,4,3,-1.],[8,15,4,1,3.]],threshold:0.0174979399889708,right_val:0.8315284848213196,left_val:0.4912194907665253},{features:[[8,7,2,3,-1.],[8,8,2,1,3.]],threshold:-1.5200000489130616e-003,right_val:0.5370560288429260,left_val:0.3570275902748108},{features:[[9,10,2,3,-1.],[9,11,2,1,3.]],threshold:7.8003940870985389e-004,right_val:0.5967335104942322,left_val:0.4353772103786469}],threshold:39.1072883605957030},{simpleClassifiers:[{features:[[5,4,10,4,-1.],[5,6,10,2,2.]],threshold:-9.9945552647113800e-003,right_val:0.3054533004760742,left_val:0.6162583231925964},{features:[[9,7,6,4,-1.],[12,7,3,2,2.],[9,9,3,2,2.]],threshold:-1.1085229925811291e-003,right_val:0.3155578076839447,left_val:0.5818294882774353},{features:[[4,7,3,6,-1.],[4,9,3,2,3.]],threshold:1.0364380432292819e-003,right_val:0.5692911744117737,left_val:0.2552052140235901},{features:[[11,15,4,4,-1.],[13,15,2,2,2.],[11,17,2,2,2.]],threshold:6.8211311008781195e-004,right_val:0.5934931039810181,left_val:0.3685089945793152},{features:[[7,8,4,2,-1.],[7,9,4,1,2.]],threshold:-6.8057340104132891e-004,right_val:0.5474792122840881,left_val:0.2332392036914825},{features:[[13,1,4,3,-1.],[13,1,2,3,2.]],threshold:2.6068789884448051e-004,right_val:0.5667545795440674,left_val:0.3257457017898560},{features:[[5,15,4,4,-1.],[5,15,2,2,2.],[7,17,2,2,2.]],threshold:5.1607372006401420e-004,right_val:0.5845472812652588,left_val:0.3744716942310333},{features:[[9,5,4,7,-1.],[9,5,2,7,2.]],threshold:8.5007521556690335e-004,right_val:0.5522807240486145,left_val:0.3420371115207672},{features:[[5,6,8,3,-1.],[9,6,4,3,2.]],threshold:-1.8607829697430134e-003,right_val:0.5375424027442932,left_val:0.2804419994354248},{features:[[9,9,2,2,-1.],[9,10,2,1,2.]],threshold:-1.5033970121294260e-003,right_val:0.5498952269554138,left_val:0.2579050958156586},{features:[[7,15,5,3,-1.],[7,16,5,1,3.]],threshold:2.3478909861296415e-003,right_val:0.6313710808753967,left_val:0.4175156056880951},{features:[[11,10,4,3,-1.],[11,10,2,3,2.]],threshold:-2.8880240279249847e-004,right_val:0.4052666127681732,left_val:0.5865169763565064},{features:[[6,9,8,10,-1.],[6,14,8,5,2.]],threshold:8.9405477046966553e-003,right_val:0.2318654060363770,left_val:0.5211141109466553},{features:[[10,11,6,2,-1.],[10,11,3,2,2.]],threshold:-0.0193277392536402,right_val:0.5241525769233704,left_val:0.2753432989120483},{features:[[4,11,6,2,-1.],[7,11,3,2,2.]],threshold:-2.0202060113660991e-004,right_val:0.3677195906639099,left_val:0.5722978711128235},{features:[[11,3,8,1,-1.],[11,3,4,1,2.]],threshold:2.1179069299250841e-003,right_val:0.5542430877685547,left_val:0.4466108083724976},{features:[[6,3,3,2,-1.],[7,3,1,2,3.]],threshold:-1.7743760254234076e-003,right_val:0.5300959944725037,left_val:0.2813253104686737},{features:[[14,5,6,5,-1.],[14,5,3,5,2.]],threshold:4.2234458960592747e-003,right_val:0.5795428156852722,left_val:0.4399709999561310},{features:[[7,5,2,12,-1.],[7,11,2,6,2.]],threshold:-0.0143752200528979,right_val:0.5292059183120728,left_val:0.2981117963790894},{features:[[8,11,4,3,-1.],[8,12,4,1,3.]],threshold:-0.0153491804376245,right_val:0.4748171865940094,left_val:0.7705215215682983},{features:[[4,1,2,3,-1.],[5,1,1,3,2.]],threshold:1.5152279956964776e-005,right_val:0.5576897263526917,left_val:0.3718844056129456},{features:[[18,3,2,6,-1.],[18,5,2,2,3.]],threshold:-9.1293919831514359e-003,right_val:0.5286766886711121,left_val:0.3615196049213409},{features:[[0,3,2,6,-1.],[0,5,2,2,3.]],threshold:2.2512159775942564e-003,right_val:0.3486298024654388,left_val:0.5364704728126526},{features:[[9,12,2,3,-1.],[9,13,2,1,3.]],threshold:-4.9696918576955795e-003,right_val:0.4676836133003235,left_val:0.6927651762962341},{features:[[7,13,4,3,-1.],[7,14,4,1,3.]],threshold:-0.0128290103748441,right_val:0.4660735130310059,left_val:0.7712153792381287},{features:[[18,0,2,6,-1.],[18,2,2,2,3.]],threshold:-9.3660065904259682e-003,right_val:0.5351287722587585,left_val:0.3374983966350555},{features:[[0,0,2,6,-1.],[0,2,2,2,3.]],threshold:3.2452319283038378e-003,right_val:0.3289610147476196,left_val:0.5325189828872681},{features:[[8,14,6,3,-1.],[8,15,6,1,3.]],threshold:-0.0117235602810979,right_val:0.4754300117492676,left_val:0.6837652921676636},{features:[[7,4,2,4,-1.],[8,4,1,4,2.]],threshold:2.9257940695970319e-005,right_val:0.5360502004623413,left_val:0.3572087883949280},{features:[[8,5,4,6,-1.],[8,7,4,2,3.]],threshold:-2.2244219508138485e-005,right_val:0.3552064001560211,left_val:0.5541427135467529},{features:[[6,4,2,2,-1.],[7,4,1,2,2.]],threshold:5.0881509669125080e-003,right_val:0.1256462037563324,left_val:0.5070844292640686},{features:[[3,14,14,4,-1.],[10,14,7,2,2.],[3,16,7,2,2.]],threshold:0.0274296794086695,right_val:0.1625818014144898,left_val:0.5269560217857361},{features:[[6,15,6,2,-1.],[6,15,3,1,2.],[9,16,3,1,2.]],threshold:-6.4142867922782898e-003,right_val:0.4584197103977203,left_val:0.7145588994026184},{features:[[14,15,6,2,-1.],[14,16,6,1,2.]],threshold:3.3479959238320589e-003,right_val:0.3494696915149689,left_val:0.5398612022399902},{features:[[2,12,12,8,-1.],[2,16,12,4,2.]],threshold:-0.0826354920864105,right_val:0.5160226225852966,left_val:0.2439192980527878},{features:[[7,7,7,2,-1.],[7,8,7,1,2.]],threshold:1.0261740535497665e-003,right_val:0.5767908096313477,left_val:0.3886891901493073},{features:[[0,2,18,2,-1.],[0,3,18,1,2.]],threshold:-1.6307090409100056e-003,right_val:0.5347700715065002,left_val:0.3389458060264587},{features:[[9,6,2,5,-1.],[9,6,1,5,2.]],threshold:2.4546680506318808e-003,right_val:0.6387246847152710,left_val:0.4601413905620575},{features:[[7,5,3,8,-1.],[8,5,1,8,3.]],threshold:-9.9476519972085953e-004,right_val:0.4120396077632904,left_val:0.5769879221916199},{features:[[9,6,3,4,-1.],[10,6,1,4,3.]],threshold:0.0154091902077198,right_val:0.7089822292327881,left_val:0.4878709018230438},{features:[[4,13,3,2,-1.],[4,14,3,1,2.]],threshold:1.1784400558099151e-003,right_val:0.2895244956016541,left_val:0.5263553261756897},{features:[[9,4,6,3,-1.],[11,4,2,3,3.]],threshold:-0.0277019198983908,right_val:0.5219606757164002,left_val:0.1498828977346420},{features:[[5,4,6,3,-1.],[7,4,2,3,3.]],threshold:-0.0295053999871016,right_val:0.4999816119670868,left_val:0.0248933192342520},{features:[[14,11,5,2,-1.],[14,12,5,1,2.]],threshold:4.5159430010244250e-004,right_val:0.4029662907123566,left_val:0.5464622974395752},{features:[[1,2,6,9,-1.],[3,2,2,9,3.]],threshold:7.1772639639675617e-003,right_val:0.5866296887397766,left_val:0.4271056950092316},{features:[[14,6,6,13,-1.],[14,6,3,13,2.]],threshold:-0.0741820484399796,right_val:0.4919027984142304,left_val:0.6874179244041443},{features:[[3,6,14,8,-1.],[3,6,7,4,2.],[10,10,7,4,2.]],threshold:-0.0172541607171297,right_val:0.5348739027976990,left_val:0.3370676040649414},{features:[[16,0,4,11,-1.],[16,0,2,11,2.]],threshold:0.0148515598848462,right_val:0.6129904985427856,left_val:0.4626792967319489},{features:[[3,4,12,12,-1.],[3,4,6,6,2.],[9,10,6,6,2.]],threshold:0.0100020002573729,right_val:0.3423453867435455,left_val:0.5346122980117798},{features:[[11,4,5,3,-1.],[11,5,5,1,3.]],threshold:2.0138120744377375e-003,right_val:0.5824304223060608,left_val:0.4643830060958862},{features:[[4,11,4,2,-1.],[4,12,4,1,2.]],threshold:1.5135470312088728e-003,right_val:0.2856149971485138,left_val:0.5196396112442017},{features:[[10,7,2,2,-1.],[10,7,1,2,2.]],threshold:3.1381431035697460e-003,right_val:0.5958529710769653,left_val:0.4838162958621979},{features:[[8,7,2,2,-1.],[9,7,1,2,2.]],threshold:-5.1450440660119057e-003,right_val:0.4741412103176117,left_val:0.8920302987098694},{features:[[9,17,3,2,-1.],[10,17,1,2,3.]],threshold:-4.4736708514392376e-003,right_val:0.5337278842926025,left_val:0.2033942937850952},{features:[[5,6,3,3,-1.],[5,7,3,1,3.]],threshold:1.9628470763564110e-003,right_val:0.6725863218307495,left_val:0.4571633934974670},{features:[[10,0,3,3,-1.],[11,0,1,3,3.]],threshold:5.4260450415313244e-003,right_val:0.2845670878887177,left_val:0.5271108150482178},{features:[[5,6,6,2,-1.],[5,6,3,1,2.],[8,7,3,1,2.]],threshold:4.9611460417509079e-004,right_val:0.5718597769737244,left_val:0.4138312935829163},{features:[[12,16,4,3,-1.],[12,17,4,1,3.]],threshold:9.3728788197040558e-003,right_val:0.2804847061634064,left_val:0.5225151181221008},{features:[[3,12,3,2,-1.],[3,13,3,1,2.]],threshold:6.0500897234305739e-004,right_val:0.3314523994922638,left_val:0.5236768722534180},{features:[[9,12,3,2,-1.],[9,13,3,1,2.]],threshold:5.6792551185935736e-004,right_val:0.6276971101760864,left_val:0.4531059861183167},{features:[[1,11,16,4,-1.],[1,11,8,2,2.],[9,13,8,2,2.]],threshold:0.0246443394571543,right_val:0.2017143964767456,left_val:0.5130851864814758},{features:[[12,4,3,3,-1.],[12,5,3,1,3.]],threshold:-0.0102904504165053,right_val:0.4876641035079956,left_val:0.7786595225334168},{features:[[4,4,5,3,-1.],[4,5,5,1,3.]],threshold:2.0629419013857841e-003,right_val:0.5881264209747315,left_val:0.4288598895072937},{features:[[12,16,4,3,-1.],[12,17,4,1,3.]],threshold:-5.0519481301307678e-003,right_val:0.5286008715629578,left_val:0.3523977994918823},{features:[[5,4,3,3,-1.],[5,5,3,1,3.]],threshold:-5.7692620903253555e-003,right_val:0.4588094055652618,left_val:0.6841086149215698},{features:[[9,0,2,2,-1.],[9,1,2,1,2.]],threshold:-4.5789941214025021e-004,right_val:0.5485978126525879,left_val:0.3565520048141480},{features:[[8,9,4,2,-1.],[8,10,4,1,2.]],threshold:-7.5918837683275342e-004,right_val:0.5254197120666504,left_val:0.3368793129920960},{features:[[8,8,4,3,-1.],[8,9,4,1,3.]],threshold:-1.7737259622663260e-003,right_val:0.5454015135765076,left_val:0.3422161042690277},{features:[[0,13,6,3,-1.],[2,13,2,3,3.]],threshold:-8.5610467940568924e-003,right_val:0.4485856890678406,left_val:0.6533612012863159},{features:[[16,14,3,2,-1.],[16,15,3,1,2.]],threshold:1.7277270089834929e-003,right_val:0.3925352990627289,left_val:0.5307580232620239},{features:[[1,18,18,2,-1.],[7,18,6,2,3.]],threshold:-0.0281996093690395,right_val:0.4588584005832672,left_val:0.6857458949089050},{features:[[16,14,3,2,-1.],[16,15,3,1,2.]],threshold:-1.7781109781935811e-003,right_val:0.5369856953620911,left_val:0.4037851095199585},{features:[[1,14,3,2,-1.],[1,15,3,1,2.]],threshold:3.3177141449414194e-004,right_val:0.3705750107765198,left_val:0.5399798750877380},{features:[[7,14,6,3,-1.],[7,15,6,1,3.]],threshold:2.6385399978607893e-003,right_val:0.6452730894088745,left_val:0.4665437042713165},{features:[[5,14,8,3,-1.],[5,15,8,1,3.]],threshold:-2.1183069329708815e-003,right_val:0.4064677059650421,left_val:0.5914781093597412},{features:[[10,6,4,14,-1.],[10,6,2,14,2.]],threshold:-0.0147732896730304,right_val:0.5294762849807739,left_val:0.3642038106918335},{features:[[6,6,4,14,-1.],[8,6,2,14,2.]],threshold:-0.0168154407292604,right_val:0.5144972801208496,left_val:0.2664231956005096},{features:[[13,5,2,3,-1.],[13,6,2,1,3.]],threshold:-6.3370140269398689e-003,right_val:0.4852097928524017,left_val:0.6779531240463257},{features:[[7,16,6,1,-1.],[9,16,2,1,3.]],threshold:-4.4560048991115764e-005,right_val:0.4153054058551788,left_val:0.5613964796066284},{features:[[9,12,3,3,-1.],[9,13,3,1,3.]],threshold:-1.0240620467811823e-003,right_val:0.4566304087638855,left_val:0.5964478254318237},{features:[[7,0,3,3,-1.],[8,0,1,3,3.]],threshold:-2.3161689750850201e-003,right_val:0.5188159942626953,left_val:0.2976115047931671},{features:[[4,0,16,18,-1.],[4,9,16,9,2.]],threshold:0.5321757197380066,right_val:0.2202631980180740,left_val:0.5187839269638062},{features:[[1,1,16,14,-1.],[1,8,16,7,2.]],threshold:-0.1664305031299591,right_val:0.5060343146324158,left_val:0.1866022944450378},{features:[[3,9,15,4,-1.],[8,9,5,4,3.]],threshold:0.1125352978706360,right_val:0.1185022965073586,left_val:0.5212125182151794},{features:[[6,12,7,3,-1.],[6,13,7,1,3.]],threshold:9.3046864494681358e-003,right_val:0.6826149225234985,left_val:0.4589937031269074},{features:[[14,15,2,3,-1.],[14,16,2,1,3.]],threshold:-4.6255099587142467e-003,right_val:0.5225008726119995,left_val:0.3079940974712372},{features:[[2,3,16,14,-1.],[2,3,8,7,2.],[10,10,8,7,2.]],threshold:-0.1111646965146065,right_val:0.5080801844596863,left_val:0.2101044058799744},{features:[[16,2,4,18,-1.],[18,2,2,9,2.],[16,11,2,9,2.]],threshold:-0.0108884396031499,right_val:0.4790464043617249,left_val:0.5765355229377747},{features:[[4,15,2,3,-1.],[4,16,2,1,3.]],threshold:5.8564301580190659e-003,right_val:0.1563598960638046,left_val:0.5065100193023682},{features:[[16,2,4,18,-1.],[18,2,2,9,2.],[16,11,2,9,2.]],threshold:0.0548543892800808,right_val:0.7230510711669922,left_val:0.4966914951801300},{features:[[1,1,8,3,-1.],[1,2,8,1,3.]],threshold:-0.0111973397433758,right_val:0.5098798274993897,left_val:0.2194979041814804},{features:[[8,11,4,3,-1.],[8,12,4,1,3.]],threshold:4.4069071300327778e-003,right_val:0.6770902872085571,left_val:0.4778401851654053},{features:[[5,11,5,9,-1.],[5,14,5,3,3.]],threshold:-0.0636652931571007,right_val:0.5081024169921875,left_val:0.1936362981796265},{features:[[16,0,4,11,-1.],[16,0,2,11,2.]],threshold:-9.8081491887569427e-003,right_val:0.4810341000556946,left_val:0.5999063253402710},{features:[[7,0,6,1,-1.],[9,0,2,1,3.]],threshold:-2.1717099007219076e-003,right_val:0.5235472917556763,left_val:0.3338333964347839},{features:[[16,3,3,7,-1.],[17,3,1,7,3.]],threshold:-0.0133155202493072,right_val:0.4919213056564331,left_val:0.6617069840431213},{features:[[1,3,3,7,-1.],[2,3,1,7,3.]],threshold:2.5442079640924931e-003,right_val:0.6082184910774231,left_val:0.4488744139671326},{features:[[7,8,6,12,-1.],[7,12,6,4,3.]],threshold:0.0120378397405148,right_val:0.3292432129383087,left_val:0.5409392118453980},{features:[[0,0,4,11,-1.],[2,0,2,11,2.]],threshold:-0.0207010507583618,right_val:0.4594995975494385,left_val:0.6819120049476624},{features:[[14,0,6,20,-1.],[14,0,3,20,2.]],threshold:0.0276082791388035,right_val:0.5767282843589783,left_val:0.4630792140960693},{features:[[0,3,1,2,-1.],[0,4,1,1,2.]],threshold:1.2370620388537645e-003,right_val:0.2635016143321991,left_val:0.5165379047393799},{features:[[5,5,10,8,-1.],[10,5,5,4,2.],[5,9,5,4,2.]],threshold:-0.0376693382859230,right_val:0.5278980135917664,left_val:0.2536393105983734},{features:[[4,7,12,4,-1.],[4,7,6,2,2.],[10,9,6,2,2.]],threshold:-1.8057259730994701e-003,right_val:0.5517500042915344,left_val:0.3985156118869782}],threshold:50.6104812622070310},{simpleClassifiers:[{features:[[2,1,6,4,-1.],[5,1,3,4,2.]],threshold:4.4299028813838959e-003,right_val:0.6335226297378540,left_val:0.2891018092632294},{features:[[9,7,6,4,-1.],[12,7,3,2,2.],[9,9,3,2,2.]],threshold:-2.3813319858163595e-003,right_val:0.3477487862110138,left_val:0.6211789250373840},{features:[[5,6,2,6,-1.],[5,9,2,3,2.]],threshold:2.2915711160749197e-003,right_val:0.5582118034362793,left_val:0.2254412025213242},{features:[[9,16,6,4,-1.],[12,16,3,2,2.],[9,18,3,2,2.]],threshold:9.9457940086722374e-004,right_val:0.5930070877075195,left_val:0.3711710870265961},{features:[[9,4,2,12,-1.],[9,10,2,6,2.]],threshold:7.7164667891338468e-004,right_val:0.3347995877265930,left_val:0.5651720166206360},{features:[[7,1,6,18,-1.],[9,1,2,18,3.]],threshold:-1.1386410333216190e-003,right_val:0.5508630871772766,left_val:0.3069126009941101},{features:[[4,12,12,2,-1.],[8,12,4,2,3.]],threshold:-1.6403039626311511e-004,right_val:0.3699047863483429,left_val:0.5762827992439270},{features:[[8,8,6,2,-1.],[8,9,6,1,2.]],threshold:2.9793529392918572e-005,right_val:0.5437911152839661,left_val:0.2644244134426117},{features:[[8,0,3,6,-1.],[9,0,1,6,3.]],threshold:8.5774902254343033e-003,right_val:0.1795724928379059,left_val:0.5051138997077942},{features:[[11,18,3,2,-1.],[11,19,3,1,2.]],threshold:-2.6032689493149519e-004,right_val:0.4446826875209808,left_val:0.5826969146728516},{features:[[1,1,17,4,-1.],[1,3,17,2,2.]],threshold:-6.1404630541801453e-003,right_val:0.5346971750259399,left_val:0.3113852143287659},{features:[[11,8,4,12,-1.],[11,8,2,12,2.]],threshold:-0.0230869501829147,right_val:0.5331197977066040,left_val:0.3277946114540100},{features:[[8,14,4,3,-1.],[8,15,4,1,3.]],threshold:-0.0142436502501369,right_val:0.4588063061237335,left_val:0.7381709814071655},{features:[[12,3,2,17,-1.],[12,3,1,17,2.]],threshold:0.0194871295243502,right_val:0.2274471968412399,left_val:0.5256630778312683},{features:[[4,7,6,1,-1.],[6,7,2,1,3.]],threshold:-9.6681108698248863e-004,right_val:0.3815006911754608,left_val:0.5511230826377869},{features:[[18,3,2,3,-1.],[18,4,2,1,3.]],threshold:3.1474709976464510e-003,right_val:0.2543726861476898,left_val:0.5425636768341065},{features:[[8,4,3,4,-1.],[8,6,3,2,2.]],threshold:-1.8026070029009134e-004,right_val:0.3406304121017456,left_val:0.5380191802978516},{features:[[4,5,12,10,-1.],[4,10,12,5,2.]],threshold:-6.0266260989010334e-003,right_val:0.5420572161674500,left_val:0.3035801947116852},{features:[[5,18,4,2,-1.],[7,18,2,2,2.]],threshold:4.4462960795499384e-004,right_val:0.5660110116004944,left_val:0.3990997076034546},{features:[[17,2,3,6,-1.],[17,4,3,2,3.]],threshold:2.2609760053455830e-003,right_val:0.3940688073635101,left_val:0.5562806725502014},{features:[[7,7,6,6,-1.],[9,7,2,6,3.]],threshold:0.0511330589652061,right_val:0.7118561863899231,left_val:0.4609653949737549},{features:[[17,2,3,6,-1.],[17,4,3,2,3.]],threshold:-0.0177863091230392,right_val:0.5322144031524658,left_val:0.2316166013479233},{features:[[8,0,3,4,-1.],[9,0,1,4,3.]],threshold:-4.9679628573358059e-003,right_val:0.5122029185295105,left_val:0.2330771982669830},{features:[[9,14,2,3,-1.],[9,15,2,1,3.]],threshold:2.0667689386755228e-003,right_val:0.6455488204956055,left_val:0.4657444059848785},{features:[[0,12,6,3,-1.],[0,13,6,1,3.]],threshold:7.4413768015801907e-003,right_val:0.2361633926630020,left_val:0.5154392123222351},{features:[[8,14,4,3,-1.],[8,15,4,1,3.]],threshold:-3.6277279723435640e-003,right_val:0.4476661086082459,left_val:0.6219773292541504},{features:[[3,12,2,3,-1.],[3,13,2,1,3.]],threshold:-5.3530759178102016e-003,right_val:0.5102208256721497,left_val:0.1837355047464371},{features:[[5,6,12,7,-1.],[9,6,4,7,3.]],threshold:0.1453091949224472,right_val:0.1535930931568146,left_val:0.5145987272262573},{features:[[0,2,3,6,-1.],[0,4,3,2,3.]],threshold:2.4394490756094456e-003,right_val:0.3624661862850189,left_val:0.5343660116195679},{features:[[14,6,1,3,-1.],[14,7,1,1,3.]],threshold:-3.1283390708267689e-003,right_val:0.4845592081546783,left_val:0.6215007901191711},{features:[[2,0,3,14,-1.],[3,0,1,14,3.]],threshold:1.7940260004252195e-003,right_val:0.5824198126792908,left_val:0.4299261868000031},{features:[[12,14,5,6,-1.],[12,16,5,2,3.]],threshold:0.0362538211047649,right_val:0.1439467966556549,left_val:0.5260334014892578},{features:[[4,14,5,6,-1.],[4,16,5,2,3.]],threshold:-5.1746722310781479e-003,right_val:0.5287045240402222,left_val:0.3506538867950440},{features:[[11,10,2,2,-1.],[12,10,1,1,2.],[11,11,1,1,2.]],threshold:6.5383297624066472e-004,right_val:0.6122040152549744,left_val:0.4809640944004059},{features:[[5,0,3,14,-1.],[6,0,1,14,3.]],threshold:-0.0264802295714617,right_val:0.5045586228370667,left_val:0.1139362007379532},{features:[[10,15,2,3,-1.],[10,16,2,1,3.]],threshold:-3.0440660193562508e-003,right_val:0.4794734120368958,left_val:0.6352095007896423},{features:[[0,2,2,3,-1.],[0,3,2,1,3.]],threshold:3.6993520334362984e-003,right_val:0.2498510926961899,left_val:0.5131118297576904},{features:[[5,11,12,6,-1.],[5,14,12,3,2.]],threshold:-3.6762931267730892e-004,right_val:0.3709532022476196,left_val:0.5421394705772400},{features:[[6,11,3,9,-1.],[6,14,3,3,3.]],threshold:-0.0413822606205940,right_val:0.5081691741943359,left_val:0.1894959956407547},{features:[[11,10,2,2,-1.],[12,10,1,1,2.],[11,11,1,1,2.]],threshold:-1.0532729793339968e-003,right_val:0.4783608913421631,left_val:0.6454367041587830},{features:[[5,6,1,3,-1.],[5,7,1,1,3.]],threshold:-2.1648600231856108e-003,right_val:0.4499826133251190,left_val:0.6215031147003174},{features:[[4,9,13,3,-1.],[4,10,13,1,3.]],threshold:-5.6747748749330640e-004,right_val:0.5419334769248962,left_val:0.3712610900402069},{features:[[1,7,15,6,-1.],[6,7,5,6,3.]],threshold:0.1737584024667740,right_val:0.1215742006897926,left_val:0.5023643970489502},{features:[[4,5,12,6,-1.],[8,5,4,6,3.]],threshold:-2.9049699660390615e-003,right_val:0.5381883978843689,left_val:0.3240267932415009},{features:[[8,10,4,3,-1.],[8,11,4,1,3.]],threshold:1.2299539521336555e-003,right_val:0.5703486204147339,left_val:0.4165507853031158},{features:[[15,14,1,3,-1.],[15,15,1,1,3.]],threshold:-5.4329237900674343e-004,right_val:0.5547549128532410,left_val:0.3854042887687683},{features:[[1,11,5,3,-1.],[1,12,5,1,3.]],threshold:-8.3297258242964745e-003,right_val:0.5097082853317261,left_val:0.2204494029283524},{features:[[7,1,7,12,-1.],[7,7,7,6,2.]],threshold:-1.0417630255687982e-004,right_val:0.4303036034107208,left_val:0.5607066154479981},{features:[[0,1,6,10,-1.],[0,1,3,5,2.],[3,6,3,5,2.]],threshold:0.0312047004699707,right_val:0.6982004046440125,left_val:0.4621657133102417},{features:[[16,1,4,3,-1.],[16,2,4,1,3.]],threshold:7.8943502157926559e-003,right_val:0.2269068062305450,left_val:0.5269594192504883},{features:[[5,5,2,3,-1.],[5,6,2,1,3.]],threshold:-4.3645310215651989e-003,right_val:0.4537956118583679,left_val:0.6359223127365112},{features:[[12,2,3,5,-1.],[13,2,1,5,3.]],threshold:7.6793059706687927e-003,right_val:0.2740483880043030,left_val:0.5274767875671387},{features:[[0,3,4,6,-1.],[0,5,4,2,3.]],threshold:-0.0254311393946409,right_val:0.5071732997894287,left_val:0.2038519978523254},{features:[[8,12,4,2,-1.],[8,13,4,1,2.]],threshold:8.2000601105391979e-004,right_val:0.6119868159294128,left_val:0.4587455093860626},{features:[[8,18,3,1,-1.],[9,18,1,1,3.]],threshold:2.9284600168466568e-003,right_val:0.2028204947710037,left_val:0.5071274042129517},{features:[[11,10,2,2,-1.],[12,10,1,1,2.],[11,11,1,1,2.]],threshold:4.5256470912136137e-005,right_val:0.5430821776390076,left_val:0.4812104105949402},{features:[[7,10,2,2,-1.],[7,10,1,1,2.],[8,11,1,1,2.]],threshold:1.3158309739083052e-003,right_val:0.6779323220252991,left_val:0.4625813961029053},{features:[[11,11,4,4,-1.],[11,13,4,2,2.]],threshold:1.5870389761403203e-003,right_val:0.3431465029716492,left_val:0.5386291742324829},{features:[[8,12,3,8,-1.],[9,12,1,8,3.]],threshold:-0.0215396601706743,right_val:0.5003222823143005,left_val:0.0259425006806850},{features:[[13,0,6,3,-1.],[13,1,6,1,3.]],threshold:0.0143344802781940,right_val:0.1590632945299149,left_val:0.5202844738960266},{features:[[8,8,3,4,-1.],[9,8,1,4,3.]],threshold:-8.3881383761763573e-003,right_val:0.4648044109344482,left_val:0.7282481193542481},{features:[[5,7,10,10,-1.],[10,7,5,5,2.],[5,12,5,5,2.]],threshold:9.1906841844320297e-003,right_val:0.3923191130161285,left_val:0.5562356710433960},{features:[[3,18,8,2,-1.],[3,18,4,1,2.],[7,19,4,1,2.]],threshold:-5.8453059755265713e-003,right_val:0.4629127979278565,left_val:0.6803392767906189},{features:[[10,2,6,8,-1.],[12,2,2,8,3.]],threshold:-0.0547077991068363,right_val:0.5206125974655151,left_val:0.2561671137809753},{features:[[4,2,6,8,-1.],[6,2,2,8,3.]],threshold:9.1142775490880013e-003,right_val:0.3053877055644989,left_val:0.5189620256423950},{features:[[11,0,3,7,-1.],[12,0,1,7,3.]],threshold:-0.0155750000849366,right_val:0.5169094800949097,left_val:0.1295074969530106},{features:[[7,11,2,1,-1.],[8,11,1,1,2.]],threshold:-1.2050600344082341e-004,right_val:0.4230825006961823,left_val:0.5735098123550415},{features:[[15,14,1,3,-1.],[15,15,1,1,3.]],threshold:1.2273970060050488e-003,right_val:0.4079791903495789,left_val:0.5289878249168396},{features:[[7,15,2,2,-1.],[7,15,1,1,2.],[8,16,1,1,2.]],threshold:-1.2186600361019373e-003,right_val:0.4574409127235413,left_val:0.6575639843940735},{features:[[15,14,1,3,-1.],[15,15,1,1,3.]],threshold:-3.3256649039685726e-003,right_val:0.5195019841194153,left_val:0.3628047108650208},{features:[[6,0,3,7,-1.],[7,0,1,7,3.]],threshold:-0.0132883097976446,right_val:0.5043488740921021,left_val:0.1284265965223312},{features:[[18,1,2,7,-1.],[18,1,1,7,2.]],threshold:-3.3839771058410406e-003,right_val:0.4757505953311920,left_val:0.6292240023612976},{features:[[2,0,8,20,-1.],[2,10,8,10,2.]],threshold:-0.2195422053337097,right_val:0.5065013766288757,left_val:0.1487731933593750},{features:[[3,0,15,6,-1.],[3,2,15,2,3.]],threshold:4.9111708067357540e-003,right_val:0.5665838718414307,left_val:0.4256102144718170},{features:[[4,3,12,2,-1.],[4,4,12,1,2.]],threshold:-1.8744950648397207e-004,right_val:0.5586857199668884,left_val:0.4004144072532654},{features:[[16,0,4,5,-1.],[16,0,2,5,2.]],threshold:-5.2178641781210899e-003,right_val:0.4812706112861633,left_val:0.6009116172790527},{features:[[7,0,3,4,-1.],[8,0,1,4,3.]],threshold:-1.1111519997939467e-003,right_val:0.5287089943885803,left_val:0.3514933884143829},{features:[[16,0,4,5,-1.],[16,0,2,5,2.]],threshold:4.4036400504410267e-003,right_val:0.5924085974693298,left_val:0.4642275869846344},{features:[[1,7,6,13,-1.],[3,7,2,13,3.]],threshold:0.1229949966073036,right_val:0.0691524818539619,left_val:0.5025529265403748},{features:[[16,0,4,5,-1.],[16,0,2,5,2.]],threshold:-0.0123135102912784,right_val:0.4934012889862061,left_val:0.5884591937065125},{features:[[0,0,4,5,-1.],[2,0,2,5,2.]],threshold:4.1471039876341820e-003,right_val:0.5893477797508240,left_val:0.4372239112854004},{features:[[14,12,3,6,-1.],[14,14,3,2,3.]],threshold:-3.5502649843692780e-003,right_val:0.5396270155906677,left_val:0.4327551126480103},{features:[[3,12,3,6,-1.],[3,14,3,2,3.]],threshold:-0.0192242693156004,right_val:0.5068330764770508,left_val:0.1913134008646011},{features:[[16,1,4,3,-1.],[16,2,4,1,3.]],threshold:1.4395059552043676e-003,right_val:0.4243533015251160,left_val:0.5308178067207336},{features:[[8,7,2,10,-1.],[8,7,1,5,2.],[9,12,1,5,2.]],threshold:-6.7751999013125896e-003,right_val:0.4540086090564728,left_val:0.6365395784378052},{features:[[11,11,4,4,-1.],[11,13,4,2,2.]],threshold:7.0119630545377731e-003,right_val:0.3026199936866760,left_val:0.5189834237098694},{features:[[0,1,4,3,-1.],[0,2,4,1,3.]],threshold:5.4014651104807854e-003,right_val:0.2557682991027832,left_val:0.5105062127113342},{features:[[13,4,1,3,-1.],[13,5,1,1,3.]],threshold:9.0274988906458020e-004,right_val:0.5861827731132507,left_val:0.4696914851665497},{features:[[7,15,3,5,-1.],[8,15,1,5,3.]],threshold:0.0114744501188397,right_val:0.1527177989482880,left_val:0.5053645968437195},{features:[[9,7,3,5,-1.],[10,7,1,5,3.]],threshold:-6.7023430019617081e-003,right_val:0.4890604019165039,left_val:0.6508980989456177},{features:[[8,7,3,5,-1.],[9,7,1,5,3.]],threshold:-2.0462959073483944e-003,right_val:0.4514600038528442,left_val:0.6241816878318787},{features:[[10,6,4,14,-1.],[10,6,2,14,2.]],threshold:-9.9951568990945816e-003,right_val:0.5400953888893127,left_val:0.3432781100273132},{features:[[0,5,5,6,-1.],[0,7,5,2,3.]],threshold:-0.0357007086277008,right_val:0.5074077844619751,left_val:0.1878059059381485},{features:[[9,5,6,4,-1.],[9,5,3,4,2.]],threshold:4.5584561303257942e-004,right_val:0.5402569770812988,left_val:0.3805277049541473},{features:[[0,0,18,10,-1.],[6,0,6,10,3.]],threshold:-0.0542606003582478,right_val:0.4595097005367279,left_val:0.6843714714050293},{features:[[10,6,4,14,-1.],[10,6,2,14,2.]],threshold:6.0600461438298225e-003,right_val:0.4500527977943420,left_val:0.5502905249595642},{features:[[6,6,4,14,-1.],[8,6,2,14,2.]],threshold:-6.4791832119226456e-003,right_val:0.5310757160186768,left_val:0.3368858098983765},{features:[[13,4,1,3,-1.],[13,5,1,1,3.]],threshold:-1.4939469983801246e-003,right_val:0.4756175875663757,left_val:0.6487640142440796},{features:[[5,1,2,3,-1.],[6,1,1,3,2.]],threshold:1.4610530342906713e-005,right_val:0.5451064109802246,left_val:0.4034579098224640},{features:[[18,1,2,18,-1.],[19,1,1,9,2.],[18,10,1,9,2.]],threshold:-7.2321938350796700e-003,right_val:0.4824739992618561,left_val:0.6386873722076416},{features:[[2,1,4,3,-1.],[2,2,4,1,3.]],threshold:-4.0645818226039410e-003,right_val:0.5157335996627808,left_val:0.2986421883106232},{features:[[18,1,2,18,-1.],[19,1,1,9,2.],[18,10,1,9,2.]],threshold:0.0304630808532238,right_val:0.7159956097602844,left_val:0.5022199749946594},{features:[[1,14,4,6,-1.],[1,14,2,3,2.],[3,17,2,3,2.]],threshold:-8.0544911324977875e-003,right_val:0.4619275033473969,left_val:0.6492452025413513},{features:[[10,11,7,6,-1.],[10,13,7,2,3.]],threshold:0.0395051389932632,right_val:0.2450613975524902,left_val:0.5150570869445801},{features:[[0,10,6,10,-1.],[0,10,3,5,2.],[3,15,3,5,2.]],threshold:8.4530208259820938e-003,right_val:0.6394037008285523,left_val:0.4573669135570526},{features:[[11,0,3,4,-1.],[12,0,1,4,3.]],threshold:-1.1688120430335402e-003,right_val:0.5483661293983460,left_val:0.3865512013435364},{features:[[5,10,5,6,-1.],[5,13,5,3,2.]],threshold:2.8070670086890459e-003,right_val:0.2701480090618134,left_val:0.5128579139709473},{features:[[14,6,1,8,-1.],[14,10,1,4,2.]],threshold:4.7365209320560098e-004,right_val:0.5387461185455322,left_val:0.4051581919193268},{features:[[1,7,18,6,-1.],[1,7,9,3,2.],[10,10,9,3,2.]],threshold:0.0117410803213716,right_val:0.3719413876533508,left_val:0.5295950174331665},{features:[[9,7,2,2,-1.],[9,7,1,2,2.]],threshold:3.1833238899707794e-003,right_val:0.6895126104354858,left_val:0.4789406955242157},{features:[[5,9,4,5,-1.],[7,9,2,5,2.]],threshold:7.0241501089185476e-004,right_val:0.3918080925941467,left_val:0.5384489297866821}],threshold:54.6200714111328130},{simpleClassifiers:[{features:[[7,6,6,3,-1.],[9,6,2,3,3.]],threshold:0.0170599296689034,right_val:0.7142534852027893,left_val:0.3948527872562408},{features:[[1,0,18,4,-1.],[7,0,6,4,3.]],threshold:0.0218408405780792,right_val:0.6090016961097717,left_val:0.3370316028594971},{features:[[7,15,2,4,-1.],[7,17,2,2,2.]],threshold:2.4520049919374287e-004,right_val:0.5987902283668518,left_val:0.3500576019287109},{features:[[1,0,19,9,-1.],[1,3,19,3,3.]],threshold:8.3272606134414673e-003,right_val:0.5697240829467773,left_val:0.3267528116703033},{features:[[3,7,3,6,-1.],[3,9,3,2,3.]],threshold:5.7148298947140574e-004,right_val:0.5531656742095947,left_val:0.3044599890708923},{features:[[13,7,4,4,-1.],[15,7,2,2,2.],[13,9,2,2,2.]],threshold:6.7373987985774875e-004,right_val:0.5672631263732910,left_val:0.3650012016296387},{features:[[3,7,4,4,-1.],[3,7,2,2,2.],[5,9,2,2,2.]],threshold:3.4681590477703139e-005,right_val:0.5388727188110352,left_val:0.3313541114330292},{features:[[9,6,10,8,-1.],[9,10,10,4,2.]],threshold:-5.8563398197293282e-003,right_val:0.5498778820037842,left_val:0.2697942852973938},{features:[[3,8,14,12,-1.],[3,14,14,6,2.]],threshold:8.5102273151278496e-003,right_val:0.2762879133224487,left_val:0.5269358158111572},{features:[[6,5,10,12,-1.],[11,5,5,6,2.],[6,11,5,6,2.]],threshold:-0.0698172077536583,right_val:0.5259246826171875,left_val:0.2909603118896484},{features:[[9,11,2,3,-1.],[9,12,2,1,3.]],threshold:-8.6113670840859413e-004,right_val:0.4073697924613953,left_val:0.5892577171325684},{features:[[9,5,6,5,-1.],[9,5,3,5,2.]],threshold:9.7149249631911516e-004,right_val:0.5415862202644348,left_val:0.3523564040660858},{features:[[9,4,2,4,-1.],[9,6,2,2,2.]],threshold:-1.4727490452060010e-005,right_val:0.3503156006336212,left_val:0.5423017740249634},{features:[[9,5,6,5,-1.],[9,5,3,5,2.]],threshold:0.0484202913939953,right_val:0.3411195874214172,left_val:0.5193945765495300},{features:[[5,5,6,5,-1.],[8,5,3,5,2.]],threshold:1.3257140526548028e-003,right_val:0.5335376262664795,left_val:0.3157769143581390},{features:[[11,2,6,1,-1.],[13,2,2,1,3.]],threshold:1.4922149603080470e-005,right_val:0.5536553859710693,left_val:0.4451299905776978},{features:[[3,2,6,1,-1.],[5,2,2,1,3.]],threshold:-2.7173398993909359e-003,right_val:0.5248088836669922,left_val:0.3031741976737976},{features:[[13,5,2,3,-1.],[13,6,2,1,3.]],threshold:2.9219500720500946e-003,right_val:0.6606041789054871,left_val:0.4781453013420105},{features:[[0,10,1,4,-1.],[0,12,1,2,2.]],threshold:-1.9804988987743855e-003,right_val:0.5287625193595886,left_val:0.3186308145523071},{features:[[13,5,2,3,-1.],[13,6,2,1,3.]],threshold:-4.0012109093368053e-003,right_val:0.4749928116798401,left_val:0.6413596868515015},{features:[[8,18,3,2,-1.],[9,18,1,2,3.]],threshold:-4.3491991236805916e-003,right_val:0.5098996758460999,left_val:0.1507498025894165},{features:[[6,15,9,2,-1.],[6,16,9,1,2.]],threshold:1.3490889687091112e-003,right_val:0.5881167054176331,left_val:0.4316158890724182},{features:[[8,14,4,3,-1.],[8,15,4,1,3.]],threshold:0.0185970701277256,right_val:0.9089794158935547,left_val:0.4735553860664368},{features:[[18,4,2,4,-1.],[18,6,2,2,2.]],threshold:-1.8562379991635680e-003,right_val:0.5577837228775024,left_val:0.3553189039230347},{features:[[5,5,2,3,-1.],[5,6,2,1,3.]],threshold:2.2940430790185928e-003,right_val:0.6580877900123596,left_val:0.4500094950199127},{features:[[15,16,3,2,-1.],[15,17,3,1,2.]],threshold:2.9982850537635386e-004,right_val:0.3975878953933716,left_val:0.5629242062568665},{features:[[0,0,3,9,-1.],[0,3,3,3,3.]],threshold:3.5455459728837013e-003,right_val:0.3605485856533051,left_val:0.5381547212600708},{features:[[9,7,3,3,-1.],[9,8,3,1,3.]],threshold:9.6104722470045090e-003,right_val:0.1796745955944061,left_val:0.5255997180938721},{features:[[8,7,3,3,-1.],[8,8,3,1,3.]],threshold:-6.2783220782876015e-003,right_val:0.5114030241966248,left_val:0.2272856980562210},{features:[[9,5,2,6,-1.],[9,5,1,6,2.]],threshold:3.4598479978740215e-003,right_val:0.6608219146728516,left_val:0.4626308083534241},{features:[[8,6,3,4,-1.],[9,6,1,4,3.]],threshold:-1.3112019514665008e-003,right_val:0.4436857998371124,left_val:0.6317539811134338},{features:[[7,6,8,12,-1.],[11,6,4,6,2.],[7,12,4,6,2.]],threshold:2.6876179035753012e-003,right_val:0.4054022133350372,left_val:0.5421109795570374},{features:[[5,6,8,12,-1.],[5,6,4,6,2.],[9,12,4,6,2.]],threshold:3.9118169806897640e-003,right_val:0.3273454904556274,left_val:0.5358477830886841},{features:[[12,4,3,3,-1.],[12,5,3,1,3.]],threshold:-0.0142064504325390,right_val:0.4975781142711639,left_val:0.7793576717376709},{features:[[2,16,3,2,-1.],[2,17,3,1,2.]],threshold:7.1705528534948826e-004,right_val:0.3560903966426849,left_val:0.5297319889068604},{features:[[12,4,3,3,-1.],[12,5,3,1,3.]],threshold:1.6635019565001130e-003,right_val:0.5816481709480286,left_val:0.4678094089031220},{features:[[2,12,6,6,-1.],[2,14,6,2,3.]],threshold:3.3686188980937004e-003,right_val:0.3446420133113861,left_val:0.5276734232902527},{features:[[7,13,6,3,-1.],[7,14,6,1,3.]],threshold:0.0127995302900672,right_val:0.7472159266471863,left_val:0.4834679961204529},{features:[[6,14,6,3,-1.],[6,15,6,1,3.]],threshold:3.3901201095432043e-003,right_val:0.6401721239089966,left_val:0.4511859118938446},{features:[[14,15,5,3,-1.],[14,16,5,1,3.]],threshold:4.7070779837667942e-003,right_val:0.3555220961570740,left_val:0.5335658788681030},{features:[[5,4,3,3,-1.],[5,5,3,1,3.]],threshold:1.4819339849054813e-003,right_val:0.5772724151611328,left_val:0.4250707030296326},{features:[[14,15,5,3,-1.],[14,16,5,1,3.]],threshold:-6.9995759986341000e-003,right_val:0.5292900204658508,left_val:0.3003320097923279},{features:[[5,3,6,2,-1.],[7,3,2,2,3.]],threshold:0.0159390103071928,right_val:0.1675581932067871,left_val:0.5067319273948669},{features:[[8,15,4,3,-1.],[8,16,4,1,3.]],threshold:7.6377349905669689e-003,right_val:0.7085601091384888,left_val:0.4795069992542267},{features:[[1,15,5,3,-1.],[1,16,5,1,3.]],threshold:6.7334040068089962e-003,right_val:0.2162470072507858,left_val:0.5133113265037537},{features:[[8,13,4,6,-1.],[10,13,2,3,2.],[8,16,2,3,2.]],threshold:-0.0128588099032640,right_val:0.5251371860504150,left_val:0.1938841938972473},{features:[[7,8,3,3,-1.],[8,8,1,3,3.]],threshold:-6.2270800117403269e-004,right_val:0.4197868108749390,left_val:0.5686538219451904},{features:[[12,0,5,4,-1.],[12,2,5,2,2.]],threshold:-5.2651681471616030e-004,right_val:0.5429695844650269,left_val:0.4224168956279755},{features:[[0,2,20,2,-1.],[0,2,10,1,2.],[10,3,10,1,2.]],threshold:0.0110750999301672,right_val:0.2514517903327942,left_val:0.5113775134086609},{features:[[1,0,18,4,-1.],[7,0,6,4,3.]],threshold:-0.0367282517254353,right_val:0.4849618971347809,left_val:0.7194662094116211},{features:[[4,3,6,1,-1.],[6,3,2,1,3.]],threshold:-2.8207109426148236e-004,right_val:0.5394446253776550,left_val:0.3840261995792389},{features:[[4,18,13,2,-1.],[4,19,13,1,2.]],threshold:-2.7489690110087395e-003,right_val:0.4569182097911835,left_val:0.5937088727951050},{features:[[2,10,3,6,-1.],[2,12,3,2,3.]],threshold:0.0100475195795298,right_val:0.2802298069000244,left_val:0.5138576030731201},{features:[[14,12,6,8,-1.],[17,12,3,4,2.],[14,16,3,4,2.]],threshold:-8.1497840583324432e-003,right_val:0.4636121094226837,left_val:0.6090037226676941},{features:[[4,13,10,6,-1.],[4,13,5,3,2.],[9,16,5,3,2.]],threshold:-6.8833888508379459e-003,right_val:0.5254660248756409,left_val:0.3458611071109772},{features:[[14,12,1,2,-1.],[14,13,1,1,2.]],threshold:-1.4039360394235700e-005,right_val:0.4082083106040955,left_val:0.5693104267120361},{features:[[8,13,4,3,-1.],[8,14,4,1,3.]],threshold:1.5498419525101781e-003,right_val:0.5806517004966736,left_val:0.4350537061691284},{features:[[14,12,2,2,-1.],[14,13,2,1,2.]],threshold:-6.7841499112546444e-003,right_val:0.5182775259017944,left_val:0.1468873023986816},{features:[[4,12,2,2,-1.],[4,13,2,1,2.]],threshold:2.1705629478674382e-004,right_val:0.3456174135208130,left_val:0.5293524265289307},{features:[[8,12,9,2,-1.],[8,13,9,1,2.]],threshold:3.1198898795992136e-004,right_val:0.5942413806915283,left_val:0.4652450978755951},{features:[[9,14,2,3,-1.],[9,15,2,1,3.]],threshold:5.4507530294358730e-003,right_val:0.7024846076965332,left_val:0.4653508961200714},{features:[[11,10,3,6,-1.],[11,13,3,3,2.]],threshold:-2.5818689027801156e-004,right_val:0.3768967092037201,left_val:0.5497295260429382},{features:[[5,6,9,12,-1.],[5,12,9,6,2.]],threshold:-0.0174425393342972,right_val:0.5457497835159302,left_val:0.3919087946414948},{features:[[11,10,3,6,-1.],[11,13,3,3,2.]],threshold:-0.0453435294330120,right_val:0.5154908895492554,left_val:0.1631357073783875},{features:[[6,10,3,6,-1.],[6,13,3,3,2.]],threshold:1.9190689781680703e-003,right_val:0.2791895866394043,left_val:0.5145897865295410},{features:[[5,4,11,3,-1.],[5,5,11,1,3.]],threshold:-6.0177869163453579e-003,right_val:0.4756332933902741,left_val:0.6517636179924011},{features:[[7,1,5,10,-1.],[7,6,5,5,2.]],threshold:-4.0720738470554352e-003,right_val:0.4092685878276825,left_val:0.5514652729034424},{features:[[2,8,18,2,-1.],[2,9,18,1,2.]],threshold:3.9855059003457427e-004,right_val:0.5285550951957703,left_val:0.3165240883827210},{features:[[7,17,5,3,-1.],[7,18,5,1,3.]],threshold:-6.5418570302426815e-003,right_val:0.4652808904647827,left_val:0.6853377819061279},{features:[[5,9,12,1,-1.],[9,9,4,1,3.]],threshold:3.4845089539885521e-003,right_val:0.4502759873867035,left_val:0.5484588146209717},{features:[[0,14,6,6,-1.],[0,14,3,3,2.],[3,17,3,3,2.]],threshold:-0.0136967804282904,right_val:0.4572555124759674,left_val:0.6395779848098755},{features:[[5,9,12,1,-1.],[9,9,4,1,3.]],threshold:-0.0173471402376890,right_val:0.5181614756584168,left_val:0.2751072943210602},{features:[[3,9,12,1,-1.],[7,9,4,1,3.]],threshold:-4.0885428898036480e-003,right_val:0.5194984078407288,left_val:0.3325636088848114},{features:[[14,10,6,7,-1.],[14,10,3,7,2.]],threshold:-9.4687901437282562e-003,right_val:0.4851819872856140,left_val:0.5942280888557434},{features:[[1,0,16,2,-1.],[1,1,16,1,2.]],threshold:1.7084840219467878e-003,right_val:0.5519806146621704,left_val:0.4167110919952393},{features:[[10,9,10,9,-1.],[10,12,10,3,3.]],threshold:9.4809094443917274e-003,right_val:0.4208514988422394,left_val:0.5433894991874695},{features:[[0,1,10,2,-1.],[5,1,5,2,2.]],threshold:-4.7389650717377663e-003,right_val:0.4560655057430267,left_val:0.6407189965248108},{features:[[17,3,2,3,-1.],[17,4,2,1,3.]],threshold:6.5761050209403038e-003,right_val:0.2258227020502091,left_val:0.5214555263519287},{features:[[1,3,2,3,-1.],[1,4,2,1,3.]],threshold:-2.1690549328923225e-003,right_val:0.5156704783439636,left_val:0.3151527941226959},{features:[[9,7,3,6,-1.],[10,7,1,6,3.]],threshold:0.0146601703017950,right_val:0.6689941287040710,left_val:0.4870837032794952},{features:[[6,5,4,3,-1.],[8,5,2,3,2.]],threshold:1.7231999663636088e-004,right_val:0.5251078009605408,left_val:0.3569748997688294},{features:[[7,5,6,6,-1.],[9,5,2,6,3.]],threshold:-0.0218037609010935,right_val:0.4966329932212830,left_val:0.8825920820236206},{features:[[3,4,12,12,-1.],[3,4,6,6,2.],[9,10,6,6,2.]],threshold:-0.0947361066937447,right_val:0.5061113834381104,left_val:0.1446162015199661},{features:[[9,2,6,15,-1.],[11,2,2,15,3.]],threshold:5.5825551971793175e-003,right_val:0.4238066077232361,left_val:0.5396478772163391},{features:[[2,2,6,17,-1.],[4,2,2,17,3.]],threshold:1.9517090404406190e-003,right_val:0.5497786998748779,left_val:0.4170410931110382},{features:[[14,10,6,7,-1.],[14,10,3,7,2.]],threshold:0.0121499001979828,right_val:0.5664274096488953,left_val:0.4698367118835449},{features:[[0,10,6,7,-1.],[3,10,3,7,2.]],threshold:-7.5169620104134083e-003,right_val:0.4463135898113251,left_val:0.6267772912979126},{features:[[9,2,6,15,-1.],[11,2,2,15,3.]],threshold:-0.0716679096221924,right_val:0.5221003293991089,left_val:0.3097011148929596},{features:[[5,2,6,15,-1.],[7,2,2,15,3.]],threshold:-0.0882924199104309,right_val:0.5006365180015564,left_val:0.0811238884925842},{features:[[17,9,3,6,-1.],[17,11,3,2,3.]],threshold:0.0310630798339844,right_val:0.1282255947589874,left_val:0.5155503749847412},{features:[[6,7,6,6,-1.],[8,7,2,6,3.]],threshold:0.0466218404471874,right_val:0.7363960742950440,left_val:0.4699777960777283},{features:[[1,10,18,6,-1.],[10,10,9,3,2.],[1,13,9,3,2.]],threshold:-0.0121894897893071,right_val:0.5518996715545654,left_val:0.3920530080795288},{features:[[0,9,10,9,-1.],[0,12,10,3,3.]],threshold:0.0130161102861166,right_val:0.3685136139392853,left_val:0.5260658264160156},{features:[[8,15,4,3,-1.],[8,16,4,1,3.]],threshold:-3.4952899441123009e-003,right_val:0.4716280996799469,left_val:0.6339294910430908},{features:[[5,12,3,4,-1.],[5,14,3,2,2.]],threshold:-4.4015039748046547e-005,right_val:0.3776184916496277,left_val:0.5333027243614197},{features:[[3,3,16,12,-1.],[3,9,16,6,2.]],threshold:-0.1096649020910263,right_val:0.5198346972465515,left_val:0.1765342056751251},{features:[[1,1,12,12,-1.],[1,1,6,6,2.],[7,7,6,6,2.]],threshold:-9.0279558207839727e-004,right_val:0.3838908076286316,left_val:0.5324159860610962},{features:[[10,4,2,4,-1.],[11,4,1,2,2.],[10,6,1,2,2.]],threshold:7.1126641705632210e-004,right_val:0.5755224227905273,left_val:0.4647929966449738},{features:[[0,9,10,2,-1.],[0,9,5,1,2.],[5,10,5,1,2.]],threshold:-3.1250279862433672e-003,right_val:0.5166770815849304,left_val:0.3236708939075470},{features:[[9,11,3,3,-1.],[9,12,3,1,3.]],threshold:2.4144679773598909e-003,right_val:0.6459717750549316,left_val:0.4787439107894898},{features:[[3,12,9,2,-1.],[3,13,9,1,2.]],threshold:4.4391240226104856e-004,right_val:0.6010255813598633,left_val:0.4409308135509491},{features:[[9,9,2,2,-1.],[9,10,2,1,2.]],threshold:-2.2611189342569560e-004,right_val:0.5493255853652954,left_val:0.4038113951683044}],threshold:50.1697311401367190},{simpleClassifiers:[{features:[[3,4,13,6,-1.],[3,6,13,2,3.]],threshold:-0.0469012893736362,right_val:0.3743801116943359,left_val:0.6600171923637390},{features:[[9,7,6,4,-1.],[12,7,3,2,2.],[9,9,3,2,2.]],threshold:-1.4568349579349160e-003,right_val:0.3437797129154205,left_val:0.5783991217613220},{features:[[1,0,6,8,-1.],[4,0,3,8,2.]],threshold:5.5598369799554348e-003,right_val:0.5908216238021851,left_val:0.3622266948223114},{features:[[9,5,2,12,-1.],[9,11,2,6,2.]],threshold:7.3170487303286791e-004,right_val:0.2873558104038239,left_val:0.5500419139862061},{features:[[4,4,3,10,-1.],[4,9,3,5,2.]],threshold:1.3318009441718459e-003,right_val:0.5431019067764282,left_val:0.2673169970512390},{features:[[6,17,8,3,-1.],[6,18,8,1,3.]],threshold:2.4347059661522508e-004,right_val:0.5741388797760010,left_val:0.3855027854442596},{features:[[0,5,10,6,-1.],[0,7,10,2,3.]],threshold:-3.0512469820678234e-003,right_val:0.3462845087051392,left_val:0.5503209829330444},{features:[[13,2,3,2,-1.],[13,3,3,1,2.]],threshold:-6.8657199153676629e-004,right_val:0.5429509282112122,left_val:0.3291221857070923},{features:[[7,5,4,5,-1.],[9,5,2,5,2.]],threshold:1.4668200165033340e-003,right_val:0.5351811051368713,left_val:0.3588382005691528},{features:[[12,14,3,6,-1.],[12,16,3,2,3.]],threshold:3.2021870720200241e-004,right_val:0.5700234174728394,left_val:0.4296841919422150},{features:[[1,11,8,2,-1.],[1,12,8,1,2.]],threshold:7.4122188379988074e-004,right_val:0.3366870880126953,left_val:0.5282164812088013},{features:[[7,13,6,3,-1.],[7,14,6,1,3.]],threshold:3.8330298848450184e-003,right_val:0.6257336139678955,left_val:0.4559567868709564},{features:[[0,5,3,6,-1.],[0,7,3,2,3.]],threshold:-0.0154564399272203,right_val:0.5129452943801880,left_val:0.2350116968154907},{features:[[13,2,3,2,-1.],[13,3,3,1,2.]],threshold:2.6796779129654169e-003,right_val:0.4155062139034271,left_val:0.5329415202140808},{features:[[4,14,4,6,-1.],[4,14,2,3,2.],[6,17,2,3,2.]],threshold:2.8296569362282753e-003,right_val:0.5804538130760193,left_val:0.4273087978363037},{features:[[13,2,3,2,-1.],[13,3,3,1,2.]],threshold:-3.9444249123334885e-003,right_val:0.5202686190605164,left_val:0.2912611961364746},{features:[[8,2,4,12,-1.],[8,6,4,4,3.]],threshold:2.7179559692740440e-003,right_val:0.3585677146911621,left_val:0.5307688117027283},{features:[[14,0,6,8,-1.],[17,0,3,4,2.],[14,4,3,4,2.]],threshold:5.9077627956867218e-003,right_val:0.5941585898399353,left_val:0.4703775048255920},{features:[[7,17,3,2,-1.],[8,17,1,2,3.]],threshold:-4.2240349575877190e-003,right_val:0.5088796019554138,left_val:0.2141567021608353},{features:[[8,12,4,2,-1.],[8,13,4,1,2.]],threshold:4.0725888684391975e-003,right_val:0.6841061115264893,left_val:0.4766413867473602},{features:[[6,0,8,12,-1.],[6,0,4,6,2.],[10,6,4,6,2.]],threshold:0.0101495301350951,right_val:0.3748497068881989,left_val:0.5360798835754395},{features:[[14,0,2,10,-1.],[15,0,1,5,2.],[14,5,1,5,2.]],threshold:-1.8864999583456665e-004,right_val:0.3853805065155029,left_val:0.5720130205154419},{features:[[5,3,8,6,-1.],[5,3,4,3,2.],[9,6,4,3,2.]],threshold:-4.8864358104765415e-003,right_val:0.5340958833694458,left_val:0.3693122863769531},{features:[[14,0,6,10,-1.],[17,0,3,5,2.],[14,5,3,5,2.]],threshold:0.0261584799736738,right_val:0.6059989929199219,left_val:0.4962374866008759},{features:[[9,14,1,2,-1.],[9,15,1,1,2.]],threshold:4.8560759751126170e-004,right_val:0.6012468934059143,left_val:0.4438945949077606},{features:[[15,10,4,3,-1.],[15,11,4,1,3.]],threshold:0.0112687097862363,right_val:0.1840388029813767,left_val:0.5244250297546387},{features:[[8,14,2,3,-1.],[8,15,2,1,3.]],threshold:-2.8114619199186563e-003,right_val:0.4409897029399872,left_val:0.6060283780097961},{features:[[3,13,14,4,-1.],[10,13,7,2,2.],[3,15,7,2,2.]],threshold:-5.6112729944288731e-003,right_val:0.5589237213134766,left_val:0.3891170918941498},{features:[[1,10,4,3,-1.],[1,11,4,1,3.]],threshold:8.5680093616247177e-003,right_val:0.2062619030475617,left_val:0.5069345831871033},{features:[[9,11,6,1,-1.],[11,11,2,1,3.]],threshold:-3.8172779022715986e-004,right_val:0.4192610979080200,left_val:0.5882201790809631},{features:[[5,11,6,1,-1.],[7,11,2,1,3.]],threshold:-1.7680290329735726e-004,right_val:0.4003368914127350,left_val:0.5533605813980103},{features:[[3,5,16,15,-1.],[3,10,16,5,3.]],threshold:6.5112537704408169e-003,right_val:0.5444191098213196,left_val:0.3310146927833557},{features:[[6,12,4,2,-1.],[8,12,2,2,2.]],threshold:-6.5948683186434209e-005,right_val:0.3944905996322632,left_val:0.5433831810951233},{features:[[4,4,12,10,-1.],[10,4,6,5,2.],[4,9,6,5,2.]],threshold:6.9939051754772663e-003,right_val:0.4192714095115662,left_val:0.5600358247756958},{features:[[8,6,3,4,-1.],[9,6,1,4,3.]],threshold:-4.6744439750909805e-003,right_val:0.4604960978031158,left_val:0.6685466766357422},{features:[[8,12,4,8,-1.],[10,12,2,4,2.],[8,16,2,4,2.]],threshold:0.0115898502990603,right_val:0.2926830053329468,left_val:0.5357121229171753},{features:[[8,14,4,3,-1.],[8,15,4,1,3.]],threshold:0.0130078401416540,right_val:0.7307463288307190,left_val:0.4679817855358124},{features:[[12,2,3,2,-1.],[13,2,1,2,3.]],threshold:-1.1008579749614000e-003,right_val:0.5415065288543701,left_val:0.3937501013278961},{features:[[8,15,3,2,-1.],[8,16,3,1,2.]],threshold:6.0472649056464434e-004,right_val:0.5604041218757629,left_val:0.4242376089096069},{features:[[6,0,9,14,-1.],[9,0,3,14,3.]],threshold:-0.0144948400557041,right_val:0.5293182730674744,left_val:0.3631210029125214},{features:[[9,6,2,3,-1.],[10,6,1,3,2.]],threshold:-5.3056948818266392e-003,right_val:0.4621821045875549,left_val:0.6860452294349670},{features:[[10,8,2,3,-1.],[10,9,2,1,3.]],threshold:-8.1829127157106996e-004,right_val:0.5420439243316650,left_val:0.3944096863269806},{features:[[0,9,4,6,-1.],[0,11,4,2,3.]],threshold:-0.0190775208175182,right_val:0.5037891864776611,left_val:0.1962621957063675},{features:[[6,0,8,2,-1.],[6,1,8,1,2.]],threshold:3.5549470339901745e-004,right_val:0.5613973140716553,left_val:0.4086259007453919},{features:[[6,14,7,3,-1.],[6,15,7,1,3.]],threshold:1.9679730758070946e-003,right_val:0.5926123261451721,left_val:0.4489121139049530},{features:[[8,10,8,9,-1.],[8,13,8,3,3.]],threshold:6.9189141504466534e-003,right_val:0.3728385865688324,left_val:0.5335925817489624},{features:[[5,2,3,2,-1.],[6,2,1,2,3.]],threshold:2.9872779268771410e-003,right_val:0.2975643873214722,left_val:0.5111321210861206},{features:[[14,1,6,8,-1.],[17,1,3,4,2.],[14,5,3,4,2.]],threshold:-6.2264618463814259e-003,right_val:0.4824537932872772,left_val:0.5541489720344544},{features:[[0,1,6,8,-1.],[0,1,3,4,2.],[3,5,3,4,2.]],threshold:0.0133533002808690,right_val:0.6414797902107239,left_val:0.4586423933506012},{features:[[1,2,18,6,-1.],[10,2,9,3,2.],[1,5,9,3,2.]],threshold:0.0335052385926247,right_val:0.3429994881153107,left_val:0.5392425060272217},{features:[[9,3,2,1,-1.],[10,3,1,1,2.]],threshold:-2.5294460356235504e-003,right_val:0.5013315081596375,left_val:0.1703713983297348},{features:[[13,2,4,6,-1.],[15,2,2,3,2.],[13,5,2,3,2.]],threshold:-1.2801629491150379e-003,right_val:0.4697405099868774,left_val:0.5305461883544922},{features:[[5,4,3,3,-1.],[5,5,3,1,3.]],threshold:7.0687388069927692e-003,right_val:0.6436504721641541,left_val:0.4615545868873596},{features:[[13,5,1,3,-1.],[13,6,1,1,3.]],threshold:9.6880499040707946e-004,right_val:0.6043894290924072,left_val:0.4833599030971527},{features:[[2,16,5,3,-1.],[2,17,5,1,3.]],threshold:3.9647659286856651e-003,right_val:0.3231816887855530,left_val:0.5187637209892273},{features:[[13,2,4,6,-1.],[15,2,2,3,2.],[13,5,2,3,2.]],threshold:-0.0220577307045460,right_val:0.5200980901718140,left_val:0.4079256951808929},{features:[[3,2,4,6,-1.],[3,2,2,3,2.],[5,5,2,3,2.]],threshold:-6.6906312713399529e-004,right_val:0.3815600872039795,left_val:0.5331609249114990},{features:[[13,5,1,2,-1.],[13,6,1,1,2.]],threshold:-6.7009328631684184e-004,right_val:0.4688901901245117,left_val:0.5655422210693359},{features:[[5,5,2,2,-1.],[5,6,2,1,2.]],threshold:7.4284552829340100e-004,right_val:0.6287400126457214,left_val:0.4534381031990051},{features:[[13,9,2,2,-1.],[13,9,1,2,2.]],threshold:2.2227810695767403e-003,right_val:0.3303655982017517,left_val:0.5350633263587952},{features:[[5,9,2,2,-1.],[6,9,1,2,2.]],threshold:-5.4130521602928638e-003,right_val:0.5005434751510620,left_val:0.1113687008619309},{features:[[13,17,3,2,-1.],[13,18,3,1,2.]],threshold:-1.4520040167553816e-005,right_val:0.4325133860111237,left_val:0.5628737807273865},{features:[[6,16,4,4,-1.],[6,16,2,2,2.],[8,18,2,2,2.]],threshold:2.3369169502984732e-004,right_val:0.5447791218757629,left_val:0.4165835082530975},{features:[[9,16,2,3,-1.],[9,17,2,1,3.]],threshold:4.2894547805190086e-003,right_val:0.6778649091720581,left_val:0.4860391020774841},{features:[[0,13,9,6,-1.],[0,15,9,2,3.]],threshold:5.9103150852024555e-003,right_val:0.3612113893032074,left_val:0.5262305140495300},{features:[[9,14,2,6,-1.],[9,17,2,3,2.]],threshold:0.0129005396738648,right_val:0.3250288069248200,left_val:0.5319377183914185},{features:[[9,15,2,3,-1.],[9,16,2,1,3.]],threshold:4.6982979401946068e-003,right_val:0.6665925979614258,left_val:0.4618245065212250},{features:[[1,10,18,6,-1.],[1,12,18,2,3.]],threshold:0.0104398597031832,right_val:0.3883604109287262,left_val:0.5505670905113220},{features:[[8,11,4,2,-1.],[8,12,4,1,2.]],threshold:3.0443191062659025e-003,right_val:0.7301844954490662,left_val:0.4697853028774262},{features:[[7,9,6,2,-1.],[7,10,6,1,2.]],threshold:-6.1593751888722181e-004,right_val:0.5464984178543091,left_val:0.3830839097499847},{features:[[8,8,2,3,-1.],[8,9,2,1,3.]],threshold:-3.4247159492224455e-003,right_val:0.5089530944824219,left_val:0.2566300034523010},{features:[[17,5,3,4,-1.],[18,5,1,4,3.]],threshold:-9.3538565561175346e-003,right_val:0.4940795898437500,left_val:0.6469966173171997},{features:[[1,19,18,1,-1.],[7,19,6,1,3.]],threshold:0.0523389987647533,right_val:0.7878770828247070,left_val:0.4745982885360718},{features:[[9,0,3,2,-1.],[10,0,1,2,3.]],threshold:3.5765620414167643e-003,right_val:0.2748498022556305,left_val:0.5306664705276489},{features:[[1,8,1,6,-1.],[1,10,1,2,3.]],threshold:7.1555317845195532e-004,right_val:0.4041908979415894,left_val:0.5413125753402710},{features:[[12,17,8,3,-1.],[12,17,4,3,2.]],threshold:-0.0105166798457503,right_val:0.4815283119678497,left_val:0.6158512234687805},{features:[[0,5,3,4,-1.],[1,5,1,4,3.]],threshold:7.7347927726805210e-003,right_val:0.7028980851173401,left_val:0.4695805907249451},{features:[[9,7,2,3,-1.],[9,8,2,1,3.]],threshold:-4.3226778507232666e-003,right_val:0.5304684042930603,left_val:0.2849566042423248},{features:[[7,11,2,2,-1.],[7,11,1,1,2.],[8,12,1,1,2.]],threshold:-2.5534399319440126e-003,right_val:0.4688892066478729,left_val:0.7056984901428223},{features:[[11,3,2,5,-1.],[11,3,1,5,2.]],threshold:1.0268510231981054e-004,right_val:0.5573464035987854,left_val:0.3902932107448578},{features:[[7,3,2,5,-1.],[8,3,1,5,2.]],threshold:7.1395188570022583e-006,right_val:0.5263987779617310,left_val:0.3684231936931610},{features:[[15,13,2,3,-1.],[15,14,2,1,3.]],threshold:-1.6711989883333445e-003,right_val:0.5387271046638489,left_val:0.3849175870418549},{features:[[5,6,2,3,-1.],[5,7,2,1,3.]],threshold:4.9260449595749378e-003,right_val:0.7447251081466675,left_val:0.4729771912097931},{features:[[4,19,15,1,-1.],[9,19,5,1,3.]],threshold:4.3908702209591866e-003,right_val:0.5591921806335449,left_val:0.4809181094169617},{features:[[1,19,15,1,-1.],[6,19,5,1,3.]],threshold:-0.0177936293184757,right_val:0.4676927030086517,left_val:0.6903678178787231},{features:[[15,13,2,3,-1.],[15,14,2,1,3.]],threshold:2.0469669252634048e-003,right_val:0.3308162093162537,left_val:0.5370690226554871},{features:[[5,0,4,15,-1.],[7,0,2,15,2.]],threshold:0.0298914890736341,right_val:0.3309059143066406,left_val:0.5139865279197693},{features:[[9,6,2,5,-1.],[9,6,1,5,2.]],threshold:1.5494900289922953e-003,right_val:0.6078342795372009,left_val:0.4660237133502960},{features:[[9,5,2,7,-1.],[10,5,1,7,2.]],threshold:1.4956969534978271e-003,right_val:0.5863919854164124,left_val:0.4404835999011993},{features:[[16,11,3,3,-1.],[16,12,3,1,3.]],threshold:9.5885928021743894e-004,right_val:0.4208523035049439,left_val:0.5435971021652222},{features:[[1,11,3,3,-1.],[1,12,3,1,3.]],threshold:4.9643701640889049e-004,right_val:0.4000622034072876,left_val:0.5370578169822693},{features:[[6,6,8,3,-1.],[6,7,8,1,3.]],threshold:-2.7280810754746199e-003,right_val:0.4259642958641052,left_val:0.5659412741661072},{features:[[0,15,6,2,-1.],[0,16,6,1,2.]],threshold:2.3026480339467525e-003,right_val:0.3350869119167328,left_val:0.5161657929420471},{features:[[1,0,18,6,-1.],[7,0,6,6,3.]],threshold:0.2515163123607636,right_val:0.7147309780120850,left_val:0.4869661927223206},{features:[[6,0,3,4,-1.],[7,0,1,4,3.]],threshold:-4.6328022144734859e-003,right_val:0.5083789825439453,left_val:0.2727448940277100},{features:[[14,10,4,10,-1.],[16,10,2,5,2.],[14,15,2,5,2.]],threshold:-0.0404344908893108,right_val:0.5021767020225525,left_val:0.6851438879966736},{features:[[3,2,3,2,-1.],[4,2,1,2,3.]],threshold:1.4972220014897175e-005,right_val:0.5522555112838745,left_val:0.4284465014934540},{features:[[11,2,2,2,-1.],[11,3,2,1,2.]],threshold:-2.4050309730228037e-004,right_val:0.5390074849128723,left_val:0.4226118922233582},{features:[[2,10,4,10,-1.],[2,10,2,5,2.],[4,15,2,5,2.]],threshold:0.0236578397452831,right_val:0.7504366040229797,left_val:0.4744631946086884},{features:[[0,13,20,6,-1.],[10,13,10,3,2.],[0,16,10,3,2.]],threshold:-8.1449104472994804e-003,right_val:0.5538362860679627,left_val:0.4245058894157410},{features:[[0,5,2,15,-1.],[1,5,1,15,2.]],threshold:-3.6992130335420370e-003,right_val:0.4529713094234467,left_val:0.5952357053756714},{features:[[1,7,18,4,-1.],[10,7,9,2,2.],[1,9,9,2,2.]],threshold:-6.7718601785600185e-003,right_val:0.5473399758338928,left_val:0.4137794077396393},{features:[[0,0,2,17,-1.],[1,0,1,17,2.]],threshold:4.2669530957937241e-003,right_val:0.5797994136810303,left_val:0.4484114944934845},{features:[[2,6,16,6,-1.],[10,6,8,3,2.],[2,9,8,3,2.]],threshold:1.7791989957913756e-003,right_val:0.4432444870471954,left_val:0.5624858736991882},{features:[[8,14,1,3,-1.],[8,15,1,1,3.]],threshold:1.6774770338088274e-003,right_val:0.6364241838455200,left_val:0.4637751877307892},{features:[[8,15,4,2,-1.],[8,16,4,1,2.]],threshold:1.1732629500329494e-003,right_val:0.5914415717124939,left_val:0.4544503092765808},{features:[[5,2,8,2,-1.],[5,2,4,1,2.],[9,3,4,1,2.]],threshold:8.6998171173036098e-004,right_val:0.3885917961597443,left_val:0.5334752798080444},{features:[[6,11,8,6,-1.],[6,14,8,3,2.]],threshold:7.6378340600058436e-004,right_val:0.3744941949844360,left_val:0.5398585200309753},{features:[[9,13,2,2,-1.],[9,14,2,1,2.]],threshold:1.5684569370932877e-004,right_val:0.5614616274833679,left_val:0.4317873120307922},{features:[[18,4,2,6,-1.],[18,6,2,2,3.]],threshold:-0.0215113703161478,right_val:0.5185542702674866,left_val:0.1785925030708313},{features:[[9,12,2,2,-1.],[9,13,2,1,2.]],threshold:1.3081369979772717e-004,right_val:0.5682849884033203,left_val:0.4342499077320099},{features:[[18,4,2,6,-1.],[18,6,2,2,3.]],threshold:0.0219920407980680,right_val:0.2379394024610519,left_val:0.5161716938018799},{features:[[9,13,1,3,-1.],[9,14,1,1,3.]],threshold:-8.0136500764638186e-004,right_val:0.4466426968574524,left_val:0.5986763238906860},{features:[[18,4,2,6,-1.],[18,6,2,2,3.]],threshold:-8.2736099138855934e-003,right_val:0.5251057147979736,left_val:0.4108217954635620},{features:[[0,4,2,6,-1.],[0,6,2,2,3.]],threshold:3.6831789184361696e-003,right_val:0.3397518098354340,left_val:0.5173814296722412},{features:[[9,12,3,3,-1.],[9,13,3,1,3.]],threshold:-7.9525681212544441e-003,right_val:0.4845924079418182,left_val:0.6888983249664307},{features:[[3,13,2,3,-1.],[3,14,2,1,3.]],threshold:1.5382299898192286e-003,right_val:0.3454113900661469,left_val:0.5178567171096802},{features:[[13,13,4,3,-1.],[13,14,4,1,3.]],threshold:-0.0140435304492712,right_val:0.5188667774200440,left_val:0.1678421050310135},{features:[[5,4,3,3,-1.],[5,5,3,1,3.]],threshold:1.4315890148282051e-003,right_val:0.5655773878097534,left_val:0.4368256926536560},{features:[[5,2,10,6,-1.],[5,4,10,2,3.]],threshold:-0.0340142287313938,right_val:0.4959217011928558,left_val:0.7802296280860901},{features:[[3,13,4,3,-1.],[3,14,4,1,3.]],threshold:-0.0120272999629378,right_val:0.5032231807708740,left_val:0.1585101038217545},{features:[[3,7,15,5,-1.],[8,7,5,5,3.]],threshold:0.1331661939620972,right_val:0.2755128145217896,left_val:0.5163304805755615},{features:[[3,7,12,2,-1.],[7,7,4,2,3.]],threshold:-1.5221949433907866e-003,right_val:0.5214552283287048,left_val:0.3728317916393280},{features:[[10,3,3,9,-1.],[11,3,1,9,3.]],threshold:-9.3929271679371595e-004,right_val:0.4511165022850037,left_val:0.5838379263877869},{features:[[8,6,4,6,-1.],[10,6,2,6,2.]],threshold:0.0277197398245335,right_val:0.7331544756889343,left_val:0.4728286862373352},{features:[[9,7,4,3,-1.],[9,8,4,1,3.]],threshold:3.1030150130391121e-003,right_val:0.4101563096046448,left_val:0.5302202105522156},{features:[[0,9,4,9,-1.],[2,9,2,9,2.]],threshold:0.0778612196445465,right_val:0.1272961944341660,left_val:0.4998334050178528},{features:[[9,13,3,5,-1.],[10,13,1,5,3.]],threshold:-0.0158549398183823,right_val:0.5165656208992004,left_val:0.0508333593606949},{features:[[7,7,6,3,-1.],[9,7,2,3,3.]],threshold:-4.9725300632417202e-003,right_val:0.4684231877326965,left_val:0.6798133850097656},{features:[[9,7,3,5,-1.],[10,7,1,5,3.]],threshold:-9.7676506265997887e-004,right_val:0.4788931906223297,left_val:0.6010771989822388},{features:[[5,7,8,2,-1.],[9,7,4,2,2.]],threshold:-2.4647710379213095e-003,right_val:0.5220503807067871,left_val:0.3393397927284241},{features:[[5,9,12,2,-1.],[9,9,4,2,3.]],threshold:-6.7937700077891350e-003,right_val:0.5239663124084473,left_val:0.4365136921405792},{features:[[5,6,10,3,-1.],[10,6,5,3,2.]],threshold:0.0326080210506916,right_val:0.2425214946269989,left_val:0.5052723884582520},{features:[[10,12,3,1,-1.],[11,12,1,1,3.]],threshold:-5.8514421107247472e-004,right_val:0.4758574068546295,left_val:0.5733973979949951},{features:[[0,1,11,15,-1.],[0,6,11,5,3.]],threshold:-0.0296326000243425,right_val:0.5263597965240479,left_val:0.3892289102077484}],threshold:66.6691207885742190},{simpleClassifiers:[{features:[[1,0,18,6,-1.],[7,0,6,6,3.]],threshold:0.0465508513152599,right_val:0.6240522861480713,left_val:0.3276950120925903},{features:[[7,7,6,1,-1.],[9,7,2,1,3.]],threshold:7.9537127166986465e-003,right_val:0.6942939162254334,left_val:0.4256485104560852},{features:[[5,16,6,4,-1.],[5,16,3,2,2.],[8,18,3,2,2.]],threshold:6.8221561377868056e-004,right_val:0.5900732874870300,left_val:0.3711487054824829},{features:[[6,5,9,8,-1.],[6,9,9,4,2.]],threshold:-1.9348249770700932e-004,right_val:0.5300545096397400,left_val:0.2041133940219879},{features:[[5,10,2,6,-1.],[5,13,2,3,2.]],threshold:-2.6710508973337710e-004,right_val:0.3103179037570953,left_val:0.5416126251220703},{features:[[7,6,8,10,-1.],[11,6,4,5,2.],[7,11,4,5,2.]],threshold:2.7818060480058193e-003,right_val:0.3467069864273071,left_val:0.5277832746505737},{features:[[5,6,8,10,-1.],[5,6,4,5,2.],[9,11,4,5,2.]],threshold:-4.6779078547842801e-004,right_val:0.3294492065906525,left_val:0.5308231115341187},{features:[[9,5,2,2,-1.],[9,6,2,1,2.]],threshold:-3.0335160772665404e-005,right_val:0.3852097094058991,left_val:0.5773872733116150},{features:[[5,12,8,2,-1.],[5,13,8,1,2.]],threshold:7.8038009814918041e-004,right_val:0.6150057911872864,left_val:0.4317438900470734},{features:[[10,2,8,2,-1.],[10,3,8,1,2.]],threshold:-4.2553851380944252e-003,right_val:0.5324292778968811,left_val:0.2933903932571411},{features:[[4,0,2,10,-1.],[4,0,1,5,2.],[5,5,1,5,2.]],threshold:-2.4735610350035131e-004,right_val:0.3843030035495758,left_val:0.5468844771385193},{features:[[9,10,2,2,-1.],[9,11,2,1,2.]],threshold:-1.4724259381182492e-004,right_val:0.5755587220191956,left_val:0.4281542897224426},{features:[[2,8,15,3,-1.],[2,9,15,1,3.]],threshold:1.1864770203828812e-003,right_val:0.5471466183662415,left_val:0.3747301101684570},{features:[[8,13,4,3,-1.],[8,14,4,1,3.]],threshold:2.3936580400913954e-003,right_val:0.6111528873443604,left_val:0.4537783861160278},{features:[[7,2,3,2,-1.],[8,2,1,2,3.]],threshold:-1.5390539774671197e-003,right_val:0.5189538002014160,left_val:0.2971341907978058},{features:[[7,13,6,3,-1.],[7,14,6,1,3.]],threshold:-7.1968790143728256e-003,right_val:0.4726476967334747,left_val:0.6699066758155823},{features:[[9,9,2,2,-1.],[9,10,2,1,2.]],threshold:-4.1499789222143590e-004,right_val:0.5260317921638489,left_val:0.3384954035282135},{features:[[17,2,3,6,-1.],[17,4,3,2,3.]],threshold:4.4359830208122730e-003,right_val:0.3920140862464905,left_val:0.5399122238159180},{features:[[1,5,3,4,-1.],[2,5,1,4,3.]],threshold:2.6606200262904167e-003,right_val:0.6119617819786072,left_val:0.4482578039169312},{features:[[14,8,4,6,-1.],[14,10,4,2,3.]],threshold:-1.5287200221791863e-003,right_val:0.5340266227722168,left_val:0.3711237907409668},{features:[[1,4,3,8,-1.],[2,4,1,8,3.]],threshold:-4.7397250309586525e-003,right_val:0.4455145001411438,left_val:0.6031088232994080},{features:[[8,13,4,6,-1.],[8,16,4,3,2.]],threshold:-0.0148291299119592,right_val:0.5341861844062805,left_val:0.2838754057884216},{features:[[3,14,2,2,-1.],[3,15,2,1,2.]],threshold:9.2275557108223438e-004,right_val:0.3361653983592987,left_val:0.5209547281265259},{features:[[14,8,4,6,-1.],[14,10,4,2,3.]],threshold:0.0835298076272011,right_val:0.0811644494533539,left_val:0.5119969844818115},{features:[[2,8,4,6,-1.],[2,10,4,2,3.]],threshold:-7.5633148662745953e-004,right_val:0.5189831256866455,left_val:0.3317120075225830},{features:[[10,14,1,6,-1.],[10,17,1,3,2.]],threshold:9.8403859883546829e-003,right_val:0.2334959059953690,left_val:0.5247598290443420},{features:[[7,5,3,6,-1.],[8,5,1,6,3.]],threshold:-1.5953830443322659e-003,right_val:0.4295622110366821,left_val:0.5750094056129456},{features:[[11,2,2,6,-1.],[12,2,1,3,2.],[11,5,1,3,2.]],threshold:3.4766020689858124e-005,right_val:0.5564029216766357,left_val:0.4342445135116577},{features:[[6,6,6,5,-1.],[8,6,2,5,3.]],threshold:0.0298629105091095,right_val:0.6579188108444214,left_val:0.4579147100448608},{features:[[17,1,3,6,-1.],[17,3,3,2,3.]],threshold:0.0113255903124809,right_val:0.3673888146877289,left_val:0.5274311900138855},{features:[[8,7,3,5,-1.],[9,7,1,5,3.]],threshold:-8.7828645482659340e-003,right_val:0.4642167091369629,left_val:0.7100368738174439},{features:[[9,18,3,2,-1.],[10,18,1,2,3.]],threshold:4.3639959767460823e-003,right_val:0.2705877125263214,left_val:0.5279216170310974},{features:[[8,18,3,2,-1.],[9,18,1,2,3.]],threshold:4.1804728098213673e-003,right_val:0.2449083030223846,left_val:0.5072525143623352},{features:[[12,3,5,2,-1.],[12,4,5,1,2.]],threshold:-4.5668511302210391e-004,right_val:0.5548691153526306,left_val:0.4283105134963989},{features:[[7,1,5,12,-1.],[7,7,5,6,2.]],threshold:-3.7140368949621916e-003,right_val:0.4103653132915497,left_val:0.5519387722015381},{features:[[1,0,18,4,-1.],[7,0,6,4,3.]],threshold:-0.0253042895346880,right_val:0.4869889020919800,left_val:0.6867002248764038},{features:[[4,2,2,2,-1.],[4,3,2,1,2.]],threshold:-3.4454080741852522e-004,right_val:0.5287693142890930,left_val:0.3728874027729034},{features:[[11,14,4,2,-1.],[13,14,2,1,2.],[11,15,2,1,2.]],threshold:-8.3935231668874621e-004,right_val:0.4616062045097351,left_val:0.6060152053833008},{features:[[0,2,3,6,-1.],[0,4,3,2,3.]],threshold:0.0172800496220589,right_val:0.1819823980331421,left_val:0.5049635767936707},{features:[[9,7,2,3,-1.],[9,8,2,1,3.]],threshold:-6.3595077954232693e-003,right_val:0.5232778787612915,left_val:0.1631239950656891},{features:[[5,5,1,3,-1.],[5,6,1,1,3.]],threshold:1.0298109846189618e-003,right_val:0.6176549196243286,left_val:0.4463278055191040},{features:[[10,10,6,1,-1.],[10,10,3,1,2.]],threshold:1.0117109632119536e-003,right_val:0.4300698935985565,left_val:0.5473384857177734},{features:[[4,10,6,1,-1.],[7,10,3,1,2.]],threshold:-0.0103088002651930,right_val:0.5000867247581482,left_val:0.1166985034942627},{features:[[9,17,3,3,-1.],[9,18,3,1,3.]],threshold:5.4682018235325813e-003,right_val:0.6719213724136353,left_val:0.4769287109375000},{features:[[4,14,1,3,-1.],[4,15,1,1,3.]],threshold:-9.1696460731327534e-004,right_val:0.5178164839744568,left_val:0.3471089899539948},{features:[[12,5,3,3,-1.],[12,6,3,1,3.]],threshold:2.3922820109874010e-003,right_val:0.6216310858726502,left_val:0.4785236120223999},{features:[[4,5,12,3,-1.],[4,6,12,1,3.]],threshold:-7.5573818758130074e-003,right_val:0.4410085082054138,left_val:0.5814796090126038},{features:[[9,8,2,3,-1.],[9,9,2,1,3.]],threshold:-7.7024032361805439e-004,right_val:0.5465722084045410,left_val:0.3878000080585480},{features:[[4,9,3,3,-1.],[5,9,1,3,3.]],threshold:-8.7125990539789200e-003,right_val:0.4995836019515991,left_val:0.1660051047801971},{features:[[6,0,9,17,-1.],[9,0,3,17,3.]],threshold:-0.0103063201531768,right_val:0.5274233818054199,left_val:0.4093391001224518},{features:[[9,12,1,3,-1.],[9,13,1,1,3.]],threshold:-2.0940979011356831e-003,right_val:0.4572280049324036,left_val:0.6206194758415222},{features:[[9,5,2,15,-1.],[9,10,2,5,3.]],threshold:6.8099051713943481e-003,right_val:0.4155600070953369,left_val:0.5567759275436401},{features:[[8,14,2,3,-1.],[8,15,2,1,3.]],threshold:-1.0746059706434608e-003,right_val:0.4353024959564209,left_val:0.5638927817344666},{features:[[10,14,1,3,-1.],[10,15,1,1,3.]],threshold:2.1550289820879698e-003,right_val:0.6749758124351502,left_val:0.4826265871524811},{features:[[7,1,6,5,-1.],[9,1,2,5,3.]],threshold:0.0317423194646835,right_val:0.1883248984813690,left_val:0.5048379898071289},{features:[[0,0,20,2,-1.],[0,0,10,2,2.]],threshold:-0.0783827230334282,right_val:0.5260158181190491,left_val:0.2369548976421356},{features:[[2,13,5,3,-1.],[2,14,5,1,3.]],threshold:5.7415119372308254e-003,right_val:0.2776469886302948,left_val:0.5048828721046448},{features:[[9,11,2,3,-1.],[9,12,2,1,3.]],threshold:-2.9014600440859795e-003,right_val:0.4693317115306854,left_val:0.6238604784011841},{features:[[2,5,9,15,-1.],[2,10,9,5,3.]],threshold:-2.6427931152284145e-003,right_val:0.5169777274131775,left_val:0.3314141929149628},{features:[[5,0,12,10,-1.],[11,0,6,5,2.],[5,5,6,5,2.]],threshold:-0.1094966009259224,right_val:0.5183441042900085,left_val:0.2380045056343079},{features:[[5,1,2,3,-1.],[6,1,1,3,2.]],threshold:7.4075913289561868e-005,right_val:0.5362150073051453,left_val:0.4069635868072510},{features:[[10,7,6,1,-1.],[12,7,2,1,3.]],threshold:-5.0593802006915212e-004,right_val:0.4374594092369080,left_val:0.5506706237792969},{features:[[3,1,2,10,-1.],[3,1,1,5,2.],[4,6,1,5,2.]],threshold:-8.2131777890026569e-004,right_val:0.4209375977516174,left_val:0.5525709986686707},{features:[[13,7,2,1,-1.],[13,7,1,1,2.]],threshold:-6.0276539443293586e-005,right_val:0.4748266041278839,left_val:0.5455474853515625},{features:[[4,13,4,6,-1.],[4,15,4,2,3.]],threshold:6.8065142259001732e-003,right_val:0.3424577116966248,left_val:0.5157995820045471},{features:[[13,7,2,1,-1.],[13,7,1,1,2.]],threshold:1.7202789895236492e-003,right_val:0.6331263780593872,left_val:0.5013207793235779},{features:[[5,7,2,1,-1.],[6,7,1,1,2.]],threshold:-1.3016929733566940e-004,right_val:0.4226869940757752,left_val:0.5539718270301819},{features:[[2,12,18,4,-1.],[11,12,9,2,2.],[2,14,9,2,2.]],threshold:-4.8016388900578022e-003,right_val:0.5430780053138733,left_val:0.4425095021724701},{features:[[5,7,2,2,-1.],[5,7,1,1,2.],[6,8,1,1,2.]],threshold:-2.5399310979992151e-003,right_val:0.4697605073451996,left_val:0.7145782113075256},{features:[[16,3,4,2,-1.],[16,4,4,1,2.]],threshold:-1.4278929447755218e-003,right_val:0.5399605035781860,left_val:0.4070445001125336},{features:[[0,2,2,18,-1.],[0,2,1,9,2.],[1,11,1,9,2.]],threshold:-0.0251425504684448,right_val:0.4747352004051209,left_val:0.7884690761566162},{features:[[1,2,18,4,-1.],[10,2,9,2,2.],[1,4,9,2,2.]],threshold:-3.8899609353393316e-003,right_val:0.5577110052108765,left_val:0.4296191930770874},{features:[[9,14,1,3,-1.],[9,15,1,1,3.]],threshold:4.3947459198534489e-003,right_val:0.7023944258689880,left_val:0.4693162143230438},{features:[[2,12,18,4,-1.],[11,12,9,2,2.],[2,14,9,2,2.]],threshold:0.0246784202754498,right_val:0.3812510073184967,left_val:0.5242322087287903},{features:[[0,12,18,4,-1.],[0,12,9,2,2.],[9,14,9,2,2.]],threshold:0.0380476787686348,right_val:0.1687828004360199,left_val:0.5011739730834961},{features:[[11,4,5,3,-1.],[11,5,5,1,3.]],threshold:7.9424865543842316e-003,right_val:0.6369568109512329,left_val:0.4828582108020783},{features:[[6,4,7,3,-1.],[6,5,7,1,3.]],threshold:-1.5110049862414598e-003,right_val:0.4487667977809906,left_val:0.5906485915184021},{features:[[13,17,3,3,-1.],[13,18,3,1,3.]],threshold:6.4201741479337215e-003,right_val:0.2990570068359375,left_val:0.5241097807884216},{features:[[8,1,3,4,-1.],[9,1,1,4,3.]],threshold:-2.9802159406244755e-003,right_val:0.5078489780426025,left_val:0.3041465878486633},{features:[[11,4,2,4,-1.],[11,4,1,4,2.]],threshold:-7.4580078944563866e-004,right_val:0.5256826281547546,left_val:0.4128139019012451},{features:[[0,17,9,3,-1.],[3,17,3,3,3.]],threshold:-0.0104709500446916,right_val:0.4494296014308929,left_val:0.5808395147323608},{features:[[11,0,2,8,-1.],[12,0,1,4,2.],[11,4,1,4,2.]],threshold:9.3369204550981522e-003,right_val:0.2658948898315430,left_val:0.5246552824974060},{features:[[0,8,6,12,-1.],[0,8,3,6,2.],[3,14,3,6,2.]],threshold:0.0279369000345469,right_val:0.7087256908416748,left_val:0.4674955010414124},{features:[[10,7,4,12,-1.],[10,13,4,6,2.]],threshold:7.4277678504586220e-003,right_val:0.3758518099784851,left_val:0.5409486889839172},{features:[[5,3,8,14,-1.],[5,10,8,7,2.]],threshold:-0.0235845092684031,right_val:0.5238550901412964,left_val:0.3758639991283417},{features:[[14,10,6,1,-1.],[14,10,3,1,2.]],threshold:1.1452640173956752e-003,right_val:0.5804247260093689,left_val:0.4329578876495361},{features:[[0,4,10,4,-1.],[0,6,10,2,2.]],threshold:-4.3468660442158580e-004,right_val:0.3873069882392883,left_val:0.5280618071556091},{features:[[10,0,5,8,-1.],[10,4,5,4,2.]],threshold:0.0106485402211547,right_val:0.5681251883506775,left_val:0.4902113080024719},{features:[[8,1,4,8,-1.],[8,1,2,4,2.],[10,5,2,4,2.]],threshold:-3.9418050437234342e-004,right_val:0.4318251013755798,left_val:0.5570880174636841},{features:[[9,11,6,1,-1.],[11,11,2,1,3.]],threshold:-1.3270479394122958e-004,right_val:0.4343554973602295,left_val:0.5658439993858337},{features:[[8,9,3,4,-1.],[9,9,1,4,3.]],threshold:-2.0125510636717081e-003,right_val:0.4537523984909058,left_val:0.6056739091873169},{features:[[18,4,2,6,-1.],[18,6,2,2,3.]],threshold:2.4854319635778666e-003,right_val:0.4138010144233704,left_val:0.5390477180480957},{features:[[8,8,3,4,-1.],[9,8,1,4,3.]],threshold:1.8237880431115627e-003,right_val:0.5717188715934753,left_val:0.4354828894138336},{features:[[7,1,13,3,-1.],[7,2,13,1,3.]],threshold:-0.0166566595435143,right_val:0.5216122865676880,left_val:0.3010913133621216},{features:[[7,13,6,1,-1.],[9,13,2,1,3.]],threshold:8.0349558265879750e-004,right_val:0.3818396925926209,left_val:0.5300151109695435},{features:[[12,11,3,6,-1.],[12,13,3,2,3.]],threshold:3.4170378930866718e-003,right_val:0.4241400063037872,left_val:0.5328028798103333},{features:[[5,11,6,1,-1.],[7,11,2,1,3.]],threshold:-3.6222729249857366e-004,right_val:0.4186977148056030,left_val:0.5491728186607361},{features:[[1,4,18,10,-1.],[10,4,9,5,2.],[1,9,9,5,2.]],threshold:-0.1163002029061317,right_val:0.5226451158523560,left_val:0.1440722048282623},{features:[[8,6,4,9,-1.],[8,9,4,3,3.]],threshold:-0.0146950101479888,right_val:0.4715717136859894,left_val:0.7747725248336792},{features:[[8,6,4,3,-1.],[8,7,4,1,3.]],threshold:2.1972130052745342e-003,right_val:0.3315644860267639,left_val:0.5355433821678162},{features:[[8,7,3,3,-1.],[9,7,1,3,3.]],threshold:-4.6965209185145795e-004,right_val:0.4458136856555939,left_val:0.5767235159873962},{features:[[14,15,4,3,-1.],[14,16,4,1,3.]],threshold:6.5144998952746391e-003,right_val:0.3647888898849487,left_val:0.5215674042701721},{features:[[5,10,3,10,-1.],[6,10,1,10,3.]],threshold:0.0213000606745481,right_val:0.1567950993776321,left_val:0.4994204938411713},{features:[[8,15,4,3,-1.],[8,16,4,1,3.]],threshold:3.1881409231573343e-003,right_val:0.6287270188331604,left_val:0.4742200076580048},{features:[[0,8,1,6,-1.],[0,10,1,2,3.]],threshold:9.0019777417182922e-004,right_val:0.3943752050399780,left_val:0.5347954034805298},{features:[[10,15,1,3,-1.],[10,16,1,1,3.]],threshold:-5.1772277802228928e-003,right_val:0.5013138055801392,left_val:0.6727191805839539},{features:[[2,15,4,3,-1.],[2,16,4,1,3.]],threshold:-4.3764649890363216e-003,right_val:0.5128793120384216,left_val:0.3106675148010254},{features:[[18,3,2,8,-1.],[19,3,1,4,2.],[18,7,1,4,2.]],threshold:2.6299960445612669e-003,right_val:0.5755215883255005,left_val:0.4886310100555420},{features:[[0,3,2,8,-1.],[0,3,1,4,2.],[1,7,1,4,2.]],threshold:-2.0458688959479332e-003,right_val:0.4558076858520508,left_val:0.6025794148445129},{features:[[3,7,14,10,-1.],[10,7,7,5,2.],[3,12,7,5,2.]],threshold:0.0694827064871788,right_val:0.2185259014368057,left_val:0.5240747928619385},{features:[[0,7,19,3,-1.],[0,8,19,1,3.]],threshold:0.0240489393472672,right_val:0.2090622037649155,left_val:0.5011867284774780},{features:[[12,6,3,3,-1.],[12,7,3,1,3.]],threshold:3.1095340382307768e-003,right_val:0.7108548283576965,left_val:0.4866712093353272},{features:[[0,6,1,3,-1.],[0,7,1,1,3.]],threshold:-1.2503260513767600e-003,right_val:0.5156195163726807,left_val:0.3407891094684601},{features:[[12,6,3,3,-1.],[12,7,3,1,3.]],threshold:-1.0281190043315291e-003,right_val:0.4439432024955750,left_val:0.5575572252273560},{features:[[5,6,3,3,-1.],[5,7,3,1,3.]],threshold:-8.8893622159957886e-003,right_val:0.4620442092418671,left_val:0.6402000784873962},{features:[[8,2,4,2,-1.],[8,3,4,1,2.]],threshold:-6.1094801640138030e-004,right_val:0.5448899865150452,left_val:0.3766441941261292},{features:[[6,3,4,12,-1.],[8,3,2,12,2.]],threshold:-5.7686357758939266e-003,right_val:0.5133677124977112,left_val:0.3318648934364319},{features:[[13,6,2,3,-1.],[13,7,2,1,3.]],threshold:1.8506490159779787e-003,right_val:0.6406934857368469,left_val:0.4903570115566254},{features:[[0,10,20,4,-1.],[0,12,20,2,2.]],threshold:-0.0997994691133499,right_val:0.5015562176704407,left_val:0.1536051034927368},{features:[[2,0,17,14,-1.],[2,7,17,7,2.]],threshold:-0.3512834906578064,right_val:0.5174378752708435,left_val:0.0588231310248375},{features:[[0,0,6,10,-1.],[0,0,3,5,2.],[3,5,3,5,2.]],threshold:-0.0452445708215237,right_val:0.4677872955799103,left_val:0.6961488723754883},{features:[[14,6,6,4,-1.],[14,6,3,4,2.]],threshold:0.0714815780520439,right_val:0.1038092970848084,left_val:0.5167986154556274},{features:[[0,6,6,4,-1.],[3,6,3,4,2.]],threshold:2.1895780228078365e-003,right_val:0.5532060861587524,left_val:0.4273078143596649},{features:[[13,2,7,2,-1.],[13,3,7,1,2.]],threshold:-5.9242651332169771e-004,right_val:0.5276389122009277,left_val:0.4638943970203400},{features:[[0,2,7,2,-1.],[0,3,7,1,2.]],threshold:1.6788389766588807e-003,right_val:0.3932034969329834,left_val:0.5301648974418640},{features:[[6,11,14,2,-1.],[13,11,7,1,2.],[6,12,7,1,2.]],threshold:-2.2163488902151585e-003,right_val:0.4757033884525299,left_val:0.5630694031715393},{features:[[8,5,2,2,-1.],[8,5,1,1,2.],[9,6,1,1,2.]],threshold:1.1568699846975505e-004,right_val:0.5535702705383301,left_val:0.4307535886764526},{features:[[13,9,2,3,-1.],[13,9,1,3,2.]],threshold:-7.2017288766801357e-003,right_val:0.5193064212799072,left_val:0.1444882005453110},{features:[[1,1,3,12,-1.],[2,1,1,12,3.]],threshold:8.9081272017210722e-004,right_val:0.5593621134757996,left_val:0.4384432137012482},{features:[[17,4,1,3,-1.],[17,5,1,1,3.]],threshold:1.9605009583756328e-004,right_val:0.4705956876277924,left_val:0.5340415835380554},{features:[[2,4,1,3,-1.],[2,5,1,1,3.]],threshold:5.2022142335772514e-004,right_val:0.3810079097747803,left_val:0.5213856101036072},{features:[[14,5,1,3,-1.],[14,6,1,1,3.]],threshold:9.4588572392240167e-004,right_val:0.6130738854408264,left_val:0.4769414961338043},{features:[[7,16,2,3,-1.],[7,17,2,1,3.]],threshold:9.1698471806012094e-005,right_val:0.5429363250732422,left_val:0.4245009124279022},{features:[[8,13,4,6,-1.],[10,13,2,3,2.],[8,16,2,3,2.]],threshold:2.1833200007677078e-003,right_val:0.4191075861454010,left_val:0.5457730889320374},{features:[[5,5,1,3,-1.],[5,6,1,1,3.]],threshold:-8.6039671441540122e-004,right_val:0.4471659958362579,left_val:0.5764588713645935},{features:[[16,0,4,20,-1.],[16,0,2,20,2.]],threshold:-0.0132362395524979,right_val:0.4695009887218475,left_val:0.6372823119163513},{features:[[5,1,2,6,-1.],[5,1,1,3,2.],[6,4,1,3,2.]],threshold:4.3376701069064438e-004,right_val:0.3945829868316650,left_val:0.5317873954772949}],threshold:67.6989212036132810},{simpleClassifiers:[{features:[[5,4,10,4,-1.],[5,6,10,2,2.]],threshold:-0.0248471498489380,right_val:0.3873311877250671,left_val:0.6555516719818115},{features:[[15,2,4,12,-1.],[15,2,2,12,2.]],threshold:6.1348611488938332e-003,right_val:0.5973997712135315,left_val:0.3748072087764740},{features:[[7,6,4,12,-1.],[7,12,4,6,2.]],threshold:6.4498498104512691e-003,right_val:0.2548811137676239,left_val:0.5425491929054260},{features:[[14,5,1,8,-1.],[14,9,1,4,2.]],threshold:6.3491211039945483e-004,right_val:0.5387253761291504,left_val:0.2462442070245743},{features:[[1,4,14,10,-1.],[1,4,7,5,2.],[8,9,7,5,2.]],threshold:1.4023890253156424e-003,right_val:0.3528657853603363,left_val:0.5594322085380554},{features:[[11,6,6,14,-1.],[14,6,3,7,2.],[11,13,3,7,2.]],threshold:3.0044000595808029e-004,right_val:0.5765938162803650,left_val:0.3958503901958466},{features:[[3,6,6,14,-1.],[3,6,3,7,2.],[6,13,3,7,2.]],threshold:1.0042409849120304e-004,right_val:0.5534998178482056,left_val:0.3698996901512146},{features:[[4,9,15,2,-1.],[9,9,5,2,3.]],threshold:-5.0841490738093853e-003,right_val:0.5547800064086914,left_val:0.3711090981960297},{features:[[7,14,6,3,-1.],[7,15,6,1,3.]],threshold:-0.0195372607558966,right_val:0.4579297006130219,left_val:0.7492755055427551},{features:[[6,3,14,4,-1.],[13,3,7,2,2.],[6,5,7,2,2.]],threshold:-7.4532740654831287e-006,right_val:0.3904069960117340,left_val:0.5649787187576294},{features:[[1,9,15,2,-1.],[6,9,5,2,3.]],threshold:-3.6079459823668003e-003,right_val:0.5267801284790039,left_val:0.3381088078022003},{features:[[6,11,8,9,-1.],[6,14,8,3,3.]],threshold:2.0697501022368670e-003,right_val:0.3714388906955719,left_val:0.5519291162490845},{features:[[7,4,3,8,-1.],[8,4,1,8,3.]],threshold:-4.6463840408250690e-004,right_val:0.4113566875457764,left_val:0.5608214735984802},{features:[[14,6,2,6,-1.],[14,9,2,3,2.]],threshold:7.5490452582016587e-004,right_val:0.5329356193542481,left_val:0.3559206128120422},{features:[[5,7,6,4,-1.],[5,7,3,2,2.],[8,9,3,2,2.]],threshold:-9.8322238773107529e-004,right_val:0.3763205111026764,left_val:0.5414795875549316},{features:[[1,1,18,19,-1.],[7,1,6,19,3.]],threshold:-0.0199406407773495,right_val:0.4705299139022827,left_val:0.6347903013229370},{features:[[1,2,6,5,-1.],[4,2,3,5,2.]],threshold:3.7680300883948803e-003,right_val:0.5563716292381287,left_val:0.3913489878177643},{features:[[12,17,6,2,-1.],[12,18,6,1,2.]],threshold:-9.4528505578637123e-003,right_val:0.5215116739273071,left_val:0.2554892897605896},{features:[[2,17,6,2,-1.],[2,18,6,1,2.]],threshold:2.9560849070549011e-003,right_val:0.3063920140266419,left_val:0.5174679160118103},{features:[[17,3,3,6,-1.],[17,5,3,2,3.]],threshold:9.1078737750649452e-003,right_val:0.2885963022708893,left_val:0.5388448238372803},{features:[[8,17,3,3,-1.],[8,18,3,1,3.]],threshold:1.8219229532405734e-003,right_val:0.5852196812629700,left_val:0.4336043000221252},{features:[[10,13,2,6,-1.],[10,16,2,3,2.]],threshold:0.0146887395530939,right_val:0.2870005965232849,left_val:0.5287361741065979},{features:[[7,13,6,3,-1.],[7,14,6,1,3.]],threshold:-0.0143879903480411,right_val:0.4647370874881744,left_val:0.7019448876380920},{features:[[17,3,3,6,-1.],[17,5,3,2,3.]],threshold:-0.0189866498112679,right_val:0.5247011780738831,left_val:0.2986552119255066},{features:[[8,13,2,3,-1.],[8,14,2,1,3.]],threshold:1.1527639580890536e-003,right_val:0.5931661725044251,left_val:0.4323473870754242},{features:[[9,3,6,2,-1.],[11,3,2,2,3.]],threshold:0.0109336702153087,right_val:0.3130319118499756,left_val:0.5286864042282105},{features:[[0,3,3,6,-1.],[0,5,3,2,3.]],threshold:-0.0149327302351594,right_val:0.5084077119827271,left_val:0.2658419013023377},{features:[[8,5,4,6,-1.],[8,7,4,2,3.]],threshold:-2.9970539617352188e-004,right_val:0.3740724027156830,left_val:0.5463526844978333},{features:[[5,5,3,2,-1.],[5,6,3,1,2.]],threshold:4.1677621193230152e-003,right_val:0.7435721755027771,left_val:0.4703496992588043},{features:[[10,1,3,4,-1.],[11,1,1,4,3.]],threshold:-6.3905320130288601e-003,right_val:0.5280538201332092,left_val:0.2069258987903595},{features:[[1,2,5,9,-1.],[1,5,5,3,3.]],threshold:4.5029609464108944e-003,right_val:0.3483543097972870,left_val:0.5182648897171021},{features:[[13,6,2,3,-1.],[13,7,2,1,3.]],threshold:-9.2040365561842918e-003,right_val:0.4932360053062439,left_val:0.6803777217864990},{features:[[0,6,14,3,-1.],[7,6,7,3,2.]],threshold:0.0813272595405579,right_val:0.2253051996231079,left_val:0.5058398842811585},{features:[[2,11,18,8,-1.],[2,15,18,4,2.]],threshold:-0.1507928073406220,right_val:0.5264679789543152,left_val:0.2963424921035767},{features:[[5,6,2,3,-1.],[5,7,2,1,3.]],threshold:3.3179009333252907e-003,right_val:0.7072932124137878,left_val:0.4655495882034302},{features:[[10,6,4,2,-1.],[12,6,2,1,2.],[10,7,2,1,2.]],threshold:7.7402801252901554e-004,right_val:0.5668237805366516,left_val:0.4780347943305969},{features:[[6,6,4,2,-1.],[6,6,2,1,2.],[8,7,2,1,2.]],threshold:6.8199541419744492e-004,right_val:0.5722156763076782,left_val:0.4286996126174927},{features:[[10,1,3,4,-1.],[11,1,1,4,3.]],threshold:5.3671570494771004e-003,right_val:0.3114621937274933,left_val:0.5299307107925415},{features:[[7,1,2,7,-1.],[8,1,1,7,2.]],threshold:9.7018666565418243e-005,right_val:0.5269461870193481,left_val:0.3674638867378235},{features:[[4,2,15,14,-1.],[4,9,15,7,2.]],threshold:-0.1253408938646317,right_val:0.5245791077613831,left_val:0.2351492047309876},{features:[[8,7,3,2,-1.],[9,7,1,2,3.]],threshold:-5.2516269497573376e-003,right_val:0.4693767130374908,left_val:0.7115936875343323},{features:[[2,3,18,4,-1.],[11,3,9,2,2.],[2,5,9,2,2.]],threshold:-7.8342109918594360e-003,right_val:0.5409085750579834,left_val:0.4462651014328003},{features:[[9,7,2,2,-1.],[10,7,1,2,2.]],threshold:-1.1310069821774960e-003,right_val:0.4417662024497986,left_val:0.5945618748664856},{features:[[13,9,2,3,-1.],[13,9,1,3,2.]],threshold:1.7601120052859187e-003,right_val:0.3973453044891357,left_val:0.5353249907493591},{features:[[5,2,6,2,-1.],[7,2,2,2,3.]],threshold:-8.1581249833106995e-004,right_val:0.5264726877212524,left_val:0.3760268092155457},{features:[[9,5,2,7,-1.],[9,5,1,7,2.]],threshold:-3.8687589112669230e-003,right_val:0.4749819934368134,left_val:0.6309912800788879},{features:[[5,9,2,3,-1.],[6,9,1,3,2.]],threshold:1.5207129763439298e-003,right_val:0.3361223936080933,left_val:0.5230181813240051},{features:[[6,0,14,18,-1.],[6,9,14,9,2.]],threshold:0.5458673834800720,right_val:0.1172635033726692,left_val:0.5167139768600464},{features:[[2,16,6,3,-1.],[2,17,6,1,3.]],threshold:0.0156501904129982,right_val:0.1393294930458069,left_val:0.4979439079761505},{features:[[9,7,3,6,-1.],[10,7,1,6,3.]],threshold:-0.0117318602278829,right_val:0.4921196103096008,left_val:0.7129650712013245},{features:[[7,8,4,3,-1.],[7,9,4,1,3.]],threshold:-6.1765122227370739e-003,right_val:0.5049701929092407,left_val:0.2288102954626083},{features:[[7,12,6,3,-1.],[7,13,6,1,3.]],threshold:2.2457661107182503e-003,right_val:0.6048725843429565,left_val:0.4632433950901032},{features:[[9,12,2,3,-1.],[9,13,2,1,3.]],threshold:-5.1915869116783142e-003,right_val:0.4602192938327789,left_val:0.6467421054840088},{features:[[7,12,6,2,-1.],[9,12,2,2,3.]],threshold:-0.0238278806209564,right_val:0.5226079225540161,left_val:0.1482000946998596},{features:[[5,11,4,6,-1.],[5,14,4,3,2.]],threshold:1.0284580057486892e-003,right_val:0.3375957012176514,left_val:0.5135489106178284},{features:[[11,12,7,2,-1.],[11,13,7,1,2.]],threshold:-0.0100788502022624,right_val:0.5303567051887512,left_val:0.2740561068058014},{features:[[6,10,8,6,-1.],[6,10,4,3,2.],[10,13,4,3,2.]],threshold:2.6168930344283581e-003,right_val:0.3972454071044922,left_val:0.5332670807838440},{features:[[11,10,3,4,-1.],[11,12,3,2,2.]],threshold:5.4385367548093200e-004,right_val:0.4063411951065064,left_val:0.5365604162216187},{features:[[9,16,2,3,-1.],[9,17,2,1,3.]],threshold:5.3510512225329876e-003,right_val:0.6889045834541321,left_val:0.4653759002685547},{features:[[13,3,1,9,-1.],[13,6,1,3,3.]],threshold:-1.5274790348485112e-003,right_val:0.3624723851680756,left_val:0.5449501276016235},{features:[[1,13,14,6,-1.],[1,15,14,2,3.]],threshold:-0.0806244164705276,right_val:0.5000287294387817,left_val:0.1656087040901184},{features:[[13,6,1,6,-1.],[13,9,1,3,2.]],threshold:0.0221920292824507,right_val:0.2002808004617691,left_val:0.5132731199264526},{features:[[0,4,3,8,-1.],[1,4,1,8,3.]],threshold:7.3100631125271320e-003,right_val:0.6366536021232605,left_val:0.4617947936058044},{features:[[18,0,2,18,-1.],[18,0,1,18,2.]],threshold:-6.4063072204589844e-003,right_val:0.4867860972881317,left_val:0.5916250944137573},{features:[[2,3,6,2,-1.],[2,4,6,1,2.]],threshold:-7.6415040530264378e-004,right_val:0.5315797924995422,left_val:0.3888409137725830},{features:[[9,0,8,6,-1.],[9,2,8,2,3.]],threshold:7.6734489994123578e-004,right_val:0.5605279803276062,left_val:0.4159064888954163},{features:[[6,6,1,6,-1.],[6,9,1,3,2.]],threshold:6.1474501853808761e-004,right_val:0.5120148062705994,left_val:0.3089022040367127},{features:[[14,8,6,3,-1.],[14,9,6,1,3.]],threshold:-5.0105270929634571e-003,right_val:0.5207306146621704,left_val:0.3972199857234955},{features:[[0,0,2,18,-1.],[1,0,1,18,2.]],threshold:-8.6909132078289986e-003,right_val:0.4608575999736786,left_val:0.6257408261299133},{features:[[1,18,18,2,-1.],[10,18,9,1,2.],[1,19,9,1,2.]],threshold:-0.0163914598524570,right_val:0.5242266058921814,left_val:0.2085209935903549},{features:[[3,15,2,2,-1.],[3,16,2,1,2.]],threshold:4.0973909199237823e-004,right_val:0.3780320882797241,left_val:0.5222427248954773},{features:[[8,14,5,3,-1.],[8,15,5,1,3.]],threshold:-2.5242289993911982e-003,right_val:0.4611890017986298,left_val:0.5803927183151245},{features:[[8,14,2,3,-1.],[8,15,2,1,3.]],threshold:5.0945312250405550e-004,right_val:0.5846015810966492,left_val:0.4401271939277649},{features:[[12,3,3,3,-1.],[13,3,1,3,3.]],threshold:1.9656419754028320e-003,right_val:0.4184590876102448,left_val:0.5322325229644775},{features:[[7,5,6,2,-1.],[9,5,2,2,3.]],threshold:5.6298897834494710e-004,right_val:0.5234565734863281,left_val:0.3741844892501831},{features:[[15,5,5,2,-1.],[15,6,5,1,2.]],threshold:-6.7946797935292125e-004,right_val:0.5356478095054627,left_val:0.4631041884422302},{features:[[0,5,5,2,-1.],[0,6,5,1,2.]],threshold:7.2856349870562553e-003,right_val:0.2377564013004303,left_val:0.5044670104980469},{features:[[17,14,1,6,-1.],[17,17,1,3,2.]],threshold:-0.0174594894051552,right_val:0.5050435066223145,left_val:0.7289121150970459},{features:[[2,9,9,3,-1.],[5,9,3,3,3.]],threshold:-0.0254217498004436,right_val:0.4678100049495697,left_val:0.6667134761810303},{features:[[12,3,3,3,-1.],[13,3,1,3,3.]],threshold:-1.5647639520466328e-003,right_val:0.5323626995086670,left_val:0.4391759037971497},{features:[[0,0,4,18,-1.],[2,0,2,18,2.]],threshold:0.0114443600177765,right_val:0.5680012106895447,left_val:0.4346440136432648},{features:[[17,6,1,3,-1.],[17,7,1,1,3.]],threshold:-6.7352550104260445e-004,right_val:0.5296812057495117,left_val:0.4477140903472900},{features:[[2,14,1,6,-1.],[2,17,1,3,2.]],threshold:9.3194209039211273e-003,right_val:0.7462607026100159,left_val:0.4740200042724609},{features:[[19,8,1,2,-1.],[19,9,1,1,2.]],threshold:1.3328490604180843e-004,right_val:0.4752134978771210,left_val:0.5365061759948731},{features:[[5,3,3,3,-1.],[6,3,1,3,3.]],threshold:-7.8815799206495285e-003,right_val:0.5015255212783814,left_val:0.1752219051122665},{features:[[9,16,2,3,-1.],[9,17,2,1,3.]],threshold:-5.7985680177807808e-003,right_val:0.4896200895309448,left_val:0.7271236777305603},{features:[[2,6,1,3,-1.],[2,7,1,1,3.]],threshold:-3.8922499516047537e-004,right_val:0.5344941020011902,left_val:0.4003908932209015},{features:[[12,4,8,2,-1.],[16,4,4,1,2.],[12,5,4,1,2.]],threshold:-1.9288610201328993e-003,right_val:0.4803955852985382,left_val:0.5605612993240356},{features:[[0,4,8,2,-1.],[0,4,4,1,2.],[4,5,4,1,2.]],threshold:8.4214154630899429e-003,right_val:0.7623608708381653,left_val:0.4753246903419495},{features:[[2,16,18,4,-1.],[2,18,18,2,2.]],threshold:8.1655876711010933e-003,right_val:0.4191643893718720,left_val:0.5393261909484863},{features:[[7,15,2,4,-1.],[7,17,2,2,2.]],threshold:4.8280550981871784e-004,right_val:0.5399821996688843,left_val:0.4240800142288208},{features:[[4,0,14,3,-1.],[4,1,14,1,3.]],threshold:-2.7186630759388208e-003,right_val:0.5424923896789551,left_val:0.4244599938392639},{features:[[0,0,4,20,-1.],[2,0,2,20,2.]],threshold:-0.0125072300434113,right_val:0.4550411105155945,left_val:0.5895841717720032},{features:[[12,4,4,8,-1.],[14,4,2,4,2.],[12,8,2,4,2.]],threshold:-0.0242865197360516,right_val:0.5189179778099060,left_val:0.2647134959697723},{features:[[6,7,2,2,-1.],[6,7,1,1,2.],[7,8,1,1,2.]],threshold:-2.9676330741494894e-003,right_val:0.4749749898910523,left_val:0.7347682714462280},{features:[[10,6,2,3,-1.],[10,7,2,1,3.]],threshold:-0.0125289997085929,right_val:0.5177599787712097,left_val:0.2756049931049347},{features:[[8,7,3,2,-1.],[8,8,3,1,2.]],threshold:-1.0104000102728605e-003,right_val:0.5144724249839783,left_val:0.3510560989379883},{features:[[8,2,6,12,-1.],[8,8,6,6,2.]],threshold:-2.1348530426621437e-003,right_val:0.4667319953441620,left_val:0.5637925863265991},{features:[[4,0,11,12,-1.],[4,4,11,4,3.]],threshold:0.0195642597973347,right_val:0.6137639880180359,left_val:0.4614573121070862},{features:[[14,9,6,11,-1.],[16,9,2,11,3.]],threshold:-0.0971463471651077,right_val:0.5193555951118469,left_val:0.2998378872871399},{features:[[0,14,4,3,-1.],[0,15,4,1,3.]],threshold:4.5014568604528904e-003,right_val:0.3045755922794342,left_val:0.5077884793281555},{features:[[9,10,2,3,-1.],[9,11,2,1,3.]],threshold:6.3706971704959869e-003,right_val:0.6887500882148743,left_val:0.4861018955707550},{features:[[5,11,3,2,-1.],[5,12,3,1,2.]],threshold:-9.0721528977155685e-003,right_val:0.5017563104629517,left_val:0.1673395931720734},{features:[[9,15,3,3,-1.],[10,15,1,3,3.]],threshold:-5.3537208586931229e-003,right_val:0.5242633223533630,left_val:0.2692756950855255},{features:[[8,8,3,4,-1.],[9,8,1,4,3.]],threshold:-0.0109328404068947,right_val:0.4736028909683228,left_val:0.7183864116668701},{features:[[9,15,3,3,-1.],[10,15,1,3,3.]],threshold:8.2356072962284088e-003,right_val:0.2389862984418869,left_val:0.5223966836929321},{features:[[7,7,3,2,-1.],[8,7,1,2,3.]],threshold:-1.0038160253316164e-003,right_val:0.4433943033218384,left_val:0.5719355940818787},{features:[[2,10,16,4,-1.],[10,10,8,2,2.],[2,12,8,2,2.]],threshold:4.0859128348529339e-003,right_val:0.4148836135864258,left_val:0.5472841858863831},{features:[[2,3,4,17,-1.],[4,3,2,17,2.]],threshold:0.1548541933298111,right_val:0.0610615983605385,left_val:0.4973812103271484},{features:[[15,13,2,7,-1.],[15,13,1,7,2.]],threshold:2.0897459762636572e-004,right_val:0.5423889160156250,left_val:0.4709174036979675},{features:[[2,2,6,1,-1.],[5,2,3,1,2.]],threshold:3.3316991175524890e-004,right_val:0.5300992131233215,left_val:0.4089626967906952},{features:[[5,2,12,4,-1.],[9,2,4,4,3.]],threshold:-0.0108134001493454,right_val:0.4957334101200104,left_val:0.6104369759559631},{features:[[6,0,8,12,-1.],[6,0,4,6,2.],[10,6,4,6,2.]],threshold:0.0456560105085373,right_val:0.2866660058498383,left_val:0.5069689154624939},{features:[[13,7,2,2,-1.],[14,7,1,1,2.],[13,8,1,1,2.]],threshold:1.2569549726322293e-003,right_val:0.6318171024322510,left_val:0.4846917092800140},{features:[[0,12,20,6,-1.],[0,14,20,2,3.]],threshold:-0.1201507002115250,right_val:0.4980959892272949,left_val:0.0605261400341988},{features:[[14,7,2,3,-1.],[14,7,1,3,2.]],threshold:-1.0533799650147557e-004,right_val:0.4708042144775391,left_val:0.5363109707832336},{features:[[0,8,9,12,-1.],[3,8,3,12,3.]],threshold:-0.2070319056510925,right_val:0.4979098141193390,left_val:0.0596603304147720},{features:[[3,0,16,2,-1.],[3,0,8,2,2.]],threshold:1.2909180077258497e-004,right_val:0.5377997756004334,left_val:0.4712977111339569},{features:[[6,15,3,3,-1.],[6,16,3,1,3.]],threshold:3.8818528992123902e-004,right_val:0.5534191131591797,left_val:0.4363538026809692},{features:[[8,15,6,3,-1.],[8,16,6,1,3.]],threshold:-2.9243610333651304e-003,right_val:0.4825215935707092,left_val:0.5811185836791992},{features:[[0,10,1,6,-1.],[0,12,1,2,3.]],threshold:8.3882332546636462e-004,right_val:0.4038138985633850,left_val:0.5311700105667114},{features:[[10,9,4,3,-1.],[10,10,4,1,3.]],threshold:-1.9061550265178084e-003,right_val:0.5260015130043030,left_val:0.3770701885223389},{features:[[9,15,2,3,-1.],[9,16,2,1,3.]],threshold:8.9514348655939102e-003,right_val:0.7682183980941773,left_val:0.4766167998313904},{features:[[5,7,10,1,-1.],[5,7,5,1,2.]],threshold:0.0130834598094225,right_val:0.3062222003936768,left_val:0.5264462828636169},{features:[[4,0,12,19,-1.],[10,0,6,19,2.]],threshold:-0.2115933001041412,right_val:0.4695810079574585,left_val:0.6737198233604431},{features:[[0,6,20,6,-1.],[10,6,10,3,2.],[0,9,10,3,2.]],threshold:3.1493250280618668e-003,right_val:0.4386953115463257,left_val:0.5644835233688355},{features:[[3,6,2,2,-1.],[3,6,1,1,2.],[4,7,1,1,2.]],threshold:3.9754100725986063e-004,right_val:0.5895630121231079,left_val:0.4526061117649078},{features:[[15,6,2,2,-1.],[16,6,1,1,2.],[15,7,1,1,2.]],threshold:-1.3814480043947697e-003,right_val:0.4942413866519928,left_val:0.6070582270622253},{features:[[3,6,2,2,-1.],[3,6,1,1,2.],[4,7,1,1,2.]],threshold:-5.8122188784182072e-004,right_val:0.4508252143859863,left_val:0.5998213291168213},{features:[[14,4,1,12,-1.],[14,10,1,6,2.]],threshold:-2.3905329871922731e-003,right_val:0.5223848223686218,left_val:0.4205588996410370},{features:[[2,5,16,10,-1.],[2,5,8,5,2.],[10,10,8,5,2.]],threshold:0.0272689294070005,right_val:0.3563301861286163,left_val:0.5206447243690491},{features:[[9,17,3,2,-1.],[10,17,1,2,3.]],threshold:-3.7658358924090862e-003,right_val:0.5218814015388489,left_val:0.3144704103469849},{features:[[1,4,2,2,-1.],[1,5,2,1,2.]],threshold:-1.4903489500284195e-003,right_val:0.5124437212944031,left_val:0.3380196094512940},{features:[[5,0,15,5,-1.],[10,0,5,5,3.]],threshold:-0.0174282304942608,right_val:0.4919725954532623,left_val:0.5829960703849793},{features:[[0,0,15,5,-1.],[5,0,5,5,3.]],threshold:-0.0152780301868916,right_val:0.4617887139320374,left_val:0.6163144707679749},{features:[[11,2,2,17,-1.],[11,2,1,17,2.]],threshold:0.0319956094026566,right_val:0.1712764054536820,left_val:0.5166357159614563},{features:[[7,2,2,17,-1.],[8,2,1,17,2.]],threshold:-3.8256710395216942e-003,right_val:0.5131387710571289,left_val:0.3408012092113495},{features:[[15,11,2,9,-1.],[15,11,1,9,2.]],threshold:-8.5186436772346497e-003,right_val:0.4997941851615906,left_val:0.6105518937110901},{features:[[3,11,2,9,-1.],[4,11,1,9,2.]],threshold:9.0641621500253677e-004,right_val:0.5582311153411865,left_val:0.4327270984649658},{features:[[5,16,14,4,-1.],[5,16,7,4,2.]],threshold:0.0103448498994112,right_val:0.5452420115470886,left_val:0.4855653047561646}],threshold:69.2298736572265630},{simpleClassifiers:[{features:[[1,4,18,1,-1.],[7,4,6,1,3.]],threshold:7.8981826081871986e-003,right_val:0.5946462154388428,left_val:0.3332524895668030},{features:[[13,7,6,4,-1.],[16,7,3,2,2.],[13,9,3,2,2.]],threshold:1.6170160379260778e-003,right_val:0.5577868819236755,left_val:0.3490641117095947},{features:[[9,8,2,12,-1.],[9,12,2,4,3.]],threshold:-5.5449741194024682e-004,right_val:0.3291530013084412,left_val:0.5542566180229187},{features:[[12,1,6,6,-1.],[12,3,6,2,3.]],threshold:1.5428980113938451e-003,right_val:0.5545979142189026,left_val:0.3612579107284546},{features:[[5,2,6,6,-1.],[5,2,3,3,2.],[8,5,3,3,2.]],threshold:-1.0329450014978647e-003,right_val:0.5576140284538269,left_val:0.3530139029026032},{features:[[9,16,6,4,-1.],[12,16,3,2,2.],[9,18,3,2,2.]],threshold:7.7698158565908670e-004,right_val:0.5645321011543274,left_val:0.3916778862476349},{features:[[1,2,18,3,-1.],[7,2,6,3,3.]],threshold:0.1432030051946640,right_val:0.7023633122444153,left_val:0.4667482078075409},{features:[[7,4,9,10,-1.],[7,9,9,5,2.]],threshold:-7.3866490274667740e-003,right_val:0.5289257764816284,left_val:0.3073684871196747},{features:[[5,9,4,4,-1.],[7,9,2,4,2.]],threshold:-6.2936742324382067e-004,right_val:0.4037049114704132,left_val:0.5622118115425110},{features:[[11,10,3,6,-1.],[11,13,3,3,2.]],threshold:7.8893528552725911e-004,right_val:0.3557874858379364,left_val:0.5267661213874817},{features:[[7,11,5,3,-1.],[7,12,5,1,3.]],threshold:-0.0122280502691865,right_val:0.4625549912452698,left_val:0.6668320894241333},{features:[[7,11,6,6,-1.],[10,11,3,3,2.],[7,14,3,3,2.]],threshold:3.5420239437371492e-003,right_val:0.3869673013687134,left_val:0.5521438121795654},{features:[[0,0,10,9,-1.],[0,3,10,3,3.]],threshold:-1.0585320414975286e-003,right_val:0.5320926904678345,left_val:0.3628678023815155},{features:[[13,14,1,6,-1.],[13,16,1,2,3.]],threshold:1.4935660146875307e-005,right_val:0.5363323092460632,left_val:0.4632444977760315},{features:[[0,2,3,6,-1.],[0,4,3,2,3.]],threshold:5.2537708543241024e-003,right_val:0.3265708982944489,left_val:0.5132231712341309},{features:[[8,14,4,3,-1.],[8,15,4,1,3.]],threshold:-8.2338023930788040e-003,right_val:0.4774140119552612,left_val:0.6693689823150635},{features:[[6,14,1,6,-1.],[6,16,1,2,3.]],threshold:2.1866810129722580e-005,right_val:0.5457931160926819,left_val:0.4053862094879150},{features:[[9,15,2,3,-1.],[9,16,2,1,3.]],threshold:-3.8150229956954718e-003,right_val:0.4793178141117096,left_val:0.6454995870590210},{features:[[6,4,3,3,-1.],[7,4,1,3,3.]],threshold:1.1105879675596952e-003,right_val:0.3529678881168366,left_val:0.5270407199859619},{features:[[9,0,11,3,-1.],[9,1,11,1,3.]],threshold:-5.7707689702510834e-003,right_val:0.5352957844734192,left_val:0.3803547024726868},{features:[[0,6,20,3,-1.],[0,7,20,1,3.]],threshold:-3.0158339068293571e-003,right_val:0.3887133002281189,left_val:0.5339403152465820},{features:[[10,1,1,2,-1.],[10,2,1,1,2.]],threshold:-8.5453689098358154e-004,right_val:0.5273603796958923,left_val:0.3564616143703461},{features:[[9,6,2,6,-1.],[10,6,1,6,2.]],threshold:0.0110505102202296,right_val:0.6849737763404846,left_val:0.4671907126903534},{features:[[5,8,12,1,-1.],[9,8,4,1,3.]],threshold:0.0426058396697044,right_val:0.0702200904488564,left_val:0.5151473283767700},{features:[[3,8,12,1,-1.],[7,8,4,1,3.]],threshold:-3.0781750101596117e-003,right_val:0.5152602195739746,left_val:0.3041661083698273},{features:[[9,7,3,5,-1.],[10,7,1,5,3.]],threshold:-5.4815728217363358e-003,right_val:0.4897229969501495,left_val:0.6430295705795288},{features:[[3,9,6,2,-1.],[6,9,3,2,2.]],threshold:3.1881860923022032e-003,right_val:0.3826209902763367,left_val:0.5307493209838867},{features:[[12,9,3,3,-1.],[12,10,3,1,3.]],threshold:3.5947180003859103e-004,right_val:0.5421904921531677,left_val:0.4650047123432159},{features:[[7,0,6,1,-1.],[9,0,2,1,3.]],threshold:-4.0705031715333462e-003,right_val:0.5079116225242615,left_val:0.2849679887294769},{features:[[12,9,3,3,-1.],[12,10,3,1,3.]],threshold:-0.0145941702648997,right_val:0.5128461718559265,left_val:0.2971645891666412},{features:[[7,10,2,1,-1.],[8,10,1,1,2.]],threshold:-1.1947689927183092e-004,right_val:0.4343082010746002,left_val:0.5631098151206970},{features:[[6,4,9,13,-1.],[9,4,3,13,3.]],threshold:-6.9344649091362953e-004,right_val:0.5359959006309509,left_val:0.4403578042984009},{features:[[6,8,4,2,-1.],[6,9,4,1,2.]],threshold:1.4834799912932795e-005,right_val:0.5164697766304016,left_val:0.3421008884906769},{features:[[16,2,4,6,-1.],[16,2,2,6,2.]],threshold:9.0296985581517220e-003,right_val:0.6114075183868408,left_val:0.4639343023300171},{features:[[0,17,6,3,-1.],[0,18,6,1,3.]],threshold:-8.0640818923711777e-003,right_val:0.5075494050979614,left_val:0.2820158898830414},{features:[[10,10,3,10,-1.],[10,15,3,5,2.]],threshold:0.0260621197521687,right_val:0.2688778042793274,left_val:0.5208905935287476},{features:[[8,7,3,5,-1.],[9,7,1,5,3.]],threshold:0.0173146594315767,right_val:0.6738539934158325,left_val:0.4663713872432709},{features:[[10,4,4,3,-1.],[10,4,2,3,2.]],threshold:0.0226666405797005,right_val:0.2212723940610886,left_val:0.5209349989891052},{features:[[8,4,3,8,-1.],[9,4,1,8,3.]],threshold:-2.1965929772704840e-003,right_val:0.4538190066814423,left_val:0.6063101291656494},{features:[[6,6,9,13,-1.],[9,6,3,13,3.]],threshold:-9.5282476395368576e-003,right_val:0.5247430801391602,left_val:0.4635204970836639},{features:[[6,0,8,12,-1.],[6,0,4,6,2.],[10,6,4,6,2.]],threshold:8.0943619832396507e-003,right_val:0.3913882076740265,left_val:0.5289440155029297},{features:[[14,2,6,8,-1.],[16,2,2,8,3.]],threshold:-0.0728773325681686,right_val:0.4990234971046448,left_val:0.7752001881599426},{features:[[6,0,3,6,-1.],[7,0,1,6,3.]],threshold:-6.9009521976113319e-003,right_val:0.5048090219497681,left_val:0.2428039014339447},{features:[[14,2,6,8,-1.],[16,2,2,8,3.]],threshold:-0.0113082397729158,right_val:0.4842376112937927,left_val:0.5734364986419678},{features:[[0,5,6,6,-1.],[0,8,6,3,2.]],threshold:0.0596132017672062,right_val:0.2524977028369904,left_val:0.5029836297035217},{features:[[9,12,6,2,-1.],[12,12,3,1,2.],[9,13,3,1,2.]],threshold:-2.8624620754271746e-003,right_val:0.4898459911346436,left_val:0.6073045134544373},{features:[[8,17,3,2,-1.],[9,17,1,2,3.]],threshold:4.4781449250876904e-003,right_val:0.2220316976308823,left_val:0.5015289187431335},{features:[[11,6,2,2,-1.],[12,6,1,1,2.],[11,7,1,1,2.]],threshold:-1.7513240454718471e-003,right_val:0.4933868944644928,left_val:0.6614428758621216},{features:[[1,9,18,2,-1.],[7,9,6,2,3.]],threshold:0.0401634201407433,right_val:0.3741044998168945,left_val:0.5180878043174744},{features:[[11,6,2,2,-1.],[12,6,1,1,2.],[11,7,1,1,2.]],threshold:3.4768949262797832e-004,right_val:0.5818032026290894,left_val:0.4720416963100433},{features:[[3,4,12,8,-1.],[7,4,4,8,3.]],threshold:2.6551650371402502e-003,right_val:0.5221335887908936,left_val:0.3805010914802551},{features:[[13,11,5,3,-1.],[13,12,5,1,3.]],threshold:-8.7706279009580612e-003,right_val:0.5231295228004456,left_val:0.2944166064262390},{features:[[9,10,2,3,-1.],[9,11,2,1,3.]],threshold:-5.5122091434895992e-003,right_val:0.4722816944122315,left_val:0.7346177101135254},{features:[[14,7,2,3,-1.],[14,7,1,3,2.]],threshold:6.8672042107209563e-004,right_val:0.4242413043975830,left_val:0.5452876091003418},{features:[[5,4,1,3,-1.],[5,5,1,1,3.]],threshold:5.6019669864326715e-004,right_val:0.5601285099983215,left_val:0.4398862123489380},{features:[[13,4,2,3,-1.],[13,5,2,1,3.]],threshold:2.4143769405782223e-003,right_val:0.6136621832847595,left_val:0.4741686880588532},{features:[[5,4,2,3,-1.],[5,5,2,1,3.]],threshold:-1.5680900542065501e-003,right_val:0.4516409933567047,left_val:0.6044552922248840},{features:[[9,8,2,3,-1.],[9,9,2,1,3.]],threshold:-3.6827491130679846e-003,right_val:0.5294982194900513,left_val:0.2452459037303925},{features:[[8,9,2,2,-1.],[8,10,2,1,2.]],threshold:-2.9409190756268799e-004,right_val:0.5251451134681702,left_val:0.3732838034629822},{features:[[15,14,1,4,-1.],[15,16,1,2,2.]],threshold:4.2847759323194623e-004,right_val:0.4065535068511963,left_val:0.5498809814453125},{features:[[3,12,2,2,-1.],[3,13,2,1,2.]],threshold:-4.8817070201039314e-003,right_val:0.4999957084655762,left_val:0.2139908969402313},{features:[[12,15,2,2,-1.],[13,15,1,1,2.],[12,16,1,1,2.]],threshold:2.7272020815871656e-004,right_val:0.5813428759574890,left_val:0.4650287032127380},{features:[[9,13,2,2,-1.],[9,14,2,1,2.]],threshold:2.0947199664078653e-004,right_val:0.5572792887687683,left_val:0.4387486875057221},{features:[[4,11,14,9,-1.],[4,14,14,3,3.]],threshold:0.0485011897981167,right_val:0.3212889134883881,left_val:0.5244972705841065},{features:[[7,13,4,3,-1.],[7,14,4,1,3.]],threshold:-4.5166411437094212e-003,right_val:0.4545882046222687,left_val:0.6056813001632690},{features:[[15,14,1,4,-1.],[15,16,1,2,2.]],threshold:-0.0122916800901294,right_val:0.5152214169502258,left_val:0.2040929049253464},{features:[[4,14,1,4,-1.],[4,16,1,2,2.]],threshold:4.8549679922871292e-004,right_val:0.3739503026008606,left_val:0.5237604975700378},{features:[[14,0,6,13,-1.],[16,0,2,13,3.]],threshold:0.0305560491979122,right_val:0.5938246250152588,left_val:0.4960533976554871},{features:[[4,1,2,12,-1.],[4,1,1,6,2.],[5,7,1,6,2.]],threshold:-1.5105320198927075e-004,right_val:0.4145204126834869,left_val:0.5351303815841675},{features:[[11,14,6,6,-1.],[14,14,3,3,2.],[11,17,3,3,2.]],threshold:2.4937440175563097e-003,right_val:0.5514941215515137,left_val:0.4693366885185242},{features:[[3,14,6,6,-1.],[3,14,3,3,2.],[6,17,3,3,2.]],threshold:-0.0123821301385760,right_val:0.4681667983531952,left_val:0.6791396737098694},{features:[[14,17,3,2,-1.],[14,18,3,1,2.]],threshold:-5.1333461888134480e-003,right_val:0.5229160189628601,left_val:0.3608739078044891},{features:[[3,17,3,2,-1.],[3,18,3,1,2.]],threshold:5.1919277757406235e-004,right_val:0.3633613884449005,left_val:0.5300073027610779},{features:[[14,0,6,13,-1.],[16,0,2,13,3.]],threshold:0.1506042033433914,right_val:0.2211782038211823,left_val:0.5157316923141480},{features:[[0,0,6,13,-1.],[2,0,2,13,3.]],threshold:7.7144149690866470e-003,right_val:0.5776609182357788,left_val:0.4410496950149536},{features:[[10,10,7,6,-1.],[10,12,7,2,3.]],threshold:9.4443522393703461e-003,right_val:0.3756650090217590,left_val:0.5401855111122131},{features:[[6,15,2,2,-1.],[6,15,1,1,2.],[7,16,1,1,2.]],threshold:2.5006249779835343e-004,right_val:0.5607374906539917,left_val:0.4368270933628082},{features:[[6,11,8,6,-1.],[10,11,4,3,2.],[6,14,4,3,2.]],threshold:-3.3077150583267212e-003,right_val:0.5518230795860291,left_val:0.4244799017906189},{features:[[7,6,2,2,-1.],[7,6,1,1,2.],[8,7,1,1,2.]],threshold:7.4048910755664110e-004,right_val:0.5900576710700989,left_val:0.4496962130069733},{features:[[2,2,16,6,-1.],[10,2,8,3,2.],[2,5,8,3,2.]],threshold:0.0440920516848564,right_val:0.3156355023384094,left_val:0.5293493270874023},{features:[[5,4,3,3,-1.],[5,5,3,1,3.]],threshold:3.3639909233897924e-003,right_val:0.5848662257194519,left_val:0.4483296871185303},{features:[[11,7,3,10,-1.],[11,12,3,5,2.]],threshold:-3.9760079234838486e-003,right_val:0.5483639240264893,left_val:0.4559507071971893},{features:[[6,7,3,10,-1.],[6,12,3,5,2.]],threshold:2.7716930489987135e-003,right_val:0.3792484104633331,left_val:0.5341786146163940},{features:[[10,7,3,2,-1.],[11,7,1,2,3.]],threshold:-2.4123019829858094e-004,right_val:0.4576973021030426,left_val:0.5667188763618469},{features:[[8,12,4,2,-1.],[8,13,4,1,2.]],threshold:4.9425667384639382e-004,right_val:0.5628787279129028,left_val:0.4421244859695435},{features:[[10,1,1,3,-1.],[10,2,1,1,3.]],threshold:-3.8876468897797167e-004,right_val:0.5391063094139099,left_val:0.4288370907306671},{features:[[1,2,4,18,-1.],[1,2,2,9,2.],[3,11,2,9,2.]],threshold:-0.0500488989055157,right_val:0.4703742861747742,left_val:0.6899513006210327},{features:[[12,4,4,12,-1.],[12,10,4,6,2.]],threshold:-0.0366354808211327,right_val:0.5191826224327087,left_val:0.2217779010534287},{features:[[0,0,1,6,-1.],[0,2,1,2,3.]],threshold:2.4273579474538565e-003,right_val:0.3497397899627686,left_val:0.5136224031448364},{features:[[9,11,2,3,-1.],[9,12,2,1,3.]],threshold:1.9558030180633068e-003,right_val:0.6408380866050720,left_val:0.4826192855834961},{features:[[8,7,4,3,-1.],[8,8,4,1,3.]],threshold:-1.7494610510766506e-003,right_val:0.5272685289382935,left_val:0.3922835886478424},{features:[[10,7,3,2,-1.],[11,7,1,2,3.]],threshold:0.0139550799503922,right_val:0.8416504859924316,left_val:0.5078201889991760},{features:[[7,7,3,2,-1.],[8,7,1,2,3.]],threshold:-2.1896739781368524e-004,right_val:0.4314234852790833,left_val:0.5520489811897278},{features:[[9,4,6,1,-1.],[11,4,2,1,3.]],threshold:-1.5131309628486633e-003,right_val:0.5382571220397949,left_val:0.3934605121612549},{features:[[8,7,2,3,-1.],[9,7,1,3,2.]],threshold:-4.3622800149023533e-003,right_val:0.4736475944519043,left_val:0.7370628714561462},{features:[[12,7,8,6,-1.],[16,7,4,3,2.],[12,10,4,3,2.]],threshold:0.0651605874300003,right_val:0.3281595110893250,left_val:0.5159279704093933},{features:[[0,7,8,6,-1.],[0,7,4,3,2.],[4,10,4,3,2.]],threshold:-2.3567399475723505e-003,right_val:0.5172886252403259,left_val:0.3672826886177063},{features:[[18,2,2,10,-1.],[19,2,1,5,2.],[18,7,1,5,2.]],threshold:0.0151466596871614,right_val:0.6687604188919067,left_val:0.5031493902206421},{features:[[0,2,6,4,-1.],[3,2,3,4,2.]],threshold:-0.0228509604930878,right_val:0.4709596931934357,left_val:0.6767519712448120},{features:[[9,4,6,1,-1.],[11,4,2,1,3.]],threshold:4.8867650330066681e-003,right_val:0.4059878885746002,left_val:0.5257998108863831},{features:[[7,15,2,2,-1.],[7,15,1,1,2.],[8,16,1,1,2.]],threshold:1.7619599821045995e-003,right_val:0.6688278913497925,left_val:0.4696272909641266},{features:[[11,13,1,6,-1.],[11,16,1,3,2.]],threshold:-1.2942519970238209e-003,right_val:0.5344281792640686,left_val:0.4320712983608246},{features:[[8,13,1,6,-1.],[8,16,1,3,2.]],threshold:0.0109299495816231,right_val:0.1637486070394516,left_val:0.4997706115245819},{features:[[14,3,2,1,-1.],[14,3,1,1,2.]],threshold:2.9958489903947338e-005,right_val:0.5633224248886108,left_val:0.4282417893409729},{features:[[8,15,2,3,-1.],[8,16,2,1,3.]],threshold:-6.5884361974895000e-003,right_val:0.4700526893138886,left_val:0.6772121191024780},{features:[[12,15,7,4,-1.],[12,17,7,2,2.]],threshold:3.2527779694646597e-003,right_val:0.4536148905754089,left_val:0.5313397049903870},{features:[[4,14,12,3,-1.],[4,15,12,1,3.]],threshold:-4.0435739792883396e-003,right_val:0.4413388967514038,left_val:0.5660061836242676},{features:[[10,3,3,2,-1.],[11,3,1,2,3.]],threshold:-1.2523540062829852e-003,right_val:0.5356451869010925,left_val:0.3731913864612579},{features:[[4,12,2,2,-1.],[4,13,2,1,2.]],threshold:1.9246719602961093e-004,right_val:0.3738811016082764,left_val:0.5189986228942871},{features:[[10,11,4,6,-1.],[10,14,4,3,2.]],threshold:-0.0385896712541580,right_val:0.5188810825347900,left_val:0.2956373989582062},{features:[[7,13,2,2,-1.],[7,13,1,1,2.],[8,14,1,1,2.]],threshold:1.5489870565943420e-004,right_val:0.5509533286094666,left_val:0.4347135126590729},{features:[[4,11,14,4,-1.],[11,11,7,2,2.],[4,13,7,2,2.]],threshold:-0.0337638482451439,right_val:0.5195475816726685,left_val:0.3230330049991608},{features:[[1,18,18,2,-1.],[7,18,6,2,3.]],threshold:-8.2657067105174065e-003,right_val:0.4552114009857178,left_val:0.5975489020347595},{features:[[11,18,2,2,-1.],[12,18,1,1,2.],[11,19,1,1,2.]],threshold:1.4481440302915871e-005,right_val:0.5497426986694336,left_val:0.4745678007602692},{features:[[7,18,2,2,-1.],[7,18,1,1,2.],[8,19,1,1,2.]],threshold:1.4951299817766994e-005,right_val:0.5480644106864929,left_val:0.4324473142623901},{features:[[12,18,8,2,-1.],[12,19,8,1,2.]],threshold:-0.0187417995184660,right_val:0.5178533196449280,left_val:0.1580052971839905},{features:[[7,14,6,2,-1.],[7,15,6,1,2.]],threshold:1.7572239739820361e-003,right_val:0.5773764252662659,left_val:0.4517636895179749},{features:[[8,12,4,8,-1.],[10,12,2,4,2.],[8,16,2,4,2.]],threshold:-3.1391119118779898e-003,right_val:0.5460842251777649,left_val:0.4149647951126099},{features:[[4,9,3,3,-1.],[4,10,3,1,3.]],threshold:6.6656779381446540e-005,right_val:0.5293084979057312,left_val:0.4039090871810913},{features:[[7,10,6,2,-1.],[9,10,2,2,3.]],threshold:6.7743421532213688e-003,right_val:0.6121956110000610,left_val:0.4767651855945587},{features:[[5,0,4,15,-1.],[7,0,2,15,2.]],threshold:-7.3868161998689175e-003,right_val:0.5187280774116516,left_val:0.3586258888244629},{features:[[8,6,12,14,-1.],[12,6,4,14,3.]],threshold:0.0140409301966429,right_val:0.5576155781745911,left_val:0.4712139964103699},{features:[[5,16,3,3,-1.],[5,17,3,1,3.]],threshold:-5.5258329957723618e-003,right_val:0.5039281249046326,left_val:0.2661027014255524},{features:[[8,1,12,19,-1.],[12,1,4,19,3.]],threshold:0.3868423998355866,right_val:0.2525899112224579,left_val:0.5144339799880981},{features:[[3,0,3,2,-1.],[3,1,3,1,2.]],threshold:1.1459240340627730e-004,right_val:0.5423371195793152,left_val:0.4284994900226593},{features:[[10,12,4,5,-1.],[10,12,2,5,2.]],threshold:-0.0184675697237253,right_val:0.5213062167167664,left_val:0.3885835111141205},{features:[[6,12,4,5,-1.],[8,12,2,5,2.]],threshold:-4.5907011372037232e-004,right_val:0.4235909879207611,left_val:0.5412563085556030},{features:[[11,11,2,2,-1.],[12,11,1,1,2.],[11,12,1,1,2.]],threshold:1.2527540093287826e-003,right_val:0.6624091267585754,left_val:0.4899305105209351},{features:[[0,2,3,6,-1.],[0,4,3,2,3.]],threshold:1.4910609461367130e-003,right_val:0.4040051996707916,left_val:0.5286778211593628},{features:[[11,11,2,2,-1.],[12,11,1,1,2.],[11,12,1,1,2.]],threshold:-7.5435562757775187e-004,right_val:0.4795120060443878,left_val:0.6032990217208862},{features:[[7,6,4,10,-1.],[7,11,4,5,2.]],threshold:-6.9478838704526424e-003,right_val:0.5373504161834717,left_val:0.4084401130676270},{features:[[11,11,2,2,-1.],[12,11,1,1,2.],[11,12,1,1,2.]],threshold:2.8092920547351241e-004,right_val:0.5759382247924805,left_val:0.4846062958240509},{features:[[2,13,5,2,-1.],[2,14,5,1,2.]],threshold:9.6073717577382922e-004,right_val:0.3554979860782623,left_val:0.5164741277694702},{features:[[11,11,2,2,-1.],[12,11,1,1,2.],[11,12,1,1,2.]],threshold:-2.6883929967880249e-004,right_val:0.4731765985488892,left_val:0.5677582025527954},{features:[[7,11,2,2,-1.],[7,11,1,1,2.],[8,12,1,1,2.]],threshold:2.1599370520561934e-003,right_val:0.7070567011833191,left_val:0.4731487035751343},{features:[[14,13,3,3,-1.],[14,14,3,1,3.]],threshold:5.6235301308333874e-003,right_val:0.2781791985034943,left_val:0.5240243077278137},{features:[[3,13,3,3,-1.],[3,14,3,1,3.]],threshold:-5.0243991427123547e-003,right_val:0.5062304139137268,left_val:0.2837013900279999},{features:[[9,14,2,3,-1.],[9,15,2,1,3.]],threshold:-9.7611639648675919e-003,right_val:0.4934569001197815,left_val:0.7400717735290527},{features:[[8,7,3,3,-1.],[8,8,3,1,3.]],threshold:4.1515100747346878e-003,right_val:0.3407008051872253,left_val:0.5119131207466126},{features:[[13,5,3,3,-1.],[13,6,3,1,3.]],threshold:6.2465080991387367e-003,right_val:0.6579058766365051,left_val:0.4923788011074066},{features:[[0,9,5,3,-1.],[0,10,5,1,3.]],threshold:-7.0597478188574314e-003,right_val:0.5032842159271240,left_val:0.2434711009263992},{features:[[13,5,3,3,-1.],[13,6,3,1,3.]],threshold:-2.0587709732353687e-003,right_val:0.4695087075233460,left_val:0.5900310873985291},{features:[[9,12,2,8,-1.],[9,12,1,4,2.],[10,16,1,4,2.]],threshold:-2.4146060459315777e-003,right_val:0.5189201831817627,left_val:0.3647317886352539},{features:[[11,7,2,2,-1.],[12,7,1,1,2.],[11,8,1,1,2.]],threshold:-1.4817609917372465e-003,right_val:0.4940128028392792,left_val:0.6034948229789734},{features:[[0,16,6,4,-1.],[3,16,3,4,2.]],threshold:-6.3016400672495365e-003,right_val:0.4560427963733673,left_val:0.5818989872932434},{features:[[10,6,2,3,-1.],[10,7,2,1,3.]],threshold:3.4763428848236799e-003,right_val:0.3483993113040924,left_val:0.5217475891113281},{features:[[9,5,2,6,-1.],[9,7,2,2,3.]],threshold:-0.0222508702427149,right_val:0.5032082796096802,left_val:0.2360700070858002},{features:[[12,15,8,4,-1.],[12,15,4,4,2.]],threshold:-0.0306125506758690,right_val:0.4914919137954712,left_val:0.6499186754226685},{features:[[0,14,8,6,-1.],[4,14,4,6,2.]],threshold:0.0130574796348810,right_val:0.5683764219284058,left_val:0.4413323104381561},{features:[[9,0,3,2,-1.],[10,0,1,2,3.]],threshold:-6.0095742810517550e-004,right_val:0.5333483219146729,left_val:0.4359731078147888},{features:[[4,15,4,2,-1.],[6,15,2,2,2.]],threshold:-4.1514250915497541e-004,right_val:0.4326060116291046,left_val:0.5504062771797180},{features:[[12,7,3,13,-1.],[13,7,1,13,3.]],threshold:-0.0137762902304530,right_val:0.5201548933982849,left_val:0.4064112901687622},{features:[[5,7,3,13,-1.],[6,7,1,13,3.]],threshold:-0.0322965085506439,right_val:0.4977194964885712,left_val:0.0473519712686539},{features:[[9,6,3,9,-1.],[9,9,3,3,3.]],threshold:0.0535569787025452,right_val:0.6666939258575440,left_val:0.4881733059883118},{features:[[4,4,7,12,-1.],[4,10,7,6,2.]],threshold:8.1889545544981956e-003,right_val:0.4240820109844208,left_val:0.5400037169456482},{features:[[12,12,2,2,-1.],[13,12,1,1,2.],[12,13,1,1,2.]],threshold:2.1055320394225419e-004,right_val:0.5563852787017822,left_val:0.4802047908306122},{features:[[6,12,2,2,-1.],[6,12,1,1,2.],[7,13,1,1,2.]],threshold:-2.4382730480283499e-003,right_val:0.4773685038089752,left_val:0.7387793064117432},{features:[[8,9,4,2,-1.],[10,9,2,1,2.],[8,10,2,1,2.]],threshold:3.2835570164024830e-003,right_val:0.3171291947364807,left_val:0.5288546085357666},{features:[[3,6,2,2,-1.],[3,6,1,1,2.],[4,7,1,1,2.]],threshold:2.3729570675641298e-003,right_val:0.7060170769691467,left_val:0.4750812947750092},{features:[[16,6,3,2,-1.],[16,7,3,1,2.]],threshold:-1.4541699783876538e-003,right_val:0.5330739021301270,left_val:0.3811730146408081}],threshold:79.2490768432617190},{simpleClassifiers:[{features:[[0,7,19,4,-1.],[0,9,19,2,2.]],threshold:0.0557552389800549,right_val:0.6806036829948425,left_val:0.4019156992435455},{features:[[10,2,10,1,-1.],[10,2,5,1,2.]],threshold:2.4730248842388391e-003,right_val:0.5965719819068909,left_val:0.3351148962974548},{features:[[9,4,2,12,-1.],[9,10,2,6,2.]],threshold:-3.5031698644161224e-004,right_val:0.3482286930084229,left_val:0.5557708144187927},{features:[[12,18,4,1,-1.],[12,18,2,1,2.]],threshold:5.4167630150914192e-004,right_val:0.5693380832672119,left_val:0.4260858893394470},{features:[[1,7,6,4,-1.],[1,7,3,2,2.],[4,9,3,2,2.]],threshold:7.7193678589537740e-004,right_val:0.5433688759803772,left_val:0.3494240045547485},{features:[[12,0,6,13,-1.],[14,0,2,13,3.]],threshold:-1.5999219613149762e-003,right_val:0.5484359264373779,left_val:0.4028499126434326},{features:[[2,0,6,13,-1.],[4,0,2,13,3.]],threshold:-1.1832080053864047e-004,right_val:0.5425465106964111,left_val:0.3806901872158051},{features:[[10,5,8,8,-1.],[10,9,8,4,2.]],threshold:3.2909031142480671e-004,right_val:0.5429521799087524,left_val:0.2620100080966950},{features:[[8,3,2,5,-1.],[9,3,1,5,2.]],threshold:2.9518108931370080e-004,right_val:0.5399264097213745,left_val:0.3799768984317780},{features:[[8,4,9,1,-1.],[11,4,3,1,3.]],threshold:9.0466710389591753e-005,right_val:0.5440226197242737,left_val:0.4433645009994507},{features:[[3,4,9,1,-1.],[6,4,3,1,3.]],threshold:1.5007190086180344e-005,right_val:0.5409119725227356,left_val:0.3719654977321625},{features:[[1,0,18,10,-1.],[7,0,6,10,3.]],threshold:0.1393561065196991,right_val:0.4479042887687683,left_val:0.5525395870208740},{features:[[7,17,5,3,-1.],[7,18,5,1,3.]],threshold:1.6461990308016539e-003,right_val:0.5772169828414917,left_val:0.4264501035213471},{features:[[7,11,6,1,-1.],[9,11,2,1,3.]],threshold:4.9984431825578213e-004,right_val:0.5685871243476868,left_val:0.4359526038169861},{features:[[2,2,3,2,-1.],[2,3,3,1,2.]],threshold:-1.0971280280500650e-003,right_val:0.5205408930778503,left_val:0.3390136957168579},{features:[[8,12,4,2,-1.],[8,13,4,1,2.]],threshold:6.6919892560690641e-004,right_val:0.5980659723281860,left_val:0.4557456076145172},{features:[[6,10,3,6,-1.],[6,13,3,3,2.]],threshold:8.6471042595803738e-004,right_val:0.2944033145904541,left_val:0.5134841203689575},{features:[[11,4,2,4,-1.],[11,4,1,4,2.]],threshold:-2.7182599296793342e-004,right_val:0.5377181172370911,left_val:0.3906578123569489},{features:[[7,4,2,4,-1.],[8,4,1,4,2.]],threshold:3.0249499104684219e-005,right_val:0.5225688815116882,left_val:0.3679609894752502},{features:[[9,6,2,4,-1.],[9,6,1,4,2.]],threshold:-8.5225896909832954e-003,right_val:0.4892365038394928,left_val:0.7293102145195007},{features:[[6,13,8,3,-1.],[6,14,8,1,3.]],threshold:1.6705560265108943e-003,right_val:0.5696138143539429,left_val:0.4345324933528900},{features:[[9,15,3,4,-1.],[10,15,1,4,3.]],threshold:-7.1433838456869125e-003,right_val:0.5225623846054077,left_val:0.2591280043125153},{features:[[9,2,2,17,-1.],[10,2,1,17,2.]],threshold:-0.0163193698972464,right_val:0.4651575982570648,left_val:0.6922279000282288},{features:[[7,0,6,1,-1.],[9,0,2,1,3.]],threshold:4.8034260980784893e-003,right_val:0.3286302983760834,left_val:0.5352262854576111},{features:[[8,15,3,4,-1.],[9,15,1,4,3.]],threshold:-7.5421929359436035e-003,right_val:0.5034546256065369,left_val:0.2040544003248215},{features:[[7,13,7,3,-1.],[7,14,7,1,3.]],threshold:-0.0143631100654602,right_val:0.4889059066772461,left_val:0.6804888844490051},{features:[[8,16,3,3,-1.],[9,16,1,3,3.]],threshold:8.9063588529825211e-004,right_val:0.3895480930805206,left_val:0.5310695767402649},{features:[[6,2,8,10,-1.],[6,7,8,5,2.]],threshold:-4.4060191139578819e-003,right_val:0.4372426867485046,left_val:0.5741562843322754},{features:[[2,5,8,8,-1.],[2,9,8,4,2.]],threshold:-1.8862540309783071e-004,right_val:0.5098205208778381,left_val:0.2831785976886749},{features:[[14,16,2,2,-1.],[14,17,2,1,2.]],threshold:-3.7979281041771173e-003,right_val:0.5246580243110657,left_val:0.3372507989406586},{features:[[4,16,2,2,-1.],[4,17,2,1,2.]],threshold:1.4627049677073956e-004,right_val:0.3911710083484650,left_val:0.5306674242019653},{features:[[10,11,4,6,-1.],[10,14,4,3,2.]],threshold:-4.9164638767251745e-005,right_val:0.3942720890045166,left_val:0.5462496280670166},{features:[[6,11,4,6,-1.],[6,14,4,3,2.]],threshold:-0.0335825011134148,right_val:0.5048211812973023,left_val:0.2157824039459229},{features:[[10,14,1,3,-1.],[10,15,1,1,3.]],threshold:-3.5339309833943844e-003,right_val:0.4872696995735169,left_val:0.6465312242507935},{features:[[8,14,4,3,-1.],[8,15,4,1,3.]],threshold:5.0144111737608910e-003,right_val:0.6248074769973755,left_val:0.4617668092250824},{features:[[10,0,4,6,-1.],[12,0,2,3,2.],[10,3,2,3,2.]],threshold:0.0188173707574606,right_val:0.2000052034854889,left_val:0.5220689177513123},{features:[[0,3,20,2,-1.],[0,4,20,1,2.]],threshold:-1.3434339780360460e-003,right_val:0.5301619768142700,left_val:0.4014537930488586},{features:[[12,0,8,2,-1.],[16,0,4,1,2.],[12,1,4,1,2.]],threshold:1.7557960236445069e-003,right_val:0.5653169751167297,left_val:0.4794039130210877},{features:[[2,12,10,8,-1.],[2,16,10,4,2.]],threshold:-0.0956374630331993,right_val:0.5006706714630127,left_val:0.2034195065498352},{features:[[17,7,2,10,-1.],[18,7,1,5,2.],[17,12,1,5,2.]],threshold:-0.0222412291914225,right_val:0.5046340227127075,left_val:0.7672473192214966},{features:[[1,7,2,10,-1.],[1,7,1,5,2.],[2,12,1,5,2.]],threshold:-0.0155758196488023,right_val:0.4755851030349731,left_val:0.7490342259407044},{features:[[15,10,3,6,-1.],[15,12,3,2,3.]],threshold:5.3599118255078793e-003,right_val:0.4004670977592468,left_val:0.5365303754806519},{features:[[4,4,6,2,-1.],[6,4,2,2,3.]],threshold:-0.0217634998261929,right_val:0.4964174926280975,left_val:0.0740154981613159},{features:[[0,5,20,6,-1.],[0,7,20,2,3.]],threshold:-0.1656159013509750,right_val:0.5218086242675781,left_val:0.2859103083610535},{features:[[0,0,8,2,-1.],[0,0,4,1,2.],[4,1,4,1,2.]],threshold:1.6461320046801120e-004,right_val:0.5380793213844299,left_val:0.4191615879535675},{features:[[1,0,18,4,-1.],[7,0,6,4,3.]],threshold:-8.9077502489089966e-003,right_val:0.4877404868602753,left_val:0.6273192763328552},{features:[[1,13,6,2,-1.],[1,14,6,1,2.]],threshold:8.6346449097618461e-004,right_val:0.3671025931835175,left_val:0.5159940719604492},{features:[[10,8,3,4,-1.],[11,8,1,4,3.]],threshold:-1.3751760125160217e-003,right_val:0.4579083919525147,left_val:0.5884376764297485},{features:[[6,1,6,1,-1.],[8,1,2,1,3.]],threshold:-1.4081239933148026e-003,right_val:0.5139945149421692,left_val:0.3560509979724884},{features:[[8,14,4,3,-1.],[8,15,4,1,3.]],threshold:-3.9342888630926609e-003,right_val:0.4664272069931030,left_val:0.5994288921356201},{features:[[1,6,18,2,-1.],[10,6,9,2,2.]],threshold:-0.0319669283926487,right_val:0.5144183039665222,left_val:0.3345462083816528},{features:[[15,11,1,2,-1.],[15,12,1,1,2.]],threshold:-1.5089280168467667e-005,right_val:0.4414057135581970,left_val:0.5582656264305115},{features:[[6,5,1,2,-1.],[6,6,1,1,2.]],threshold:5.1994470413774252e-004,right_val:0.6168993711471558,left_val:0.4623680114746094},{features:[[13,4,1,3,-1.],[13,5,1,1,3.]],threshold:-3.4220460802316666e-003,right_val:0.4974805116653442,left_val:0.6557074785232544},{features:[[2,15,1,2,-1.],[2,16,1,1,2.]],threshold:1.7723299970384687e-004,right_val:0.3901908099651337,left_val:0.5269501805305481},{features:[[12,4,4,3,-1.],[12,5,4,1,3.]],threshold:1.5716759953647852e-003,right_val:0.5790457725524902,left_val:0.4633373022079468},{features:[[0,0,7,3,-1.],[0,1,7,1,3.]],threshold:-8.9041329920291901e-003,right_val:0.5053591132164002,left_val:0.2689608037471771},{features:[[9,12,6,2,-1.],[9,12,3,2,2.]],threshold:4.0677518700249493e-004,right_val:0.4329898953437805,left_val:0.5456603169441223},{features:[[5,4,2,3,-1.],[5,5,2,1,3.]],threshold:6.7604780197143555e-003,right_val:0.6689761877059937,left_val:0.4648993909358978},{features:[[18,4,2,3,-1.],[18,5,2,1,3.]],threshold:2.9100088868290186e-003,right_val:0.3377839922904968,left_val:0.5309703946113586},{features:[[3,0,8,6,-1.],[3,2,8,2,3.]],threshold:1.3885459629818797e-003,right_val:0.5349133014678955,left_val:0.4074738919734955},{features:[[0,2,20,6,-1.],[10,2,10,3,2.],[0,5,10,3,2.]],threshold:-0.0767642632126808,right_val:0.5228242278099060,left_val:0.1992176026105881},{features:[[4,7,2,4,-1.],[5,7,1,4,2.]],threshold:-2.2688310127705336e-004,right_val:0.4253072142601013,left_val:0.5438501834869385},{features:[[3,10,15,2,-1.],[8,10,5,2,3.]],threshold:-6.3094152137637138e-003,right_val:0.5378909707069397,left_val:0.4259178936481476},{features:[[3,0,12,11,-1.],[9,0,6,11,2.]],threshold:-0.1100727990269661,right_val:0.4721749126911163,left_val:0.6904156804084778},{features:[[13,0,2,6,-1.],[13,0,1,6,2.]],threshold:2.8619659133255482e-004,right_val:0.5548306107521057,left_val:0.4524914920330048},{features:[[0,19,2,1,-1.],[1,19,1,1,2.]],threshold:2.9425329557852820e-005,right_val:0.4236463904380798,left_val:0.5370373725891113},{features:[[16,10,4,10,-1.],[18,10,2,5,2.],[16,15,2,5,2.]],threshold:-0.0248865708708763,right_val:0.4969303905963898,left_val:0.6423557996749878},{features:[[4,8,10,3,-1.],[4,9,10,1,3.]],threshold:0.0331488512456417,right_val:0.1613811999559403,left_val:0.4988475143909454},{features:[[14,12,3,3,-1.],[14,13,3,1,3.]],threshold:7.8491691965609789e-004,right_val:0.4223009049892426,left_val:0.5416026115417481},{features:[[0,10,4,10,-1.],[0,10,2,5,2.],[2,15,2,5,2.]],threshold:4.7087189741432667e-003,right_val:0.6027557849884033,left_val:0.4576328992843628},{features:[[18,3,2,6,-1.],[18,5,2,2,3.]],threshold:2.4144479539245367e-003,right_val:0.4422498941421509,left_val:0.5308973193168640},{features:[[6,6,1,3,-1.],[6,7,1,1,3.]],threshold:1.9523180089890957e-003,right_val:0.6663324832916260,left_val:0.4705634117126465},{features:[[7,7,7,2,-1.],[7,8,7,1,2.]],threshold:1.3031980488449335e-003,right_val:0.5526962280273438,left_val:0.4406126141548157},{features:[[0,3,2,6,-1.],[0,5,2,2,3.]],threshold:4.4735497795045376e-003,right_val:0.3301498889923096,left_val:0.5129023790359497},{features:[[11,1,3,1,-1.],[12,1,1,1,3.]],threshold:-2.6652868837118149e-003,right_val:0.5175036191940308,left_val:0.3135471045970917},{features:[[5,0,2,6,-1.],[6,0,1,6,2.]],threshold:1.3666770246345550e-004,right_val:0.5306876897811890,left_val:0.4119370877742767},{features:[[1,1,18,14,-1.],[7,1,6,14,3.]],threshold:-0.0171264503151178,right_val:0.4836578965187073,left_val:0.6177806258201599},{features:[[4,6,8,3,-1.],[8,6,4,3,2.]],threshold:-2.6601430727168918e-004,right_val:0.5169736742973328,left_val:0.3654330968856812},{features:[[9,12,6,2,-1.],[9,12,3,2,2.]],threshold:-0.0229323804378510,right_val:0.5163992047309876,left_val:0.3490915000438690},{features:[[5,12,6,2,-1.],[8,12,3,2,2.]],threshold:2.3316550068557262e-003,right_val:0.3709389865398407,left_val:0.5166299939155579},{features:[[10,7,3,5,-1.],[11,7,1,5,3.]],threshold:0.0169256608933210,right_val:0.8053988218307495,left_val:0.5014736056327820},{features:[[7,7,3,5,-1.],[8,7,1,5,3.]],threshold:-8.9858826249837875e-003,right_val:0.4657020866870880,left_val:0.6470788717269898},{features:[[13,0,3,10,-1.],[14,0,1,10,3.]],threshold:-0.0118746999651194,right_val:0.5258755087852478,left_val:0.3246378898620606},{features:[[4,11,3,2,-1.],[4,12,3,1,2.]],threshold:1.9350569345988333e-004,right_val:0.3839643895626068,left_val:0.5191941857337952},{features:[[17,3,3,6,-1.],[18,3,1,6,3.]],threshold:5.8713490143418312e-003,right_val:0.6187043190002441,left_val:0.4918133914470673},{features:[[1,8,18,10,-1.],[1,13,18,5,2.]],threshold:-0.2483879029750824,right_val:0.4988150000572205,left_val:0.1836802959442139},{features:[[13,0,3,10,-1.],[14,0,1,10,3.]],threshold:0.0122560001909733,right_val:0.3632029891014099,left_val:0.5227053761482239},{features:[[9,14,2,3,-1.],[9,15,2,1,3.]],threshold:8.3990179700776935e-004,right_val:0.5774148106575012,left_val:0.4490250051021576},{features:[[16,3,3,7,-1.],[17,3,1,7,3.]],threshold:2.5407369248569012e-003,right_val:0.5858299136161804,left_val:0.4804787039756775},{features:[[4,0,3,10,-1.],[5,0,1,10,3.]],threshold:-0.0148224299773574,right_val:0.5023537278175354,left_val:0.2521049976348877},{features:[[16,3,3,7,-1.],[17,3,1,7,3.]],threshold:-5.7973959483206272e-003,right_val:0.4853715002536774,left_val:0.5996695756912231},{features:[[0,9,1,2,-1.],[0,10,1,1,2.]],threshold:7.2662148158997297e-004,right_val:0.3671779930591583,left_val:0.5153716802597046},{features:[[18,1,2,10,-1.],[18,1,1,10,2.]],threshold:-0.0172325801104307,right_val:0.4994656145572662,left_val:0.6621719002723694},{features:[[0,1,2,10,-1.],[1,1,1,10,2.]],threshold:7.8624086454510689e-003,right_val:0.6256101727485657,left_val:0.4633395075798035},{features:[[10,16,3,4,-1.],[11,16,1,4,3.]],threshold:-4.7343620099127293e-003,right_val:0.5281885266304016,left_val:0.3615573048591614},{features:[[2,8,3,3,-1.],[3,8,1,3,3.]],threshold:8.3048478700220585e-004,right_val:0.5550957918167114,left_val:0.4442889094352722},{features:[[11,0,2,6,-1.],[12,0,1,3,2.],[11,3,1,3,2.]],threshold:7.6602199114859104e-003,right_val:0.2613354921340942,left_val:0.5162935256958008},{features:[[7,0,2,6,-1.],[7,0,1,3,2.],[8,3,1,3,2.]],threshold:-4.1048377752304077e-003,right_val:0.5019031763076782,left_val:0.2789632081985474},{features:[[16,3,3,7,-1.],[17,3,1,7,3.]],threshold:4.8512578941881657e-003,right_val:0.5661668181419373,left_val:0.4968984127044678},{features:[[1,3,3,7,-1.],[2,3,1,7,3.]],threshold:9.9896453320980072e-004,right_val:0.5551813244819641,left_val:0.4445607960224152},{features:[[14,1,6,16,-1.],[16,1,2,16,3.]],threshold:-0.2702363133430481,right_val:0.5151314139366150,left_val:0.0293882098048925},{features:[[0,1,6,16,-1.],[2,1,2,16,3.]],threshold:-0.0130906803533435,right_val:0.4447459876537323,left_val:0.5699399709701538},{features:[[2,0,16,8,-1.],[10,0,8,4,2.],[2,4,8,4,2.]],threshold:-9.4342790544033051e-003,right_val:0.5487895011901856,left_val:0.4305466115474701},{features:[[6,8,5,3,-1.],[6,9,5,1,3.]],threshold:-1.5482039889320731e-003,right_val:0.5128080844879150,left_val:0.3680317103862763},{features:[[9,7,3,3,-1.],[10,7,1,3,3.]],threshold:5.3746132180094719e-003,right_val:0.6101555824279785,left_val:0.4838916957378388},{features:[[8,8,4,3,-1.],[8,9,4,1,3.]],threshold:1.5786769799888134e-003,right_val:0.4118548035621643,left_val:0.5325223207473755},{features:[[9,6,2,4,-1.],[9,6,1,4,2.]],threshold:3.6856050137430429e-003,right_val:0.6252303123474121,left_val:0.4810948073863983},{features:[[0,7,15,1,-1.],[5,7,5,1,3.]],threshold:9.3887019902467728e-003,right_val:0.3629410862922669,left_val:0.5200229883193970},{features:[[8,2,7,9,-1.],[8,5,7,3,3.]],threshold:0.0127926301211119,right_val:0.6738016009330750,left_val:0.4961709976196289},{features:[[1,7,16,4,-1.],[1,7,8,2,2.],[9,9,8,2,2.]],threshold:-3.3661040943115950e-003,right_val:0.5283598899841309,left_val:0.4060279130935669},{features:[[6,12,8,2,-1.],[6,13,8,1,2.]],threshold:3.9771420415490866e-004,right_val:0.5900775194168091,left_val:0.4674113988876343},{features:[[8,11,3,3,-1.],[8,12,3,1,3.]],threshold:1.4868030557408929e-003,right_val:0.6082053780555725,left_val:0.4519116878509522},{features:[[4,5,14,10,-1.],[11,5,7,5,2.],[4,10,7,5,2.]],threshold:-0.0886867493391037,right_val:0.5180991888046265,left_val:0.2807899117469788},{features:[[4,12,3,2,-1.],[4,13,3,1,2.]],threshold:-7.4296112870797515e-005,right_val:0.4087625145912170,left_val:0.5295584201812744},{features:[[9,11,6,1,-1.],[11,11,2,1,3.]],threshold:-1.4932939848222304e-005,right_val:0.4538542926311493,left_val:0.5461400151252747},{features:[[4,9,7,6,-1.],[4,11,7,2,3.]],threshold:5.9162238612771034e-003,right_val:0.4192134141921997,left_val:0.5329161286354065},{features:[[7,10,6,3,-1.],[7,11,6,1,3.]],threshold:1.1141640134155750e-003,right_val:0.5706217288970947,left_val:0.4512017965316773},{features:[[9,11,2,2,-1.],[9,12,2,1,2.]],threshold:8.9249362645205110e-005,right_val:0.5897638201713562,left_val:0.4577805995941162},{features:[[0,5,20,6,-1.],[0,7,20,2,3.]],threshold:2.5319510605186224e-003,right_val:0.3357639014720917,left_val:0.5299603939056397},{features:[[6,4,6,1,-1.],[8,4,2,1,3.]],threshold:0.0124262003228068,right_val:0.1346601992845535,left_val:0.4959059059619904},{features:[[9,11,6,1,-1.],[11,11,2,1,3.]],threshold:0.0283357501029968,right_val:6.1043637106195092e-004,left_val:0.5117079019546509},{features:[[5,11,6,1,-1.],[7,11,2,1,3.]],threshold:6.6165882162749767e-003,right_val:0.7011628150939941,left_val:0.4736349880695343},{features:[[10,16,3,4,-1.],[11,16,1,4,3.]],threshold:8.0468766391277313e-003,right_val:0.3282819986343384,left_val:0.5216417908668518},{features:[[8,7,3,3,-1.],[9,7,1,3,3.]],threshold:-1.1193980462849140e-003,right_val:0.4563739001750946,left_val:0.5809860825538635},{features:[[2,12,16,8,-1.],[2,16,16,4,2.]],threshold:0.0132775902748108,right_val:0.4103901088237763,left_val:0.5398362278938294},{features:[[0,15,15,2,-1.],[0,16,15,1,2.]],threshold:4.8794739996083081e-004,right_val:0.5410590767860413,left_val:0.4249286055564880},{features:[[15,4,5,6,-1.],[15,6,5,2,3.]],threshold:0.0112431701272726,right_val:0.3438215851783752,left_val:0.5269963741302490},{features:[[9,5,2,4,-1.],[10,5,1,4,2.]],threshold:-8.9896668214350939e-004,right_val:0.4456613063812256,left_val:0.5633075833320618},{features:[[8,10,9,6,-1.],[8,12,9,2,3.]],threshold:6.6677159629762173e-003,right_val:0.4362679123878479,left_val:0.5312889218330383},{features:[[2,19,15,1,-1.],[7,19,5,1,3.]],threshold:0.0289472993463278,right_val:0.6575797796249390,left_val:0.4701794981956482},{features:[[10,16,3,4,-1.],[11,16,1,4,3.]],threshold:-0.0234000496566296,right_val:0.5137398838996887,left_val:0.},{features:[[0,15,20,4,-1.],[0,17,20,2,2.]],threshold:-0.0891170501708984,right_val:0.4942430853843689,left_val:0.0237452797591686},{features:[[10,16,3,4,-1.],[11,16,1,4,3.]],threshold:-0.0140546001493931,right_val:0.5117511153221130,left_val:0.3127323091030121},{features:[[7,16,3,4,-1.],[8,16,1,4,3.]],threshold:8.1239398568868637e-003,right_val:0.2520025968551636,left_val:0.5009049177169800},{features:[[9,16,3,3,-1.],[9,17,3,1,3.]],threshold:-4.9964650534093380e-003,right_val:0.4927811920642853,left_val:0.6387143731117249},{features:[[8,11,4,6,-1.],[8,14,4,3,2.]],threshold:3.1253970228135586e-003,right_val:0.3680452108383179,left_val:0.5136849880218506},{features:[[9,6,2,12,-1.],[9,10,2,4,3.]],threshold:6.7669642157852650e-003,right_val:0.4363631904125214,left_val:0.5509843826293945},{features:[[8,17,4,3,-1.],[8,18,4,1,3.]],threshold:-2.3711440153419971e-003,right_val:0.4586946964263916,left_val:0.6162335276603699},{features:[[9,18,8,2,-1.],[13,18,4,1,2.],[9,19,4,1,2.]],threshold:-5.3522791713476181e-003,right_val:0.4920490980148315,left_val:0.6185457706451416},{features:[[1,18,8,2,-1.],[1,19,8,1,2.]],threshold:-0.0159688591957092,right_val:0.4983252882957459,left_val:0.1382617950439453},{features:[[13,5,6,15,-1.],[15,5,2,15,3.]],threshold:4.7676060348749161e-003,right_val:0.5490046143531799,left_val:0.4688057899475098},{features:[[9,8,2,2,-1.],[9,9,2,1,2.]],threshold:-2.4714691098779440e-003,right_val:0.5003952980041504,left_val:0.2368514984846115},{features:[[9,5,2,3,-1.],[9,5,1,3,2.]],threshold:-7.1033788844943047e-004,right_val:0.4721533060073853,left_val:0.5856394171714783},{features:[[1,5,6,15,-1.],[3,5,2,15,3.]],threshold:-0.1411755979061127,right_val:0.4961591064929962,left_val:0.0869000628590584},{features:[[4,1,14,8,-1.],[11,1,7,4,2.],[4,5,7,4,2.]],threshold:0.1065180972218514,right_val:0.1741005033254623,left_val:0.5138837099075317},{features:[[2,4,4,16,-1.],[2,4,2,8,2.],[4,12,2,8,2.]],threshold:-0.0527447499334812,right_val:0.4772881865501404,left_val:0.7353636026382446},{features:[[12,4,3,12,-1.],[12,10,3,6,2.]],threshold:-4.7431760467588902e-003,right_val:0.5292701721191406,left_val:0.3884406089782715},{features:[[4,5,10,12,-1.],[4,5,5,6,2.],[9,11,5,6,2.]],threshold:9.9676765967160463e-004,right_val:0.4003424048423767,left_val:0.5223492980003357},{features:[[9,14,2,3,-1.],[9,15,2,1,3.]],threshold:8.0284131690859795e-003,right_val:0.7212964296340942,left_val:0.4959106147289276},{features:[[5,4,2,3,-1.],[5,5,2,1,3.]],threshold:8.6025858763605356e-004,right_val:0.5538476109504700,left_val:0.4444884061813355},{features:[[12,2,4,10,-1.],[14,2,2,5,2.],[12,7,2,5,2.]],threshold:9.3191501218825579e-004,right_val:0.4163244068622589,left_val:0.5398371219635010},{features:[[6,4,7,3,-1.],[6,5,7,1,3.]],threshold:-2.5082060601562262e-003,right_val:0.4562500119209290,left_val:0.5854265093803406},{features:[[2,0,18,2,-1.],[11,0,9,1,2.],[2,1,9,1,2.]],threshold:-2.1378761157393456e-003,right_val:0.5280259251594544,left_val:0.4608069062232971},{features:[[0,0,18,2,-1.],[0,0,9,1,2.],[9,1,9,1,2.]],threshold:-2.1546049974858761e-003,right_val:0.5255997180938721,left_val:0.3791126906871796},{features:[[13,13,4,6,-1.],[15,13,2,3,2.],[13,16,2,3,2.]],threshold:-7.6214009895920753e-003,right_val:0.4952073991298676,left_val:0.5998609066009522},{features:[[3,13,4,6,-1.],[3,13,2,3,2.],[5,16,2,3,2.]],threshold:2.2055360022932291e-003,right_val:0.5588530898094177,left_val:0.4484206140041351},{features:[[10,12,2,6,-1.],[10,15,2,3,2.]],threshold:1.2586950324475765e-003,right_val:0.4423840939998627,left_val:0.5450747013092041},{features:[[5,9,10,10,-1.],[5,9,5,5,2.],[10,14,5,5,2.]],threshold:-5.0926720723509789e-003,right_val:0.5263035893440247,left_val:0.4118275046348572},{features:[[11,4,4,2,-1.],[13,4,2,1,2.],[11,5,2,1,2.]],threshold:-2.5095739401876926e-003,right_val:0.4998494982719421,left_val:0.5787907838821411},{features:[[7,12,6,8,-1.],[10,12,3,8,2.]],threshold:-0.0773275569081306,right_val:0.4811120033264160,left_val:0.8397865891456604},{features:[[12,2,4,10,-1.],[14,2,2,5,2.],[12,7,2,5,2.]],threshold:-0.0414858199656010,right_val:0.5176993012428284,left_val:0.2408611029386520},{features:[[8,11,2,1,-1.],[9,11,1,1,2.]],threshold:1.0355669655837119e-004,right_val:0.5417054295539856,left_val:0.4355360865592957},{features:[[10,5,1,12,-1.],[10,9,1,4,3.]],threshold:1.3255809899419546e-003,right_val:0.4894095063209534,left_val:0.5453971028327942},{features:[[0,11,6,9,-1.],[3,11,3,9,2.]],threshold:-8.0598732456564903e-003,right_val:0.4577918946743012,left_val:0.5771024227142334},{features:[[12,2,4,10,-1.],[14,2,2,5,2.],[12,7,2,5,2.]],threshold:0.0190586205571890,right_val:0.3400475084781647,left_val:0.5169867873191834},{features:[[4,2,4,10,-1.],[4,2,2,5,2.],[6,7,2,5,2.]],threshold:-0.0350578911602497,right_val:0.5000503063201904,left_val:0.2203243970870972},{features:[[11,4,4,2,-1.],[13,4,2,1,2.],[11,5,2,1,2.]],threshold:5.7296059094369411e-003,right_val:0.6597570776939392,left_val:0.5043408274650574},{features:[[0,14,6,3,-1.],[0,15,6,1,3.]],threshold:-0.0116483299061656,right_val:0.4996652901172638,left_val:0.2186284959316254},{features:[[11,4,4,2,-1.],[13,4,2,1,2.],[11,5,2,1,2.]],threshold:1.4544479781761765e-003,right_val:0.5503727793693543,left_val:0.5007681846618652},{features:[[6,1,3,2,-1.],[7,1,1,2,3.]],threshold:-2.5030909455381334e-004,right_val:0.5241670012474060,left_val:0.4129841029644013},{features:[[11,4,4,2,-1.],[13,4,2,1,2.],[11,5,2,1,2.]],threshold:-8.2907272735610604e-004,right_val:0.4974496066570282,left_val:0.5412868261337280},{features:[[5,4,4,2,-1.],[5,4,2,1,2.],[7,5,2,1,2.]],threshold:1.0862209601327777e-003,right_val:0.5879228711128235,left_val:0.4605529904365540},{features:[[13,0,2,12,-1.],[14,0,1,6,2.],[13,6,1,6,2.]],threshold:2.0000500080641359e-004,right_val:0.4705209136009216,left_val:0.5278854966163635},{features:[[6,0,3,10,-1.],[7,0,1,10,3.]],threshold:2.9212920926511288e-003,right_val:0.3755536973476410,left_val:0.5129609704017639},{features:[[3,0,17,8,-1.],[3,4,17,4,2.]],threshold:0.0253874007612467,right_val:0.5790768265724182,left_val:0.4822691977024078},{features:[[0,4,20,4,-1.],[0,6,20,2,2.]],threshold:-3.1968469265848398e-003,right_val:0.3962840139865875,left_val:0.5248395204544067}],threshold:87.6960296630859380},{simpleClassifiers:[{features:[[0,3,8,2,-1.],[4,3,4,2,2.]],threshold:5.8031738735735416e-003,right_val:0.5961983203887940,left_val:0.3498983979225159},{features:[[8,11,4,3,-1.],[8,12,4,1,3.]],threshold:-9.0003069490194321e-003,right_val:0.4478552043437958,left_val:0.6816636919975281},{features:[[5,7,6,4,-1.],[5,7,3,2,2.],[8,9,3,2,2.]],threshold:-1.1549659539014101e-003,right_val:0.3578251004219055,left_val:0.5585706233978272},{features:[[8,3,4,9,-1.],[8,6,4,3,3.]],threshold:-1.1069850297644734e-003,right_val:0.3050428032875061,left_val:0.5365036129951477},{features:[[8,15,1,4,-1.],[8,17,1,2,2.]],threshold:1.0308309720130637e-004,right_val:0.5344635844230652,left_val:0.3639095127582550},{features:[[4,5,12,7,-1.],[8,5,4,7,3.]],threshold:-5.0984839908778667e-003,right_val:0.5504264831542969,left_val:0.2859157025814056},{features:[[4,2,4,10,-1.],[4,2,2,5,2.],[6,7,2,5,2.]],threshold:8.2572200335562229e-004,right_val:0.3476041853427887,left_val:0.5236523747444153},{features:[[3,0,17,2,-1.],[3,1,17,1,2.]],threshold:9.9783325567841530e-003,right_val:0.6219646930694580,left_val:0.4750322103500366},{features:[[2,2,16,15,-1.],[2,7,16,5,3.]],threshold:-0.0374025292694569,right_val:0.5278062820434570,left_val:0.3343375921249390},{features:[[15,2,5,2,-1.],[15,3,5,1,2.]],threshold:4.8548257909715176e-003,right_val:0.3700444102287293,left_val:0.5192180871963501},{features:[[9,3,2,2,-1.],[10,3,1,2,2.]],threshold:-1.8664470408111811e-003,right_val:0.5091944932937622,left_val:0.2929843962192535},{features:[[4,5,16,15,-1.],[4,10,16,5,3.]],threshold:0.0168888904154301,right_val:0.5431225895881653,left_val:0.3686845898628235},{features:[[7,13,5,6,-1.],[7,16,5,3,2.]],threshold:-5.8372621424496174e-003,right_val:0.5221335887908936,left_val:0.3632183969020844},{features:[[10,7,3,2,-1.],[11,7,1,2,3.]],threshold:-1.4713739510625601e-003,right_val:0.4700650870800018,left_val:0.5870683789253235},{features:[[8,3,3,1,-1.],[9,3,1,1,3.]],threshold:-1.1522950371727347e-003,right_val:0.5140954256057739,left_val:0.3195894956588745},{features:[[9,16,3,3,-1.],[9,17,3,1,3.]],threshold:-4.2560300789773464e-003,right_val:0.4814921021461487,left_val:0.6301859021186829},{features:[[0,2,5,2,-1.],[0,3,5,1,2.]],threshold:-6.7378291860222816e-003,right_val:0.5025808215141296,left_val:0.1977048069238663},{features:[[12,5,4,3,-1.],[12,6,4,1,3.]],threshold:0.0113826701417565,right_val:0.6867045760154724,left_val:0.4954132139682770},{features:[[1,7,12,1,-1.],[5,7,4,1,3.]],threshold:5.1794708706438541e-003,right_val:0.3350647985935211,left_val:0.5164427757263184},{features:[[7,5,6,14,-1.],[7,12,6,7,2.]],threshold:-0.1174378991127014,right_val:0.5234413743019104,left_val:0.2315246015787125},{features:[[0,0,8,10,-1.],[0,0,4,5,2.],[4,5,4,5,2.]],threshold:0.0287034492939711,right_val:0.6722521185874939,left_val:0.4664297103881836},{features:[[9,1,3,2,-1.],[10,1,1,2,3.]],threshold:4.8231030814349651e-003,right_val:0.2723532915115356,left_val:0.5220875144004822},{features:[[8,1,3,2,-1.],[9,1,1,2,3.]],threshold:2.6798530016094446e-003,right_val:0.2906948924064636,left_val:0.5079277157783508},{features:[[12,4,3,3,-1.],[12,5,3,1,3.]],threshold:8.0504082143306732e-003,right_val:0.6395021080970764,left_val:0.4885950982570648},{features:[[7,4,6,16,-1.],[7,12,6,8,2.]],threshold:4.8054959625005722e-003,right_val:0.3656663894653320,left_val:0.5197256803512573},{features:[[12,4,3,3,-1.],[12,5,3,1,3.]],threshold:-2.2420159075409174e-003,right_val:0.4763701856136322,left_val:0.6153467893600464},{features:[[2,3,2,6,-1.],[2,5,2,2,3.]],threshold:-0.0137577103450894,right_val:0.5030903220176697,left_val:0.2637344896793366},{features:[[14,2,6,9,-1.],[14,5,6,3,3.]],threshold:-0.1033829972147942,right_val:0.5182461142539978,left_val:0.2287521958351135},{features:[[5,4,3,3,-1.],[5,5,3,1,3.]],threshold:-9.4432085752487183e-003,right_val:0.4694949090480804,left_val:0.6953303813934326},{features:[[9,17,3,2,-1.],[10,17,1,2,3.]],threshold:8.0271181650459766e-004,right_val:0.4268783926963806,left_val:0.5450655221939087},{features:[[5,5,2,3,-1.],[5,6,2,1,3.]],threshold:-4.1945669800043106e-003,right_val:0.4571642875671387,left_val:0.6091387867927551},{features:[[13,11,3,6,-1.],[13,13,3,2,3.]],threshold:0.0109422104433179,right_val:0.3284547030925751,left_val:0.5241063237190247},{features:[[3,14,2,6,-1.],[3,17,2,3,2.]],threshold:-5.7841069065034389e-004,right_val:0.4179368913173676,left_val:0.5387929081916809},{features:[[14,3,6,2,-1.],[14,4,6,1,2.]],threshold:-2.0888620056211948e-003,right_val:0.5301715731620789,left_val:0.4292691051959992},{features:[[0,8,16,2,-1.],[0,9,16,1,2.]],threshold:3.2383969519287348e-003,right_val:0.5220744013786316,left_val:0.3792347908020020},{features:[[14,3,6,2,-1.],[14,4,6,1,2.]],threshold:4.9075027927756310e-003,right_val:0.4126757979393005,left_val:0.5237283110618591},{features:[[0,0,5,6,-1.],[0,2,5,2,3.]],threshold:-0.0322779417037964,right_val:0.4994502067565918,left_val:0.1947655975818634},{features:[[12,5,4,3,-1.],[12,6,4,1,3.]],threshold:-8.9711230248212814e-003,right_val:0.4929032027721405,left_val:0.6011285185813904},{features:[[4,11,3,6,-1.],[4,13,3,2,3.]],threshold:0.0153210898861289,right_val:0.2039822041988373,left_val:0.5009753704071045},{features:[[12,5,4,3,-1.],[12,6,4,1,3.]],threshold:2.0855569746345282e-003,right_val:0.5721694827079773,left_val:0.4862189888954163},{features:[[9,5,1,3,-1.],[9,6,1,1,3.]],threshold:5.0615021027624607e-003,right_val:0.1801805943250656,left_val:0.5000218749046326},{features:[[12,5,4,3,-1.],[12,6,4,1,3.]],threshold:-3.7174751050770283e-003,right_val:0.4897592961788178,left_val:0.5530117154121399},{features:[[6,6,8,12,-1.],[6,12,8,6,2.]],threshold:-0.0121705001220107,right_val:0.5383723974227905,left_val:0.4178605973720551},{features:[[12,5,4,3,-1.],[12,6,4,1,3.]],threshold:4.6248398721218109e-003,right_val:0.5761327147483826,left_val:0.4997169971466065},{features:[[5,12,9,2,-1.],[8,12,3,2,3.]],threshold:-2.1040429419372231e-004,right_val:0.4097681045532227,left_val:0.5331807136535645},{features:[[12,5,4,3,-1.],[12,6,4,1,3.]],threshold:-0.0146417804062366,right_val:0.5051776170730591,left_val:0.5755925178527832},{features:[[4,5,4,3,-1.],[4,6,4,1,3.]],threshold:3.3199489116668701e-003,right_val:0.6031805872917175,left_val:0.4576976895332336},{features:[[6,6,9,2,-1.],[9,6,3,2,3.]],threshold:3.7236879579722881e-003,right_val:0.5415883064270020,left_val:0.4380396902561188},{features:[[4,11,1,3,-1.],[4,12,1,1,3.]],threshold:8.2951161311939359e-004,right_val:0.3702219128608704,left_val:0.5163031816482544},{features:[[14,12,6,6,-1.],[14,12,3,6,2.]],threshold:-0.0114084901288152,right_val:0.4862565100193024,left_val:0.6072946786880493},{features:[[7,0,3,7,-1.],[8,0,1,7,3.]],threshold:-4.5320121571421623e-003,right_val:0.5088962912559509,left_val:0.3292475938796997},{features:[[9,8,3,3,-1.],[10,8,1,3,3.]],threshold:5.1276017911732197e-003,right_val:0.6122708916664124,left_val:0.4829767942428589},{features:[[8,8,3,3,-1.],[9,8,1,3,3.]],threshold:9.8583158105611801e-003,right_val:0.6556177139282227,left_val:0.4660679996013641},{features:[[5,10,11,3,-1.],[5,11,11,1,3.]],threshold:0.0369859188795090,right_val:0.1690472066402435,left_val:0.5204849243164063},{features:[[5,7,10,1,-1.],[10,7,5,1,2.]],threshold:4.6491161920130253e-003,right_val:0.3725225031375885,left_val:0.5167322158813477},{features:[[9,7,3,2,-1.],[10,7,1,2,3.]],threshold:-4.2664702050387859e-003,right_val:0.4987342953681946,left_val:0.6406493186950684},{features:[[8,7,3,2,-1.],[9,7,1,2,3.]],threshold:-4.7956590424291790e-004,right_val:0.4464873969554901,left_val:0.5897293090820313},{features:[[11,9,4,2,-1.],[11,9,2,2,2.]],threshold:3.6827160511165857e-003,right_val:0.3472662866115570,left_val:0.5441560745239258},{features:[[5,9,4,2,-1.],[7,9,2,2,2.]],threshold:-0.0100598800927401,right_val:0.5004829764366150,left_val:0.2143162935972214},{features:[[14,10,2,4,-1.],[14,12,2,2,2.]],threshold:-3.0361840617842972e-004,right_val:0.4590323865413666,left_val:0.5386424064636231},{features:[[7,7,3,2,-1.],[8,7,1,2,3.]],threshold:-1.4545479789376259e-003,right_val:0.4497095048427582,left_val:0.5751184225082398},{features:[[14,17,6,3,-1.],[14,18,6,1,3.]],threshold:1.6515209572389722e-003,right_val:0.4238520860671997,left_val:0.5421937704086304},{features:[[4,5,12,12,-1.],[4,5,6,6,2.],[10,11,6,6,2.]],threshold:-7.8468639403581619e-003,right_val:0.5258157253265381,left_val:0.4077920913696289},{features:[[6,9,8,8,-1.],[10,9,4,4,2.],[6,13,4,4,2.]],threshold:-5.1259850151836872e-003,right_val:0.5479453206062317,left_val:0.4229275882244110},{features:[[0,4,15,4,-1.],[5,4,5,4,3.]],threshold:-0.0368909612298012,right_val:0.4674678146839142,left_val:0.6596375703811646},{features:[[13,2,4,1,-1.],[13,2,2,1,2.]],threshold:2.4035639944486320e-004,right_val:0.5573202967643738,left_val:0.4251135885715485},{features:[[4,12,2,2,-1.],[4,13,2,1,2.]],threshold:-1.5150169929256663e-005,right_val:0.4074114859104157,left_val:0.5259246826171875},{features:[[8,13,4,3,-1.],[8,14,4,1,3.]],threshold:2.2108471021056175e-003,right_val:0.5886352062225342,left_val:0.4671722948551178},{features:[[9,13,2,3,-1.],[9,14,2,1,3.]],threshold:-1.1568620102480054e-003,right_val:0.4487161934375763,left_val:0.5711066126823425},{features:[[13,11,2,3,-1.],[13,12,2,1,3.]],threshold:4.9996292218565941e-003,right_val:0.2898327112197876,left_val:0.5264198184013367},{features:[[7,12,4,4,-1.],[7,12,2,2,2.],[9,14,2,2,2.]],threshold:-1.4656189596280456e-003,right_val:0.5197871923446655,left_val:0.3891738057136536},{features:[[10,11,2,2,-1.],[11,11,1,1,2.],[10,12,1,1,2.]],threshold:-1.1975039960816503e-003,right_val:0.4927955865859985,left_val:0.5795872807502747},{features:[[8,17,3,2,-1.],[9,17,1,2,3.]],threshold:-4.4954330660402775e-003,right_val:0.5012555122375488,left_val:0.2377603054046631},{features:[[10,11,2,2,-1.],[11,11,1,1,2.],[10,12,1,1,2.]],threshold:1.4997160178609192e-004,right_val:0.5617607831954956,left_val:0.4876626133918762},{features:[[0,17,6,3,-1.],[0,18,6,1,3.]],threshold:2.6391509454697371e-003,right_val:0.3765509128570557,left_val:0.5168088078498840},{features:[[10,11,2,2,-1.],[11,11,1,1,2.],[10,12,1,1,2.]],threshold:-2.9368131072260439e-004,right_val:0.4874630868434906,left_val:0.5446649193763733},{features:[[8,11,2,2,-1.],[8,11,1,1,2.],[9,12,1,1,2.]],threshold:1.4211760135367513e-003,right_val:0.6691331863403320,left_val:0.4687897861003876},{features:[[12,5,8,4,-1.],[12,5,4,4,2.]],threshold:0.0794276371598244,right_val:0.2732945978641510,left_val:0.5193443894386292},{features:[[0,5,8,4,-1.],[4,5,4,4,2.]],threshold:0.0799375027418137,right_val:0.1782083958387375,left_val:0.4971731007099152},{features:[[13,2,4,1,-1.],[13,2,2,1,2.]],threshold:0.0110892597585917,right_val:0.3209475874900818,left_val:0.5165994763374329},{features:[[3,2,4,1,-1.],[5,2,2,1,2.]],threshold:1.6560709627810866e-004,right_val:0.5307276248931885,left_val:0.4058471918106079},{features:[[10,0,4,2,-1.],[12,0,2,1,2.],[10,1,2,1,2.]],threshold:-5.3354292176663876e-003,right_val:0.5158129930496216,left_val:0.3445056974887848},{features:[[7,12,3,1,-1.],[8,12,1,1,3.]],threshold:1.1287260567769408e-003,right_val:0.6075533032417297,left_val:0.4594863057136536},{features:[[8,11,4,8,-1.],[10,11,2,4,2.],[8,15,2,4,2.]],threshold:-0.0219692196696997,right_val:0.5228595733642578,left_val:0.1680400967597961},{features:[[9,9,2,2,-1.],[9,10,2,1,2.]],threshold:-2.1775320055894554e-004,right_val:0.5215672850608826,left_val:0.3861596882343292},{features:[[3,18,15,2,-1.],[3,19,15,1,2.]],threshold:2.0200149447191507e-004,right_val:0.4363039135932922,left_val:0.5517979264259338},{features:[[2,6,2,12,-1.],[2,6,1,6,2.],[3,12,1,6,2.]],threshold:-0.0217331498861313,right_val:0.4789851009845734,left_val:0.7999460101127625},{features:[[9,8,2,3,-1.],[9,9,2,1,3.]],threshold:-8.4399932529777288e-004,right_val:0.5374773144721985,left_val:0.4085975885391235},{features:[[7,10,3,2,-1.],[8,10,1,2,3.]],threshold:-4.3895249837078154e-004,right_val:0.4366143047809601,left_val:0.5470405220985413},{features:[[11,11,3,1,-1.],[12,11,1,1,3.]],threshold:1.5092400135472417e-003,right_val:0.5842149257659912,left_val:0.4988996982574463},{features:[[6,11,3,1,-1.],[7,11,1,1,3.]],threshold:-3.5547839943319559e-003,right_val:0.4721005856990814,left_val:0.6753690242767334},{features:[[9,2,4,2,-1.],[11,2,2,1,2.],[9,3,2,1,2.]],threshold:4.8191400128416717e-004,right_val:0.4357109069824219,left_val:0.5415853857994080},{features:[[4,12,2,3,-1.],[4,13,2,1,3.]],threshold:-6.0264398343861103e-003,right_val:0.4991880953311920,left_val:0.2258509993553162},{features:[[2,1,18,3,-1.],[8,1,6,3,3.]],threshold:-0.0116681400686502,right_val:0.4927498996257782,left_val:0.6256554722785950},{features:[[5,1,4,14,-1.],[7,1,2,14,2.]],threshold:-2.8718370012938976e-003,right_val:0.5245801806449890,left_val:0.3947784900665283},{features:[[8,16,12,3,-1.],[8,16,6,3,2.]],threshold:0.0170511696487665,right_val:0.5794224143028259,left_val:0.4752511084079742},{features:[[1,17,18,3,-1.],[7,17,6,3,3.]],threshold:-0.0133520802482963,right_val:0.4544535875320435,left_val:0.6041104793548584},{features:[[9,14,2,6,-1.],[9,17,2,3,2.]],threshold:-3.9301801007241011e-004,right_val:0.5544905066490173,left_val:0.4258275926113129},{features:[[9,12,1,8,-1.],[9,16,1,4,2.]],threshold:3.0483349692076445e-003,right_val:0.3780272901058197,left_val:0.5233420133590698},{features:[[9,14,2,3,-1.],[9,15,2,1,3.]],threshold:-4.3579288758337498e-003,right_val:0.4838674068450928,left_val:0.6371889114379883},{features:[[9,6,2,12,-1.],[9,10,2,4,3.]],threshold:5.6661018170416355e-003,right_val:0.4163666069507599,left_val:0.5374705791473389},{features:[[12,9,3,3,-1.],[12,10,3,1,3.]],threshold:6.0677339206449687e-005,right_val:0.5311625003814697,left_val:0.4638795852661133},{features:[[0,1,4,8,-1.],[2,1,2,8,2.]],threshold:0.0367381609976292,right_val:0.6466524004936218,left_val:0.4688656032085419},{features:[[9,1,6,2,-1.],[12,1,3,1,2.],[9,2,3,1,2.]],threshold:8.6528137326240540e-003,right_val:0.2188657969236374,left_val:0.5204318761825562},{features:[[1,3,12,14,-1.],[1,10,12,7,2.]],threshold:-0.1537135988473892,right_val:0.4958840012550354,left_val:0.1630371958017349},{features:[[8,12,4,2,-1.],[10,12,2,1,2.],[8,13,2,1,2.]],threshold:-4.1560421232134104e-004,right_val:0.4696458876132965,left_val:0.5774459242820740},{features:[[1,9,10,2,-1.],[1,9,5,1,2.],[6,10,5,1,2.]],threshold:-1.2640169588848948e-003,right_val:0.5217198133468628,left_val:0.3977175951004028},{features:[[8,15,4,3,-1.],[8,16,4,1,3.]],threshold:-3.5473341122269630e-003,right_val:0.4808315038681030,left_val:0.6046528220176697},{features:[[6,8,8,3,-1.],[6,9,8,1,3.]],threshold:3.0019069527043030e-005,right_val:0.5228201150894165,left_val:0.3996723890304565},{features:[[9,15,5,3,-1.],[9,16,5,1,3.]],threshold:1.3113019522279501e-003,right_val:0.5765997767448425,left_val:0.4712158143520355},{features:[[8,7,4,3,-1.],[8,8,4,1,3.]],threshold:-1.3374709524214268e-003,right_val:0.5253170132637024,left_val:0.4109584987163544},{features:[[7,7,6,2,-1.],[7,8,6,1,2.]],threshold:0.0208767093718052,right_val:0.1757981926202774,left_val:0.5202993750572205},{features:[[5,7,8,2,-1.],[5,7,4,1,2.],[9,8,4,1,2.]],threshold:-7.5497948564589024e-003,right_val:0.4694975018501282,left_val:0.6566609740257263},{features:[[12,9,3,3,-1.],[12,10,3,1,3.]],threshold:0.0241885501891375,right_val:0.3370220959186554,left_val:0.5128673911094666},{features:[[4,7,4,2,-1.],[4,8,4,1,2.]],threshold:-2.9358828905969858e-003,right_val:0.4694541096687317,left_val:0.6580786705017090},{features:[[14,2,6,9,-1.],[14,5,6,3,3.]],threshold:0.0575579293072224,right_val:0.2775259912014008,left_val:0.5146445035934448},{features:[[4,9,3,3,-1.],[5,9,1,3,3.]],threshold:-1.1343370424583554e-003,right_val:0.5192667245864868,left_val:0.3836601972579956},{features:[[12,9,3,3,-1.],[12,10,3,1,3.]],threshold:0.0168169997632504,right_val:0.6177260875701904,left_val:0.5085592865943909},{features:[[0,2,6,9,-1.],[0,5,6,3,3.]],threshold:5.0535178743302822e-003,right_val:0.3684791922569275,left_val:0.5138763189315796},{features:[[17,3,3,6,-1.],[18,3,1,6,3.]],threshold:-4.5874710194766521e-003,right_val:0.4835202097892761,left_val:0.5989655256271362},{features:[[0,3,3,6,-1.],[1,3,1,6,3.]],threshold:1.6882460331544280e-003,right_val:0.5723056793212891,left_val:0.4509486854076386},{features:[[17,14,1,2,-1.],[17,15,1,1,2.]],threshold:-1.6554000321775675e-003,right_val:0.5243319272994995,left_val:0.3496770858764648},{features:[[4,9,4,3,-1.],[6,9,2,3,2.]],threshold:-0.0193738006055355,right_val:0.4968712925910950,left_val:0.1120536997914314},{features:[[12,9,3,3,-1.],[12,10,3,1,3.]],threshold:0.0103744501248002,right_val:0.4395213127136231,left_val:0.5148196816444397},{features:[[5,9,3,3,-1.],[5,10,3,1,3.]],threshold:1.4973050565458834e-004,right_val:0.5269886851310730,left_val:0.4084999859333038},{features:[[9,5,6,8,-1.],[12,5,3,4,2.],[9,9,3,4,2.]],threshold:-0.0429819300770760,right_val:0.5018504261970520,left_val:0.6394104957580566},{features:[[5,5,6,8,-1.],[5,5,3,4,2.],[8,9,3,4,2.]],threshold:8.3065936341881752e-003,right_val:0.6698353290557861,left_val:0.4707553982734680},{features:[[16,1,4,6,-1.],[16,4,4,3,2.]],threshold:-4.1285790503025055e-003,right_val:0.5323647260665894,left_val:0.4541369080543518},{features:[[1,0,6,20,-1.],[3,0,2,20,3.]],threshold:1.7399420030415058e-003,right_val:0.5439866185188294,left_val:0.4333961904048920},{features:[[12,11,3,2,-1.],[13,11,1,2,3.]],threshold:1.1739750334527344e-004,right_val:0.5543426275253296,left_val:0.4579687118530273},{features:[[5,11,3,2,-1.],[6,11,1,2,3.]],threshold:1.8585780344437808e-004,right_val:0.5426754951477051,left_val:0.4324643909931183},{features:[[9,4,6,1,-1.],[11,4,2,1,3.]],threshold:5.5587692186236382e-003,right_val:0.3550611138343811,left_val:0.5257220864295960},{features:[[0,0,8,3,-1.],[4,0,4,3,2.]],threshold:-7.9851560294628143e-003,right_val:0.4630635976791382,left_val:0.6043018102645874},{features:[[15,0,2,5,-1.],[15,0,1,5,2.]],threshold:6.0594122624024749e-004,right_val:0.5533195137977600,left_val:0.4598254859447479},{features:[[4,1,3,2,-1.],[5,1,1,2,3.]],threshold:-2.2983040253166109e-004,right_val:0.5322461128234863,left_val:0.4130752086639404},{features:[[7,0,6,15,-1.],[9,0,2,15,3.]],threshold:4.3740210821852088e-004,right_val:0.5409289002418518,left_val:0.4043039977550507},{features:[[6,11,3,1,-1.],[7,11,1,1,3.]],threshold:2.9482020181603730e-004,right_val:0.5628852248191834,left_val:0.4494963884353638},{features:[[12,0,3,4,-1.],[13,0,1,4,3.]],threshold:0.0103126596659422,right_val:0.2704316973686218,left_val:0.5177510976791382},{features:[[5,4,6,1,-1.],[7,4,2,1,3.]],threshold:-7.7241109684109688e-003,right_val:0.4980553984642029,left_val:0.1988019049167633},{features:[[12,7,3,2,-1.],[12,8,3,1,2.]],threshold:-4.6797208487987518e-003,right_val:0.5018296241760254,left_val:0.6644750237464905},{features:[[0,1,4,6,-1.],[0,4,4,3,2.]],threshold:-5.0755459815263748e-003,right_val:0.5185269117355347,left_val:0.3898304998874664},{features:[[12,7,3,2,-1.],[12,8,3,1,2.]],threshold:2.2479740437120199e-003,right_val:0.5660336017608643,left_val:0.4801808893680573},{features:[[2,16,3,3,-1.],[2,17,3,1,3.]],threshold:8.3327008178457618e-004,right_val:0.3957188129425049,left_val:0.5210919976234436},{features:[[13,8,6,10,-1.],[16,8,3,5,2.],[13,13,3,5,2.]],threshold:-0.0412793308496475,right_val:0.5007054209709168,left_val:0.6154541969299316},{features:[[0,9,5,2,-1.],[0,10,5,1,2.]],threshold:-5.0930189900100231e-004,right_val:0.5228403806686401,left_val:0.3975942134857178},{features:[[12,11,2,2,-1.],[13,11,1,1,2.],[12,12,1,1,2.]],threshold:1.2568780221045017e-003,right_val:0.5939183235168457,left_val:0.4979138076305389},{features:[[3,15,3,3,-1.],[3,16,3,1,3.]],threshold:8.0048497766256332e-003,right_val:0.1633366048336029,left_val:0.4984497129917145},{features:[[12,7,3,2,-1.],[12,8,3,1,2.]],threshold:-1.1879300000146031e-003,right_val:0.4942624866962433,left_val:0.5904964804649353},{features:[[5,7,3,2,-1.],[5,8,3,1,2.]],threshold:6.1948952497914433e-004,right_val:0.5328726172447205,left_val:0.4199557900428772},{features:[[9,5,9,9,-1.],[9,8,9,3,3.]],threshold:6.6829859279096127e-003,right_val:0.4905889034271240,left_val:0.5418602824211121},{features:[[5,0,3,7,-1.],[6,0,1,7,3.]],threshold:-3.7062340416014194e-003,right_val:0.5138000249862671,left_val:0.3725939095020294},{features:[[5,2,12,5,-1.],[9,2,4,5,3.]],threshold:-0.0397394113242626,right_val:0.5050346851348877,left_val:0.6478961110115051},{features:[[6,11,2,2,-1.],[6,11,1,1,2.],[7,12,1,1,2.]],threshold:1.4085009461268783e-003,right_val:0.6377884149551392,left_val:0.4682339131832123},{features:[[15,15,3,2,-1.],[15,16,3,1,2.]],threshold:3.9322688826359808e-004,right_val:0.4150482118129730,left_val:0.5458530187606812},{features:[[2,15,3,2,-1.],[2,16,3,1,2.]],threshold:-1.8979819724336267e-003,right_val:0.5149704217910767,left_val:0.3690159916877747},{features:[[14,12,6,8,-1.],[17,12,3,4,2.],[14,16,3,4,2.]],threshold:-0.0139704402536154,right_val:0.4811357855796814,left_val:0.6050562858581543},{features:[[2,8,15,6,-1.],[7,8,5,6,3.]],threshold:-0.1010081991553307,right_val:0.4992361962795258,left_val:0.2017080038785934},{features:[[2,2,18,17,-1.],[8,2,6,17,3.]],threshold:-0.0173469204455614,right_val:0.4899486005306244,left_val:0.5713148713111877},{features:[[5,1,4,1,-1.],[7,1,2,1,2.]],threshold:1.5619759506080300e-004,right_val:0.5392642021179199,left_val:0.4215388894081116},{features:[[5,2,12,5,-1.],[9,2,4,5,3.]],threshold:0.1343892961740494,right_val:0.3767612874507904,left_val:0.5136151909828186},{features:[[3,2,12,5,-1.],[7,2,4,5,3.]],threshold:-0.0245822407305241,right_val:0.4747906923294067,left_val:0.7027357816696167},{features:[[4,9,12,4,-1.],[10,9,6,2,2.],[4,11,6,2,2.]],threshold:-3.8553720805794001e-003,right_val:0.5427716970443726,left_val:0.4317409098148346},{features:[[5,15,6,2,-1.],[5,15,3,1,2.],[8,16,3,1,2.]],threshold:-2.3165249731391668e-003,right_val:0.4618647992610931,left_val:0.5942698717117310},{features:[[10,14,2,3,-1.],[10,15,2,1,3.]],threshold:-4.8518120311200619e-003,right_val:0.4884895086288452,left_val:0.6191568970680237},{features:[[0,13,20,2,-1.],[0,13,10,1,2.],[10,14,10,1,2.]],threshold:2.4699938949197531e-003,right_val:0.4017199873924255,left_val:0.5256664752960205},{features:[[4,9,12,8,-1.],[10,9,6,4,2.],[4,13,6,4,2.]],threshold:0.0454969592392445,right_val:0.2685773968696594,left_val:0.5237867832183838},{features:[[8,13,3,6,-1.],[8,16,3,3,2.]],threshold:-0.0203195996582508,right_val:0.4979738891124725,left_val:0.2130445986986160},{features:[[10,12,2,2,-1.],[10,13,2,1,2.]],threshold:2.6994998916052282e-004,right_val:0.5543122291564941,left_val:0.4814041852951050},{features:[[9,12,2,2,-1.],[9,12,1,1,2.],[10,13,1,1,2.]],threshold:-1.8232699949294329e-003,right_val:0.4709989130496979,left_val:0.6482579708099365},{features:[[4,11,14,4,-1.],[11,11,7,2,2.],[4,13,7,2,2.]],threshold:-6.3015790656208992e-003,right_val:0.5306236147880554,left_val:0.4581927955150604},{features:[[8,5,4,2,-1.],[8,6,4,1,2.]],threshold:-2.4139499873854220e-004,right_val:0.4051763117313385,left_val:0.5232086777687073},{features:[[10,10,6,3,-1.],[12,10,2,3,3.]],threshold:-1.0330369696021080e-003,right_val:0.4789193868637085,left_val:0.5556201934814453},{features:[[2,14,1,2,-1.],[2,15,1,1,2.]],threshold:1.8041160365100950e-004,right_val:0.4011810123920441,left_val:0.5229442715644836},{features:[[13,8,6,12,-1.],[16,8,3,6,2.],[13,14,3,6,2.]],threshold:-0.0614078603684902,right_val:0.5010703206062317,left_val:0.6298682093620300},{features:[[1,8,6,12,-1.],[1,8,3,6,2.],[4,14,3,6,2.]],threshold:-0.0695439130067825,right_val:0.4773184061050415,left_val:0.7228280901908875},{features:[[10,0,6,10,-1.],[12,0,2,10,3.]],threshold:-0.0705426633358002,right_val:0.5182529091835022,left_val:0.2269513010978699},{features:[[5,11,8,4,-1.],[5,11,4,2,2.],[9,13,4,2,2.]],threshold:2.4423799477517605e-003,right_val:0.4098151028156281,left_val:0.5237097144126892},{features:[[10,16,8,4,-1.],[14,16,4,2,2.],[10,18,4,2,2.]],threshold:1.5494349645450711e-003,right_val:0.5468043088912964,left_val:0.4773750901222229},{features:[[7,7,6,6,-1.],[9,7,2,6,3.]],threshold:-0.0239142198115587,right_val:0.4783824980258942,left_val:0.7146975994110107},{features:[[10,2,4,10,-1.],[10,2,2,10,2.]],threshold:-0.0124536901712418,right_val:0.5241122841835022,left_val:0.2635296881198883},{features:[[6,1,4,9,-1.],[8,1,2,9,2.]],threshold:-2.0760179904755205e-004,right_val:0.5113608837127686,left_val:0.3623757064342499},{features:[[12,19,2,1,-1.],[12,19,1,1,2.]],threshold:2.9781080229440704e-005,right_val:0.5432801842689514,left_val:0.4705932140350342}],threshold:90.2533493041992190},{simpleClassifiers:[{features:[[1,2,4,9,-1.],[3,2,2,9,2.]],threshold:0.0117727499455214,right_val:0.6421167254447937,left_val:0.3860518932342529},{features:[[7,5,6,4,-1.],[9,5,2,4,3.]],threshold:0.0270375702530146,right_val:0.6754038929939270,left_val:0.4385654926300049},{features:[[9,4,2,4,-1.],[9,6,2,2,2.]],threshold:-3.6419500247575343e-005,right_val:0.3423315882682800,left_val:0.5487101078033447},{features:[[14,5,2,8,-1.],[14,9,2,4,2.]],threshold:1.9995409529656172e-003,right_val:0.5400317907333374,left_val:0.3230532109737396},{features:[[7,6,5,12,-1.],[7,12,5,6,2.]],threshold:4.5278300531208515e-003,right_val:0.2935043871402741,left_val:0.5091639757156372},{features:[[14,6,2,6,-1.],[14,9,2,3,2.]],threshold:4.7890920541249216e-004,right_val:0.5344064235687256,left_val:0.4178153872489929},{features:[[4,6,2,6,-1.],[4,9,2,3,2.]],threshold:1.1720920447260141e-003,right_val:0.5132070779800415,left_val:0.2899182140827179},{features:[[8,15,10,4,-1.],[13,15,5,2,2.],[8,17,5,2,2.]],threshold:9.5305702416226268e-004,right_val:0.5560845136642456,left_val:0.4280124902725220},{features:[[6,18,2,2,-1.],[7,18,1,2,2.]],threshold:1.5099150004971307e-005,right_val:0.5404760241508484,left_val:0.4044871926307678},{features:[[11,3,6,2,-1.],[11,4,6,1,2.]],threshold:-6.0817901976406574e-004,right_val:0.5503466129302979,left_val:0.4271768927574158},{features:[[2,0,16,6,-1.],[2,2,16,2,3.]],threshold:3.3224520739167929e-003,right_val:0.5369734764099121,left_val:0.3962723910808563},{features:[[11,3,6,2,-1.],[11,4,6,1,2.]],threshold:-1.1037490330636501e-003,right_val:0.5237749814987183,left_val:0.4727177917957306},{features:[[4,11,10,3,-1.],[4,12,10,1,3.]],threshold:-1.4350269921123981e-003,right_val:0.4223509132862091,left_val:0.5603008270263672},{features:[[11,3,6,2,-1.],[11,4,6,1,2.]],threshold:2.0767399109899998e-003,right_val:0.4732725918292999,left_val:0.5225917100906372},{features:[[3,3,6,2,-1.],[3,4,6,1,2.]],threshold:-1.6412809782195836e-004,right_val:0.5432739853858948,left_val:0.3999075889587402},{features:[[16,0,4,7,-1.],[16,0,2,7,2.]],threshold:8.8302437216043472e-003,right_val:0.6027327179908752,left_val:0.4678385853767395},{features:[[0,14,9,6,-1.],[0,16,9,2,3.]],threshold:-0.0105520701035857,right_val:0.5213974714279175,left_val:0.3493967056274414},{features:[[9,16,3,3,-1.],[9,17,3,1,3.]],threshold:-2.2731600329279900e-003,right_val:0.4749062955379486,left_val:0.6185818910598755},{features:[[4,6,6,2,-1.],[6,6,2,2,3.]],threshold:-8.4786332445219159e-004,right_val:0.3843482136726379,left_val:0.5285341143608093},{features:[[15,11,1,3,-1.],[15,12,1,1,3.]],threshold:1.2081359745934606e-003,right_val:0.3447335958480835,left_val:0.5360640883445740},{features:[[5,5,2,3,-1.],[5,6,2,1,3.]],threshold:2.6512730401009321e-003,right_val:0.6193962097167969,left_val:0.4558292031288147},{features:[[10,9,2,2,-1.],[10,10,2,1,2.]],threshold:-1.1012479662895203e-003,right_val:0.5327628254890442,left_val:0.3680230081081390},{features:[[3,1,4,3,-1.],[5,1,2,3,2.]],threshold:4.9561518244445324e-004,right_val:0.5274940729141235,left_val:0.3960595130920410},{features:[[16,0,4,7,-1.],[16,0,2,7,2.]],threshold:-0.0439017713069916,right_val:0.4992839097976685,left_val:0.7020444869995117},{features:[[0,0,20,1,-1.],[10,0,10,1,2.]],threshold:0.0346903502941132,right_val:0.2766602933406830,left_val:0.5049164295196533},{features:[[15,11,1,3,-1.],[15,12,1,1,3.]],threshold:-2.7442190330475569e-003,right_val:0.5274971127510071,left_val:0.2672632932662964},{features:[[0,4,3,4,-1.],[1,4,1,4,3.]],threshold:3.3316588960587978e-003,right_val:0.6001101732254028,left_val:0.4579482972621918},{features:[[16,3,3,6,-1.],[16,5,3,2,3.]],threshold:-0.0200445707887411,right_val:0.5235717892646790,left_val:0.3171594142913818},{features:[[1,3,3,6,-1.],[1,5,3,2,3.]],threshold:1.3492030557245016e-003,right_val:0.4034324884414673,left_val:0.5265362858772278},{features:[[6,2,12,6,-1.],[12,2,6,3,2.],[6,5,6,3,2.]],threshold:2.9702018946409225e-003,right_val:0.4571984112262726,left_val:0.5332456827163696},{features:[[8,10,4,3,-1.],[8,11,4,1,3.]],threshold:6.3039981760084629e-003,right_val:0.6034635901451111,left_val:0.4593310952186585},{features:[[4,2,14,6,-1.],[11,2,7,3,2.],[4,5,7,3,2.]],threshold:-0.0129365902394056,right_val:0.5372971296310425,left_val:0.4437963962554932},{features:[[9,11,2,3,-1.],[9,12,2,1,3.]],threshold:4.0148729458451271e-003,right_val:0.6437833905220032,left_val:0.4680323898792267},{features:[[15,13,2,3,-1.],[15,14,2,1,3.]],threshold:-2.6401679497212172e-003,right_val:0.5314332842826843,left_val:0.3709631860256195},{features:[[8,12,4,3,-1.],[8,13,4,1,3.]],threshold:0.0139184398576617,right_val:0.7130808830261231,left_val:0.4723555147647858},{features:[[15,11,1,3,-1.],[15,12,1,1,3.]],threshold:-4.5087869511917233e-004,right_val:0.5370404124259949,left_val:0.4492394030094147},{features:[[7,13,5,2,-1.],[7,14,5,1,2.]],threshold:2.5384349282830954e-004,right_val:0.5514402985572815,left_val:0.4406864047050476},{features:[[7,12,6,3,-1.],[7,13,6,1,3.]],threshold:2.2710000630468130e-003,right_val:0.5967984199523926,left_val:0.4682416915893555},{features:[[5,11,4,4,-1.],[5,13,4,2,2.]],threshold:2.4120779708027840e-003,right_val:0.3018598854541779,left_val:0.5079392194747925},{features:[[11,4,3,3,-1.],[12,4,1,3,3.]],threshold:-3.6025670851813629e-005,right_val:0.4471096992492676,left_val:0.5601037144660950},{features:[[6,4,3,3,-1.],[7,4,1,3,3.]],threshold:-7.4905529618263245e-003,right_val:0.4989944100379944,left_val:0.2207535058259964},{features:[[16,5,3,6,-1.],[17,5,1,6,3.]],threshold:-0.0175131205469370,right_val:0.5017648935317993,left_val:0.6531215906143189},{features:[[3,6,12,7,-1.],[7,6,4,7,3.]],threshold:0.1428163051605225,right_val:0.1482062041759491,left_val:0.4967963099479675},{features:[[16,5,3,6,-1.],[17,5,1,6,3.]],threshold:5.5345268920063972e-003,right_val:0.5954223871231079,left_val:0.4898946881294251},{features:[[3,13,2,3,-1.],[3,14,2,1,3.]],threshold:-9.6323591424152255e-004,right_val:0.5196074247360230,left_val:0.3927116990089417},{features:[[16,5,3,6,-1.],[17,5,1,6,3.]],threshold:-2.0370010752230883e-003,right_val:0.4884858131408691,left_val:0.5613325238227844},{features:[[1,5,3,6,-1.],[2,5,1,6,3.]],threshold:1.6614829655736685e-003,right_val:0.5578880906105042,left_val:0.4472880065441132},{features:[[1,9,18,1,-1.],[7,9,6,1,3.]],threshold:-3.1188090797513723e-003,right_val:0.5397477746009827,left_val:0.3840532898902893},{features:[[0,9,8,7,-1.],[4,9,4,7,2.]],threshold:-6.4000617712736130e-003,right_val:0.4533218145370483,left_val:0.5843983888626099},{features:[[12,11,8,2,-1.],[12,12,8,1,2.]],threshold:3.1319601112045348e-004,right_val:0.4234727919101715,left_val:0.5439221858978272},{features:[[0,11,8,2,-1.],[0,12,8,1,2.]],threshold:-0.0182220991700888,right_val:0.4958404898643494,left_val:0.1288464963436127},{features:[[9,13,2,3,-1.],[9,14,2,1,3.]],threshold:8.7969247251749039e-003,right_val:0.7153480052947998,left_val:0.4951297938823700},{features:[[4,10,12,4,-1.],[4,10,6,2,2.],[10,12,6,2,2.]],threshold:-4.2395070195198059e-003,right_val:0.5194936990737915,left_val:0.3946599960327148},{features:[[9,3,3,7,-1.],[10,3,1,7,3.]],threshold:9.7086271271109581e-003,right_val:0.6064900159835815,left_val:0.4897503852844238},{features:[[7,2,3,5,-1.],[8,2,1,5,3.]],threshold:-3.9934171363711357e-003,right_val:0.5060828924179077,left_val:0.3245440125465393},{features:[[9,12,4,6,-1.],[11,12,2,3,2.],[9,15,2,3,2.]],threshold:-0.0167850591242313,right_val:0.5203778743743897,left_val:0.1581953018903732},{features:[[8,7,3,6,-1.],[9,7,1,6,3.]],threshold:0.0182720907032490,right_val:0.6626979112625122,left_val:0.4680935144424439},{features:[[15,4,4,2,-1.],[15,5,4,1,2.]],threshold:5.6872838176786900e-003,right_val:0.3512184917926788,left_val:0.5211697816848755},{features:[[8,7,3,3,-1.],[9,7,1,3,3.]],threshold:-1.0739039862528443e-003,right_val:0.4529845118522644,left_val:0.5768386125564575},{features:[[14,2,6,4,-1.],[14,4,6,2,2.]],threshold:-3.7093870341777802e-003,right_val:0.5313581228256226,left_val:0.4507763087749481},{features:[[7,16,6,1,-1.],[9,16,2,1,3.]],threshold:-2.1110709349159151e-004,right_val:0.4333376884460449,left_val:0.5460820198059082},{features:[[15,13,2,3,-1.],[15,14,2,1,3.]],threshold:1.0670139454305172e-003,right_val:0.4078390896320343,left_val:0.5371856093406677},{features:[[8,7,3,10,-1.],[9,7,1,10,3.]],threshold:3.5943021066486835e-003,right_val:0.5643836259841919,left_val:0.4471287131309509},{features:[[11,10,2,6,-1.],[11,12,2,2,3.]],threshold:-5.1776031032204628e-003,right_val:0.5280330181121826,left_val:0.4499393105506897},{features:[[6,10,4,1,-1.],[8,10,2,1,2.]],threshold:-2.5414369883947074e-004,right_val:0.4407708048820496,left_val:0.5516173243522644},{features:[[10,9,2,2,-1.],[10,10,2,1,2.]],threshold:6.3522560521960258e-003,right_val:0.2465227991342545,left_val:0.5194190144538879},{features:[[8,9,2,2,-1.],[8,10,2,1,2.]],threshold:-4.4205080484971404e-004,right_val:0.5139682292938232,left_val:0.3830705881118774},{features:[[12,7,2,2,-1.],[13,7,1,1,2.],[12,8,1,1,2.]],threshold:7.4488727841526270e-004,right_val:0.5974786877632141,left_val:0.4891090989112854},{features:[[5,7,2,2,-1.],[5,7,1,1,2.],[6,8,1,1,2.]],threshold:-3.5116379149258137e-003,right_val:0.4768764972686768,left_val:0.7413681745529175},{features:[[13,0,3,14,-1.],[14,0,1,14,3.]],threshold:-0.0125409103929996,right_val:0.5252826809883118,left_val:0.3648819029331207},{features:[[4,0,3,14,-1.],[5,0,1,14,3.]],threshold:9.4931852072477341e-003,right_val:0.3629586994647980,left_val:0.5100492835044861},{features:[[13,4,3,14,-1.],[14,4,1,14,3.]],threshold:0.0129611501470208,right_val:0.4333561062812805,left_val:0.5232442021369934},{features:[[9,14,2,3,-1.],[9,15,2,1,3.]],threshold:4.7209449112415314e-003,right_val:0.6331052780151367,left_val:0.4648149013519287},{features:[[8,14,4,3,-1.],[8,15,4,1,3.]],threshold:-2.3119079414755106e-003,right_val:0.4531058073043823,left_val:0.5930309891700745},{features:[[4,2,3,16,-1.],[5,2,1,16,3.]],threshold:-2.8262299019843340e-003,right_val:0.5257101058959961,left_val:0.3870477974414825},{features:[[7,2,8,10,-1.],[7,7,8,5,2.]],threshold:-1.4311339473351836e-003,right_val:0.4561854898929596,left_val:0.5522503256797791},{features:[[6,14,7,3,-1.],[6,15,7,1,3.]],threshold:1.9378310535103083e-003,right_val:0.5736966729164124,left_val:0.4546220898628235},{features:[[9,2,10,12,-1.],[14,2,5,6,2.],[9,8,5,6,2.]],threshold:2.6343559147790074e-004,right_val:0.4571875035762787,left_val:0.5345739126205444},{features:[[6,7,8,2,-1.],[6,8,8,1,2.]],threshold:7.8257522545754910e-004,right_val:0.5220187902450562,left_val:0.3967815935611725},{features:[[8,13,4,6,-1.],[8,16,4,3,2.]],threshold:-0.0195504408329725,right_val:0.5243508219718933,left_val:0.2829642891883850},{features:[[6,6,1,3,-1.],[6,7,1,1,3.]],threshold:4.3914958951063454e-004,right_val:0.5899090170860291,left_val:0.4590066969394684},{features:[[16,2,4,6,-1.],[16,4,4,2,3.]],threshold:0.0214520003646612,right_val:0.2855378985404968,left_val:0.5231410861015320},{features:[[6,6,4,2,-1.],[6,6,2,1,2.],[8,7,2,1,2.]],threshold:5.8973580598831177e-004,right_val:0.5506421923637390,left_val:0.4397256970405579},{features:[[16,2,4,6,-1.],[16,4,4,2,3.]],threshold:-0.0261576101183891,right_val:0.5189175009727478,left_val:0.3135079145431519},{features:[[0,2,4,6,-1.],[0,4,4,2,3.]],threshold:-0.0139598604291677,right_val:0.5040717720985413,left_val:0.3213272988796234},{features:[[9,6,2,6,-1.],[9,6,1,6,2.]],threshold:-6.3699018210172653e-003,right_val:0.4849506914615631,left_val:0.6387544870376587},{features:[[3,4,6,10,-1.],[3,9,6,5,2.]],threshold:-8.5613820701837540e-003,right_val:0.5032019019126892,left_val:0.2759132087230682},{features:[[9,5,2,6,-1.],[9,5,1,6,2.]],threshold:9.6622901037335396e-004,right_val:0.5834879279136658,left_val:0.4685640931129456},{features:[[3,13,2,3,-1.],[3,14,2,1,3.]],threshold:7.6550268568098545e-004,right_val:0.3896422088146210,left_val:0.5175207257270813},{features:[[13,13,3,2,-1.],[13,14,3,1,2.]],threshold:-8.1833340227603912e-003,right_val:0.5208122134208679,left_val:0.2069136947393417},{features:[[2,16,10,4,-1.],[2,16,5,2,2.],[7,18,5,2,2.]],threshold:-9.3976939097046852e-003,right_val:0.4641222953796387,left_val:0.6134091019630432},{features:[[5,6,10,6,-1.],[10,6,5,3,2.],[5,9,5,3,2.]],threshold:4.8028980381786823e-003,right_val:0.4395219981670380,left_val:0.5454108119010925},{features:[[7,14,1,3,-1.],[7,15,1,1,3.]],threshold:-3.5680569708347321e-003,right_val:0.4681093990802765,left_val:0.6344485282897949},{features:[[14,16,6,3,-1.],[14,17,6,1,3.]],threshold:4.0733120404183865e-003,right_val:0.4015620052814484,left_val:0.5292683243751526},{features:[[5,4,3,3,-1.],[5,5,3,1,3.]],threshold:1.2568129459396005e-003,right_val:0.5452824831008911,left_val:0.4392988085746765},{features:[[7,4,10,3,-1.],[7,5,10,1,3.]],threshold:-2.9065010603517294e-003,right_val:0.4863379895687103,left_val:0.5898832082748413},{features:[[0,4,5,4,-1.],[0,6,5,2,2.]],threshold:-2.4409340694546700e-003,right_val:0.5247421860694885,left_val:0.4069364964962006},{features:[[13,11,3,9,-1.],[13,14,3,3,3.]],threshold:0.0248307008296251,right_val:0.3682524859905243,left_val:0.5182725787162781},{features:[[4,11,3,9,-1.],[4,14,3,3,3.]],threshold:-0.0488540083169937,right_val:0.4961281120777130,left_val:0.1307577937841415},{features:[[9,7,2,1,-1.],[9,7,1,1,2.]],threshold:-1.6110379947349429e-003,right_val:0.4872662127017975,left_val:0.6421005725860596},{features:[[5,0,6,17,-1.],[7,0,2,17,3.]],threshold:-0.0970094799995422,right_val:0.4950988888740540,left_val:0.0477693490684032},{features:[[10,3,6,3,-1.],[10,3,3,3,2.]],threshold:1.1209240183234215e-003,right_val:0.5354745984077454,left_val:0.4616267085075378},{features:[[2,2,15,4,-1.],[7,2,5,4,3.]],threshold:-1.3064090162515640e-003,right_val:0.4638805985450745,left_val:0.6261854171752930},{features:[[8,2,8,2,-1.],[12,2,4,1,2.],[8,3,4,1,2.]],threshold:4.5771620352752507e-004,right_val:0.4646640121936798,left_val:0.5384417772293091},{features:[[8,1,3,6,-1.],[8,3,3,2,3.]],threshold:-6.3149951165542006e-004,right_val:0.5130257010459900,left_val:0.3804047107696533},{features:[[9,17,2,2,-1.],[9,18,2,1,2.]],threshold:1.4505970466416329e-004,right_val:0.5664461851119995,left_val:0.4554310142993927},{features:[[0,0,2,14,-1.],[1,0,1,14,2.]],threshold:-0.0164745505899191,right_val:0.4715859889984131,left_val:0.6596958041191101},{features:[[12,0,7,3,-1.],[12,1,7,1,3.]],threshold:0.0133695797994733,right_val:0.3035964965820313,left_val:0.5195466279983521},{features:[[1,14,1,2,-1.],[1,15,1,1,2.]],threshold:1.0271780047332868e-004,right_val:0.4107066094875336,left_val:0.5229176282882690},{features:[[14,12,2,8,-1.],[15,12,1,4,2.],[14,16,1,4,2.]],threshold:-5.5311559699475765e-003,right_val:0.4960907101631165,left_val:0.6352887749671936},{features:[[1,0,7,3,-1.],[1,1,7,1,3.]],threshold:-2.6187049224972725e-003,right_val:0.5140984058380127,left_val:0.3824546039104462},{features:[[14,12,2,8,-1.],[15,12,1,4,2.],[14,16,1,4,2.]],threshold:5.0834268331527710e-003,right_val:0.6220818758010864,left_val:0.4950439929962158},{features:[[6,0,8,12,-1.],[6,0,4,6,2.],[10,6,4,6,2.]],threshold:0.0798181593418121,right_val:0.1322475969791412,left_val:0.4952335953712463},{features:[[6,1,8,9,-1.],[6,4,8,3,3.]],threshold:-0.0992265865206718,right_val:0.5008416771888733,left_val:0.7542728781700134},{features:[[5,2,2,2,-1.],[5,3,2,1,2.]],threshold:-6.5174017800018191e-004,right_val:0.5130121111869812,left_val:0.3699302971363068},{features:[[13,14,6,6,-1.],[16,14,3,3,2.],[13,17,3,3,2.]],threshold:-0.0189968496561050,right_val:0.4921202957630158,left_val:0.6689178943634033},{features:[[0,17,20,2,-1.],[0,17,10,1,2.],[10,18,10,1,2.]],threshold:0.0173468999564648,right_val:0.1859198063611984,left_val:0.4983300864696503},{features:[[10,3,2,6,-1.],[11,3,1,3,2.],[10,6,1,3,2.]],threshold:5.5082101607695222e-004,right_val:0.5522121787071228,left_val:0.4574424028396606},{features:[[5,12,6,2,-1.],[8,12,3,2,2.]],threshold:2.0056050270795822e-003,right_val:0.3856469988822937,left_val:0.5131744742393494},{features:[[10,7,6,13,-1.],[10,7,3,13,2.]],threshold:-7.7688191086053848e-003,right_val:0.5434309244155884,left_val:0.4361700117588043},{features:[[5,15,10,5,-1.],[10,15,5,5,2.]],threshold:0.0508782789111137,right_val:0.6840639710426331,left_val:0.4682720899581909},{features:[[10,4,4,10,-1.],[10,4,2,10,2.]],threshold:-2.2901780903339386e-003,right_val:0.5306099057197571,left_val:0.4329245090484619},{features:[[5,7,2,1,-1.],[6,7,1,1,2.]],threshold:-1.5715380141045898e-004,right_val:0.4378164112567902,left_val:0.5370057225227356},{features:[[10,3,6,7,-1.],[10,3,3,7,2.]],threshold:0.1051924005150795,right_val:0.0673614665865898,left_val:0.5137274265289307},{features:[[4,3,6,7,-1.],[7,3,3,7,2.]],threshold:2.7198919560760260e-003,right_val:0.5255665183067322,left_val:0.4112060964107513},{features:[[1,7,18,5,-1.],[7,7,6,5,3.]],threshold:0.0483377799391747,right_val:0.4438967108726502,left_val:0.5404623746871948},{features:[[3,17,4,3,-1.],[5,17,2,3,2.]],threshold:9.5703761326149106e-004,right_val:0.5399510860443115,left_val:0.4355969130992889},{features:[[8,14,12,6,-1.],[14,14,6,3,2.],[8,17,6,3,2.]],threshold:-0.0253712590783834,right_val:0.5031024813652039,left_val:0.5995175242424011},{features:[[0,13,20,4,-1.],[0,13,10,2,2.],[10,15,10,2,2.]],threshold:0.0524579510092735,right_val:0.1398351043462753,left_val:0.4950287938117981},{features:[[4,5,14,2,-1.],[11,5,7,1,2.],[4,6,7,1,2.]],threshold:-0.0123656298965216,right_val:0.4964106082916260,left_val:0.6397299170494080},{features:[[1,2,10,12,-1.],[1,2,5,6,2.],[6,8,5,6,2.]],threshold:-0.1458971947431564,right_val:0.4946322143077850,left_val:0.1001669988036156},{features:[[6,1,14,3,-1.],[6,2,14,1,3.]],threshold:-0.0159086007624865,right_val:0.5208340883255005,left_val:0.3312329947948456},{features:[[8,16,2,3,-1.],[8,17,2,1,3.]],threshold:3.9486068999394774e-004,right_val:0.5426102876663208,left_val:0.4406363964080811},{features:[[9,17,3,2,-1.],[10,17,1,2,3.]],threshold:-5.2454001270234585e-003,right_val:0.5189967155456543,left_val:0.2799589931964874},{features:[[5,15,4,2,-1.],[5,15,2,1,2.],[7,16,2,1,2.]],threshold:-5.0421799533069134e-003,right_val:0.4752142131328583,left_val:0.6987580060958862},{features:[[10,15,1,3,-1.],[10,16,1,1,3.]],threshold:2.9812189750373363e-003,right_val:0.6307479739189148,left_val:0.4983288943767548},{features:[[8,16,4,4,-1.],[8,16,2,2,2.],[10,18,2,2,2.]],threshold:-7.2884308174252510e-003,right_val:0.5026869773864746,left_val:0.2982333004474640},{features:[[6,11,8,6,-1.],[6,14,8,3,2.]],threshold:1.5094350092113018e-003,right_val:0.3832970857620239,left_val:0.5308442115783691},{features:[[2,13,5,2,-1.],[2,14,5,1,2.]],threshold:-9.3340799212455750e-003,right_val:0.4969817101955414,left_val:0.2037964016199112},{features:[[13,14,6,6,-1.],[16,14,3,3,2.],[13,17,3,3,2.]],threshold:0.0286671407520771,right_val:0.6928027272224426,left_val:0.5025696754455566},{features:[[1,9,18,4,-1.],[7,9,6,4,3.]],threshold:0.1701968014240265,right_val:0.1476442962884903,left_val:0.4960052967071533},{features:[[13,14,6,6,-1.],[16,14,3,3,2.],[13,17,3,3,2.]],threshold:-3.2614478841423988e-003,right_val:0.4826056063175201,left_val:0.5603063702583313},{features:[[0,2,1,6,-1.],[0,4,1,2,3.]],threshold:5.5769277969375253e-004,right_val:0.4129633009433746,left_val:0.5205562114715576},{features:[[5,0,15,20,-1.],[5,10,15,10,2.]],threshold:0.3625833988189697,right_val:0.3768612146377564,left_val:0.5221652984619141},{features:[[1,14,6,6,-1.],[1,14,3,3,2.],[4,17,3,3,2.]],threshold:-0.0116151301190257,right_val:0.4637489914894104,left_val:0.6022682785987854},{features:[[8,14,4,6,-1.],[10,14,2,3,2.],[8,17,2,3,2.]],threshold:-4.0795197710394859e-003,right_val:0.5337479114532471,left_val:0.4070447087287903},{features:[[7,11,2,1,-1.],[8,11,1,1,2.]],threshold:5.7204300537705421e-004,right_val:0.5900393128395081,left_val:0.4601835012435913},{features:[[9,17,3,2,-1.],[10,17,1,2,3.]],threshold:6.7543348995968699e-004,right_val:0.4345428943634033,left_val:0.5398252010345459},{features:[[8,17,3,2,-1.],[9,17,1,2,3.]],threshold:6.3295697327703238e-004,right_val:0.4051358997821808,left_val:0.5201563239097595},{features:[[12,14,4,6,-1.],[14,14,2,3,2.],[12,17,2,3,2.]],threshold:1.2435320531949401e-003,right_val:0.5547441244125366,left_val:0.4642387926578522},{features:[[4,14,4,6,-1.],[4,14,2,3,2.],[6,17,2,3,2.]],threshold:-4.7363857738673687e-003,right_val:0.4672552049160004,left_val:0.6198567152023315},{features:[[13,14,2,6,-1.],[14,14,1,3,2.],[13,17,1,3,2.]],threshold:-6.4658462069928646e-003,right_val:0.5019000768661499,left_val:0.6837332844734192},{features:[[5,14,2,6,-1.],[5,14,1,3,2.],[6,17,1,3,2.]],threshold:3.5017321351915598e-004,right_val:0.5363622903823853,left_val:0.4344803094863892},{features:[[7,0,6,12,-1.],[7,4,6,4,3.]],threshold:1.5754920605104417e-004,right_val:0.5732020735740662,left_val:0.4760079085826874},{features:[[0,7,12,2,-1.],[4,7,4,2,3.]],threshold:9.9774366244673729e-003,right_val:0.3635039925575256,left_val:0.5090985894203186},{features:[[10,3,3,13,-1.],[11,3,1,13,3.]],threshold:-4.1464529931545258e-004,right_val:0.4593802094459534,left_val:0.5570064783096314},{features:[[7,3,3,13,-1.],[8,3,1,13,3.]],threshold:-3.5888899583369493e-004,right_val:0.4339134991168976,left_val:0.5356845855712891},{features:[[10,8,6,3,-1.],[10,9,6,1,3.]],threshold:4.0463250479660928e-004,right_val:0.5436776876449585,left_val:0.4439803063869476},{features:[[3,11,3,2,-1.],[4,11,1,2,3.]],threshold:-8.2184787606820464e-004,right_val:0.5176299214363098,left_val:0.4042294919490814},{features:[[13,12,6,8,-1.],[16,12,3,4,2.],[13,16,3,4,2.]],threshold:5.9467419050633907e-003,right_val:0.5633779764175415,left_val:0.4927651882171631},{features:[[7,6,6,5,-1.],[9,6,2,5,3.]],threshold:-0.0217533893883228,right_val:0.4800840914249420,left_val:0.8006293773651123},{features:[[17,11,2,7,-1.],[17,11,1,7,2.]],threshold:-0.0145403798669577,right_val:0.5182222723960877,left_val:0.3946054875850678},{features:[[3,13,8,2,-1.],[7,13,4,2,2.]],threshold:-0.0405107699334621,right_val:0.4935792982578278,left_val:0.0213249903172255},{features:[[6,9,8,3,-1.],[6,10,8,1,3.]],threshold:-5.8458268176764250e-004,right_val:0.5314025282859802,left_val:0.4012795984745026},{features:[[4,3,4,3,-1.],[4,4,4,1,3.]],threshold:5.5151800625026226e-003,right_val:0.5896260738372803,left_val:0.4642418920993805},{features:[[11,3,4,3,-1.],[11,4,4,1,3.]],threshold:-6.0626221820712090e-003,right_val:0.5016477704048157,left_val:0.6502159237861633},{features:[[1,4,17,12,-1.],[1,8,17,4,3.]],threshold:0.0945358425378799,right_val:0.4126827120780945,left_val:0.5264708995819092},{features:[[11,3,4,3,-1.],[11,4,4,1,3.]],threshold:4.7315051779150963e-003,right_val:0.5892447829246521,left_val:0.4879199862480164},{features:[[4,8,6,3,-1.],[4,9,6,1,3.]],threshold:-5.2571471314877272e-004,right_val:0.5189412832260132,left_val:0.3917280137538910},{features:[[12,3,5,3,-1.],[12,4,5,1,3.]],threshold:-2.5464049540460110e-003,right_val:0.4985705912113190,left_val:0.5837599039077759},{features:[[1,11,2,7,-1.],[2,11,1,7,2.]],threshold:-0.0260756891220808,right_val:0.4955821931362152,left_val:0.1261983960866928},{features:[[15,12,2,8,-1.],[16,12,1,4,2.],[15,16,1,4,2.]],threshold:-5.4779709316790104e-003,right_val:0.5010265707969666,left_val:0.5722513794898987},{features:[[4,8,11,3,-1.],[4,9,11,1,3.]],threshold:5.1337741315364838e-003,right_val:0.4226376116275787,left_val:0.5273262262344360},{features:[[9,13,6,2,-1.],[12,13,3,1,2.],[9,14,3,1,2.]],threshold:4.7944980906322598e-004,right_val:0.5819587111473084,left_val:0.4450066983699799},{features:[[6,13,4,3,-1.],[6,14,4,1,3.]],threshold:-2.1114079281687737e-003,right_val:0.4511714875698090,left_val:0.5757653117179871},{features:[[9,12,3,3,-1.],[10,12,1,3,3.]],threshold:-0.0131799904629588,right_val:0.5160734057426453,left_val:0.1884381026029587},{features:[[5,3,3,3,-1.],[5,4,3,1,3.]],threshold:-4.7968099825084209e-003,right_val:0.4736118912696838,left_val:0.6589789986610413},{features:[[9,4,2,3,-1.],[9,5,2,1,3.]],threshold:6.7483168095350266e-003,right_val:0.3356395065784454,left_val:0.5259429812431335},{features:[[0,2,16,3,-1.],[0,3,16,1,3.]],threshold:1.4623369788751006e-003,right_val:0.4264092147350311,left_val:0.5355271100997925},{features:[[15,12,2,8,-1.],[16,12,1,4,2.],[15,16,1,4,2.]],threshold:4.7645159065723419e-003,right_val:0.5786827802658081,left_val:0.5034406781196594},{features:[[3,12,2,8,-1.],[3,12,1,4,2.],[4,16,1,4,2.]],threshold:6.8066660314798355e-003,right_val:0.6677829027175903,left_val:0.4756605029106140},{features:[[14,13,3,6,-1.],[14,15,3,2,3.]],threshold:3.6608621012419462e-003,right_val:0.4311546981334686,left_val:0.5369611978530884},{features:[[3,13,3,6,-1.],[3,15,3,2,3.]],threshold:0.0214496403932571,right_val:0.1888816058635712,left_val:0.4968641996383667},{features:[[6,5,10,2,-1.],[11,5,5,1,2.],[6,6,5,1,2.]],threshold:4.1678901761770248e-003,right_val:0.5815368890762329,left_val:0.4930733144283295},{features:[[2,14,14,6,-1.],[2,17,14,3,2.]],threshold:8.6467564105987549e-003,right_val:0.4132595062255859,left_val:0.5205205082893372},{features:[[10,14,1,3,-1.],[10,15,1,1,3.]],threshold:-3.6114078829996288e-004,right_val:0.4800927937030792,left_val:0.5483555197715759},{features:[[4,16,2,2,-1.],[4,16,1,1,2.],[5,17,1,1,2.]],threshold:1.0808729566633701e-003,right_val:0.6041421294212341,left_val:0.4689902067184448},{features:[[10,6,2,3,-1.],[10,7,2,1,3.]],threshold:5.7719959877431393e-003,right_val:0.3053277134895325,left_val:0.5171142220497131},{features:[[0,17,20,2,-1.],[0,17,10,1,2.],[10,18,10,1,2.]],threshold:1.5720770461484790e-003,right_val:0.4178803861141205,left_val:0.5219978094100952},{features:[[13,6,1,3,-1.],[13,7,1,1,3.]],threshold:-1.9307859474793077e-003,right_val:0.4812920093536377,left_val:0.5860369801521301},{features:[[8,13,3,2,-1.],[9,13,1,2,3.]],threshold:-7.8926272690296173e-003,right_val:0.4971733987331390,left_val:0.1749276965856552},{features:[[12,2,3,3,-1.],[13,2,1,3,3.]],threshold:-2.2224679123610258e-003,right_val:0.5212848186492920,left_val:0.4342589080333710},{features:[[3,18,2,2,-1.],[3,18,1,1,2.],[4,19,1,1,2.]],threshold:1.9011989934369922e-003,right_val:0.6892055273056030,left_val:0.4765186905860901},{features:[[9,16,3,4,-1.],[10,16,1,4,3.]],threshold:2.7576119173318148e-003,right_val:0.4337486028671265,left_val:0.5262191295623779},{features:[[6,6,1,3,-1.],[6,7,1,1,3.]],threshold:5.1787449046969414e-003,right_val:0.7843729257583618,left_val:0.4804069101810455},{features:[[13,1,5,2,-1.],[13,2,5,1,2.]],threshold:-9.0273341629654169e-004,right_val:0.5353423953056335,left_val:0.4120846986770630},{features:[[7,14,6,2,-1.],[7,14,3,1,2.],[10,15,3,1,2.]],threshold:5.1797959022223949e-003,right_val:0.6425960063934326,left_val:0.4740372896194458},{features:[[11,3,3,4,-1.],[12,3,1,4,3.]],threshold:-0.0101140001788735,right_val:0.5175017714500427,left_val:0.2468792051076889},{features:[[1,13,12,6,-1.],[5,13,4,6,3.]],threshold:-0.0186170600354671,right_val:0.4628978967666626,left_val:0.5756294131278992},{features:[[14,11,5,2,-1.],[14,12,5,1,2.]],threshold:5.9225959703326225e-003,right_val:0.3214271068572998,left_val:0.5169625878334045},{features:[[2,15,14,4,-1.],[2,15,7,2,2.],[9,17,7,2,2.]],threshold:-6.2945079989731312e-003,right_val:0.5141636729240418,left_val:0.3872014880180359},{features:[[3,7,14,2,-1.],[10,7,7,1,2.],[3,8,7,1,2.]],threshold:6.5353019163012505e-003,right_val:0.6310489773750305,left_val:0.4853048920631409},{features:[[1,11,4,2,-1.],[1,12,4,1,2.]],threshold:1.0878399480134249e-003,right_val:0.3723258972167969,left_val:0.5117315053939819},{features:[[14,0,6,14,-1.],[16,0,2,14,3.]],threshold:-0.0225422400981188,right_val:0.4887112975120544,left_val:0.5692740082740784},{features:[[4,11,1,3,-1.],[4,12,1,1,3.]],threshold:-3.0065660830587149e-003,right_val:0.5003992915153503,left_val:0.2556012868881226},{features:[[14,0,6,14,-1.],[16,0,2,14,3.]],threshold:7.4741272255778313e-003,right_val:0.5675926804542542,left_val:0.4810872972011566},{features:[[1,10,3,7,-1.],[2,10,1,7,3.]],threshold:0.0261623207479715,right_val:0.1777237057685852,left_val:0.4971194863319397},{features:[[8,12,9,2,-1.],[8,13,9,1,2.]],threshold:9.4352738233283162e-004,right_val:0.5491250753402710,left_val:0.4940010905265808},{features:[[0,6,20,1,-1.],[10,6,10,1,2.]],threshold:0.0333632417023182,right_val:0.2790724039077759,left_val:0.5007612109184265},{features:[[8,4,4,4,-1.],[8,4,2,4,2.]],threshold:-0.0151186501607299,right_val:0.4973031878471375,left_val:0.7059578895568848},{features:[[0,0,2,2,-1.],[0,1,2,1,2.]],threshold:9.8648946732282639e-004,right_val:0.3776761889457703,left_val:0.5128620266914368}],threshold:104.7491989135742200},{simpleClassifiers:[{features:[[5,3,10,9,-1.],[5,6,10,3,3.]],threshold:-0.0951507985591888,right_val:0.4017286896705627,left_val:0.6470757126808167},{features:[[15,2,4,10,-1.],[15,2,2,10,2.]],threshold:6.2702340073883533e-003,right_val:0.5746449232101440,left_val:0.3999822139739990},{features:[[8,2,2,7,-1.],[9,2,1,7,2.]],threshold:3.0018089455552399e-004,right_val:0.5538809895515442,left_val:0.3558770120143890},{features:[[7,4,12,1,-1.],[11,4,4,1,3.]],threshold:1.1757409665733576e-003,right_val:0.5382617712020874,left_val:0.4256534874439240},{features:[[3,4,9,1,-1.],[6,4,3,1,3.]],threshold:4.4235268433112651e-005,right_val:0.5589926838874817,left_val:0.3682908117771149},{features:[[15,10,1,4,-1.],[15,12,1,2,2.]],threshold:-2.9936920327600092e-005,right_val:0.4020367860794067,left_val:0.5452470183372498},{features:[[4,10,6,4,-1.],[7,10,3,4,2.]],threshold:3.0073199886828661e-003,right_val:0.3317843973636627,left_val:0.5239058136940002},{features:[[15,9,1,6,-1.],[15,12,1,3,2.]],threshold:-0.0105138896033168,right_val:0.5307983756065369,left_val:0.4320689141750336},{features:[[7,17,6,3,-1.],[7,18,6,1,3.]],threshold:8.3476826548576355e-003,right_val:0.6453298926353455,left_val:0.4504637122154236},{features:[[14,3,2,16,-1.],[15,3,1,8,2.],[14,11,1,8,2.]],threshold:-3.1492270063608885e-003,right_val:0.5370525121688843,left_val:0.4313425123691559},{features:[[4,9,1,6,-1.],[4,12,1,3,2.]],threshold:-1.4435649973165710e-005,right_val:0.3817971944808960,left_val:0.5326603055000305},{features:[[12,1,5,2,-1.],[12,2,5,1,2.]],threshold:-4.2855090578086674e-004,right_val:0.5382009744644165,left_val:0.4305163919925690},{features:[[6,18,4,2,-1.],[6,18,2,1,2.],[8,19,2,1,2.]],threshold:1.5062429883982986e-004,right_val:0.5544965267181397,left_val:0.4235970973968506},{features:[[2,4,16,10,-1.],[10,4,8,5,2.],[2,9,8,5,2.]],threshold:0.0715598315000534,right_val:0.2678802907466888,left_val:0.5303059816360474},{features:[[6,5,1,10,-1.],[6,10,1,5,2.]],threshold:8.4095180500298738e-004,right_val:0.5205433964729309,left_val:0.3557108938694000},{features:[[4,8,15,2,-1.],[9,8,5,2,3.]],threshold:0.0629865005612373,right_val:0.2861376106739044,left_val:0.5225362777709961},{features:[[1,8,15,2,-1.],[6,8,5,2,3.]],threshold:-3.3798629883676767e-003,right_val:0.5201697945594788,left_val:0.3624185919761658},{features:[[9,5,3,6,-1.],[9,7,3,2,3.]],threshold:-1.1810739670181647e-004,right_val:0.3959893882274628,left_val:0.5474476814270020},{features:[[5,7,8,2,-1.],[9,7,4,2,2.]],threshold:-5.4505601292476058e-004,right_val:0.5215715765953064,left_val:0.3740422129631043},{features:[[9,11,2,3,-1.],[9,12,2,1,3.]],threshold:-1.8454910023137927e-003,right_val:0.4584448933601379,left_val:0.5893052220344544},{features:[[1,0,16,3,-1.],[1,1,16,1,3.]],threshold:-4.3832371011376381e-004,right_val:0.5385351181030273,left_val:0.4084582030773163},{features:[[11,2,7,2,-1.],[11,3,7,1,2.]],threshold:-2.4000830017030239e-003,right_val:0.5293580293655396,left_val:0.3777455091476440},{features:[[5,1,10,18,-1.],[5,7,10,6,3.]],threshold:-0.0987957417964935,right_val:0.5070089101791382,left_val:0.2963612079620361},{features:[[17,4,3,2,-1.],[18,4,1,2,3.]],threshold:3.1798239797353745e-003,right_val:0.6726443767547607,left_val:0.4877632856369019},{features:[[8,13,1,3,-1.],[8,14,1,1,3.]],threshold:3.2406419632025063e-004,right_val:0.5561109781265259,left_val:0.4366911053657532},{features:[[3,14,14,6,-1.],[3,16,14,2,3.]],threshold:-0.0325472503900528,right_val:0.5308616161346436,left_val:0.3128157854080200},{features:[[0,2,3,4,-1.],[1,2,1,4,3.]],threshold:-7.7561130747199059e-003,right_val:0.4639872014522553,left_val:0.6560224890708923},{features:[[12,1,5,2,-1.],[12,2,5,1,2.]],threshold:0.0160272493958473,right_val:0.3141897916793823,left_val:0.5172680020332336},{features:[[3,1,5,2,-1.],[3,2,5,1,2.]],threshold:7.1002350523485802e-006,right_val:0.5336294770240784,left_val:0.4084446132183075},{features:[[10,13,2,3,-1.],[10,14,2,1,3.]],threshold:7.3422808200120926e-003,right_val:0.6603465080261231,left_val:0.4966922104358673},{features:[[8,13,2,3,-1.],[8,14,2,1,3.]],threshold:-1.6970280557870865e-003,right_val:0.4500182867050171,left_val:0.5908237099647522},{features:[[14,12,2,3,-1.],[14,13,2,1,3.]],threshold:2.4118260480463505e-003,right_val:0.3599720895290375,left_val:0.5315160751342773},{features:[[7,2,2,3,-1.],[7,3,2,1,3.]],threshold:-5.5300937965512276e-003,right_val:0.4996814131736755,left_val:0.2334040999412537},{features:[[5,6,10,4,-1.],[10,6,5,2,2.],[5,8,5,2,2.]],threshold:-2.6478730142116547e-003,right_val:0.4684734046459198,left_val:0.5880935788154602},{features:[[9,13,1,6,-1.],[9,16,1,3,2.]],threshold:0.0112956296652555,right_val:0.1884590983390808,left_val:0.4983777105808258},{features:[[10,12,2,2,-1.],[11,12,1,1,2.],[10,13,1,1,2.]],threshold:-6.6952878842130303e-004,right_val:0.4799019992351532,left_val:0.5872138142585754},{features:[[4,12,2,3,-1.],[4,13,2,1,3.]],threshold:1.4410680159926414e-003,right_val:0.3501011133193970,left_val:0.5131189227104187},{features:[[14,4,6,6,-1.],[14,6,6,2,3.]],threshold:2.4637870956212282e-003,right_val:0.4117639064788818,left_val:0.5339372158050537},{features:[[8,17,2,3,-1.],[8,18,2,1,3.]],threshold:3.3114518737420440e-004,right_val:0.5398246049880981,left_val:0.4313383102416992},{features:[[16,4,4,6,-1.],[16,6,4,2,3.]],threshold:-0.0335572697222233,right_val:0.5179154872894287,left_val:0.2675336897373200},{features:[[0,4,4,6,-1.],[0,6,4,2,3.]],threshold:0.0185394193977118,right_val:0.2317177057266235,left_val:0.4973869919776917},{features:[[14,6,2,3,-1.],[14,6,1,3,2.]],threshold:-2.9698139405809343e-004,right_val:0.4643664062023163,left_val:0.5529708266258240},{features:[[4,9,8,1,-1.],[8,9,4,1,2.]],threshold:-4.5577259152196348e-004,right_val:0.4469191133975983,left_val:0.5629584193229675},{features:[[8,12,4,3,-1.],[8,13,4,1,3.]],threshold:-0.0101589802652597,right_val:0.4925918877124786,left_val:0.6706212759017944},{features:[[5,12,10,6,-1.],[5,14,10,2,3.]],threshold:-2.2413829356082715e-005,right_val:0.3912901878356934,left_val:0.5239421725273132},{features:[[11,12,1,2,-1.],[11,13,1,1,2.]],threshold:7.2034963523037732e-005,right_val:0.5501788854598999,left_val:0.4799438118934631},{features:[[8,15,4,2,-1.],[8,16,4,1,2.]],threshold:-6.9267209619283676e-003,right_val:0.4698084890842438,left_val:0.6930009722709656},{features:[[6,9,8,8,-1.],[10,9,4,4,2.],[6,13,4,4,2.]],threshold:-7.6997838914394379e-003,right_val:0.5480883121490479,left_val:0.4099623858928680},{features:[[7,12,4,6,-1.],[7,12,2,3,2.],[9,15,2,3,2.]],threshold:-7.3130549862980843e-003,right_val:0.5057886242866516,left_val:0.3283475935459137},{features:[[10,11,3,1,-1.],[11,11,1,1,3.]],threshold:1.9650589674711227e-003,right_val:0.6398249864578247,left_val:0.4978047013282776},{features:[[9,7,2,10,-1.],[9,7,1,5,2.],[10,12,1,5,2.]],threshold:7.1647600270807743e-003,right_val:0.6222137212753296,left_val:0.4661160111427307},{features:[[8,0,6,6,-1.],[10,0,2,6,3.]],threshold:-0.0240786392241716,right_val:0.5222162008285523,left_val:0.2334644943475723},{features:[[3,11,2,6,-1.],[3,13,2,2,3.]],threshold:-0.0210279691964388,right_val:0.4938226044178009,left_val:0.1183653995394707},{features:[[16,12,1,2,-1.],[16,13,1,1,2.]],threshold:3.6017020465806127e-004,right_val:0.4116711020469666,left_val:0.5325019955635071},{features:[[1,14,6,6,-1.],[1,14,3,3,2.],[4,17,3,3,2.]],threshold:-0.0172197297215462,right_val:0.4664269089698792,left_val:0.6278762221336365},{features:[[13,1,3,6,-1.],[14,1,1,6,3.]],threshold:-7.8672142699360847e-003,right_val:0.5249736905097961,left_val:0.3403415083885193},{features:[[8,8,2,2,-1.],[8,9,2,1,2.]],threshold:-4.4777389848604798e-004,right_val:0.5086259245872498,left_val:0.3610411882400513},{features:[[9,9,3,3,-1.],[10,9,1,3,3.]],threshold:5.5486010387539864e-003,right_val:0.6203498244285584,left_val:0.4884265959262848},{features:[[8,7,3,3,-1.],[8,8,3,1,3.]],threshold:-6.9461148232221603e-003,right_val:0.5011097192764282,left_val:0.2625930011272430},{features:[[14,0,2,3,-1.],[14,0,1,3,2.]],threshold:1.3569870498031378e-004,right_val:0.5628312230110169,left_val:0.4340794980525971},{features:[[1,0,18,9,-1.],[7,0,6,9,3.]],threshold:-0.0458802506327629,right_val:0.4696274995803833,left_val:0.6507998704910278},{features:[[11,5,4,15,-1.],[11,5,2,15,2.]],threshold:-0.0215825606137514,right_val:0.5287616848945618,left_val:0.3826502859592438},{features:[[5,5,4,15,-1.],[7,5,2,15,2.]],threshold:-0.0202095396816731,right_val:0.5074477195739746,left_val:0.3233368098735809},{features:[[14,0,2,3,-1.],[14,0,1,3,2.]],threshold:5.8496710844337940e-003,right_val:0.4489670991897583,left_val:0.5177603960037231},{features:[[4,0,2,3,-1.],[5,0,1,3,2.]],threshold:-5.7476379879517481e-005,right_val:0.5246363878250122,left_val:0.4020850956439972},{features:[[11,12,2,2,-1.],[12,12,1,1,2.],[11,13,1,1,2.]],threshold:-1.1513100471347570e-003,right_val:0.4905154109001160,left_val:0.6315072178840637},{features:[[7,12,2,2,-1.],[7,12,1,1,2.],[8,13,1,1,2.]],threshold:1.9862831104546785e-003,right_val:0.6497151255607605,left_val:0.4702459871768951},{features:[[12,0,3,4,-1.],[13,0,1,4,3.]],threshold:-5.2719512023031712e-003,right_val:0.5227652788162231,left_val:0.3650383949279785},{features:[[4,11,3,3,-1.],[4,12,3,1,3.]],threshold:1.2662699446082115e-003,right_val:0.3877618014812470,left_val:0.5166100859642029},{features:[[12,7,4,2,-1.],[12,8,4,1,2.]],threshold:-6.2919440679252148e-003,right_val:0.5023847818374634,left_val:0.7375894188880920},{features:[[8,10,3,2,-1.],[9,10,1,2,3.]],threshold:6.7360111279413104e-004,right_val:0.5495585799217224,left_val:0.4423226118087769},{features:[[9,9,3,2,-1.],[10,9,1,2,3.]],threshold:-1.0523450328037143e-003,right_val:0.4859583079814911,left_val:0.5976396203041077},{features:[[8,9,3,2,-1.],[9,9,1,2,3.]],threshold:-4.4216238893568516e-004,right_val:0.4398930966854096,left_val:0.5955939292907715},{features:[[12,0,3,4,-1.],[13,0,1,4,3.]],threshold:1.1747940443456173e-003,right_val:0.4605058133602142,left_val:0.5349888205528259},{features:[[5,0,3,4,-1.],[6,0,1,4,3.]],threshold:5.2457437850534916e-003,right_val:0.2941577136516571,left_val:0.5049191117286682},{features:[[4,14,12,4,-1.],[10,14,6,2,2.],[4,16,6,2,2.]],threshold:-0.0245397202670574,right_val:0.5218586921691895,left_val:0.2550177872180939},{features:[[8,13,2,3,-1.],[8,14,2,1,3.]],threshold:7.3793041519820690e-004,right_val:0.5490816235542297,left_val:0.4424861073493958},{features:[[10,10,3,8,-1.],[10,14,3,4,2.]],threshold:1.4233799884095788e-003,right_val:0.4081355929374695,left_val:0.5319514274597168},{features:[[8,10,4,8,-1.],[8,10,2,4,2.],[10,14,2,4,2.]],threshold:-2.4149110540747643e-003,right_val:0.5238950252532959,left_val:0.4087659120559692},{features:[[10,8,3,1,-1.],[11,8,1,1,3.]],threshold:-1.2165299849584699e-003,right_val:0.4908052980899811,left_val:0.5674579143524170},{features:[[9,12,1,6,-1.],[9,15,1,3,2.]],threshold:-1.2438809499144554e-003,right_val:0.5256118178367615,left_val:0.4129425883293152},{features:[[10,8,3,1,-1.],[11,8,1,1,3.]],threshold:6.1942739412188530e-003,right_val:0.7313653230667114,left_val:0.5060194134712219},{features:[[7,8,3,1,-1.],[8,8,1,1,3.]],threshold:-1.6607169527560472e-003,right_val:0.4596369862556458,left_val:0.5979632139205933},{features:[[5,2,15,14,-1.],[5,9,15,7,2.]],threshold:-0.0273162592202425,right_val:0.5308842062950134,left_val:0.4174365103244782},{features:[[2,1,2,10,-1.],[2,1,1,5,2.],[3,6,1,5,2.]],threshold:-1.5845570014789701e-003,right_val:0.4519486129283905,left_val:0.5615804791450501},{features:[[14,14,2,3,-1.],[14,15,2,1,3.]],threshold:-1.5514739789068699e-003,right_val:0.5360785126686096,left_val:0.4076187014579773},{features:[[2,7,3,3,-1.],[3,7,1,3,3.]],threshold:3.8446558755822480e-004,right_val:0.5430442094802856,left_val:0.4347293972969055},{features:[[17,4,3,3,-1.],[17,5,3,1,3.]],threshold:-0.0146722598001361,right_val:0.5146093964576721,left_val:0.1659304946660996},{features:[[0,4,3,3,-1.],[0,5,3,1,3.]],threshold:8.1608882173895836e-003,right_val:0.1884745955467224,left_val:0.4961819052696228},{features:[[13,5,6,2,-1.],[16,5,3,1,2.],[13,6,3,1,2.]],threshold:1.1121659772470593e-003,right_val:0.6093816161155701,left_val:0.4868263900279999},{features:[[4,19,12,1,-1.],[8,19,4,1,3.]],threshold:-7.2603770531713963e-003,right_val:0.4690375924110413,left_val:0.6284325122833252},{features:[[12,12,2,4,-1.],[12,14,2,2,2.]],threshold:-2.4046430189628154e-004,right_val:0.4046044051647186,left_val:0.5575000047683716},{features:[[3,15,1,3,-1.],[3,16,1,1,3.]],threshold:-2.3348190006799996e-004,right_val:0.5252848267555237,left_val:0.4115762114524841},{features:[[11,16,6,4,-1.],[11,16,3,4,2.]],threshold:5.5736480280756950e-003,right_val:0.5690100789070129,left_val:0.4730072915554047},{features:[[2,10,3,10,-1.],[3,10,1,10,3.]],threshold:0.0306237693876028,right_val:0.1740095019340515,left_val:0.4971886873245239},{features:[[12,8,2,4,-1.],[12,8,1,4,2.]],threshold:9.2074798885732889e-004,right_val:0.4354872107505798,left_val:0.5372117757797241},{features:[[6,8,2,4,-1.],[7,8,1,4,2.]],threshold:-4.3550739064812660e-005,right_val:0.4347316920757294,left_val:0.5366883873939514},{features:[[10,14,2,3,-1.],[10,14,1,3,2.]],threshold:-6.6452710889279842e-003,right_val:0.5160533189773560,left_val:0.3435518145561218},{features:[[5,1,10,3,-1.],[10,1,5,3,2.]],threshold:0.0432219989597797,right_val:0.7293652892112732,left_val:0.4766792058944702},{features:[[10,7,3,2,-1.],[11,7,1,2,3.]],threshold:2.2331769578158855e-003,right_val:0.5633171200752258,left_val:0.5029315948486328},{features:[[5,6,9,2,-1.],[8,6,3,2,3.]],threshold:3.1829739455133677e-003,right_val:0.5192136764526367,left_val:0.4016092121601105},{features:[[9,8,2,2,-1.],[9,9,2,1,2.]],threshold:-1.8027749320026487e-004,right_val:0.5417919754981995,left_val:0.4088315963745117},{features:[[2,11,16,6,-1.],[2,11,8,3,2.],[10,14,8,3,2.]],threshold:-5.2934689447283745e-003,right_val:0.5243561863899231,left_val:0.4075677096843720},{features:[[12,7,2,2,-1.],[13,7,1,1,2.],[12,8,1,1,2.]],threshold:1.2750959722325206e-003,right_val:0.6387010812759399,left_val:0.4913282990455627},{features:[[9,5,2,3,-1.],[9,6,2,1,3.]],threshold:4.3385322205722332e-003,right_val:0.2947346866130829,left_val:0.5031672120094299},{features:[[9,7,3,2,-1.],[10,7,1,2,3.]],threshold:8.5250744596123695e-003,right_val:0.6308869123458862,left_val:0.4949789047241211},{features:[[5,1,8,12,-1.],[5,7,8,6,2.]],threshold:-9.4266352243721485e-004,right_val:0.4285649955272675,left_val:0.5328366756439209},{features:[[13,5,2,2,-1.],[13,6,2,1,2.]],threshold:1.3609660090878606e-003,right_val:0.5941501259803772,left_val:0.4991525113582611},{features:[[5,5,2,2,-1.],[5,6,2,1,2.]],threshold:4.4782509212382138e-004,right_val:0.5854480862617493,left_val:0.4573504030704498},{features:[[12,4,3,3,-1.],[12,5,3,1,3.]],threshold:1.3360050506889820e-003,right_val:0.5849052071571350,left_val:0.4604358971118927},{features:[[4,14,2,3,-1.],[4,15,2,1,3.]],threshold:-6.0967548051849008e-004,right_val:0.5229423046112061,left_val:0.3969388902187347},{features:[[12,4,3,3,-1.],[12,5,3,1,3.]],threshold:-2.3656780831515789e-003,right_val:0.4898357093334198,left_val:0.5808320045471191},{features:[[5,4,3,3,-1.],[5,5,3,1,3.]],threshold:1.0734340175986290e-003,right_val:0.5470039248466492,left_val:0.4351210892200470},{features:[[9,14,2,6,-1.],[10,14,1,3,2.],[9,17,1,3,2.]],threshold:2.1923359017819166e-003,right_val:0.3842903971672058,left_val:0.5355060100555420},{features:[[8,14,3,2,-1.],[9,14,1,2,3.]],threshold:5.4968618787825108e-003,right_val:0.2827191948890686,left_val:0.5018138885498047},{features:[[9,5,6,6,-1.],[11,5,2,6,3.]],threshold:-0.0753688216209412,right_val:0.5148826837539673,left_val:0.1225076019763947},{features:[[5,5,6,6,-1.],[7,5,2,6,3.]],threshold:0.0251344703137875,right_val:0.7025446295738220,left_val:0.4731766879558563},{features:[[13,13,1,2,-1.],[13,14,1,1,2.]],threshold:-2.9358599931583740e-005,right_val:0.4656086862087250,left_val:0.5430532097816467},{features:[[0,2,10,2,-1.],[0,3,10,1,2.]],threshold:-5.8355910005047917e-004,right_val:0.5190119743347168,left_val:0.4031040072441101},{features:[[13,13,1,2,-1.],[13,14,1,1,2.]],threshold:-2.6639450807124376e-003,right_val:0.5161771178245544,left_val:0.4308126866817474},{features:[[5,7,2,2,-1.],[5,7,1,1,2.],[6,8,1,1,2.]],threshold:-1.3804089976474643e-003,right_val:0.4695515930652618,left_val:0.6219829916954041},{features:[[13,5,2,7,-1.],[13,5,1,7,2.]],threshold:1.2313219485804439e-003,right_val:0.4425831139087677,left_val:0.5379363894462585},{features:[[6,13,1,2,-1.],[6,14,1,1,2.]],threshold:-1.4644179827882908e-005,right_val:0.4222503006458283,left_val:0.5281640291213989},{features:[[11,0,3,7,-1.],[12,0,1,7,3.]],threshold:-0.0128188095986843,right_val:0.5179932713508606,left_val:0.2582092881202698},{features:[[0,3,2,16,-1.],[0,3,1,8,2.],[1,11,1,8,2.]],threshold:0.0228521898388863,right_val:0.7609264254570007,left_val:0.4778693020343781},{features:[[11,0,3,7,-1.],[12,0,1,7,3.]],threshold:8.2305970136076212e-004,right_val:0.4671724140644074,left_val:0.5340992212295532},{features:[[6,0,3,7,-1.],[7,0,1,7,3.]],threshold:0.0127701200544834,right_val:0.1472366005182266,left_val:0.4965761005878449},{features:[[11,16,8,4,-1.],[11,16,4,4,2.]],threshold:-0.0500515103340149,right_val:0.5016592144966126,left_val:0.6414994001388550},{features:[[1,16,8,4,-1.],[5,16,4,4,2.]],threshold:0.0157752707600594,right_val:0.5685362219810486,left_val:0.4522320032119751},{features:[[13,5,2,7,-1.],[13,5,1,7,2.]],threshold:-0.0185016207396984,right_val:0.5137959122657776,left_val:0.2764748930931091},{features:[[5,5,2,7,-1.],[6,5,1,7,2.]],threshold:2.4626250378787518e-003,right_val:0.3795408010482788,left_val:0.5141941905021668},{features:[[18,6,2,14,-1.],[18,13,2,7,2.]],threshold:0.0629161670804024,right_val:0.6580433845520020,left_val:0.5060648918151856},{features:[[6,10,3,4,-1.],[6,12,3,2,2.]],threshold:-2.1648500478477217e-005,right_val:0.4019886851310730,left_val:0.5195388197898865},{features:[[14,7,1,2,-1.],[14,8,1,1,2.]],threshold:2.1180990152060986e-003,right_val:0.5954458713531494,left_val:0.4962365031242371},{features:[[0,1,18,6,-1.],[0,1,9,3,2.],[9,4,9,3,2.]],threshold:-0.0166348908096552,right_val:0.5175446867942810,left_val:0.3757933080196381},{features:[[14,7,1,2,-1.],[14,8,1,1,2.]],threshold:-2.8899470344185829e-003,right_val:0.5057178735733032,left_val:0.6624013781547546},{features:[[0,6,2,14,-1.],[0,13,2,7,2.]],threshold:0.0767832621932030,right_val:0.8047714829444885,left_val:0.4795796871185303},{features:[[17,0,3,12,-1.],[18,0,1,12,3.]],threshold:3.9170677773654461e-003,right_val:0.5719941854476929,left_val:0.4937882125377655},{features:[[0,6,18,3,-1.],[0,7,18,1,3.]],threshold:-0.0726706013083458,right_val:0.4943903982639313,left_val:0.0538945607841015},{features:[[6,0,14,16,-1.],[6,8,14,8,2.]],threshold:0.5403950214385986,right_val:0.1143338978290558,left_val:0.5129774212837219},{features:[[0,0,3,12,-1.],[1,0,1,12,3.]],threshold:2.9510019812732935e-003,right_val:0.5698574185371399,left_val:0.4528343975543976},{features:[[13,0,3,7,-1.],[14,0,1,7,3.]],threshold:3.4508369863033295e-003,right_val:0.4218730926513672,left_val:0.5357726812362671},{features:[[5,7,1,2,-1.],[5,8,1,1,2.]],threshold:-4.2077939724549651e-004,right_val:0.4637925922870636,left_val:0.5916172862052918},{features:[[14,4,6,6,-1.],[14,6,6,2,3.]],threshold:3.3051050268113613e-003,right_val:0.4382042884826660,left_val:0.5273385047912598},{features:[[5,7,7,2,-1.],[5,8,7,1,2.]],threshold:4.7735060798004270e-004,right_val:0.5181884765625000,left_val:0.4046528041362763},{features:[[8,6,6,9,-1.],[8,9,6,3,3.]],threshold:-0.0259285103529692,right_val:0.5089386105537415,left_val:0.7452235817909241},{features:[[5,4,6,1,-1.],[7,4,2,1,3.]],threshold:-2.9729790985584259e-003,right_val:0.5058795213699341,left_val:0.3295435905456543},{features:[[13,0,6,4,-1.],[16,0,3,2,2.],[13,2,3,2,2.]],threshold:5.8508329093456268e-003,right_val:0.5793024897575378,left_val:0.4857144057750702},{features:[[1,2,18,12,-1.],[1,6,18,4,3.]],threshold:-0.0459675192832947,right_val:0.5380653142929077,left_val:0.4312731027603149},{features:[[3,2,17,12,-1.],[3,6,17,4,3.]],threshold:0.1558596044778824,right_val:0.1684713959693909,left_val:0.5196170210838318},{features:[[5,14,7,3,-1.],[5,15,7,1,3.]],threshold:0.0151648297905922,right_val:0.6735026836395264,left_val:0.4735757112503052},{features:[[10,14,1,3,-1.],[10,15,1,1,3.]],threshold:-1.0604249546304345e-003,right_val:0.4775702953338623,left_val:0.5822926759719849},{features:[[3,14,3,3,-1.],[3,15,3,1,3.]],threshold:6.6476291976869106e-003,right_val:0.2319535017013550,left_val:0.4999198913574219},{features:[[14,4,6,6,-1.],[14,6,6,2,3.]],threshold:-0.0122311301529408,right_val:0.5262982249259949,left_val:0.4750893115997315},{features:[[0,4,6,6,-1.],[0,6,6,2,3.]],threshold:5.6528882123529911e-003,right_val:0.3561818897724152,left_val:0.5069767832756043},{features:[[12,5,4,3,-1.],[12,6,4,1,3.]],threshold:1.2977829901501536e-003,right_val:0.5619062781333923,left_val:0.4875693917274475},{features:[[4,5,4,3,-1.],[4,6,4,1,3.]],threshold:0.0107815898954868,right_val:0.6782308220863342,left_val:0.4750770032405853},{features:[[18,0,2,6,-1.],[18,2,2,2,3.]],threshold:2.8654779307544231e-003,right_val:0.4290736019611359,left_val:0.5305461883544922},{features:[[8,1,4,9,-1.],[10,1,2,9,2.]],threshold:2.8663428965955973e-003,right_val:0.5539351105690002,left_val:0.4518479108810425},{features:[[6,6,8,2,-1.],[6,6,4,2,2.]],threshold:-5.1983320154249668e-003,right_val:0.5434188842773438,left_val:0.4149119853973389},{features:[[6,5,4,2,-1.],[6,5,2,1,2.],[8,6,2,1,2.]],threshold:5.3739990107715130e-003,right_val:0.6507657170295715,left_val:0.4717896878719330},{features:[[10,5,2,3,-1.],[10,6,2,1,3.]],threshold:-0.0146415298804641,right_val:0.5161777138710022,left_val:0.2172164022922516},{features:[[9,5,1,3,-1.],[9,6,1,1,3.]],threshold:-1.5042580344015732e-005,right_val:0.4298836886882782,left_val:0.5337383747100830},{features:[[9,10,2,2,-1.],[9,11,2,1,2.]],threshold:-1.1875660129589960e-004,right_val:0.5582447052001953,left_val:0.4604594111442566},{features:[[0,8,4,3,-1.],[0,9,4,1,3.]],threshold:0.0169955305755138,right_val:0.0738800764083862,left_val:0.4945895075798035},{features:[[6,0,8,6,-1.],[6,3,8,3,2.]],threshold:-0.0350959412753582,right_val:0.4977591037750244,left_val:0.7005509138107300},{features:[[1,0,6,4,-1.],[1,0,3,2,2.],[4,2,3,2,2.]],threshold:2.4217350874096155e-003,right_val:0.5477694272994995,left_val:0.4466265141963959},{features:[[13,0,3,7,-1.],[14,0,1,7,3.]],threshold:-9.6340337768197060e-004,right_val:0.5313338041305542,left_val:0.4714098870754242},{features:[[9,16,2,2,-1.],[9,17,2,1,2.]],threshold:1.6391130338888615e-004,right_val:0.5342242121696472,left_val:0.4331546127796173},{features:[[11,4,6,10,-1.],[11,9,6,5,2.]],threshold:-0.0211414601653814,right_val:0.5204498767852783,left_val:0.2644700109958649},{features:[[0,10,19,2,-1.],[0,11,19,1,2.]],threshold:8.7775202700868249e-004,right_val:0.4152742922306061,left_val:0.5208349823951721},{features:[[9,5,8,9,-1.],[9,8,8,3,3.]],threshold:-0.0279439203441143,right_val:0.5018811821937561,left_val:0.6344125270843506},{features:[[4,0,3,7,-1.],[5,0,1,7,3.]],threshold:6.7297378554940224e-003,right_val:0.3500863909721375,left_val:0.5050438046455383},{features:[[8,6,4,12,-1.],[10,6,2,6,2.],[8,12,2,6,2.]],threshold:0.0232810396701097,right_val:0.6968677043914795,left_val:0.4966318011283875},{features:[[0,2,6,4,-1.],[0,4,6,2,2.]],threshold:-0.0116449799388647,right_val:0.5049629807472229,left_val:0.3300260007381439},{features:[[8,15,4,3,-1.],[8,16,4,1,3.]],threshold:0.0157643090933561,right_val:0.7321153879165649,left_val:0.4991598129272461},{features:[[8,0,3,7,-1.],[9,0,1,7,3.]],threshold:-1.3611479662358761e-003,right_val:0.5160670876502991,left_val:0.3911735117435455},{features:[[9,5,3,4,-1.],[10,5,1,4,3.]],threshold:-8.1522337859496474e-004,right_val:0.4949719011783600,left_val:0.5628911256790161},{features:[[8,5,3,4,-1.],[9,5,1,4,3.]],threshold:-6.0066272271797061e-004,right_val:0.4550595879554749,left_val:0.5853595137596130},{features:[[7,6,6,1,-1.],[9,6,2,1,3.]],threshold:4.9715518252924085e-004,right_val:0.5443599224090576,left_val:0.4271470010280609},{features:[[7,14,4,4,-1.],[7,14,2,2,2.],[9,16,2,2,2.]],threshold:2.3475370835512877e-003,right_val:0.3887656927108765,left_val:0.5143110752105713},{features:[[13,14,4,6,-1.],[15,14,2,3,2.],[13,17,2,3,2.]],threshold:-8.9261569082736969e-003,right_val:0.4971720874309540,left_val:0.6044502258300781},{features:[[7,8,1,8,-1.],[7,12,1,4,2.]],threshold:-0.0139199104160070,right_val:0.5000367760658264,left_val:0.2583160996437073},{features:[[16,0,2,8,-1.],[17,0,1,4,2.],[16,4,1,4,2.]],threshold:1.0209949687123299e-003,right_val:0.5560358166694641,left_val:0.4857374131679535},{features:[[2,0,2,8,-1.],[2,0,1,4,2.],[3,4,1,4,2.]],threshold:-2.7441629208624363e-003,right_val:0.4645777046680450,left_val:0.5936884880065918},{features:[[6,1,14,3,-1.],[6,2,14,1,3.]],threshold:-0.0162001308053732,right_val:0.5193495154380798,left_val:0.3163014948368073},{features:[[7,9,3,10,-1.],[7,14,3,5,2.]],threshold:4.3331980705261230e-003,right_val:0.3458878993988037,left_val:0.5061224102973938},{features:[[9,14,2,2,-1.],[9,15,2,1,2.]],threshold:5.8497930876910686e-004,right_val:0.5870177745819092,left_val:0.4779017865657806},{features:[[7,7,6,8,-1.],[7,11,6,4,2.]],threshold:-2.2466450463980436e-003,right_val:0.5374773144721985,left_val:0.4297851026058197},{features:[[9,7,3,6,-1.],[9,10,3,3,2.]],threshold:2.3146099410951138e-003,right_val:0.4640969932079315,left_val:0.5438671708106995},{features:[[7,13,3,3,-1.],[7,14,3,1,3.]],threshold:8.7679121643304825e-003,right_val:0.6771789789199829,left_val:0.4726893007755280},{features:[[9,9,2,2,-1.],[9,10,2,1,2.]],threshold:-2.2448020172305405e-004,right_val:0.5428048968315125,left_val:0.4229173064231873},{features:[[0,1,18,2,-1.],[6,1,6,2,3.]],threshold:-7.4336021207273006e-003,right_val:0.4683673977851868,left_val:0.6098880767822266},{features:[[7,1,6,14,-1.],[7,8,6,7,2.]],threshold:-2.3189240600913763e-003,right_val:0.4424242079257965,left_val:0.5689436793327332},{features:[[1,9,18,1,-1.],[7,9,6,1,3.]],threshold:-2.1042178850620985e-003,right_val:0.5187087059020996,left_val:0.3762221038341522},{features:[[9,7,2,2,-1.],[9,7,1,2,2.]],threshold:4.6034841216169298e-004,right_val:0.5771207213401794,left_val:0.4699405133724213},{features:[[9,3,2,9,-1.],[10,3,1,9,2.]],threshold:1.0547629790380597e-003,right_val:0.5601701736450195,left_val:0.4465216994285584},{features:[[18,14,2,3,-1.],[18,15,2,1,3.]],threshold:8.7148818420246243e-004,right_val:0.3914709091186523,left_val:0.5449805259704590},{features:[[7,11,3,1,-1.],[8,11,1,1,3.]],threshold:3.3364820410497487e-004,right_val:0.5645738840103149,left_val:0.4564009010791779},{features:[[10,8,3,4,-1.],[11,8,1,4,3.]],threshold:-1.4853250468149781e-003,right_val:0.4692778885364533,left_val:0.5747377872467041},{features:[[7,14,3,6,-1.],[8,14,1,6,3.]],threshold:3.0251620337367058e-003,right_val:0.3762814104557037,left_val:0.5166196823120117},{features:[[10,8,3,4,-1.],[11,8,1,4,3.]],threshold:5.0280741415917873e-003,right_val:0.6151527166366577,left_val:0.5002111792564392},{features:[[7,8,3,4,-1.],[8,8,1,4,3.]],threshold:-5.8164511574432254e-004,right_val:0.4390751123428345,left_val:0.5394598245620728},{features:[[7,9,6,9,-1.],[7,12,6,3,3.]],threshold:0.0451415292918682,right_val:0.2063035964965820,left_val:0.5188326835632324},{features:[[0,14,2,3,-1.],[0,15,2,1,3.]],threshold:-1.0795620037242770e-003,right_val:0.5137907266616821,left_val:0.3904685080051422},{features:[[11,12,1,2,-1.],[11,13,1,1,2.]],threshold:1.5995999274309725e-004,right_val:0.5427504181861877,left_val:0.4895322918891907},{features:[[4,3,8,3,-1.],[8,3,4,3,2.]],threshold:-0.0193592701107264,right_val:0.4773507118225098,left_val:0.6975228786468506},{features:[[0,4,20,6,-1.],[0,4,10,6,2.]],threshold:0.2072550952434540,right_val:0.3034991919994354,left_val:0.5233635902404785},{features:[[9,14,1,3,-1.],[9,15,1,1,3.]],threshold:-4.1953290929086506e-004,right_val:0.4460186064243317,left_val:0.5419396758079529},{features:[[8,14,4,3,-1.],[8,15,4,1,3.]],threshold:2.2582069505006075e-003,right_val:0.6027408838272095,left_val:0.4815764129161835},{features:[[0,15,14,4,-1.],[0,17,14,2,2.]],threshold:-6.7811207845807076e-003,right_val:0.5183305740356445,left_val:0.3980278968811035},{features:[[1,14,18,6,-1.],[1,17,18,3,2.]],threshold:0.0111543098464608,right_val:0.4188759922981262,left_val:0.5431231856346130},{features:[[0,0,10,6,-1.],[0,0,5,3,2.],[5,3,5,3,2.]],threshold:0.0431624315679073,right_val:0.6522961258888245,left_val:0.4738228023052216}],threshold:105.7611007690429700}],size:[20,20],tilted:false};\r\n}\r\n",
    "module.exports = left_eye_filter\n\nfunction left_eye_filter () {\n  return  {\"real\": [1.5419219943717721, 0.40010880110578706, -0.79043641265342957, -1.2685464969238938, 0.39878117336167285, -1.0673489992245377, -0.079880838229404019, -0.45374680224191505, -0.043474097938900787, -0.31125662385352687, 0.17092430376098702, -0.29613086164846153, 0.5616469648110296, -1.559786848789493, 0.64513037997492662, -1.2899747976234162, 1.1761667998175334, -1.2899747976233551, 0.64513037997490474, -1.5597868487894897, 0.56164696481102505, -0.29613086164845964, 0.17092430376099094, -0.31125662385352959, -0.043474097938900787, -0.45374680224191177, -0.079880838229404658, -1.0673489992245357, 0.39878117336167307, -1.2685464969238942, -0.79043641265343012, 0.40010880110578717, -1.3820969331049027, 0.069560471269205768, -1.9786339579213206, -1.9807415717551982, -0.78667274410450883, -1.2217002325587256, -0.19150029104902774, -0.35131617290773243, -0.17646388464205803, -0.16672095020503441, -0.092298612924566523, -0.028899376452253527, -0.1314555696102146, -0.32892265898101813, -0.40987148655061206, 0.11741827111366547, -0.67254330182605138, -0.46007833291519956, -0.67215259521101001, -0.44871907432473013, -0.034749316729184583, 0.0055639281302433969, -0.17675902360981591, -0.26196208085032191, -0.36301254306387037, -0.33546767337818123, -0.6458889740799838, -1.1981932989987978, 0.12372650763830917, -1.4996172161865935, -2.4084298023013888, -2.0505291279591722, -1.7249706159518585, -2.277646289702639, -3.1259631743419591, -2.9656385065342015, -2.8480835086962011, -1.4260964500310189, -0.61792590829173544, -0.2611655301498782, -0.38519889843539723, -0.17511899827006483, -0.32808050503227176, 0.0076800871037463036, -0.18710828510427668, 0.1976534820339281, -0.55444453100465052, 0.14583567590328381, -0.69844971117515287, -0.90188577233526623, -0.53500016384583371, -0.044420751861669799, 0.014727914354086128, -0.28084584584371913, -0.29890408748685848, -0.39431380149336548, -0.39569215798819307, -0.74351999988258299, -0.82502198370631752, -1.851491897104155, -0.74302378668934244, 0.21156442062863762, -3.3061472495599986, -1.7990472945779568, -2.2193764251732282, -2.3438802466919251, -3.3615971067123311, -3.5383249085863708, -2.2639673745086588, -2.0271757806780748, -0.75242583405872232, -0.30143411016839378, -0.3625272253546275, -0.25489431004647689, -0.18928491561467081, -0.1179891518538482, 0.027920290231533224, -0.035472107498143821, -0.29008721857562259, -0.3604588674139817, -0.39156143807433802, -0.82222257402876564, -0.44979914971695928, -0.098136330355476253, 0.065628582466229365, -0.33607304327303128, -0.32161201323497779, -0.41856090178723965, -0.64028425429629054, -0.7766428172010218, -1.3946448661671447, -2.2603422126144683, -0.38769722219534525, -0.95341593939478653, -1.412952994959813, -2.3602336858020432, -1.2756392437278019, -2.0983496132652038, -2.5682454610054268, -2.8791053946930378, -2.1809972632688095, -0.84281293847776861, -0.75998936793718697, -0.18584599820380068, -0.30105748355308259, -0.16098142942852958, -0.13792125740417191, -0.089790022871128708, -0.12321821342876504, -0.1128661923016878, -0.3924098378001975, -0.5780902167586397, -0.48685989567066695, -0.53565359443296234, -0.051036689850526382, -0.0068547033925117689, -0.18963405157839419, -0.22514761090777807, -0.35555823460888908, -0.46670603976585517, -0.56179541485257889, -0.7495095888115163, -1.4772075422260349, -1.5836466114968029, -2.3846549454186694, -1.4884613952536236, -1.8237453905245253, -1.6712324532934877, -1.5169157844507295, -1.6930052820597281, -2.1023566589276004, -2.2062031109308458, -1.7945281756942255, -0.26457398838912649, 0.22038139379151148, -0.43479836723775234, -0.19830827357221226, -0.18018565146479498, -0.097060879184795737, -0.10088329756370379, -0.063069709957272527, -0.17970932516041177, -0.1943040732581543, -0.37970560392277619, -0.47302301606251812, -0.30366967948052181, -0.064732391018915397, -0.08902516330269715, -0.082000200083027344, -0.22965854401457736, -0.32035624605031326, -0.31836783196552437, -0.40132058236311119, -0.65601747033470859, -0.59040483751417483, -1.8503084663080034, -1.8694842425148914, -1.9326778896298584, -1.6301578422923519, -1.4332006785118301, -1.305707665299106, -1.364200787821644, -1.5357935460809622, -1.6161992336951241, -0.74003518668370516, -0.29423824173210689, 0.025934598230976654, -0.043349004411304674, -0.25408021803022468, -0.066965686484977499, -0.075717498698635255, 0.007057189465364498, -0.042171356658338113, -0.036938315661768008, -0.34221561581756049, -0.20400167508805764, -0.37417116097079772, -0.25039909487805356, -0.070874531394524931, -0.0569972852039487, -0.067238206950403182, -0.17397285212300442, -0.20428337307808273, -0.23651154356493315, -0.33356498933276568, -0.07339749754226077, -0.70367959806681601, -0.82403680021595049, -1.6058616381755235, -1.6192427030685497, -1.5705638815427956, -1.4659201063980019, -0.95504179549951018, -0.97237526162739873, -1.0460191987834688, -0.91465668941265721, -0.60548232361398524, 0.01898438364933451, -0.19419044456729498, -0.039627851124307223, 0.0012357796666701798, -0.078110822445325079, 0.0048626364920250518, -0.040449089662379589, -0.0035054269587873454, -0.13387544724730729, -0.10031131456276647, -0.25968674675684189, -0.20555329767005767, -0.26509289948725284, -0.038788452621647145, -0.076999891872251258, -0.071661433038976499, -0.14182240789719938, -0.1654673053291095, -0.19859450279267193, -0.053382326365810369, -0.2156585383674445, -0.045097357284793499, -0.62449818579949512, -0.92624906744917224, -1.0411254782363617, -1.122035196738675, -1.0607692164246043, -0.57723811773534028, -0.63187735896388075, -0.54813311204421922, -0.55320252101738743, -0.30197299587482401, -0.047213249757838388, 0.082808930467383288, -0.067715134483222431, -0.01022881748368659, 0.042038311258956552, -0.063371767399980669, 0.029161890169972702, -0.091396316586836127, -0.0034600735070754811, -0.12424052925006424, -0.24432996418012101, -0.26521664175359499, -0.22745980283820413, -0.14361316535317664, -0.00075904203100577935, -0.020936168457862139, -0.14205665196423617, -0.19024248288823023, -0.079686122362245204, -0.15016133237735926, 0.049598910651295514, -0.11760486834511712, -0.1837522251545049, -0.38594205494114608, -0.53542516436999843, -0.57340991730807989, -0.52753621424018138, -0.23151163972118355, -0.22295096919949259, -0.33704349161770436, -0.26165852514054583, -0.13898866968588663, 0.034596483191139484, -0.012631210076789067, 0.047371310076345617, -0.038651839330751551, -0.0019970761454430018, 0.063048845258375494, -0.1124891762554399, 0.08556992539656616, -0.21043659051868199, -0.19223333969456, -0.39082994830035861, -0.19294368007162721, -0.41025595439938572, -0.17178084419175166, -0.010933041190555012, -0.089512936152074493, -0.21569610281495066, -0.09144756671688016, -0.19525258909505316, -0.029753598134641936, -0.021307245660079924, 0.029087127940551009, 0.037511290653097842, -0.20600990120705839, -0.26967580750352926, -0.21000923681194664, -0.28209018858285628, -0.11925518789339556, -0.24869348141289982, -0.21025892926356746, -0.15567029136726124, -0.040546729108395907, -0.0050266153100547101, 0.030710887069787196, -0.0061104340245858278, 0.0369376092260571, -0.054862661367900321, 0.013297880203253048, 0.19659447375886394, -0.2499491329142558, -0.062959699002865757, -0.53055029095956008, -0.38784811281629444, -0.53891285075962392, -0.41886712861154285, -0.099230097260325875, -0.16474199810952628, -0.28693665642627014, -0.0095667980850221105, -0.32619954993450928, -0.08627491478166284, -0.073253161755714766, 0.015634174038690329, 0.082440536547531792, 0.025411878261881942, -0.11318909242737961, -0.1270560226842935, -0.21657212936164139, -0.13993873549611191, -0.37510275237622831, -0.26472923111076219, -0.24460131567533192, -0.14127652303494026, -0.050428686591045178, 0.041347840374190772, -0.0061780445153000636, 0.0073990345210250153, -0.014062739037014381, 0.14348925152561878, -0.015321787554403667, 0.0017746672356015968, 0.25165135427361052, -0.626463828190993, -0.48167134330805639, -1.045863293770664, -0.69512591788493194, -0.44532127384388254, -0.28479724025368391, -0.39470955087317983, 0.20227228344720469, -0.53909912073488953, -0.12025629051789474, -0.1899243750597305, -0.048474806721595133, 0.060764771353227762, 0.090648151782516159, 0.091608208912697275, 0.0036582478916540977, -0.22492530005263131, -0.27295314658024766, -0.35559738025257359, -0.62902925014412947, -0.57166411974881004, -0.37258895173129181, -0.22157638610464933, 0.022494427132080854, 0.014769425415166171, 0.003526808789406817, -0.011346909674078769, 0.050921170848348289, 0.090308541799219627, 0.37260817254533324, -0.25909871392159911, -0.42379280974334355, -0.095380647808568128, -1.1906083748893519, -0.78599914414892469, -0.95277914352730275, -0.63659778359422337, -0.98026015008952749, 0.48173198285916102, -0.60092009018055192, -0.10265418316164113, -0.39913639006279306, -0.17310908908773887, -0.0194191171632387, 0.054047965289179878, 0.1388529643463832, 0.15661099050145999, -0.10898263774416243, -0.33291231456737602, -0.59569027865888713, -0.69353081584948972, -1.0999707493347484, -0.74392084753736687, -0.49074781214158159, -0.065190556733852961, 0.012289768389229717, 0.024577513704595676, 0.0040302804696096322, 0.036047756292976456, 0.058236765637246286, 0.13893846256790621, 0.036944676036934632, 0.41686279554239464, -0.85232286388185818, -1.2988315127624981, -0.47352779677305168, -0.81763632541546793, -0.77384457803621831, -1.4256240004519281, 0.52588993532360684, -0.89821724022902683, 0.1591911967653899, -0.55046596772346867, -0.30980016041271019, -0.16709614007114884, -0.046029700131955266, 0.044793268150423983, 0.1689242242845459, 0.14412365934528507, -0.0088250071313367359, -0.36778545124666312, -0.79393844517732104, -1.1610479066529615, -0.76523210008850662, -0.63009858032048405, -0.13947023057344932, -0.017173105577524262, 0.039030007688455846, 0.014491273083805401, 0.039792542943837252, 0.054072846696920814, 0.11729310469925348, 0.053609281522667675, 0.0081549498718087084, -0.30910813452845548, 0.25944224899607843, -1.3584842180322938, -1.5885570490138659, -0.65759582794618221, -1.139869490652734, 0.70928264080594694, -1.9674198903133462, 0.37712664425406606, -0.84336038390578949, -0.47788074719428036, -0.18342000086663721, -0.18811394573901796, -0.055050027645985648, 0.045043056834335606, 0.11486303559854361, 0.22023958716404868, 0.14735402009444676, -0.27894427087197998, -0.73080536953129638, -0.76794305693297227, -0.37355919765840223, 0.12353986794322802, 0.090505348376311842, 0.14069908672094206, 0.087373214380278855, 0.023353946735568523, 0.031400559920396587, 0.079550230446202241, 0.084927161382185437, 0.040777158255349423, -0.16274954314482293, -0.41184413435479567, -0.71871288822574875, 0.55302907456342854, -1.5309493464500674, -2.9026104205694736, 0.42043303599508353, -1.7138106264793671, 0.29513888249127102, -1.2517216433630918, -0.66769942176516839, -0.28576739334390183, -0.24127777006787937, -0.10778095858902549, -0.036092425009198861, 0.021519213385077923, 0.13414694961717147, 0.16917378957839613, 0.17307922682581758, 0.076246758829015673, -0.047904835134272621, -0.27544262702406924, 0.61826249566563185, 0.26987423123693399, 0.2085883517320696, 0.26073426210721973, 0.12070625812911842, 0.062945582093309679, 0.083649573916505432, 0.049688095345785867, 0.019564357607843069, -0.046035817476596949, -0.13409074070830324, -0.49027201814294552, -0.47756457321420159, -0.74403675135427549, -0.3080068432033089, -0.043712438842705037, -4.735594317158907, -0.043712438842706695, -0.30800684320330962, -0.74403675135427572, -0.47756457321420304, -0.49027201814294813, -0.13409074070830412, -0.046035817476598156, 0.019564357607843069, 0.049688095345786006, 0.083649573916506056, 0.062945582093310845, 0.12070625812911921, 0.26073426210722073, 0.20858835173207019, 0.26987423123693399, -0.37355919765836759, -0.27544262702403433, -0.047904835134273127, 0.076246758829012523, 0.17307922682581853, 0.16917378957839499, 0.13414694961716844, 0.02151921338507657, -0.036092425009199861, -0.1077809585890261, -0.24127777006787943, -0.2857673933439015, -0.66769942176516905, -1.2517216433630949, 0.29513888249127429, -1.7138106264793713, 0.42043303599507681, -2.902610420569474, -1.5309493464500692, 0.55302907456342232, -0.71871288822575019, -0.41184413435479833, -0.16274954314482265, 0.04077715825534866, 0.08492716138218645, 0.079550230446203143, 0.031400559920398419, 0.023353946735571576, 0.08737321438028138, 0.14069908672095732, 0.090505348376334033, 0.1235398679432393, -0.76523210008847808, -0.76794305693296139, -0.73080536953128505, -0.27894427087197604, 0.1473540200944477, 0.22023958716404682, 0.11486303559854165, 0.045043056834333829, -0.055050027645986453, -0.18811394573901843, -0.18342000086663854, -0.47788074719428042, -0.84336038390579149, 0.37712664425406617, -1.9674198903133469, 0.70928264080593695, -1.1398694906527307, -0.65759582794619398, -1.588557049013867, -1.3584842180322987, 0.25944224899607732, -0.30910813452845781, 0.0081549498718086911, 0.053609281522667279, 0.11729310469925426, 0.054072846696921202, 0.039792542943838709, 0.014491273083807311, 0.039030007688458185, -0.017173105577517028, -0.13947023057343994, -0.63009858032045107, -1.0999707493347308, -1.1610479066529467, -0.79393844517731305, -0.3677854512466584, -0.0088250071313340107, 0.14412365934528559, 0.16892422428454401, 0.044793268150420118, -0.046029700131956147, -0.16709614007115095, -0.30980016041271097, -0.55046596772347045, 0.15919119676539073, -0.8982172402290286, 0.52588993532360329, -1.4256240004519327, -0.77384457803621687, -0.8176363254154656, -0.47352779677305679, -1.2988315127625027, -0.85232286388185829, 0.41686279554239525, 0.036944676036935756, 0.13893846256790574, 0.058236765637246675, 0.036047756292977066, 0.0040302804696111128, 0.02457751370459911, 0.012289768389232913, -0.065190556733844662, -0.49074781214156804, -0.74392084753735632, -0.62902925014412903, -0.69353081584948562, -0.59569027865888302, -0.33291231456737491, -0.10898263774416028, 0.15661099050145985, 0.13885296434638142, 0.054047965289177706, -0.019419117163239467, -0.17310908908773912, -0.39913639006279433, -0.10265418316163986, -0.60092009018055315, 0.48173198285915786, -0.98026015008952594, -0.63659778359422126, -0.9527791435273002, -0.78599914414892458, -1.190608374889349, -0.095380647808570002, -0.42379280974334488, -0.25909871392159683, 0.37260817254533357, 0.09030854179921953, 0.050921170848348372, -0.011346909674079158, 0.0035268087894081549, 0.014769425415168456, 0.022494427132082863, -0.22157638610464575, -0.37258895173129003, -0.5716641197488066, -0.37510275237622537, -0.35559738025257059, -0.27295314658024672, -0.22492530005262792, 0.0036582478916564426, 0.091608208912696387, 0.090648151782514966, 0.060764771353224882, -0.048474806721595647, -0.18992437505973167, -0.12025629051789351, -0.53909912073488875, 0.20227228344720258, -0.39470955087317799, -0.28479724025368247, -0.44532127384387832, -0.69512591788493272, -1.04586329377066, -0.48167134330805861, -0.62646382819099156, 0.25165135427361029, 0.0017746672356018336, -0.0153217875544032, 0.14348925152561842, -0.01406273903701487, 0.0073990345210243587, -0.0061780445152985596, 0.04134784037419488, -0.050428686591041855, -0.1412765230349349, -0.2446013156753272, -0.26472923111076024, -0.11925518789339257, -0.13993873549610955, -0.21657212936163839, -0.1270560226842922, -0.11318909242737903, 0.025411878261882927, 0.082440536547530169, 0.015634174038688685, -0.073253161755715501, -0.086274914781661965, -0.326199549934509, -0.0095667980850238903, -0.28693665642627003, -0.16474199810952764, -0.099230097260324029, -0.41886712861154318, -0.53891285075962314, -0.38784811281629461, -0.53055029095956219, -0.062959699002866631, -0.24994913291425488, 0.1965944737588636, 0.013297880203252755, -0.054862661367901897, 0.036937609226056677, -0.0061104340245862225, 0.030710887069788338, -0.005026615310052167, -0.040546729108393256, -0.15567029136725916, -0.21025892926356554, -0.24869348141289621, -0.23151163972117689, -0.28209018858284918, -0.21000923681193823, -0.26967580750352416, -0.20600990120705304, 0.037511290653099091, 0.029087127940549885, -0.02130724566008323, -0.029753598134642099, -0.19525258909505444, -0.091447566716882075, -0.21569610281495041, -0.089512936152075853, -0.010933041190555782, -0.17178084419175305, -0.41025595439938806, -0.19294368007162768, -0.39082994830036216, -0.19223333969456258, -0.21043659051868269, 0.085569925396567076, -0.11248917625543933, 0.063048845258374231, -0.0019970761454456269, -0.038651839330752197, 0.047371310076345617, -0.012631210076786959, 0.034596483191142599, -0.13898866968588444, -0.26165852514053983, -0.33704349161769737, -0.22295096919948695, -0.57723811773534028, -0.52753621424018138, -0.57340991730807944, -0.53542516436999865, -0.38594205494114614, -0.1837522251545064, -0.11760486834511884, 0.049598910651293758, -0.15016133237735926, -0.07968612236224891, -0.1902424828882312, -0.14205665196423831, -0.020936168457862579, -0.00075904203100844866, -0.14361316535317845, -0.2274598028382093, -0.26521664175359499, -0.24432996418012529, -0.12424052925006639, -0.0034600735070760831, -0.09139631658683596, 0.029161890169972428, -0.063371767399980516, 0.042038311258955005, -0.01022881748368659, -0.067715134483221959, 0.082808930467383746, -0.047213249757837236, -0.3019729958748239, -0.55320252101738743, -0.548133112044219, -0.63187735896388053, -0.95504179549950285, -1.060769216424599, -1.1220351967386673, -1.0411254782363524, -0.92624906744916458, -0.62449818579949246, -0.045097357284792555, -0.21565853836744897, -0.053382326365811708, -0.19859450279267432, -0.16546730532911214, -0.14182240789720132, -0.07166143303897729, -0.076999891872253062, -0.038788452621649434, -0.2650928994872585, -0.20555329767005678, -0.25968674675684078, -0.10031131456276626, -0.13387544724730568, -0.0035054269587865765, -0.040449089662379971, 0.0048626364920241281, -0.078110822445325467, 0.0012357796666695618, -0.039627851124306598, -0.19419044456729473, 0.018984383649339364, -0.60548232361397991, -0.91465668941264988, -1.0460191987834631, -0.97237526162739263, -1.3057076652991049, -1.4659201063979992, -1.5705638815427927, -1.6192427030685486, -1.6058616381755215, -0.82403680021595249, -0.70367959806681868, -0.073397497542269388, -0.33356498933276529, -0.23651154356493967, -0.2042833730780847, -0.17397285212300875, -0.067238206950403417, -0.056997285203952995, -0.070874531394526111, -0.25039909487805306, -0.37417116097079761, -0.20400167508805389, -0.34221561581755761, -0.036938315661763657, -0.042171356658337315, 0.0070571894653653896, -0.075717498698634964, -0.066965686484977194, -0.25408021803022474, -0.043349004411301621, 0.025934598230977574, -0.29423824173210122, -0.74003518668370272, -1.6161992336951192, -1.5357935460809593, -1.3642007878216427, -1.5169157844507262, -1.4332006785118279, -1.6301578422923491, -1.932677889629856, -1.8694842425148879, -1.8503084663080056, -0.59040483751417916, -0.65601747033471336, -0.40132058236311047, -0.31836783196552787, -0.32035624605031593, -0.22965854401457814, -0.082000200083028219, -0.089025163302698024, -0.064732391018913552, -0.30366967948051288, -0.4730230160625184, -0.37970560392275871, -0.19430407325814622, -0.1797093251603995, -0.063069709957271444, -0.10088329756370083, -0.097060879184794432, -0.18018565146479387, -0.19830827357221226, -0.43479836723774673, 0.22038139379151372, -0.26457398838911428, -1.79452817569422, -2.2062031109308391, -2.102356658927595, -1.6930052820597257, -1.2756392437278008, -1.6712324532934884, -1.8237453905245253, -1.4884613952536252, -2.384654945418673, -1.5836466114968115, -1.4772075422260404, -0.74950958881152596, -0.561795414852579, -0.46670603976586306, -0.35555823460889052, -0.22514761090777982, -0.18963405157839525, -0.0068547033925124142, -0.051036689850529192, -0.53565359443295624, -0.48685989567066656, -0.57809021675862349, -0.39240983780018618, -0.11286619230167973, -0.12321821342876334, -0.089790022871127112, -0.13792125740417074, -0.16098142942852883, -0.30105748355308298, -0.18584599820379807, -0.75998936793718352, -0.8428129384777584, -2.1809972632688073, -2.8791053946930352, -2.5682454610054237, -2.0983496132652038, -2.219376425173226, -2.3602336858020396, -1.4129529949598048, -0.95341593939478875, -0.38769722219534936, -2.2603422126144772, -1.394644866167148, -0.77664281720103345, -0.64028425429629032, -0.41856090178724664, -0.3216120132349809, -0.33607304327303461, 0.065628582466230781, -0.098136330355478765, -0.44979914971695495, -0.82222257402878096, -0.39156143807433802, -0.36045886741397631, -0.29008721857562392, -0.035472107498135542, 0.027920290231535812, -0.117989151853845, -0.1892849156146684, -0.25489431004647656, -0.3625272253546275, -0.30143411016838906, -0.75242583405872021, -2.0271757806780628, -2.2639673745086539, -3.5383249085863659, -3.361597106712324, -2.3438802466919229, -1.7249706159518579, -1.7990472945779559, -3.3061472495599995, 0.21156442062862166, -0.74302378668934399, -1.8514918971041745, -0.82502198370632651, -0.74351999988260331, -0.39569215798819279, -0.3943138014933833, -0.29890408748686254, -0.28084584584372846, 0.01472791435408881, -0.04442075186168376, -0.53500016384583715, -0.90188577233528688, -0.69844971117515353, 0.14583567590324595, -0.5544445310046473, 0.1976534820339324, -0.18710828510427244, 0.0076800871037496377, -0.32808050503226982, -0.17511899827005836, -0.38519889843539723, -0.26116553014987143, -0.61792590829173255, -1.4260964500310052, -2.8480835086962002, -2.9656385065341997, -3.1259631743419583, -2.2776462897026373, -1.3820969331049018, -2.0505291279591713, -2.4084298023013879, -1.4996172161865962, 0.12372650763830863, -1.1981932989988076, -0.64588897407998824, -0.33546767337818667, -0.36301254306387043, -0.26196208085033179, -0.17675902360982099, 0.0055639281302357606, -0.034749316729180774, -0.44871907432473696, -0.67215259521100923, -0.46007833291523831, -0.67254330182605182, 0.11741827111366224, -0.409871486550618, -0.32892265898101625, -0.13145556961021479, -0.028899376452251727, -0.092298612924564649, -0.16672095020503341, -0.17646388464205828, -0.35131617290772521, -0.19150029104902661, -1.2217002325587201, -0.7866727441045076, -1.9807415717551959, -1.978633957921319, 0.069560471269209931], \"bottom\": {\"real\": [4103.3252596935745, 31959.928439656338, 10854.934870050551, 5174.7646941682715, 2670.3793024702013, 1512.8812431609856, 751.72119813508266, 487.34157279751093, 286.27976884850017, 202.21445228809756, 139.363320073941, 96.326676625874271, 67.416513392704019, 55.036039361563731, 42.617455049491909, 37.327841235406673, 35.198800209060273, 37.327841235406588, 42.617455049491802, 55.036039361563766, 67.416513392704019, 96.326676625874285, 139.36332007394108, 202.21445228809804, 286.27976884850017, 487.34157279751093, 751.72119813508289, 1512.8812431609856, 2670.3793024702018, 5174.7646941682751, 10854.934870050551, 31959.928439656363, 12454.694619943468, 7821.5833902765553, 5473.1790170642225, 2925.2286142376206, 1403.2127508507554, 917.05530556073552, 556.73350878905819, 335.58154911349368, 222.7562369115075, 161.71079893305554, 119.4497628246793, 75.609007514321249, 55.496087080936569, 43.998829489125107, 34.725029965122339, 29.983374804996487, 29.187336608781969, 30.714909872552553, 33.135728528562289, 38.780040560556557, 50.11926248444739, 62.426609296740132, 93.916765363567279, 123.96413175241418, 177.16967383039952, 250.50030243800805, 399.94920918463373, 596.1485322845399, 914.24633406931139, 1871.6210271277439, 4518.4223121248042, 13565.815861293135, 16084.742683461694, 10028.519769850123, 2736.2851033168113, 1377.4551350842332, 614.08174831750455, 382.39730464420114, 237.0105878631189, 156.24359018004319, 129.95938769710136, 95.53783206710068, 72.004092864891931, 47.804301653843083, 38.41781199466849, 32.452048622414502, 26.753427300507923, 23.772936248165699, 23.138404805980134, 23.598476471031617, 24.755859033283485, 28.713323989162731, 33.395537201677122, 40.850586549891439, 58.649881806718739, 74.872968711973769, 93.465129226367807, 123.19419955144703, 174.75706127058839, 262.71291650117263, 321.82068054258934, 657.05253635266399, 2163.5932265202309, 10212.960963472207, 3792.0213246064613, 2759.3366542985627, 1627.1011647050395, 788.44977202016776, 362.8509317865861, 253.90720770691448, 163.04342130809295, 117.95146004773997, 90.766106703902594, 66.207745096840526, 48.204553381452804, 35.429206551568903, 28.049881805648454, 23.25027473117818, 20.778936642061399, 19.004228801577, 17.585642163629327, 17.698181326434501, 18.806836162280465, 20.329571180523736, 23.456998427374465, 27.472702254518477, 37.193120035742723, 49.117252584083957, 59.574829012615233, 73.59994664128709, 112.97176733843995, 181.91972084309376, 284.0343016488693, 486.29648203694052, 857.05287855361007, 2037.977143592303, 2057.7285052573056, 2152.5952706253152, 1395.1090523951752, 736.25297680000074, 343.98700964912916, 189.68478304615005, 127.37774106216496, 91.12789293157843, 73.667255133763959, 55.964360327653644, 39.482567042532949, 28.14219415335706, 21.278934963706885, 18.193385040510105, 16.473354788100497, 15.086583853495943, 14.403945056404867, 14.533202056236952, 15.306988390608382, 16.092687824041843, 18.097466979870337, 20.289280537832838, 26.201109009342694, 34.023571220637564, 41.620492531599325, 50.685682074964014, 82.560701981631325, 127.19888958323958, 237.89761616945128, 410.06312322518994, 1062.2303232610248, 1612.0404058137353, 2295.1409914972487, 1787.3905923922546, 1192.2295048012345, 614.24882525880628, 260.82616895243024, 126.23242010647614, 84.151076288810984, 67.709414992782712, 60.122571559472298, 42.830591238304876, 28.733103940874788, 20.365121706656215, 16.211112474155353, 14.072758594539286, 13.483685068827034, 12.859628868618824, 11.868475605254234, 11.903201306554562, 12.816996745648828, 13.065794209061782, 14.312459824747068, 16.296926608708432, 20.657711991677495, 27.653390070235432, 33.593110413967857, 40.672720076575544, 55.856624618502167, 103.16047843117397, 179.23484372919035, 453.7513605151255, 902.26285048256875, 1683.7179352249004, 1784.083505146898, 1577.4265763170067, 936.66309122894188, 441.20892337587179, 176.43359667751182, 98.093971741535682, 65.995944695036641, 53.240295707495449, 45.85166507919449, 32.407485359783081, 22.496202298890402, 16.965613714417799, 13.731573445856062, 12.28236966845588, 11.747735381447885, 11.213125876643861, 10.807806034266576, 10.840341477375139, 11.066245600125107, 11.119452781179984, 12.424913044930788, 14.610027556462221, 16.887227742677396, 22.29462391228396, 27.978157381323118, 31.991250392971789, 44.052658881876532, 76.109568327798371, 159.13944268405785, 318.39207128278571, 686.00323178071869, 1336.6568589814267, 1043.0649603599104, 984.78746182807288, 618.0395600950327, 289.32426118556657, 132.98214831862998, 71.520048430881175, 52.57629039600819, 41.525598741467476, 33.633912722813989, 27.031255662449681, 19.489513580793098, 14.812681614273632, 12.21137274400836, 10.893625186679536, 10.482989068673637, 10.105487112246305, 9.7116899243817354, 9.9488069804828818, 10.161347795217756, 10.513274350469635, 11.294150924355744, 12.914730156139361, 14.478861048855546, 19.021661277112585, 23.907610167423496, 27.23573455134931, 38.742976413983023, 62.869223125902629, 111.92503010834605, 213.21062569137553, 433.61330953226366, 726.70269845820769, 562.21861410525219, 539.290746631297, 362.9446461846826, 211.46669660189423, 107.79772661917396, 60.676668375567573, 41.743276533116536, 34.42369696468284, 31.26708433258414, 25.313030406949355, 18.452791878453507, 13.956644256748325, 11.043046695375654, 10.111101652499672, 9.4550360444473061, 9.2429593469396529, 8.9521911222399257, 9.2321124164010211, 9.1908041669169815, 9.5662827353227868, 10.506864865879585, 11.825879962774797, 13.52813582962821, 15.999059082232355, 19.794027285196304, 22.478845287715099, 32.163272384867753, 47.951984523863096, 81.309242866655126, 150.93744536633105, 263.84630525991662, 439.27951033199258, 309.78719189559973, 306.63257299287005, 244.19689848939953, 151.98869039704036, 91.330482004276163, 57.352753322013349, 38.709160706067429, 33.087086449001383, 29.826655436967027, 23.987725148031473, 16.89184234468231, 13.041947079601194, 10.535809562752126, 9.5359471621683909, 8.9374483496855426, 8.5672643122912326, 8.4572735895659434, 8.4602804400971099, 8.5543457526330293, 9.3823763336699937, 10.377230417708629, 11.799673812944503, 12.361176855966248, 14.786798351390814, 16.739331260686697, 20.590148031359199, 25.753571174908508, 38.382893067866803, 63.23013835373618, 105.62437218489313, 175.68359833526657, 256.05708017959813, 224.80770864957879, 228.96753655549054, 172.54966320095522, 116.26546821946491, 80.46990226978717, 53.844334876610212, 37.483534347728245, 31.075867215997253, 26.284110672635684, 20.645029038002825, 15.025930043703783, 11.738276392873866, 10.201438772469425, 8.8203445227279982, 8.4945509856995365, 8.1968728409344909, 8.1790777304419588, 7.908377156922052, 8.6785477295074038, 9.6473715156890378, 10.339435934253908, 10.728035799158873, 11.983620383388951, 13.687783504221503, 16.433795900162693, 18.309125668572698, 22.485075799802843, 31.764684376383052, 49.270779583367755, 77.729851956279916, 123.50059845139852, 179.77043479461938, 159.57955623939222, 154.53329869380329, 127.96891349444883, 91.96783661678981, 66.921744646417011, 48.818287955893446, 36.591061653526779, 27.834277069623926, 23.041902152181589, 18.358713894245302, 13.567338391039883, 11.281789781943191, 9.6038295455647198, 8.7333277563772516, 8.338123667351045, 7.8992088061869676, 7.7104322426775909, 7.9983869985641034, 8.5436438490902269, 9.4432158844800043, 9.7870344410918424, 10.423788563863184, 11.253535869282553, 13.327727562718719, 15.178485067808285, 17.337135682195893, 21.668177060872456, 29.324826866357235, 41.492753218636352, 60.042185621507166, 90.318134916215342, 130.8805255687621, 104.24612656823803, 108.8028525877362, 89.555745560157249, 69.785669575239666, 56.746590174428, 44.171218069814536, 32.39838941697333, 25.182252759236459, 21.610810960419155, 16.972539478480535, 13.238333358456819, 10.614964653675054, 9.3806927946307859, 8.7492814832421075, 8.135298996501481, 7.634398163782139, 7.4852869889479292, 7.8316993609624435, 8.3853957415274643, 9.2315742305614634, 9.8389441629514209, 10.386606043801919, 11.354519695989614, 13.10793814373473, 15.240615596988986, 17.58979203150065, 21.461767190818147, 26.661531554562984, 36.123337028978582, 50.320731869274383, 69.065609719997795, 87.442260857354199, 76.677643276575949, 72.689147636714068, 65.50785565022079, 58.297658406357961, 49.558598741148941, 39.192968104211104, 29.954333787314212, 23.9458863540046, 19.99476230299754, 16.735792774046942, 12.901585018586687, 10.289994503175569, 9.3977765822679924, 8.6704196287803228, 7.8828328381527575, 7.5341478839019471, 7.4312929200041102, 7.7985159766257679, 8.1869060912414078, 9.142118635191288, 9.830770779287306, 10.340589147553608, 11.281171263863113, 12.984935438318947, 15.107976469419242, 18.19770629294057, 20.668346478928893, 25.761496132514932, 32.251424266134499, 39.95295492008993, 51.369438078625848, 65.569299562662465, 55.468849468729523, 55.86542097352833, 55.101138782973663, 50.531848368674723, 43.701470536966781, 35.866381440857431, 28.439396618258566, 22.42863349391925, 18.945030358082761, 15.596977301337661, 12.206893729284205, 10.050508612628137, 9.5473939482322869, 8.6463276280830179, 7.910774588392556, 7.2755514089661562, 7.5482842032534565, 7.5443879419641391, 7.9636187803325598, 8.9922015447577355, 9.6351997849989068, 10.0402383165895, 11.706284711344862, 13.336194440398188, 15.639893484781382, 17.791763978880017, 20.83131115781941, 25.6818621728188, 31.387128642704546, 37.143166049555219, 44.038766386780296, 52.904506937405849, 48.059389050535145, 50.072432061388255, 49.115010315515249, 44.160423468831148, 38.440953181308423, 32.35840674752788, 26.251111011761232, 21.081922570464979, 17.515101530242855, 14.10261621013594, 11.438986216849498, 10.422223192105227, 9.76207732514108, 8.7746319169344158, 7.5939451837729885, 7.2605949806802883, 7.4766919496025244, 7.419064545103371, 8.0187357229163059, 8.9266344512172839, 9.6975643711848107, 10.35689464395745, 11.451859179394017, 13.10319606057651, 15.460942026724263, 18.825021564083144, 22.773162722002358, 26.906890973713775, 31.803276985208164, 37.82902190094245, 42.388788349798304, 44.620105679799558, 48.859277780953818, 46.136110292205181, 41.908361785717766, 39.521022744549988, 35.052294933716347, 29.181343166303421, 23.802472557875006, 19.955746539759069, 16.22743816874862, 13.086681034223906, 11.226909204888067, 10.616041272149978, 9.8385492842648201, 8.6563005846195669, 7.8952678290472065, 7.2762149925656852, 7.3094046208482961, 7.276214992565686, 7.8952678290472083, 8.656300584619574, 9.8385492842648219, 10.616041272149991, 11.226909204888063, 13.086681034223904, 16.22743816874862, 19.955746539759044, 23.802472557874989, 29.181343166303414, 35.052294933716361, 39.521022744549988, 41.908361785717766, 46.136110292205167, 48.059389050535053, 44.620105679799494, 42.388788349798226, 37.82902190094255, 31.803276985208186, 26.906890973713825, 22.773162722002368, 18.825021564083173, 15.460942026724263, 13.103196060576508, 11.451859179394024, 10.356894643957441, 9.6975643711848196, 8.9266344512172751, 8.0187357229163005, 7.4190645451033674, 7.4766919496025226, 7.2605949806802919, 7.5939451837729957, 8.7746319169344176, 9.7620773251410817, 10.42222319210523, 11.438986216849505, 14.102616210135931, 17.515101530242841, 21.081922570464972, 26.251111011761218, 32.358406747527845, 38.44095318130838, 44.160423468831063, 49.115010315515164, 50.072432061388007, 55.468849468729232, 52.90450693740565, 44.038766386780239, 37.143166049555234, 31.387128642704567, 25.681862172818796, 20.831311157819414, 17.79176397888002, 15.639893484781378, 13.336194440398192, 11.706284711344864, 10.040238316589498, 9.6351997849989122, 8.9922015447577301, 7.9636187803325527, 7.5443879419641293, 7.5482842032534556, 7.2755514089661553, 7.9107745883925578, 8.6463276280830215, 9.5473939482322869, 10.050508612628141, 12.206893729284213, 15.596977301337661, 18.945030358082761, 22.428633493919239, 28.439396618258566, 35.866381440857388, 43.70147053696676, 50.531848368674645, 55.101138782973628, 55.865420973528131, 76.677643276575822, 65.569299562662337, 51.369438078625784, 39.952954920090001, 32.251424266134514, 25.761496132514949, 20.668346478928903, 18.19770629294057, 15.107976469419244, 12.984935438318949, 11.28117126386311, 10.340589147553612, 9.8307707792872954, 9.1421186351912915, 8.1869060912414096, 7.7985159766257599, 7.4312929200041067, 7.5341478839019365, 7.882832838152761, 8.6704196287803175, 9.3977765822679942, 10.289994503175565, 12.901585018586699, 16.735792774046928, 19.99476230299755, 23.945886354004585, 29.954333787314209, 39.19296810421109, 49.55859874114887, 58.297658406357826, 65.507855650220662, 72.689147636713827, 104.24612656823788, 87.442260857354213, 69.065609719997752, 50.320731869274368, 36.123337028978554, 26.661531554563005, 21.461767190818144, 17.589792031500657, 15.24061559698899, 13.107938143734735, 11.354519695989618, 10.386606043801917, 9.8389441629514156, 9.2315742305614528, 8.3853957415274607, 7.8316993609624372, 7.4852869889479301, 7.6343981637821372, 8.1352989965014757, 8.7492814832421111, 9.3806927946307876, 10.614964653675061, 13.238333358456819, 16.972539478480542, 21.610810960419155, 25.182252759236462, 32.39838941697333, 44.171218069814465, 56.746590174427972, 69.785669575239609, 89.555745560157177, 108.80285258773613, 159.57955623939191, 130.8805255687619, 90.318134916215342, 60.042185621507201, 41.492753218636388, 29.32482686635726, 21.668177060872456, 17.3371356821959, 15.178485067808294, 13.327727562718726, 11.253535869282553, 10.423788563863175, 9.7870344410918424, 9.4432158844800025, 8.5436438490902233, 7.9983869985640963, 7.7104322426775891, 7.8992088061869596, 8.338123667351045, 8.7333277563772533, 9.6038295455647145, 11.281789781943189, 13.567338391039879, 18.358713894245295, 23.041902152181613, 27.834277069623926, 36.591061653526772, 48.818287955893382, 66.921744646416983, 91.967836616789555, 127.96891349444861, 154.53329869380323, 224.80770864957842, 179.77043479461912, 123.50059845139837, 77.729851956279958, 49.27077958336772, 31.764684376383045, 22.485075799802868, 18.309125668572733, 16.433795900162703, 13.6877835042215, 11.983620383388955, 10.72803579915886, 10.339435934253904, 9.6473715156890254, 8.6785477295073967, 7.9083771569220449, 8.1790777304419553, 8.1968728409344909, 8.4945509856995347, 8.8203445227279857, 10.201438772469423, 11.738276392873869, 15.02593004370379, 20.645029038002832, 26.284110672635681, 31.075867215997253, 37.483534347728245, 53.844334876610127, 80.46990226978717, 116.26546821946468, 172.54966320095502, 228.96753655548974, 309.78719189559854, 256.05708017959756, 175.68359833526623, 105.62437218489312, 63.230138353736059, 38.382893067866796, 25.753571174908501, 20.590148031359234, 16.739331260686704, 14.786798351390802, 12.361176855966249, 11.799673812944498, 10.377230417708628, 9.3823763336699955, 8.5543457526330204, 8.4602804400970992, 8.4572735895659417, 8.567264312291222, 8.9374483496855408, 9.5359471621683873, 10.535809562752121, 13.041947079601202, 16.891842344682331, 23.987725148031487, 29.826655436966995, 33.087086449001376, 38.709160706067401, 57.35275332201325, 91.33048200427605, 151.98869039703999, 244.19689848939879, 306.63257299286875, 562.21861410525219, 439.27951033199281, 263.84630525991662, 150.93744536633125, 81.309242866655154, 47.951984523863167, 32.163272384867753, 22.478845287715121, 19.794027285196304, 15.999059082232373, 13.528135829628219, 11.82587996277479, 10.50686486587958, 9.5662827353227868, 9.190804166916978, 9.2321124164010211, 8.9521911222399257, 9.2429593469396458, 9.4550360444473043, 10.111101652499666, 11.043046695375656, 13.956644256748326, 18.452791878453535, 25.313030406949409, 31.26708433258414, 34.423696964682833, 41.743276533116529, 60.676668375567509, 107.79772661917396, 211.46669660189391, 362.94464618468271, 539.29074663129688, 1043.064960359907, 726.70269845820621, 433.61330953226252, 213.21062569137561, 111.92503010834588, 62.869223125902685, 38.742976413983001, 27.235734551349324, 23.907610167423499, 19.021661277112635, 14.478861048855546, 12.91473015613936, 11.29415092435573, 10.513274350469626, 10.161347795217747, 9.9488069804828747, 9.7116899243817407, 10.105487112246305, 10.48298906867363, 10.893625186679529, 12.211372744008356, 14.812681614273641, 19.489513580793123, 27.031255662449723, 33.633912722813953, 41.52559874146754, 52.576290396008147, 71.520048430881019, 132.98214831862995, 289.32426118556515, 618.03956009503077, 984.7874618280689, 1784.0835051468939, 1336.6568589814267, 686.00323178071801, 318.39207128278593, 159.1394426840578, 76.109568327798428, 44.05265888187656, 31.991250392971853, 27.978157381323108, 22.294623912284028, 16.8872277426774, 14.610027556462216, 12.424913044930783, 11.119452781179971, 11.066245600125109, 10.840341477375128, 10.807806034266576, 11.213125876643852, 11.747735381447885, 12.282369668455885, 13.731573445856061, 16.965613714417831, 22.496202298890438, 32.407485359783124, 45.85166507919449, 53.24029570749542, 65.99594469503667, 98.093971741535469, 176.43359667751176, 441.208923375871, 936.66309122894131, 1577.4265763170022, 2295.1409914972464, 1683.7179352249, 902.26285048256875, 453.75136051512629, 179.23484372919026, 103.16047843117398, 55.856624618502074, 40.67272007657553, 33.59311041396785, 27.653390070235471, 20.65771199167747, 16.296926608708404, 14.312459824747059, 13.065794209061782, 12.816996745648842, 11.903201306554557, 11.868475605254236, 12.859628868618808, 13.483685068827036, 14.072758594539282, 16.21111247415536, 20.365121706656261, 28.733103940874788, 42.830591238304876, 60.122571559472277, 67.709414992782641, 84.151076288810941, 126.23242010647601, 260.82616895243001, 614.24882525880446, 1192.2295048012338, 1787.3905923922525, 2057.7285052573061, 1612.0404058137367, 1062.2303232610243, 410.06312322519068, 237.89761616945111, 127.19888958323968, 82.560701981631325, 50.685682074964042, 41.620492531599325, 34.023571220637599, 26.201109009342684, 20.289280537832823, 18.09746697987034, 16.092687824041846, 15.306988390608383, 14.533202056236956, 14.40394505640487, 15.086583853495929, 16.47335478810048, 18.193385040510101, 21.278934963706888, 28.142194153357082, 39.482567042533006, 55.964360327653644, 73.667255133763959, 91.127892931578486, 127.37774106216477, 189.68478304614982, 343.98700964912905, 736.25297679999983, 1395.1090523951759, 2152.5952706253147, 3792.0213246064582, 2037.977143592301, 857.05287855360893, 486.29648203694126, 284.03430164886925, 181.91972084309373, 112.97176733844, 73.599946641287119, 59.574829012615204, 49.117252584084042, 37.193120035742723, 27.472702254518456, 23.456998427374469, 20.329571180523697, 18.806836162280476, 17.698181326434526, 17.585642163629327, 19.004228801577025, 20.77893664206141, 23.250274731178163, 28.04988180564844, 35.429206551568925, 48.204553381452833, 66.207745096840512, 90.766106703902594, 117.95146004774013, 163.04342130809306, 253.90720770691391, 362.85093178658599, 788.44977202016594, 1627.1011647050398, 2759.3366542985605, 16084.742683461691, 10212.960963472211, 2163.5932265202296, 657.05253635266433, 321.82068054258923, 262.71291650117286, 174.75706127058845, 123.19419955144714, 93.465129226367836, 74.87296871197394, 58.649881806718732, 40.850586549891496, 33.395537201677108, 28.713323989162756, 24.755859033283489, 23.59847647103166, 23.138404805980127, 23.77293624816566, 26.753427300507926, 32.452048622414509, 38.417811994668497, 47.804301653843162, 72.004092864892002, 95.537832067100879, 129.95938769710136, 156.24359018004333, 237.01058786311899, 382.39730464420052, 614.08174831750478, 1377.4551350842296, 2736.2851033168104, 10028.51976985012, 12454.694619943462, 13565.815861293133, 4518.4223121248006, 1871.6210271277425, 914.24633406931184, 596.14853228454001, 399.94920918463339, 250.50030243800833, 177.16967383039946, 123.96413175241405, 93.91676536356745, 62.426609296740118, 50.119262484447404, 38.780040560556571, 33.135728528562332, 30.714909872552628, 29.187336608781973, 29.983374804996448, 34.725029965122346, 43.998829489125086, 55.496087080936618, 75.609007514321277, 119.44976282467937, 161.7107989330556, 222.75623691150756, 335.58154911349339, 556.73350878905831, 917.05530556073529, 1403.2127508507556, 2925.2286142376206, 5473.1790170642225, 7821.5833902765453], \"imag\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}, \"imag\": [0.0, 1.2364045139795619, -1.417097645517349, -0.56399113050110405, 0.44612204752934542, -0.22857396866743723, -0.12233724123958876, -0.22175063370253431, -0.081847654478992143, -0.082144528420219798, -0.016319194688300422, -0.22782269816808789, -0.31553723757062957, -0.34627737582788948, 1.2289873494343531, 0.23714731979244019, 0.0, -0.23714731979246589, -1.2289873494343397, 0.34627737582788415, 0.31553723757063035, 0.2278226981680877, 0.01631919468830003, 0.082144528420217924, 0.081847654478992143, 0.22175063370252604, 0.12233724123959235, 0.22857396866743548, -0.4461220475293452, 0.56399113050110417, 1.4170976455173483, -1.2364045139795607, 1.3606412475160685, 1.4411916754234004, -0.33639737707180672, -0.40059289889731398, 0.077869450453742065, 0.11933000679564014, -0.37020072416606636, -0.12600631152419078, -0.29291723130603109, -0.050683391882318747, -0.2123566898458312, -0.16517843825664788, -0.37438920939802389, 0.24863698196016526, 0.3956337373323095, 0.63308466384569972, -0.42643957249522613, -0.28749903579454716, -0.42301568032975828, 0.27971623762695519, 0.37808744252168813, 0.15296582393741001, 0.10558339349178479, 0.088135922159038316, 0.16705843369252343, 0.44192642538865684, 0.29915225181421068, -0.047649837051313024, -0.91046045526812369, 2.0668504460046964, 1.0236217631956717, 0.095775027331123308, 0.74327388531916394, -0.034562131954570079, 0.86361123753821734, 0.14688086473050152, -0.48040960369964397, 0.72553155869356101, -0.87865322612555963, -0.4386512882244577, -0.48573187070285989, -0.32017932907631874, -0.2830749986604581, -0.26990648117356825, 0.02650526715020339, 0.070485969368273949, 0.54370981678608021, -0.067938463814195812, 0.03776680164210118, -0.5672727000472354, 0.70317235961628322, -0.021133356436660328, 0.38778419454697149, -0.021237638325898506, 0.22272564345822293, -0.028529610958430065, 0.38389116569218468, 0.54015192300945081, 0.60890484535134959, -0.58851980199844323, -0.44257995715790832, -0.31054780878465871, 0.29452233058397137, 1.4203730522981519, 0.55042973333868539, 1.0635980503754177, -0.33223282315731317, 0.34444399750770754, 1.4812987845914649, 0.28203486996779931, -0.50640814880924923, -0.63152717265524028, -0.629560147993244, -0.38143909917016799, -0.26024004494781861, -0.19111004712688462, -0.0074049384249937926, 0.048145781851611912, 0.1775395908501845, -0.010766872600667563, -0.30557543109041663, -0.12790446781789691, 0.26497067484017217, 0.49718432792560446, 0.10847923107858634, 0.18362798444374009, 0.075793328725680426, 0.060915837919074359, 0.19352569039908019, 0.72484131059467238, 0.44769863619371908, 0.65727781823869813, -2.7705947112358387, -1.8545676439466314, 1.2534804319442749, -0.33201271766592177, -0.88179245186152566, -0.49191197464707653, 0.25061306335904526, 0.36434278784189494, 1.1059306596340364, 0.5161851914994362, -0.56259342729123341, -0.79818525223670012, -0.50614275317411506, -0.33450192958610769, -0.24220392956380443, -0.29363217368931438, -0.008975674876931768, 0.015702042401798396, 0.0043287613096781611, 0.11769772351691517, 0.14847974776257877, -0.070404205425901215, 0.15992872157624444, 0.12352253662711207, 0.22950814490677918, 0.17507285276321555, 0.13747467644410705, -0.011397583876153142, 0.1103654239578318, 0.24404333943616102, 1.1434123865171273, -0.60566186502851971, -1.3365493166122577, -1.1338250057068979, -1.8155993788135394, -1.0591766157447149, -0.69010247253016843, -0.46612626705839738, -0.20353239335470796, 0.51663850122650623, 0.2659701357580968, -0.10657803670351902, -0.69730138646619577, -0.60106744735123385, -0.33542800506255299, -0.30564289179799509, -0.26672832014897818, -0.19552146385155383, -0.070818253229817343, 0.24716165183995586, 0.24871001073085031, 0.087906272749659523, -0.066392764898707615, 0.11463822183417864, -0.097387114548935505, 0.203187369929616, 0.14292038700683402, 0.20736891492564988, 0.013685307258532538, -0.024371827339033106, -0.07233585420108031, 0.49291782026044645, 0.048917424863979306, 0.2263553910474094, 0.10839909954530379, -1.1957108711898896, -1.074771579950879, -1.1175823884839045, -0.23901621577757862, -0.12877260884038383, 0.23623861798820722, 0.17111767858219226, 0.46208690546761177, -0.23679486634226876, -0.53178862418379869, -0.34021620386249335, -0.23658495591681358, -0.22275756609764855, -0.20572232603908905, -0.14494733127712761, 0.042569660785953992, 0.077733070765218709, 0.20558191361174552, 0.031719635617051253, -0.031869312918226284, 0.0092446671691655703, 0.056907964871031128, 0.0068114015565279478, 0.20608602740074444, 0.023033890597355222, 0.064944626021130644, -0.089711600875347838, 0.051877409795188095, -0.22207073062343796, 0.24248276916859771, 0.82932242402320455, -0.0013771249391571728, -0.059139017637367147, -0.22067925957890699, -0.040068334939789486, 0.30677005181582889, 0.34490255487274107, 0.22221882441368751, 0.30818729583490434, 0.041656273199714877, 0.04389672863559383, -0.30032839778423015, -0.24246246508902861, -0.17809969240648099, -0.14126159805998126, -0.15553553242798068, -0.11510723629505018, 0.024565620333015844, 0.099324973861333238, 0.11314958231531824, 0.10920785431914558, -0.0027478677647314949, -0.002197448124614016, -0.069940656171551499, 0.14656177726216579, 0.078770189361086429, 0.10241250352514093, -0.021646587213105684, 0.019211160710794505, -0.26281055993233693, -0.055146819140509458, 0.35375643597531126, 0.22411418130009836, 0.3875457037899096, 0.25423051056794166, 0.30581901500051717, 0.085911462662090085, 0.39107302489471046, 0.24699055160378858, 0.29387297238508514, 0.15373347718831995, -0.002984582508486469, -0.017260207971634491, 0.072827255227658205, -0.062089135258224848, -0.11929552297831249, -0.14454547803177953, -0.095268264507681985, -0.10089614648569632, 0.048761457544342565, 0.09609679137720413, 0.10529567915508571, 0.012037966893712556, 0.076343100588013288, -0.20546035926376272, 0.13459193297647368, 0.025732944443593878, 0.15693288111736364, 0.043761647973181578, 0.083479299629684353, -0.15251693996845875, -0.10657849804550705, 0.038641816351084518, -0.10231188547257405, 0.21957600785318707, 0.264774413728534, 0.35686545376814865, 0.29428485506006929, 0.49934135456989248, 0.18285689914378289, 0.23675610338446562, 0.10353827744151976, 0.063107949091445251, 0.03846587209017991, 0.13661717625997899, 0.098122755354854277, -0.0039906200934582137, -0.09009439550122221, -0.16647262366552176, -0.19237746196753996, 0.026647194061990561, 0.048509383863749068, 0.1654716680991411, -0.035914795239386038, 0.099273739290017232, -0.11264804489487676, 0.14792025966567318, -0.093791526140286519, 0.10021979561886898, 0.0080449729031339574, 0.25399382193861558, -0.10951630791791984, -0.033548122233328939, -0.024275040060575473, -0.15565555640319179, -0.035231426543991154, 0.063485173587351437, 0.22814734409189322, 0.10684932807789806, 0.2355554633425988, 0.10407564589066262, 0.015525256999673128, -0.011913601076877599, -0.0039295920043740662, 0.044701593559494178, 0.16547295203389104, 0.15907957720488838, 0.074664630781852093, -0.04243906497357175, -0.11246394245376416, -0.16972427151540079, -0.21530290856092721, -0.15195750501651711, 0.40553391670472716, -0.05507255324487554, 0.18488826926783164, -0.03502892748503212, 0.37001387119519319, -0.15325722566754377, 0.27168929694820759, -0.059701216280397838, 0.48380889084850937, -0.13017614472815323, 0.047673421329954523, 0.071305584258896423, -0.15733503034508964, -0.079593566039511662, -0.075485820780456944, 0.06620598245919887, -0.0012785498169557718, 0.063827392702187832, -0.0024400785561267094, 0.050942947866382475, -0.16777938781510365, -0.092876049496631446, -0.010378011540593757, 0.1594331602275639, 0.19523869399925237, 0.18464942262011227, 0.063285121982437173, -0.077221658551183223, -0.1491589460269398, -0.17912928670535297, -0.11490318286815507, -0.11189726101521234, -0.20487634390276235, 0.76498375921014561, -0.23800865420158882, 0.74083633586796371, -0.083846748018997191, 0.46372256496136105, -0.16834959597660981, 0.80860396068755125, -0.25555617026146216, 0.19463913189037535, 0.30097794980879877, -0.16302064990391507, -0.10690976611351247, -0.13497815095121923, -0.049772201284698683, -0.079451894223961053, 0.040407604161455342, -0.09194915079908203, -0.14731166465811507, -0.26499922119954511, -0.15560186997026057, -0.069496867327866862, 0.16530147427910571, 0.22324548858793775, 0.26718136730575287, 0.19166419512490171, 0.060936923017668537, -0.088626234734120041, -0.14658150061325853, -0.15988330961851069, -0.18630425886720847, 0.20226767939927157, -0.086142375874942501, -0.77766311308853053, 1.4090153420038987, -0.3038886842868152, 1.2888777036518135, -0.074470758177722834, 1.2482190395029773, -0.80123249840125998, 0.47055407026248136, 0.75577199845745624, -0.11037652666672627, -0.054458369263067428, -0.19918107544886771, -0.10899116252888987, -0.15332031366957818, 0.043654486348545761, -0.022154991408309264, -0.15239448898889341, -0.19372066727324463, -0.023769000914279543, 0.24457812931884867, 0.51722906014629877, 0.4305115414461968, 0.4535547011943914, 0.3493581281435395, 0.21076698450898321, 0.063956239140020049, -0.043266091906771414, -0.12307402164456596, -0.17588597679362872, -0.057160335632577657, -0.0784239564694168, 0.14377922602722487, -0.28610637890062873, -1.3867297053543113, 2.7076021550256568, -0.12637740826622818, 2.0046873376560574, -1.442367549533677, 0.41516901914168741, 1.1637625900709285, 0.02187980097289477, 0.2119473473283329, -0.11885489129254229, -0.1159981397382039, -0.18899269201836941, -0.058557612447368006, -0.043992442353640485, -0.026879139952720663, -0.019298206516241499, 0.11425895652801879, -0.10204731321609413, 1.0976378910336273, 0.78083298172023552, 0.7892686156410853, 0.65585934200294294, 0.41963945036689065, 0.21495377802894691, 0.10907743849349204, -0.015003791740152183, -0.098108352324783196, -0.099983461914768382, -0.14074054993981988, -0.049222223079134708, -0.60225632344115432, 0.14822551318702831, -0.20779420774376042, -2.0348285284263787, 4.0251861194251459, -2.7420491756647705, 0.80731183784095106, 1.5256751899261984, -0.015777910213839702, 0.56481061463658855, 0.094745090670160736, 0.032305441115857418, -0.15496296066268442, -0.070898922964745509, -0.15185446167165811, -0.099013378837322308, -0.033839198092832617, 0.20170996830425536, 0.31395340400286426, 0.91804938453195506, 0.90837480132247328, 1.1212514777242175, 0.8111537128593137, 0.65461252772518352, 0.44812018281017851, 0.29338133862249183, 0.080942506543726575, -0.0048876135806632161, -0.042045437831147933, -0.048279129686226115, -0.13748504879992385, -0.22867414001479172, -0.65206021382919555, -1.4414816884582773, 0.34900156189272369, 1.2663064061664397, -4.4519069438082273, 2.3981175155339263, 2.0366543361516527, -0.11574419894478603, 0.9938253915317542, 0.40253059498542132, 0.29787521235777348, -0.048128801274628118, 0.001834095689180732, -0.063578064856638958, -0.14911097873279969, -0.17638384543546787, -0.15061392115741762, -0.13638564133647435, 0.3292785127452974, 0.45646012748955422, 0.0, -0.098380202448484569, 0.2889284460821786, 0.39981384774007012, 0.45036129401449043, 0.22152969012775114, 0.11073273247786891, 0.024117745722163984, -0.0050280129542534689, -0.087106960572679512, -0.083653448195472838, -0.51521426958714545, -0.86124262209127589, -0.78939851130304506, -0.74423225935393889, -1.1208061672534484, 0.0, 1.1208061672534437, 0.74423225935393811, 0.78939851130304262, 0.86124262209127656, 0.51521426958714389, 0.083653448195472491, 0.087106960572679332, 0.0050280129542534689, -0.02411774572216354, -0.11073273247786865, -0.22152969012775126, -0.45036129401449054, -0.39981384774006945, -0.28892844608217838, 0.098380202448484236, -0.90837480132241455, -0.45646012748952708, -0.32927851274525655, 0.13638564133649642, 0.15061392115742586, 0.17638384543547556, 0.14911097873280194, 0.063578064856639402, -0.0018340956891807838, 0.048128801274627743, -0.29787521235777292, -0.40253059498541977, -0.99382539153175098, 0.11574419894478773, -2.0366543361516536, -2.3981175155339201, 4.4519069438082379, -1.2663064061664346, -0.34900156189272086, 1.4414816884582851, 0.65206021382919577, 0.22867414001479336, 0.13748504879992438, 0.048279129686228148, 0.042045437831148495, 0.0048876135806649092, -0.08094250654372509, -0.29338133862248678, -0.44812018281017507, -0.6546125277251672, -0.81115371285928006, -1.1212514777241573, -1.0976378910335893, -0.91804938453192131, -0.31395340400284805, -0.20170996830424559, 0.033839198092839695, 0.09901337883732686, 0.1518544616716597, 0.070898922964745925, 0.15496296066268506, -0.032305441115858605, -0.09474509067015939, -0.56481061463658966, 0.01577791021384034, -1.5256751899262007, -0.80731183784094906, 2.7420491756647789, -4.0251861194251397, 2.0348285284263898, 0.20779420774376556, -0.14822551318702654, 0.60225632344115643, 0.049222223079135728, 0.14074054993982205, 0.099983461914770352, 0.098108352324783543, 0.015003791740153814, -0.10907743849349157, -0.21495377802894516, -0.41963945036688871, -0.65585934200294016, -0.78926861564106898, -0.78083298172020743, -0.24457812931883488, 0.10204731321609872, -0.11425895652800651, 0.019298206516249916, 0.026879139952725083, 0.04399244235364598, 0.058557612447370934, 0.18899269201837068, 0.11599813973820411, 0.11885489129254237, -0.21194734732833254, -0.021879800972893531, -1.1637625900709312, -0.4151690191416833, 1.4423675495336772, -2.0046873376560503, 0.12637740826623128, -2.7076021550256497, 1.3867297053543175, 0.28610637890063351, -0.14377922602722601, 0.078423956469422018, 0.057160335632579121, 0.1758859767936318, 0.12307402164456618, 0.043266091906772712, -0.063956239140019508, -0.21076698450897985, -0.34935812814353639, -0.45355470119438479, -0.43051154144618958, -0.51722906014628944, 0.15560186997025938, 0.02376900091427863, 0.1937206672732435, 0.15239448898889424, 0.022154991408310377, -0.043654486348542874, 0.15332031366958024, 0.10899116252889095, 0.19918107544886771, 0.054458369263066984, 0.11037652666672665, -0.75577199845745313, -0.47055407026248092, 0.80123249840126409, -1.2482190395029769, 0.074470758177730939, -1.2888777036518133, 0.30388868428682408, -1.4090153420038936, 0.77766311308853486, 0.086142375874943722, -0.20226767939927121, 0.18630425886721039, 0.15988330961851227, 0.14658150061325848, 0.088626234734120221, -0.060936923017667906, -0.19166419512490052, -0.26718136730575015, -0.22324548858793625, -0.16530147427910316, 0.069496867327866751, 0.16777938781510615, 0.26499922119954472, 0.14731166465811715, 0.091949150799082904, -0.040407604161453857, 0.07945189422396387, 0.049772201284700876, 0.13497815095122018, 0.10690976611351256, 0.16302064990391416, -0.30097794980879811, -0.19463913189037552, 0.25555617026146371, -0.80860396068754914, 0.16834959597661264, -0.46372256496135666, 0.083846748018996636, -0.7408363358679616, 0.23800865420159104, -0.76498375921014483, 0.20487634390276502, 0.11189726101521356, 0.11490318286815554, 0.17912928670535491, 0.14915894602693922, 0.077221658551183403, -0.063285121982436826, -0.18464942262010964, -0.19523869399925042, -0.15943316022756263, 0.01037801154059478, 0.09287604949663382, -0.015525256999667727, -0.050942947866376924, 0.0024400785561280833, -0.06382739270218761, 0.0012785498169549515, -0.066205982459197621, 0.075485820780458165, 0.079593566039511995, 0.1573350303450895, -0.071305584258897034, -0.047673421329955501, 0.13017614472815361, -0.48380889084851014, 0.05970121628039872, -0.27168929694820493, 0.1532572256675474, -0.37001387119519286, 0.035028927485033709, -0.18488826926782947, 0.055072553244877351, -0.40553391670472771, 0.15195750501651886, 0.21530290856092779, 0.16972427151540051, 0.11246394245376394, 0.042439064973571687, -0.07466463078185144, -0.159079577204887, -0.16547295203388937, -0.044701593559494109, 0.0039295920043746378, 0.011913601076878649, -0.18285689914377989, -0.10407564589066134, -0.23555546334259525, -0.10684932807789757, -0.22814734409189458, -0.063485173587349258, 0.035231426543992535, 0.15565555640319106, 0.02427504006057549, 0.033548122233326282, 0.10951630791791925, -0.25399382193861758, -0.0080449729031340841, -0.10021979561886678, 0.093791526140288961, -0.14792025966567243, 0.11264804489487593, -0.099273739290014568, 0.035914795239387988, -0.16547166809914049, -0.048509383863747611, -0.02664719406199113, 0.19237746196754099, 0.16647262366552154, 0.090094395501221572, 0.0039906200934596249, -0.098122755354853444, -0.1366171762599761, -0.038465872090180271, -0.063107949091446403, -0.10353827744152141, -0.2367561033844639, -0.39107302489471046, -0.4993413545698927, -0.29428485506006952, -0.35686545376814893, -0.26477441372853422, -0.21957600785318782, 0.10231188547257429, -0.038641816351083894, 0.10657849804550705, 0.15251693996845886, -0.083479299629685352, -0.043761647973181945, -0.1569328811173635, -0.025732944443590922, -0.13459193297646968, 0.2054603592637699, -0.076343100588013288, -0.012037966893705314, -0.10529567915508307, -0.096096791377201118, -0.048761457544342024, 0.10089614648569795, 0.095268264507682401, 0.14454547803178003, 0.11929552297831249, 0.062089135258225896, -0.072827255227657164, 0.017260207971635976, 0.0029845825084865137, -0.15373347718831978, -0.29387297238508514, -0.24699055160378858, -0.30677005181583211, -0.085911462662095636, -0.30581901500051922, -0.25423051056794305, -0.38754570378991321, -0.22411418130009808, -0.35375643597530843, 0.055146819140510416, 0.26281055993233621, -0.019211160710796572, 0.021646587213104713, -0.10241250352514171, -0.078770189361086179, -0.14656177726216213, 0.06994065617155748, 0.0021974481246246629, 0.002747867764730379, -0.10920785431913549, -0.11314958231531393, -0.099324973861329505, -0.024565620333014605, 0.11510723629505158, 0.15553553242798132, 0.1412615980599799, 0.1780996924064803, 0.24246246508902825, 0.30032839778422799, -0.043896728635589223, -0.041656273199716369, -0.30818729583490695, -0.22221882441369153, -0.34490255487274391, 0.23901621577757753, 0.040068334939789153, 0.22067925957890494, 0.059139017637366363, 0.0013771249391555669, -0.82932242402320322, -0.24248276916859551, 0.2220707306234446, -0.05187740979518813, 0.089711600875348782, -0.064944626021130755, -0.023033890597353883, -0.20608602740074317, -0.0068114015565181726, -0.056907964871020393, -0.0092446671691440163, 0.031869312918224861, -0.031719635617030659, -0.20558191361174011, -0.077733070765210868, -0.042569660785952056, 0.14494733127713064, 0.20572232603908944, 0.22275756609764749, 0.23658495591681294, 0.34021620386249518, 0.53178862418379935, 0.23679486634227159, -0.4620869054676115, -0.17111767858219507, -0.23623861798820922, 0.12877260884038208, 0.69010247253016699, 1.1175823884838996, 1.0747715799508781, 1.1957108711898863, -0.10839909954530788, -0.2263553910474054, -0.048917424863973949, -0.49291782026044056, 0.072335854201080588, 0.024371827339035017, -0.013685307258532536, -0.20736891492564691, -0.14292038700683141, -0.20318736992960118, 0.09738711454895084, -0.11463822183415182, 0.066392764898706338, -0.087906272749638886, -0.24871001073084317, -0.24716165183994784, 0.070818253229819925, 0.19552146385155544, 0.2667283201489779, 0.30564289179799059, 0.3354280050625516, 0.60106744735122974, 0.69730138646619622, 0.10657803670352221, -0.26597013575809814, -0.51663850122651156, 0.20353239335470413, 0.46612626705839527, 0.88179245186152555, 1.0591766157447142, 1.8155993788135401, 1.1338250057069015, 1.3365493166122591, 0.60566186502852537, -1.1434123865171271, -0.24404333943615408, -0.11036542395783162, 0.011397583876152599, -0.13747467644410641, -0.17507285276321236, -0.22950814490677501, -0.12352253662709391, -0.15992872157622667, 0.070404205425931329, -0.14847974776257952, -0.11769772351689584, -0.0043287613096706385, -0.01570204240179094, 0.0089756748769360926, 0.29363217368931571, 0.24220392956380496, 0.33450192958610414, 0.50614275317411517, 0.79818525223669812, 0.56259342729123207, -0.51618519149943443, -1.105930659634037, -0.36434278784189805, -0.25061306335904537, 0.49191197464707476, -0.55042973333868328, 0.33201271766592266, -1.2534804319442674, 1.8545676439466376, 2.7705947112358396, -0.65727781823869658, -0.44769863619371453, -0.72484131059467105, -0.19352569039907921, -0.06091583791907576, -0.075793328725683354, -0.18362798444373865, -0.10847923107858076, -0.4971843279255892, -0.26497067484015147, 0.12790446781792791, 0.30557543109041591, 0.010766872600696822, -0.17753959085018053, -0.04814578185160058, 0.007404938424997059, 0.19111004712688809, 0.26024004494781799, 0.38143909917016594, 0.62956014799324345, 0.63152717265524094, 0.50640814880924734, -0.28203486996779953, -1.481298784591466, -0.34444399750770943, 0.33223282315731145, -1.0635980503754157, -0.74327388531916416, -1.4203730522981521, -0.29452233058397176, 0.31054780878465887, 0.4425799571579111, 0.58851980199844711, -0.60890484535134703, -0.54015192300944392, -0.38389116569218451, 0.02852961095842791, -0.22272564345822352, 0.021237638325899852, -0.387784194546968, 0.021133356436687064, -0.70317235961626101, 0.56727270004732033, -0.037766801642101375, 0.06793846381428098, -0.54370981678606445, -0.070485969368251203, -0.02650526715020184, 0.26990648117357596, 0.2830749986604576, 0.32017932907632218, 0.48573187070286, 0.4386512882244713, 0.87865322612556163, -0.72553155869355623, 0.48040960369964236, -0.14688086473049994, -0.86361123753821778, 0.034562131954569586, -1.3606412475160699, -0.095775027331125598, -1.0236217631956728, -2.0668504460046977, 0.91046045526812469, 0.047649837051312177, -0.29915225181420874, -0.44192642538866073, -0.16705843369252318, -0.088135922159037081, -0.1055833934917848, -0.15296582393740679, -0.37808744252168625, -0.27971623762694292, 0.42301568032977793, 0.28749903579456393, 0.42643957249522774, -0.63308466384561635, -0.39563373733228846, -0.2486369819601503, 0.37438920939802361, 0.1651784382566546, 0.21235668984583117, 0.050683391882319691, 0.2929172313060312, 0.12600631152419559, 0.37020072416606892, -0.11933000679563836, -0.077869450453742661, 0.40059289889731342, 0.33639737707180556, -1.4411916754233998], \"height\": 32, \"width\": 32, \"top\": {\"real\": [6327.0074679827858, 12787.448651417644, -8580.1357782693794, -6564.4296251926053, 1064.8969915597925, -1614.7722808334524, -60.048119421842308, -221.12968025641604, -12.445754708845573, -62.940587713583341, 23.820578453457951, -28.525301748952867, 37.864280125154337, -85.844490405627994, 27.493814969643068, -48.151974443362732, 41.399660199307142, -48.151974443360345, 27.493814969642067, -85.844490405627866, 37.864280125154032, -28.525301748952689, 23.820578453458509, -62.940587713584037, -12.445754708845573, -221.12968025641445, -60.048119421842806, -1614.7722808334493, 1064.8969915597932, -6564.4296251926125, -8580.1357782693849, 12787.448651417659, -17213.595236981997, 544.07302669902936, -10829.417860945707, -5794.1219231083051, -1103.8692252742003, -1120.3666800727638, -106.61462896985108, -117.89522553300084, -39.308430893651213, -26.960578056534288, -11.025047422886351, -2.1850531713376355, -7.2952697383625882, -14.472211987615461, -14.23279965231924, 3.5205960317557246, -19.629747734378611, -14.131264529804582, -22.272265924680642, -17.401343902608428, -1.7416101263052008, 0.34733716754184635, -16.60063574625633, -32.47390190466588, -64.31481385096977, -84.034753639409303, -258.32278440436392, -714.30117659130417, 113.1165060355228, -2806.7151144576005, -10882.302955904926, -27817.100568112113, -27745.708494118069, -22841.420845008699, -8553.5264674688351, -4085.033989629072, -1748.9561003744159, -545.33543865452532, -146.45498278007594, -40.805440061891282, -50.060212982262158, -16.730489448484349, -23.62313915150434, 0.36714120063527833, -7.1882909197809326, 6.4142604093545659, -14.833291452397129, 3.4669422259569203, -16.161012153790594, -21.283130178011959, -13.244388638951026, -1.2754674400463286, 0.49184661171499777, -11.472717532816317, -17.530689402649369, -29.523444921912187, -36.983418680226812, -91.597351236026796, -144.17841735614732, -486.41083616652156, -239.1204206916959, 139.00893917602821, -7153.1577950265046, -18373.599790964956, -8415.9227315857388, -6467.5546779833858, -5469.6585676007244, -2789.7914675082047, -821.48267137489768, -514.71454200305448, -122.6780822655295, -35.554593402553344, -32.905184819607861, -16.875977506192179, -9.1243948190511883, -4.1802620318744168, 0.78316084097390803, -0.82473624462572925, -6.0277039354546789, -6.8502427898926159, -6.8858593350514123, -14.551844205848809, -8.4592989146599145, -1.9950695133570466, 1.5394495557011576, -9.232834653609892, -11.961754213185406, -20.558561534905806, -38.14482496917136, -57.160869905334089, -157.5554953403844, -411.20082432868492, -110.11930975746139, -463.64281724562954, -1210.9754315912523, -4810.1023052011815, -2624.9192342435695, -4516.897453633137, -3582.982491421491, -2119.7499173636902, -750.23472664477231, -159.86878938364373, -96.805728919101412, -16.935754226078267, -22.178078450833883, -9.0092227225989756, -5.4454852920506616, -2.5268882566736748, -2.6219523498948458, -2.0534180946008638, -6.4643064804236223, -8.7214065300148622, -7.0127031874072934, -7.7847619200438425, -0.78121801903708787, -0.11031060182209244, -3.4318959866990171, -4.568083040130742, -9.3160200641569482, -15.87900618307528, -23.382201868158507, -37.989404730637517, -121.95929165874175, -201.43809047465336, -567.30372690179445, -610.36312853782476, -1937.2376557226703, -2694.0942422163184, -3481.5355975420739, -3026.0617140239533, -2506.4916383888308, -1355.1576691715959, -468.0599091435185, -33.397814851582154, 18.545331481583979, -29.439943085485314, -11.922803368680741, -7.7174579848963036, -2.7888603302094261, -2.0545006330536419, -1.0224301618297007, -2.5290059501700397, -2.6199349314032494, -4.8828731457816774, -5.6140621268617785, -3.6146413255535528, -0.82967484502750599, -1.1631844631411599, -1.1736245693095499, -3.7427284368684024, -6.6178270656423424, -8.8039498431578131, -13.481606634721874, -26.682014936266803, -32.97802138197703, -190.87870662958537, -335.07671606134033, -876.95522185704988, -1470.8308615232113, -2413.1056871868645, -2329.4915082040015, -2151.9265781424592, -1438.5211303616525, -713.08152385953474, -130.56706965452, -28.862997769748436, 1.7115783105395304, -2.3079138134833856, -11.650001060370576, -2.1701895043697319, -1.7033561682904694, 0.11972955037883275, -0.5790790812653609, -0.45369004788794814, -4.0202584980239315, -2.2874964618085922, -4.0439693313887179, -2.7144116941037568, -0.78431497120559035, -0.63377862148075614, -0.83542887465582039, -2.5417481635934216, -3.4497798452119151, -5.2729359146939485, -9.3325337684514853, -2.3480777220919959, -30.998957295773433, -62.717085150656224, -255.55592612696097, -515.55403813953228, -1077.4118984564277, -1959.4321649356718, -996.17063256475433, -957.58296584245431, -646.48124546709357, -264.63237090275328, -80.518340163143705, 1.3577640380308329, -10.209813205700032, -1.6455702447745924, 0.041564105453412992, -2.1114336115237951, 0.094770419949782359, -0.59915948675603581, -0.042806075220647909, -1.4583889440112543, -1.0515624140257636, -2.6242610725724358, -1.9962698899057387, -2.6373580888952279, -0.39414295752688255, -0.80952098820947449, -0.80935504019781357, -1.8315981280862581, -2.3957781219887311, -3.7775973636187947, -1.2762438485839673, -5.8736187047076989, -1.7472058496177199, -39.26171578474986, -103.67045476207605, -221.97901463800724, -486.52939506954147, -770.86385201715837, -324.53401456188737, -340.76561269504333, -198.94197841299811, -116.98390967138687, -32.552002455687223, -2.8647426984892057, 3.4567160839115996, -2.3310052693731942, -0.31982529888503974, 1.0641170511547686, -1.1693860348016079, 0.40700212695667498, -1.0092937918537679, -0.034985154955161232, -1.1746986822405672, -2.2583319261560799, -2.3742700657768196, -2.0999344700147127, -1.3199204785521135, -0.00726121067659493, -0.21997349279604808, -1.6799449140427334, -2.573626149077699, -1.2749029797075579, -2.9722975102588807, 1.1149262389696764, -3.7825574143705132, -8.8112838568342262, -31.380656277665604, -80.815706494855448, -151.2920880811312, -231.73584987382, -71.719340760371239, -68.364029336894532, -82.304975309081328, -39.769136567332623, -12.693902195545155, 1.9842035662706039, -0.48894354077452629, 1.5673786316984977, -1.1528550937233366, -0.047905313676576855, 1.0650111541187497, -1.4670778837513785, 0.90154843827712783, -2.0067122081730173, -1.7180755446076856, -3.3483434682482898, -1.6317774897434336, -3.4708804264384949, -1.4694727348954268, -0.10257790692130256, -0.92889636381571783, -2.5451436559397584, -1.1303995452351283, -2.8871606625355204, -0.49805533537312113, -0.43871934228158149, 0.74909741969065036, 1.439791857975526, -13.026034555561825, -28.484337861014367, -36.895178406765908, -72.231190035838395, -26.809485534889244, -56.942733796520351, -36.280107429422031, -18.099079313675151, -3.2627913287121535, -0.27065475805048173, 1.1511525903295716, -0.1898870363801409, 0.97087220888025372, -1.1326412370424179, 0.19981301766363371, 2.3076802702931332, -2.5498407756566031, -0.55532623625253041, -4.5067864970337066, -3.1791416623515807, -4.4078100962970312, -3.3125592316970569, -0.86117313527739991, -1.5893272599995412, -2.966763176308445, -0.10263295233944174, -3.9090515756474873, -1.1809123553765606, -1.2038275093350199, 0.28624805719871799, 1.8536817132476691, 0.80720029239974944, -5.5769148242308617, -9.876045833403877, -26.746787584056406, -25.156847324745275, -59.858730768373135, -40.909481344220289, -31.301364606284917, -12.992896188265529, -3.3747756869001191, 2.018530777741562, -0.2260612077575776, 0.20594677690592242, -0.32403225688254972, 2.6342781156582364, -0.20787587650621794, 0.020021422684959465, 2.4168167113542753, -5.4711139391067487, -4.0162352275216753, -8.2614925402209369, -5.3597212899808353, -3.5618518868969149, -2.433206189931258, -3.72732750056158, 1.9796458045760836, -5.6194552495050392, -1.3533084788499918, -2.5312603283156982, -0.73577412998862446, 1.0534870856485199, 1.9641802030644013, 2.686394865901931, 0.15179077698100021, -13.505006616733285, -24.652619118640313, -46.540772018331772, -65.573862825648789, -62.198686950727755, -33.367481359773279, -15.462856466374785, 1.2764820376727259, 0.65238351077916601, 0.11426292455840634, -0.28574074744887695, 1.1004477970868616, 1.5327652909312646, 4.9327112002405187, -2.7503236900904393, -3.9754701567757182, -0.83451213573114202, -9.6859551174636032, -6.0006304228248837, -7.1318253263858704, -4.9856424549649869, -8.2198692881497966, 4.4471445589999075, -5.9124192136821829, -1.066228559248251, -4.5320020023541776, -2.2691032318803455, -0.29595929991781228, 0.95069246916243999, 2.9800299945570488, 4.1754888650460389, -3.9368165535394617, -16.752391317324459, -41.141712299851427, -60.643902512124761, -84.343164732157774, -54.074972316673119, -32.147836838432397, -3.8004568077904586, 0.60906370022349199, 0.96326571070502964, 0.12072436644318041, 0.86319547550846831, 1.1644302862121145, 2.3252453178811563, 0.4766448788746544, 4.2895158747096422, -8.0099398507205173, -11.261414242734404, -3.7327404661807368, -6.1601929909303115, -5.7506657339441176, -11.117751544185502, 4.3054115148233869, -8.2116085703478756, 1.5649721654809707, -5.692142411938895, -3.4949086671880489, -2.1697325908161673, -0.69541562648800392, 0.8151347377023449, 3.4913843961972888, 3.7128410928274609, -0.28461904914440361, -14.694115553922865, -40.784171797776878, -76.129097997930202, -42.446544168449137, -35.20072244442639, -7.6849685309209681, -0.86778876706269803, 1.7056687310546401, 0.51974952798739482, 1.1316759112288739, 1.2127800605381189, 2.2221214293211369, 0.8361427470500683, 0.099546606452808759, -3.1066939683116588, 2.4769973579809332, -11.745899626687375, -12.566716735550758, -4.7843722525441121, -8.6040588700645948, 5.3511034027408684, -15.66778198729919, 3.3911987930307137, -8.1259457896856588, -4.7980365887404339, -2.1471667518999764, -2.5087241573260579, -0.86097656871748596, 0.80139543608377761, 2.3927476350849495, 5.6561627225456101, 4.6250195847240709, -10.360873371570062, -32.183766942993408, -40.627648783043085, -17.95302681367091, 6.1859416444601623, 4.4451711191118575, 6.2133312512745986, 3.3587096432927233, 0.75569650762962715, 0.82429958430179118, 1.6770717987294814, 1.4875078542842981, 0.57506461301516931, -1.8616897808321822, -4.2923314886050523, -7.0161307894352376, 4.8526265686569623, -11.625945416074895, -21.07467865045702, 3.1434482955713889, -12.714871655934468, 2.366640700254353, -11.173661544979289, -6.475058123170597, -2.9596627855411386, -2.7630790459355632, -1.4122750319888788, -0.55802289067111654, 0.40509965601619852, 3.0549503122920978, 4.5519407117959005, 5.5044865911271481, 2.884340309618711, -2.0306279174386637, -12.290279126535582, 30.20785901727286, 12.45094729737127, 8.7415961086741216, 10.304484703022888, 4.2310313602871554, 1.8368366318675937, 1.9910666876255574, 0.99156303676388502, 0.31747940339256003, -0.60245605946597469, -1.5054245711483085, -5.2047479791857727, -4.6985425899868174, -6.4406057657264579, -2.4317965202694718, -0.31806110286890099, -34.614374984304249, -0.31806110286891309, -2.431796520269478, -6.440605765726465, -4.6985425899868325, -5.2047479791858065, -1.5054245711483181, -0.60245605946599046, 0.31747940339256003, 0.99156303676388657, 1.9910666876255707, 1.836836631867627, 4.2310313602871847, 10.304484703022929, 8.7415961086741465, 12.450947297371268, -17.953026813669211, -12.290279126534008, -2.0306279174386814, 2.8843403096185996, 5.504486591127181, 4.5519407117958774, 3.0549503122920303, 0.40509965601617365, -0.55802289067113198, -1.4122750319888866, -2.7630790459355659, -2.9596627855411324, -6.4750581231706095, -11.173661544979305, 2.3666407002543774, -12.714871655934495, 3.1434482955713383, -21.074678650457034, -11.625945416074918, 4.852626568656909, -7.0161307894352527, -4.2923314886050816, -1.8616897808321802, 0.57506461301515821, 1.4875078542843145, 1.6770717987294999, 0.82429958430183881, 0.75569650762972518, 3.3587096432928165, 6.2133312512752603, 4.4451711191129393, 6.1859416444606961, -42.446544168447332, -40.62764878304236, -32.183766942992868, -10.360873371569919, 4.6250195847241038, 5.6561627225455622, 2.3927476350849091, 0.80139543608374619, -0.86097656871749839, -2.5087241573260646, -2.1471667518999924, -4.7980365887404339, -8.1259457896856819, 3.3911987930307128, -15.667781987299181, 5.3511034027407849, -8.6040588700645682, -4.7843722525441965, -12.56671673555077, -11.745899626687423, 2.4769973579809226, -3.1066939683116837, 0.09954660645280862, 0.83614274705006209, 2.2221214293211515, 1.2127800605381271, 1.1316759112289154, 0.51974952798746277, 1.7056687310547414, -0.86778876706233132, -7.6849685309204459, -35.200722444424429, -84.343164732156296, -76.12909799792908, -40.784171797776416, -14.694115553922703, -0.28461904914431585, 3.7128410928274769, 3.4913843961972515, 0.81513473770227451, -0.69541562648801736, -2.1697325908161949, -3.4949086671880569, -5.6921424119389146, 1.5649721654809774, -8.2116085703478952, 4.3054115148233585, -11.117751544185527, -5.7506657339441034, -6.1601929909302848, -3.732740466180779, -11.261414242734437, -8.0099398507205191, 4.2895158747096467, 0.47664487887466933, 2.3252453178811465, 1.164430286212123, 0.86319547550848241, 0.12072436644322472, 0.96326571070516387, 0.60906370022364942, -3.8004568077899661, -32.147836838431445, -54.074972316672174, -65.573862825648646, -60.643902512124406, -41.141712299851122, -16.752391317324395, -3.9368165535393809, 4.1754888650460389, 2.9800299945570101, 0.95069246916240213, -0.29595929991782399, -2.2691032318803499, -4.5320020023541936, -1.0662285592482377, -5.9124192136821918, 4.4471445589998728, -8.2198692881497806, -4.9856424549649665, -7.1318253263858535, -6.0006304228248819, -9.685955117463573, -0.83451213573115879, -3.9754701567757316, -2.7503236900904167, 4.9327112002405231, 1.5327652909312637, 1.1004477970868634, -0.28574074744888678, 0.11426292455844969, 0.65238351077926593, 1.2764820376728394, -15.462856466374522, -33.367481359773095, -62.198686950727343, -59.858730768372553, -46.54077201833131, -24.652619118640224, -13.505006616733089, 0.15179077698109764, 2.6863948659019079, 1.9641802030643754, 1.0534870856484704, -0.73577412998863267, -2.5312603283157147, -1.3533084788499781, -5.6194552495050258, 1.979645804576063, -3.7273275005615623, -2.4332061899312447, -3.561851886896878, -5.3597212899808397, -8.2614925402208979, -4.0162352275216939, -5.471113939106738, 2.4168167113542718, 0.020021422684962133, -0.20787587650621156, 2.6342781156582284, -0.32403225688256132, 0.20594677690590416, -0.22606120775752253, 2.01853077774176, -3.3747756868998953, -12.992896188264998, -31.301364606284267, -40.909481344219984, -26.809485534888527, -25.156847324744817, -26.746787584056008, -9.8760458334037811, -5.576914824230828, 0.80720029239978064, 1.8536817132476344, 0.28624805719868845, -1.2038275093350328, -1.1809123553765482, -3.9090515756474855, -0.10263295233946072, -2.9667631763084428, -1.589327259999552, -0.86117313527738326, -3.3125592316970565, -4.4078100962970224, -3.179141662351582, -4.5067864970337235, -0.5553262362525373, -2.5498407756565928, 2.3076802702931301, 0.19981301766362944, -1.1326412370424508, 0.9708722088802425, -0.18988703638015317, 1.1511525903296145, -0.27065475805034434, -3.2627913287119403, -18.099079313674878, -36.280107429421662, -56.94273379651932, -71.719340760368894, -72.231190035836406, -36.895178406764366, -28.484337861013827, -13.026034555561461, 1.4397918579755735, 0.74909741969062116, -0.43871934228165033, -0.49805533537312413, -2.8871606625355364, -1.1303995452351521, -2.5451436559397544, -0.92889636381573193, -0.10257790692130979, -1.4694727348954375, -3.47088042643851, -1.6317774897434372, -3.3483434682483164, -1.7180755446077083, -2.0067122081730231, 0.90154843827713693, -1.4670778837513718, 1.0650111541187297, -0.047905313676639846, -1.1528550937233546, 1.5673786316984972, -0.48894354077444435, 1.9842035662707793, -12.693902195544938, -39.769136567331614, -82.304975309079381, -68.364029336892514, -324.53401456188737, -231.73584987382011, -151.29208808113108, -80.815706494855604, -31.380656277665615, -8.8112838568343115, -3.7825574143705687, 1.1149262389696379, -2.9722975102588807, -1.2749029797076188, -2.5736261490777141, -1.679944914042758, -0.21997349279605258, -0.0072612106766204651, -1.3199204785521295, -2.0999344700147602, -2.3742700657768196, -2.2583319261561177, -1.1746986822405874, -0.034985154955167297, -1.0092937918537661, 0.40700212695667115, -1.169386034801607, 1.0641170511547318, -0.31982529888503974, -2.3310052693731778, 3.4567160839116182, -2.8647426984891329, -32.552002455687209, -116.98390967138671, -198.94197841299811, -340.7656126950431, -996.17063256474341, -770.86385201715302, -486.52939506953675, -221.97901463800537, -103.67045476207502, -39.261715784749725, -1.7472058496176825, -5.8736187047078241, -1.2762438485839995, -3.7775973636188502, -2.3957781219887693, -1.831598128086283, -0.80935504019782156, -0.8095209882094927, -0.39414295752690548, -2.6373580888952821, -1.9962698899057312, -2.6242610725724247, -1.0515624140257607, -1.4583889440112356, -0.042806075220638506, -0.5991594867560418, 0.09477041994976447, -2.1114336115238088, 0.041564105453392161, -1.645570244774569, -10.20981320570001, 1.3577640380311771, -80.518340163142966, -264.63237090274987, -646.481245467088, -957.58296584244442, -2329.4915082039943, -1959.4321649356684, -1077.4118984564245, -515.55403813953228, -255.55592612696057, -62.717085150656416, -30.998957295773568, -2.3480777220922762, -9.3325337684514711, -5.2729359146941093, -3.4497798452119492, -2.5417481635934838, -0.83542887465582316, -0.63377862148080311, -0.78431497120560345, -2.7144116941037488, -4.0439693313887171, -2.2874964618085487, -4.0202584980238978, -0.45369004788789491, -0.57907908126534979, 0.1197295503788481, -1.7033561682904654, -2.1701895043697248, -11.650001060370577, -2.3079138134832218, 1.7115783105395919, -28.862997769747821, -130.56706965451951, -713.08152385953122, -1438.5211303616488, -2151.926578142451, -3481.535597542063, -2413.1056871868605, -1470.8308615232086, -876.95522185705033, -335.07671606133954, -190.87870662958562, -32.978021381977214, -26.682014936266988, -13.48160663472185, -8.8039498431579233, -6.6178270656423885, -3.7427284368684086, -1.1736245693095617, -1.1631844631411714, -0.82967484502748334, -3.6146413255534444, -5.614062126861783, -4.8828731457814465, -2.619934931403141, -2.5290059501698665, -1.0224301618296836, -2.0545006330535864, -2.7888603302093888, -7.7174579848962566, -11.922803368680738, -29.439943085484902, 18.545331481584157, -33.397814851580577, -468.05990914351662, -1355.1576691715877, -2506.491638388823, -3026.0617140239456, -2624.9192342435676, -2694.0942422163216, -1937.2376557226696, -610.36312853782647, -567.30372690179479, -201.43809047465459, -121.9592916587422, -37.989404730638029, -23.382201868158511, -15.879006183075566, -9.3160200641569801, -4.5680830401307739, -3.4318959866990371, -0.11031060182210287, -0.78121801903713106, -7.7847619200437572, -7.0127031874072889, -8.7214065300146117, -6.4643064804234296, -2.0534180946007163, -2.6219523498948099, -2.5268882566736321, -5.4454852920506234, -9.009222722598933, -22.178078450833912, -16.935754226078039, -96.805728919100844, -159.86878938364163, -750.23472664477129, -2119.7499173636857, -3582.9824914214882, -4516.8974536331352, -8415.9227315857224, -4810.1023052011687, -1210.9754315912437, -463.64281724563131, -110.11930975746253, -411.20082432868651, -157.55549534038482, -57.160869905334962, -38.144824969171324, -20.558561534906186, -11.961754213185522, -9.2328346536099755, 1.5394495557011911, -1.9950695133570939, -8.4592989146598381, -14.5518442058491, -6.8858593350514123, -6.8502427898925227, -6.0277039354547091, -0.82473624462553619, 0.7831608409739802, -4.1802620318743058, -9.1243948190510782, -16.875977506192154, -32.905184819607861, -35.55459340255284, -122.67808226552924, -514.71454200305027, -821.48267137489574, -2789.7914675081947, -5469.6585676007144, -6467.5546779833749, -27745.708494118051, -18373.599790964956, -7153.1577950265018, 139.0089391760178, -239.12042069169632, -486.41083616652713, -144.17841735614894, -91.597351236029397, -36.983418680226798, -29.52344492191359, -17.530689402649603, -11.472717532816715, 0.49184661171508715, -1.2754674400467305, -13.244388638951113, -21.283130178012485, -16.161012153790605, 3.4669422259560148, -14.833291452397047, 6.4142604093547071, -7.1882909197807701, 0.36714120063543831, -23.623139151504223, -16.730489448483766, -50.060212982262158, -40.805440061890259, -146.45498278007528, -545.33543865451918, -1748.9561003744159, -4085.0339896290589, -8553.5264674688297, -22841.42084500867, -17213.595236981979, -27817.100568112102, -10882.302955904914, -2806.7151144576032, 113.11650603552238, -714.3011765913102, -258.32278440436545, -84.034753639410752, -64.314813850969756, -32.473901904667066, -16.600635746256838, 0.34733716754136956, -1.7416101263050108, -17.401343902608698, -22.272265924680649, -14.131264529805808, -19.629747734378629, 3.5205960317556224, -14.232799652319452, -14.472211987615371, -7.2952697383626051, -2.1850531713375001, -11.025047422886134, -26.960578056534132, -39.308430893651277, -117.89522553299832, -106.61462896985047, -1120.3666800727583, -1103.8692252741987, -5794.1219231082987, -10829.417860945698, 544.0730266990613], \"imag\": [0.0, 39515.399789254865, -15382.502646592808, -2918.5213899411633, 1191.3150820979915, -345.80526987183259, -91.963497561164317, -108.06830259743781, -23.431327605037779, -16.610810822958811, -2.2742971526945692, -21.94540337447156, -21.272420402577179, -19.057735286082725, 52.376313120912741, 8.8521975026144215, 0.0, -8.8521975026153612, -52.376313120912044, 19.05773528608244, 21.272420402577229, 21.945403374471546, 2.2742971526945164, 16.61081082295847, 23.431327605037779, 108.06830259743377, 91.963497561167031, 345.80526987182992, -1191.3150820979911, 2918.521389941166, 15382.502646592799, -39515.399789254865, 16946.371225111547, 11272.400870696511, -1841.1630655848539, -1171.8258105148211, 109.26740577843201, 109.43221584454041, -206.10314812122442, -42.28539321936541, -65.249140172269108, -8.1960517939269071, -25.365956236318521, -12.488977779350739, -20.777136166915728, 10.939736173955986, 13.738393384077787, 18.982014759380824, -12.446635345723246, -8.8305069728752752, -14.016932746731957, 10.847407040619599, 18.949463773817904, 9.5491377266946333, 9.9160507928571491, 10.925693066643545, 29.597688207921799, 110.70270321520633, 119.64570653889598, -28.406380421737747, -832.38513354395832, 3868.3607546707453, 4625.1554139998552, 1299.266384884336, 11955.369188695569, -346.60702359457474, 2363.0865643328202, 202.32180136864196, -295.01076934839688, 277.44131247872377, -208.25011765184485, -68.536452109290167, -63.125416501511275, -30.589238972650307, -20.382558491276782, -12.902690844348575, 1.0182743702449766, 2.2874141051372452, 14.546101055958879, -1.6150967690531892, 0.87386354462209248, -13.38677146472326, 17.407635810762027, -0.60680891034428563, 12.950261495215786, -0.86756998254740836, 13.062832664150156, -2.136096668655318, 35.880437410281019, 66.543583791324124, 106.41042136702396, -154.61175360170367, -142.43138300706809, -204.04622542072212, 637.22651951043269, 14506.214536688893, 2087.241286517743, 2934.8250858413794, -540.57641351250766, 271.57679130866723, 537.49064424335052, 71.610686309506633, -82.566517160157844, -74.489552074506761, -57.142723569279489, -25.254222647826957, -12.544755138678799, -6.7708773337384622, -0.20770764759918051, 1.1194026551973495, 3.6890839097334878, -0.20461611038051675, -5.3737401851528386, -2.2636764639022453, 4.9832600695280087, 10.10754418440443, 2.544597152813191, 5.0447569422202223, 2.8189903732027388, 2.9920185974422946, 11.529259915073515, 53.348281783168488, 50.577306165813702, 119.57179721034167, -786.94393395792213, -901.86972095078409, 1074.2990124084633, -676.63432998511303, -1814.4894639161919, -1058.8873901892568, 349.63255334068964, 268.2484621242063, 380.4257804868011, 97.912476061205965, -71.661879904778658, -72.736940205390937, -37.286147332183255, -18.720186517652358, -9.5628328869678363, -8.2634536416369482, -0.19099280196160889, 0.28567330333833429, 0.071309220847330906, 1.775656575203522, 2.1386941287610384, -1.0231985430634363, 2.4480270844924137, 1.9878096211738889, 4.1535160740617325, 3.5521022242715827, 3.6019889835361654, -0.38778650675348675, 4.5934633035837322, 12.369503115173785, 94.400929285346393, -77.039516694541632, -317.96189631496532, -464.93982303098932, -1928.5847150696218, -1707.435501473529, -1583.8824730375936, -833.14970460709912, -242.65732454029356, 317.34459246185179, 69.371971565542168, -13.453603503282046, -58.678662168810511, -40.697925231357267, -20.16679423742438, -13.090865763493372, -7.6639325468155182, -3.9818184076004774, -1.1480426683317846, 3.4782462601712654, 3.3535274581593777, 1.1304420427842019, -0.78798091056569108, 1.3645618319176871, -1.2482103302418359, 2.6548043613808709, 2.0455422971726147, 3.3794759874708187, 0.28270713586437868, -0.67396364813071052, -2.4299863370655714, 20.048308524208917, 2.7323622379310764, 23.350930435926227, 19.428895667387472, -542.55543458513841, -969.72646934413422, -1881.6935115818319, -426.42488803140975, -203.12933548649579, 221.2759941924873, 75.498646737827528, 81.527654709232138, -23.228148927519229, -35.095892631083601, -18.113211298120703, -10.84781416147373, -7.2190125620904571, -4.6279710639736358, -2.4591204313834965, 0.58454842364750592, 0.9547463106026568, 2.4151219203224654, 0.35567626693527166, -0.34443735246553581, 0.10021534895843374, 0.62975751586612239, 0.075739057981468363, 2.5606009702294732, 0.33652577635989583, 1.0967346902818458, -2.0000864020848046, 1.451434335785166, -7.1043203483245918, 10.682010714917043, 63.119371696969466, -0.21915489532378957, -18.829394319190524, -151.38668525810633, -53.557614725234764, 319.98109193688521, 339.65571159114432, 137.34002448547074, 89.166061674211335, 5.5395407010458548, 3.1394961579749192, -15.790153056071546, -10.068399035154068, -5.990189510359599, -3.8184783724455591, -3.031311871551015, -1.7050468427375405, 0.29997994657424726, 1.0820090369221063, 1.186145834536469, 1.1035985643781976, -0.026686439684276222, -0.021861987241408937, -0.71069133238487792, 1.5408441736495715, 0.88964240698419117, 1.3226298476418663, -0.31341792844049038, 0.36542819178090652, -6.2831724147446009, -1.5019641274621849, 13.705577255286178, 14.08988446983488, 43.376064565045787, 54.204646228028693, 132.60719521227122, 62.432091745032416, 219.86853407025291, 133.19971898528303, 106.65962198554573, 32.509510578136677, -0.32173120932219279, -1.0472919151881939, 3.0400482541159932, -2.1373375769283371, -3.730023177462626, -3.658884080605465, -1.7579654575817145, -1.4081716233776314, 0.53847505259675243, 0.97164442609396484, 0.99557444173589427, 0.11126643861839057, 0.68343802732828218, -1.8968331338371984, 1.2370080984335854, 0.24616862215977253, 1.6488725749132858, 0.51751999590405229, 1.1293193043526017, -2.440127533596657, -2.1096176983280075, 0.86862341139232857, -3.2906850406637935, 10.529105330387669, 21.528607110729595, 53.864359931260871, 77.645971701549371, 219.35042572397626, 56.646725304489401, 72.597133152544643, 25.283726226154087, 9.5916945360518575, 3.5131066387109651, 7.8353712095885921, 3.7982495059531924, -0.1320379920173739, -2.6872144914167868, -3.9932995411602161, -3.2496097582258021, 0.34753129477634409, 0.51108563039490118, 1.5779290838292743, -0.32098662744154494, 0.85050436376706862, -0.95269533500567993, 1.2514468795435802, -0.80232514327112969, 0.9402998385797201, 0.083484537520043395, 2.9970442493787712, -1.3537504507858638, -0.49606931853204594, -0.40634793694041288, -3.2049709482452999, -0.90733505109423707, 2.4367446291982722, 14.425788131967863, 11.285893196605656, 41.383231407558732, 26.64930600456886, 3.49019745229235, -2.7278278900775033, -0.6780497768719117, 5.1972517053508067, 13.315592278460391, 8.5655340270495799, 2.7986942524720009, -1.3188307478897958, -2.9560147101356677, -3.5039625138893249, -3.2351264422424442, -1.7837191938553947, 4.1370294214229899, -0.48575889336608402, 1.5705428299533406, -0.28712766434912351, 3.0263722138472242, -1.2120159426024513, 2.3578685311613299, -0.57595981339550073, 5.0023110313506045, -1.3965343408401143, 0.57130018359553258, 0.97601539997779907, -2.5856117766371072, -1.4572886030272592, -1.697304402058907, 2.1030121366448049, -0.062995146217583023, 4.9612937854964008, -0.301351161950073, 9.1580358876592047, -26.774160253651129, -14.352442298363405, -1.3280628610826339, 14.662722831107068, 13.065714024917916, 9.0142686843581057, 2.3156698002103213, -2.1494090398895276, -3.4369058394752816, -3.2885833247038136, -1.5589303641797962, -1.2624013759488528, -1.9675974847606275, 6.6808538974877765, -1.9845455926326385, 5.8520209082315047, -0.64649466936933941, 3.7090325345277484, -1.4383189901623872, 7.6358217658181289, -2.5011370399824613, 2.0288771570791524, 3.3870661540364408, -2.1726948090167277, -1.6227282885568253, -2.3401345171732064, -1.0784728701462345, -2.329913042321786, 1.6766227476276099, -5.5208279800184377, -13.304914803323909, -34.683237345909106, -16.2208922311743, -7.5614574111833583, 14.803696771258469, 15.579335900760762, 15.161631552742872, 8.4660409590375174, 1.9742581617985508, -2.2318082441740326, -3.1677451000476946, -2.7136257844502993, -2.4663578849843404, 2.1470642674041458, -0.80807516468244989, -6.8039934755458935, 11.462761097859508, -2.3200072133134322, 9.6476195054900042, -0.58323258923086063, 10.466810618341768, -7.3966372849294499, 4.629755222962074, 7.8499060069144697, -1.2532724460122664, -0.71383693570895246, -3.0356422051110532, -1.9171318821546592, -3.2905248775997, 1.1638954652799918, -0.8003122215164804, -7.6686022187651925, -13.379436000591463, -2.0784151782651223, 18.753674553162941, 37.596939514973172, 28.201887912811504, 26.441177038828386, 17.313699289624569, 8.2605837012813357, 1.9157665349814501, -1.0360449197814665, -2.460835808457071, -2.9435912594789997, -0.73745892985465067, -0.80698208098757895, 1.3512050433752707, -2.4806623635392717, -10.931358459008862, 20.399475046734903, -0.93914753929729033, 15.633586230850142, -11.808527677086202, 3.7955244266493091, 11.440683264496995, 0.22625003249094855, 2.3910143241324033, -1.5433230899620785, -1.7524971656611896, -3.4392335008624597, -1.2102890230410412, -1.1333111335531953, -0.86689054652400055, -0.77102037498198228, 5.869418392294464, -6.6911708498309208, 60.884710948918006, 43.621563233816303, 43.489599527484941, 33.141784821271486, 18.338861076357606, 7.7096141949396086, 3.1020965354201242, -0.33651454595896624, -1.858665713174497, -1.559439785993801, -1.7180049365163976, -0.49470837698954684, -5.7499783777067037, 1.2816063498557866, -1.6438131382345036, -14.80449956699707, 30.383248800411909, -20.687082737158004, 6.4291237134149926, 13.719178799652914, -0.15202331710012035, 5.6708331746907428, 1.1091130063870853, 0.43083164420390874, -2.423604198850752, -1.2614169037455483, -3.1633275417854718, -2.5428479485652051, -1.0621152637056996, 7.4921468465754772, 13.826120615216594, 48.56895003285198, 43.655937980459306, 56.143788442077074, 39.839822974553684, 28.907966432346075, 17.226166967005444, 9.493352687280801, 2.1248307248495761, -0.10304029106189502, -0.73643011249607004, -0.68086203692422775, -1.5726895782452095, -2.38329292549688, -6.3654622280486342, -12.648471231222512, 2.6502987300644998, 9.1941379366153466, -33.28553680715055, 17.791788634489134, 16.331392880531652, -1.0332061538290742, 9.6376857080971341, 4.1689669632335153, 3.4112249849533103, -0.63064111926197686, 0.028356847121888181, -1.1968584419289052, -3.3957285823190806, -4.7459408986565164, -4.790016252397657, -5.1593354130915703, 13.957717184896774, 20.367299127198688, 0.0, -4.5388798707327584, 12.10851784859719, 15.801052170121357, 15.786196904526062, 6.4645339091427658, 2.6357128260629894, 0.48128762074186304, -0.08159176932681525, -1.1399410088753745, -0.93916966756638098, -5.4695359499377414, -8.4733779831544798, -6.8332707948903639, -5.8759130146162706, -8.1552266379296245, 0.0, 8.1552266379295908, 5.8759130146162661, 6.8332707948903488, 8.4733779831544869, 5.4695359499377316, 0.93916966756637688, 1.1399410088753721, 0.08159176932681525, -0.48128762074185355, -2.635712826062981, -6.4645339091427667, -15.786196904526072, -15.801052170121331, -12.108517848597181, 4.5388798707327416, -43.655937980456407, -20.367299127197448, -13.957717184895019, 5.1593354130924185, 4.7900162523979217, 4.7459408986567313, 3.395728582319133, 1.1968584419289152, -0.028356847121888983, 0.63064111926197186, -3.4112249849533058, -4.1689669632334958, -9.6376857080971128, 1.0332061538290882, -16.331392880531649, -17.79178863448908, 33.285536807150621, -9.1941379366153146, -2.6502987300644807, 12.648471231222583, 6.3654622280486368, 2.3832929254968982, 1.5726895782452166, 0.68086203692425595, 0.73643011249607926, 0.10304029106193066, -2.1248307248495362, -9.4933526872806269, -17.226166967005291, -28.907966432345297, -39.839822974551964, -56.143788442073777, -60.884710948915583, -48.568950032850019, -13.82612061521586, -7.4921468465751166, 1.0621152637059226, 2.5428479485653219, 3.1633275417855051, 1.261416903745556, 2.4236041988507613, -0.43083164420392467, -1.1091130063870698, -5.6708331746907525, 0.15202331710012659, -13.719178799652925, -6.4291237134149712, 20.687082737158036, -30.383248800411859, 14.804499566997148, 1.6438131382345447, -1.2816063498557717, 5.7499783777067242, 0.49470837698955733, 1.7180049365164254, 1.5594397859938318, 1.8586657131745035, 0.33651454595900265, -3.1020965354201109, -7.7096141949395376, -18.33886107635751, -33.141784821271301, -43.48959952748401, -43.621563233814584, -18.753674553161851, 6.6911708498312086, -5.8694183922938254, 0.77102037498232001, 0.86689054652414343, 1.1333111335533379, 1.2102890230411023, 3.4392335008624833, 1.7524971656611932, 1.5433230899620796, -2.3910143241323984, -0.22625003249093578, -11.440683264497009, -3.7955244266492731, 11.808527677086207, -15.633586230850069, 0.93914753929731287, -20.399475046734821, 10.931358459008916, 2.4806623635393117, -1.3512050433752816, 0.80698208098763236, 0.73745892985467021, 2.943591259479049, 2.4608358084570767, 1.0360449197814969, -1.9157665349814337, -8.2605837012812007, -17.313699289624388, -26.441177038827938, -28.201887912810978, -37.59693951497237, 16.220892231174151, 2.0784151782650429, 13.379436000591378, 7.6686022187652325, 0.80031222151651993, -1.1638954652799158, 3.290524877599744, 1.917131882154679, 3.0356422051110541, 0.71383693570894702, 1.2532724460122711, -7.849906006914436, -4.6297552229620669, 7.3966372849294793, -10.466810618341761, 0.58323258923092358, -9.6476195054900042, 2.3200072133134997, -11.462761097859458, 6.8039934755459344, 0.80807516468246154, -2.1470642674041431, 2.4663578849843657, 2.7136257844503273, 3.1677451000476933, 2.2318082441740374, -1.9742581617985304, -8.4660409590374517, -15.161631552742712, -15.579335900760643, -14.803696771258227, 7.5614574111833424, 26.774160253651477, 34.683237345909006, 13.304914803324097, 5.5208279800184936, -1.6766227476275497, 2.3299130423218712, 1.078472870146282, 2.3401345171732237, 1.6227282885568277, 2.1726948090167162, -3.3870661540364337, -2.0288771570791524, 2.5011370399824764, -7.6358217658181076, 1.4383189901624107, -3.7090325345277098, 0.64649466936933497, -5.8520209082314834, 1.984545592632657, -6.6808538974877711, 1.9675974847606519, 1.2624013759488664, 1.5589303641798025, 3.2885833247038483, 3.4369058394752718, 2.1494090398895325, -2.3156698002103084, -9.0142686843579654, -13.06571402491778, -14.662722831106908, 1.3280628610827629, 14.352442298363767, -3.4901974522911301, -9.158035887658194, 0.30135116195024236, -4.9612937854963866, 0.062995146217542555, -2.1030121366447649, 1.6973044020589363, 1.457288603027268, 2.5856117766371063, -0.97601539997780706, -0.57130018359554458, 1.396534340840117, -5.0023110313506107, 0.5759598133955085, -2.357868531161305, 1.2120159426024788, -3.0263722138472202, 0.28712766434913656, -1.5705428299533217, 0.48575889336609929, -4.1370294214229943, 1.783719193855416, 3.2351264422424548, 3.5039625138893205, 2.956014710135662, 1.3188307478897938, -2.7986942524719765, -8.5655340270494893, -13.315592278460258, -5.1972517053507898, 0.67804977687200962, 2.7278278900777337, -56.64672530448825, -26.649306004568476, -41.383231407558036, -11.285893196605604, -14.42578813196792, -2.4367446291981882, 0.90733505109427226, 3.2049709482452906, 0.40634793694041338, 0.49606931853200609, 1.3537504507858567, -2.9970442493787934, -0.083484537520044699, -0.94029983857969957, 0.80232514327114979, -1.2514468795435723, 0.95269533500567261, -0.85050436376704475, 0.32098662744156231, -1.5779290838292681, -0.51108563039488553, -0.3475312947763517, 3.2496097582258234, 3.9932995411602126, 2.687214491416765, 0.13203799201742056, -3.7982495059531578, -7.8353712095884145, -3.5131066387109939, -9.5916945360520085, -25.283726226154414, -72.597133152543805, -219.86853407025291, -219.35042572397646, -77.645971701549428, -53.864359931260992, -21.52860711072962, -10.52910533038772, 3.2906850406638011, -0.86862341139231525, 2.1096176983280075, 2.4401275335966615, -1.1293193043526162, -0.5175199959040564, -1.6488725749132833, -0.24616862215974425, -1.2370080984335483, 1.8968331338372646, -0.68343802732828218, -0.11126643861832354, -0.99557444173586918, -0.97164442609393387, -0.53847505259674655, 1.408171623377654, 1.757965457581725, 3.6588840806054854, 3.730023177462626, 2.1373375769283727, -3.0400482541159497, 1.0472919151882829, 0.32173120932219762, -32.509510578136599, -106.65962198554575, -133.199718985283, -319.98109193688754, -62.432091745036324, -132.60719521227176, -54.20464622802902, -43.376064565046129, -14.089884469834875, -13.705577255286062, 1.5019641274622118, 6.2831724147445849, -0.36542819178094682, 0.31341792844047633, -1.3226298476418761, -0.88964240698418728, -1.5408441736495315, 0.71069133238493809, 0.021861987241514846, 0.026686439684265401, -1.1035985643780957, -1.1861458345364231, -1.082009036922065, -0.29997994657423205, 1.7050468427375622, 3.031311871551031, 3.818478372445528, 5.9901895103595697, 10.068399035154069, 15.790153056071421, -3.1394961579745826, -5.539540701046052, -89.166061674211662, -137.34002448547281, -339.65571159114575, 426.42488803140685, 53.557614725234323, 151.38668525810476, 18.829394319190286, 0.21915489532353391, -63.119371696969402, -10.682010714916952, 7.1043203483248183, -1.4514343357851665, 2.0000864020848317, -1.0967346902818478, -0.33652577635987613, -2.5606009702294568, -0.075739057981359575, -0.6297575158660037, -0.1002153489582, 0.34443735246552043, -0.35567626693504045, -2.4151219203224019, -0.95474631060256077, -0.58454842364747928, 2.4591204313835524, 4.6279710639736518, 7.2190125620904322, 10.8478141614737, 18.113211298120788, 35.095892631083665, 23.228148927519459, -81.527654709232067, -75.498646737828622, -221.27599419248904, 203.12933548649244, 1583.8824730375886, 1881.6935115818235, 969.72646934413342, 542.55543458513785, -19.428895667388197, -23.350930435925818, -2.7323622379307726, -20.048308524208668, 2.4299863370655803, 0.67396364813076437, -0.28270713586437829, -3.3794759874707645, -2.0455422971725761, -2.6548043613806773, 1.248210330242034, -1.3645618319173671, 0.78798091056567598, -1.130442042783935, -3.3535274581592822, -3.4782462601711517, 1.1480426683318268, 3.9818184076005192, 7.6639325468155093, 13.090865763493181, 20.166794237424288, 40.697925231356948, 58.678662168810511, 13.453603503282435, -69.371971565542452, -317.34459246185418, 242.65732454028887, 833.14970460709446, 1814.4894639161919, 1707.4355014735293, 1928.5847150696216, 464.93982303099165, 317.96189631496537, 77.039516694542414, -94.400929285346379, -12.369503115173439, -4.5934633035837242, 0.38778650675346871, -3.6019889835361467, -3.5521022242715157, -4.1535160740616579, -1.9878096211735969, -2.4480270844921423, 1.0231985430638744, -2.1386941287610495, -1.7756565752032289, -0.071309220847206922, -0.28567330333819857, 0.19099280196170093, 8.2634536416369908, 9.5628328869678718, 18.720186517652159, 37.286147332183262, 72.736940205390795, 71.661879904778388, -97.912476061205524, -380.4257804868011, -268.24846212420823, -349.63255334068992, 1058.8873901892528, -2087.2412865177334, 676.63432998511416, -1074.2990124084556, 901.86972095078841, 786.94393395792224, -119.57179721034137, -50.577306165813212, -53.34828178316841, -11.529259915073451, -2.9920185974423683, -2.8189903732028481, -5.0447569422201788, -2.5445971528130604, -10.107544184404102, -4.9832600695276215, 2.2636764639027978, 5.3737401851528253, 0.20461611038107308, -3.6890839097334074, -1.119402655197085, 0.20770764759927202, 6.7708773337385892, 12.544755138678777, 25.254222647826818, 57.14272356927944, 74.489552074506946, 82.566517160157588, -71.610686309506534, -537.49064424335074, -271.57679130866813, 540.57641351250493, -2934.8250858413712, -11955.369188695569, -14506.214536688902, -637.22651951043315, 204.04622542072232, 142.43138300706894, 154.61175360170483, -106.41042136702355, -66.543583791323357, -35.880437410281012, 2.1360966686551617, -13.062832664150186, 0.86756998254746465, -12.950261495215663, 0.6068089103450538, -17.40763581076148, 13.386771464725289, -0.87386354462209659, 1.6150967690552112, -14.546101055958459, -2.2874141051365076, -1.0182743702449171, 12.902690844348964, 20.382558491276768, 30.589238972650698, 63.125416501511289, 68.536452109292355, 208.25011765184536, -277.4413124787215, 295.01076934839597, -202.32180136863923, -2363.0865643328207, 346.60702359456963, -16946.371225111554, -1299.266384884367, -4625.1554139998561, -3868.3607546707453, 832.38513354395968, 28.40638042173725, -119.64570653889508, -110.70270321520742, -29.597688207921749, -10.925693066643381, -9.9160507928571686, -9.5491377266944308, -18.949463773817815, -10.847407040619126, 14.016932746732627, 8.8305069728758134, 12.446635345723296, -18.982014759378298, -13.73839338407706, -10.939736173955323, 20.777136166915735, 12.48897777935125, 25.365956236318532, 8.1960517939270616, 65.249140172269151, 42.285393219366988, 206.10314812122587, -109.43221584453876, -109.26740577843286, 1171.8258105148195, 1841.1630655848473, -11272.400870696491]}}\n} \n",
    "module.exports = nose_filter\n\nfunction nose_filter () {\n  return  {\"real\": [3.0408379415611857, 0.37822261363137938, 1.1747173276627942, 0.87791572866957501, 0.27429578524536991, -0.26015038230887205, -0.04589694540462394, 0.18194913988848616, -0.19035992880648842, -0.050064472206627651, -0.016354960260506177, 0.073013903204916478, 0.15053197342937383, -0.47378158951033317, -0.33333577915227425, -0.30434085338299055, 0.26372284406307878, -0.30434085338299449, -0.33333577915227836, -0.47378158951033028, 0.15053197342937505, 0.073013903204915576, -0.016354960260505706, -0.050064472206628768, -0.19035992880648842, 0.18194913988848541, -0.045896945404624932, -0.2601503823088735, 0.27429578524536952, 0.87791572866957457, 1.1747173276627942, 0.3782226136313796, 1.5638480130127614, -1.0502161590016221, -0.28144140655806793, 0.66007876209063499, 0.25575295594566605, -0.11471557758718753, 0.22751157962613866, -0.29100003355994186, 0.29242994865853178, 0.14950061311078749, -0.02214037256893809, 0.034503572794411914, -0.17412889405901469, 0.060297128338254534, -0.49717312826403576, -0.10585857030501357, 0.082780177430083327, -0.11056584899062352, -0.72499416196392785, -0.15612863751308359, -0.36586758725441215, -0.19718551141955715, -0.043434328775718851, -0.060442748560529294, 0.1383233017601592, -0.071714399164362744, 0.31725814504248484, 0.16801904131477274, 0.58675004339129755, 1.5155025161072819, 0.99232752650122635, -1.0129349058609656, -1.6725083187014358, -0.66077224091757791, 2.2217962254133496, 0.98390492917013095, -0.16319024909703178, 0.67271651276019184, 0.16380771710007475, 0.21989373735679621, -0.12296413131763459, -0.18224776807046256, -0.011168077595514938, 0.10364961453623285, 0.1359801303077682, -0.26339593722715721, 0.039396952561874886, -0.33866696253626483, -0.0043101841409601402, 0.17740469505625342, -0.10830858623812685, -0.33186051211466239, 0.12060535717228799, 0.084703474730635803, -0.086262426064740078, -0.1297477439897661, -0.28426475792188655, 0.21965961682575447, 0.24955999100642301, 0.46804088594167448, -0.46946217188769823, -0.31724338121882617, 1.7716903674840139, 0.56577881124465312, 0.71512595047089234, 0.4910867492003736, 0.92310119575914651, -1.0939934957719639, 0.18102793706565934, 0.35484595526186652, 0.48676804973393767, -0.097923922056211768, -7.8200063684236368e-05, -0.016095705887683227, -0.084263209727683391, 0.0080331646697531477, -0.044853168166469837, 0.0062170702455977547, -0.15890945005602863, 0.22815908460498888, 0.17110516400703918, -0.29052216822588434, -0.18224178792918044, -0.018421573557969844, 0.032535239746583795, -0.08121081614537759, -0.029175915115094032, 0.092929862040843081, 0.16824405476099044, -0.24679227625704581, 0.00030176170486908785, 0.023943010115746295, -0.43281940369171445, -0.57166836623813821, 1.2482467538506352, 0.74385331371246666, 0.54787745216002559, 0.92898941300038174, 0.54473301805335128, -0.4877077226718825, -0.40370312470951597, 0.39096527623299848, 0.12644205243911047, 0.0424168022733412, 0.049219693586430309, -0.077748186566067037, -0.043614575991677208, -0.0041635061718157101, 0.07897222152752259, 0.053944973270972973, 0.11232623315704468, -0.070445625631503542, -0.072057201177642652, 0.12706805404252855, -0.13757198545862262, -0.31639223989443899, -0.029240486244660611, 0.10973045554309782, 0.04102655016489614, 0.01891084247324943, -0.056922369420476487, 0.030805208457151782, -0.1512000567754726, -0.058122663069861934, -0.30506910575481916, -0.79033868813295383, 0.026308878650124864, 1.7521122327973906, 0.64566220514793682, 0.40042515638418263, -0.33461208848408402, -0.55369429571770823, -0.030140868003777126, 0.27230784814155334, 0.008194429787378334, -0.030645866021173498, 0.023928227792328404, 0.090706510487419734, -0.021569631345745226, -0.0064127815367693367, -0.026343653609827326, 0.0079365608693974798, -0.18791450411345401, 0.14319521757460194, 0.17003550871316017, -0.24661106106331201, -0.21167593067635404, -0.098206750946426211, -0.048592759447365123, 0.0028129255950110439, 0.049868939755416952, 0.039023237394102607, -0.0036267311717218496, -0.12930461632538415, -0.067411320951837855, 0.010801205387038189, 0.074931291451028059, 0.0657071501308885, -0.22930577035731903, -0.34894672904561169, 0.37107135970432037, 0.49136473213042475, 0.10645611255411164, -0.27741376367012294, -0.015474080963115254, 0.13417678111594294, -0.00046677178847574514, -0.064152245495751381, 0.038292630722847554, 0.017696001575747813, 0.0052157631901947011, -0.023883294001795573, 0.00060518848897931612, -0.088395093514235953, -0.11757758027246699, -0.019555697374511325, 0.025650630137194243, -0.043746931993730094, -0.08846438922222799, -0.074442233736365312, -0.0099104052825428144, 0.064871673248634965, 0.03524540038796406, -0.0065163090427015676, -0.065286881502250399, 0.023130909787941502, -0.028452880392855154, -0.098638256951482817, -0.23382813425811513, -0.077933249962103476, 0.069575788839216612, 0.86635491100693507, 0.33668792873864722, 0.34253529215971401, -0.019122146869457048, -0.016521364547457899, 0.098161425946316522, -0.011130337821465129, -0.092543539386829035, -0.0046973120649884213, -0.0086885172531639618, 0.041915865623990751, 0.004043623749362439, -0.037907101781325205, -0.03902357631677511, -0.037690963997300889, -0.11419210623041842, -0.076732726183972602, 0.12573571356763677, 0.012633232837618465, -0.098942005293094951, -0.061888601165125671, -0.0090012900880717846, -0.014247675993027883, 0.027023228844142398, -0.0050282774165556453, -0.031667371615742887, -0.033818612421867206, -0.01148054478950835, 0.002410610826462259, 0.084402385062259444, 0.069824545029654947, 0.043930202648898894, 0.078872059827297045, 0.055053359776043469, 0.0133618922103162, 0.068453834537836655, 0.081701490128889276, -0.023034972903402569, -0.042406682273060693, 0.035148729718712253, -0.037569795749083354, -0.0041828274568459145, 0.012961699649937737, -0.015475583648045266, -0.027857672235467607, 0.011169867646763214, -0.052725469767566695, -0.0070148730067698924, 0.053188940442296044, -0.095289423698368528, 0.016377276604450954, -0.015232023889946105, -0.077682201861009353, -0.048207693014304241, 0.014396940553395536, 0.021075876818278678, -0.0024069559974744716, -0.016758259649352489, 0.031865879706987753, 0.032824623168326933, -0.074182732572421473, -0.080036865363297197, 0.055652716802045685, 0.11130862970905192, 0.072952972838101024, 0.035098396968263772, 0.070242479721294437, 0.040747896169172335, -0.022459274904977577, 0.014257984954846613, 0.019887732012022184, -0.040811004345713692, 0.0088191619820225595, 0.012579825412037176, 0.0010521231241174983, 0.006430724322423028, -0.0107697788586532, -0.065313535534231901, -0.062769573271966861, 0.11452944472315789, 0.040092306883550234, 0.12236977033818973, 0.13624403896529741, 0.027359429809611827, -0.0259369720098807, -0.021419082531908291, -0.02797214703330133, 0.0080320798501609496, 0.0013100558771969473, -0.0052561866064455981, -0.0097375289490629017, 0.028455863356249757, 0.056425701741664613, -0.0014166564531825356, -0.032528933027316242, -0.019619112630340951, 0.065700689463789611, -0.027574493612476551, -0.032810042710946841, -0.021337213333243964, 0.019592990080295629, -0.019759750092557201, -0.030135000999364853, 0.031698488621630008, 0.023522054710864718, -0.021766544372719836, -0.0029827434432790761, 0.0078373508878122541, -0.0028057606437618767, -0.033232550782043478, -0.070830818977105636, 0.059080455669844649, 0.36951320092865036, 0.091411128665944044, 0.16404233417264649, 0.062598270207454218, 0.044986403519809939, -0.081510896741027974, -0.042341618007147169, -0.019737461729971092, -0.0048974001169366831, 0.01654258945512711, 0.0088012977267579451, -0.013696041496545335, -0.0020268100930256635, 0.015845305908809133, 0.016458612619479462, 0.00059474001274681517, -0.078529066256991353, -0.013402803779002156, -0.0036013299995064228, 0.037573591582025043, -0.0076636494655425947, -0.0021144243161753088, 0.032140257903604356, 0.0203960516207237, -0.013294834505552555, 0.0021732333351695376, 0.015223562704661827, -0.01560949450401263, 0.015060609589555461, 0.099241248305729085, -0.19173261262163863, 0.2450151004066432, 0.26383919410790774, 0.33963060937430933, 0.34586223870135113, 0.1799263961717959, 0.13137374163691276, -0.036493858716968031, -0.041981936023927684, -0.060258932305754208, -0.0099079010405710068, -0.010024579181759819, 0.016637976300589805, 0.031629106230310143, -0.011441752446030828, -0.010113005489671789, -0.027490450999295705, -0.018258671855796018, 0.061296263921274532, 0.10180457538537498, 0.097647442588889397, 0.063246459754600901, 0.0018146068702083835, -0.012539173975430248, -0.008345642545901014, 0.020763503842579332, 0.035996162307667869, -0.015675575409266479, -0.029662747125522582, 0.021312770128680401, 0.08274253615935892, -0.10682054954404013, -0.033729052458342255, -0.12662108035586636, 0.18053751384272299, 0.70940599530087467, -0.21337246968950196, 0.09763637724258438, 0.15345959634626791, -0.11690110107335749, 0.030098075283007168, 0.034186076429122053, -0.021402902917041923, 0.0046349096026103891, 0.011776544425663813, -0.0089673934626629329, 0.025701507905379287, -0.029333520957471802, 0.0051215906448292756, -9.6207917787476249e-05, -0.027988212781709806, 0.093695296747695708, 0.10174972110658871, 0.1657472048824174, 0.097917377942654052, 0.0075790364114050627, 0.031051039914505564, 0.015692601846482499, -0.015197940538429407, 0.026154427883432859, 0.038178927860434288, 0.07391023019778703, 0.0062621769249755375, 0.14786394857966245, -0.24133125024592791, 0.31944609486771169, 0.50715637065140251, 0.3628700351691248, 1.3060302403517683, -0.51467834215318464, -0.23826829822593068, -0.0093468845104923252, 0.16015106243072727, 0.02805086056222977, -0.0035899004350242064, -0.0055435803643170143, -0.026732920924661639, -0.010772744125100176, -0.024390993371714485, 0.012627431507206405, -0.0087203787935273471, 0.017390054254405412, 0.12375300108425245, 0.24623032442851775, 0.32220608581938742, 0.14931322115435106, -0.030460558403777184, 0.017160725214558258, -0.0094839753900354314, -0.040937983123008212, 0.021461267056132466, 0.052605242734811673, 0.082583919156513017, 0.060994911510484674, 0.19212485777257118, 0.030490864773295545, 0.17592824054988929, 0.2988664581273196, -0.3440942993173739, 1.3210609586317499, 0.059297195869563314, 0.66450815180221101, -0.18837022473974091, 0.34310308052214539, 0.41335445680081984, 0.18880277280085617, -0.0025387166530481263, -0.027056960212979365, -0.014992917126512385, -0.065825070508153574, 0.0059924400617866053, 0.016058491686644451, 0.096318218677932735, 0.11648035795043635, 0.083105673180647682, 0.32671351148908129, 0.21720864831216413, 0.29412476851730657, 0.14853499339159934, 0.018970981025801619, -0.0063191769526926853, -0.01818046447321878, -0.033255690840711123, 0.042088106914846247, 0.11598544099090941, 0.13859711550376397, -0.01128947190338442, 0.086653868373652729, 0.5559656926196751, 0.37680556076813249, 0.88488899182435787, -1.1019114795534606, 1.0072326177374842, -0.25696609936231163, 0.22595605005106759, 0.20124367647634336, 0.25020565573121023, 0.15194580903531119, 0.054188690404279045, -0.031588472981034531, -0.072469006265441768, -0.025752917138555535, -0.0471489088024604, 0.079293556902861981, 0.16429646904639772, 0.19502382977708654, 0.21468548823411557, 0.26510515339808566, 0.4121092848683291, 0.24137856300787749, 0.039245063706659693, 0.01328784964664576, 0.063938494959291103, -0.056808918829038463, -0.039159725623022792, 0.028736615885883075, 0.075674855852819814, 0.10715382591497533, 0.29941075202959372, 0.24751816611443234, -0.14971685838339424, 0.92725020353048182, -0.58030730777587713, 1.4965419400087898, -0.58030730777587824, 0.92725020353048315, -0.1497168583833956, 0.24751816611443228, 0.29941075202959394, 0.10715382591497527, 0.075674855852819592, 0.028736615885883075, -0.039159725623022994, -0.05680891882903847, 0.063938494959291325, 0.013287849646645755, 0.039245063706659422, 0.24137856300787733, 0.41210928486832976, 0.32671351148908501, 0.21468548823411696, 0.19502382977708541, 0.16429646904639761, 0.079293556902861592, -0.047148908802460261, -0.025752917138555938, -0.072469006265442351, -0.031588472981034621, 0.054188690404279302, 0.15194580903531177, 0.25020565573121106, 0.20124367647634361, 0.22595605005106811, -0.25696609936231096, 1.007232617737484, -1.1019114795534584, 0.88488899182435599, 0.37680556076813088, 0.55596569261967799, 0.086653868373653353, -0.011289471903383815, 0.13859711550376486, 0.11598544099090989, 0.042088106914846005, -0.033255690840710936, -0.018180464473218153, -0.0063191769526928735, 0.018970981025801085, 0.14853499339159881, 0.2941247685173069, 0.21720864831216452, 0.24623032442851894, 0.083105673180647877, 0.11648035795043606, 0.096318218677932249, 0.016058491686644111, 0.0059924400617863598, -0.065825070508153657, -0.014992917126512623, -0.027056960212979545, -0.0025387166530475712, 0.18880277280085703, 0.41335445680082034, 0.34310308052214539, -0.18837022473973905, 0.66450815180220979, 0.059297195869561843, 1.3210609586317497, -0.34409429931737384, 0.2988664581273206, 0.17592824054988909, 0.030490864773296485, 0.19212485777257224, 0.06099491151048541, 0.082583919156513072, 0.052605242734811722, 0.021461267056132546, -0.040937983123008163, -0.0094839753900352007, 0.017160725214558203, -0.030460558403777944, 0.14931322115435064, 0.32220608581938709, 0.093695296747697082, 0.1237530010842532, 0.017390054254405134, -0.0087203787935278762, 0.012627431507206037, -0.024390993371714388, -0.010772744125100247, -0.026732920924662094, -0.0055435803643169856, -0.0035899004350241582, 0.028050860562230339, 0.16015106243072863, -0.0093468845104915464, -0.23826829822592965, -0.51467834215318398, 1.3060302403517683, 0.3628700351691248, 0.5071563706514024, 0.31944609486771208, -0.24133125024592691, 0.14786394857966259, 0.0062621769249767058, 0.073910230197787502, 0.038178927860434683, 0.026154427883432977, -0.015197940538429256, 0.015692601846482655, 0.031051039914505491, 0.0075790364114048233, 0.097917377942654316, 0.16574720488241704, 0.10174972110658852, 0.10180457538537414, -0.027988212781709362, -9.6207917787273747e-05, 0.0051215906448293215, -0.029333520957471861, 0.025701507905379183, -0.0089673934626627958, 0.01177654442566399, 0.0046349096026104134, -0.021402902917041607, 0.03418607642912222, 0.030098075283007585, -0.1169011010733573, 0.15345959634626896, 0.097636377242582312, -0.21337246968950468, 0.70940599530087356, 0.18053751384272154, -0.12662108035586525, -0.033729052458342325, -0.1068205495440398, 0.082742536159359198, 0.021312770128680637, -0.02966274712552271, -0.015675575409266458, 0.03599616230766798, 0.020763503842579301, -0.0083456425459010053, -0.012539173975430275, 0.001814606870208027, 0.063246459754600651, 0.097647442588889521, -0.013402803779000846, 0.061296263921273318, -0.018258671855796015, -0.027490450999295389, -0.010113005489671634, -0.011441752446030721, 0.031629106230310081, 0.016637976300589583, -0.010024579181759814, -0.0099079010405707553, -0.060258932305754062, -0.041981936023927795, -0.036493858716967892, 0.13137374163691345, 0.17992639617179582, 0.34586223870135102, 0.3396306093743105, 0.26383919410790552, 0.24501510040664315, -0.19173261262163757, 0.099241248305728891, 0.015060609589555881, -0.015609494504012908, 0.015223562704661735, 0.0021732333351695459, -0.013294834505552418, 0.02039605162072387, 0.032140257903604141, -0.0021144243161752658, -0.0076636494655425496, 0.037573591582025015, -0.0036013299995066783, -0.027574493612477238, -0.078529066256990701, 0.00059474001274650921, 0.016458612619479316, 0.015845305908809258, -0.0020268100930258088, -0.013696041496545191, 0.0088012977267581446, 0.016542589455127047, -0.0048974001169365296, -0.019737461729970797, -0.042341618007146614, -0.081510896741027863, 0.044986403519810654, 0.062598270207453191, 0.16404233417264671, 0.091411128665944058, 0.36951320092864953, 0.059080455669845232, -0.070830818977105567, -0.033232550782043346, -0.0028057606437617323, 0.0078373508878121518, -0.0029827434432791976, -0.021766544372719729, 0.023522054710864829, 0.031698488621629953, -0.030135000999364715, -0.019759750092557201, 0.019592990080295483, -0.021337213333244086, -0.032810042710946043, 0.035098396968265562, 0.065700689463788264, -0.019619112630341284, -0.032528933027315937, -0.001416656453182401, 0.056425701741664544, 0.028455863356249663, -0.0097375289490629503, -0.0052561866064455114, 0.0013100558771970501, 0.0080320798501610554, -0.027972147033301621, -0.021419082531907708, -0.025936972009880058, 0.027359429809612409, 0.13624403896529816, 0.12236977033819048, 0.040092306883550463, 0.11452944472315811, -0.062769573271967, -0.065313535534231998, -0.010769778858653123, 0.0064307243224230766, 0.0010521231241173155, 0.012579825412037126, 0.0088191619820226965, -0.040811004345713484, 0.019887732012021993, 0.014257984954846677, -0.022459274904977573, 0.040747896169171828, 0.070242479721293896, 0.055053359776043469, 0.072952972838101038, 0.11130862970905199, 0.055652716802045553, -0.080036865363297377, -0.074182732572421722, 0.032824623168326919, 0.031865879706987767, -0.016758259649352489, -0.0024069559974744621, 0.021075876818278654, 0.014396940553395566, -0.048207693014304456, -0.077682201861009201, -0.015232023889946197, 0.016377276604451121, -0.095289423698368528, 0.053188940442295753, -0.007014873006770006, -0.052725469767566646, 0.011169867646763318, -0.027857672235467666, -0.015475583648045285, 0.012961699649937817, -0.0041828274568459145, -0.037569795749083312, 0.035148729718712211, -0.042406682273060839, -0.023034972903402475, 0.081701490128889429, 0.068453834537836641, 0.013361892210316275, 0.33668792873864783, 0.078872059827295921, 0.043930202648898596, 0.069824545029654933, 0.084402385062259569, 0.0024106108264623457, -0.011480544789508253, -0.033818612421867275, -0.031667371615742741, -0.00502827741655568, 0.027023228844142416, -0.014247675993027993, -0.0090012900880712381, -0.061888601165125297, -0.098942005293094756, 0.01263323283761883, 0.12573571356763666, -0.076732726183971922, -0.11419210623041808, -0.037690963997301666, -0.039023576316775249, -0.037907101781325052, 0.0040436237493623132, 0.041915865623990772, -0.0086885172531639947, -0.0046973120649884377, -0.092543539386828647, -0.011130337821465186, 0.098161425946316272, -0.016521364547457937, -0.019122146869457519, 0.34253529215971379, 0.37107135970432042, 0.86635491100693385, 0.069575788839216376, -0.077933249962103462, -0.23382813425811527, -0.09863825695148333, -0.028452880392854651, 0.02313090978794155, -0.065286881502250455, -0.0065163090427018816, 0.035245400387964018, 0.064871673248635159, -0.009910405282542379, -0.074442233736364327, -0.088464389222228296, -0.043746931993730226, 0.025650630137194336, -0.019555697374510583, -0.11757758027246727, -0.088395093514236453, 0.00060518848897882292, -0.023883294001795972, 0.0052157631901946491, 0.017696001575747886, 0.038292630722847568, -0.064152245495751242, -0.00046677178847581285, 0.13417678111594261, -0.015474080963115183, -0.27741376367012288, 0.10645611255411111, 0.49136473213042497, 0.64566220514793704, -0.34894672904561197, -0.22930577035731828, 0.065707150130888653, 0.074931291451028587, 0.010801205387038527, -0.067411320951837883, -0.12930461632538409, -0.0036267311717218076, 0.039023237394102503, 0.049868939755416578, 0.0028129255950110478, -0.048592759447364742, -0.098206750946425017, -0.21167593067635238, -0.24661106106331246, 0.17003550871316073, 0.14319521757460188, -0.18791450411345456, 0.0079365608693964147, -0.026343653609827478, -0.0064127815367698198, -0.021569631345745438, 0.090706510487419845, 0.023928227792328456, -0.030645866021173446, 0.0081944297873781744, 0.27230784814155318, -0.030140868003777244, -0.55369429571770845, -0.33461208848408441, 0.40042515638418175, 0.54787745216002603, 1.7521122327973908, 0.02630887865012415, -0.7903386881329546, -0.30506910575481899, -0.058122663069862322, -0.1512000567754718, 0.030805208457151921, -0.056922369420476453, 0.018910842473248434, 0.041026550164896362, 0.10973045554309671, -0.029240486244660805, -0.3163922398944391, -0.13757198545862218, 0.12706805404252669, -0.072057201177643526, -0.070445625631504319, 0.11232623315704422, 0.053944973270972273, 0.078972221527521536, -0.00416350617181658, -0.043614575991677791, -0.077748186566067592, 0.049219693586430378, 0.042416802273341318, 0.12644205243911066, 0.39096527623299887, -0.40370312470951558, -0.48770772267188234, 0.54473301805335006, 0.92898941300038107, 0.71512595047089234, 0.74385331371246577, 1.2482467538506357, -0.57166836623813888, -0.43281940369171401, 0.023943010115746077, 0.00030176170486927514, -0.24679227625704431, 0.16824405476099039, 0.092929862040844205, -0.029175915115095267, -0.081210816145377299, 0.032535239746583337, -0.018421573557966798, -0.18224178792918325, -0.29052216822588622, 0.17110516400703951, 0.22815908460498383, -0.15890945005602886, 0.0062170702455973175, -0.044853168166470177, 0.0080331646697508995, -0.0842632097276826, -0.016095705887684088, -7.820006368420517e-05, -0.097923922056211893, 0.48676804973393806, 0.35484595526186524, 0.18102793706565945, -1.0939934957719641, 0.9231011957591454, 0.49108674920037432, -1.6725083187014362, 0.56577881124465212, 1.7716903674840145, -0.31724338121882639, -0.46946217188769945, 0.46804088594167398, 0.2495599910064237, 0.21965961682575341, -0.28426475792188616, -0.12974774398976752, -0.086262426064739897, 0.084703474730633041, 0.12060535717228706, -0.33186051211466344, -0.10830858623812538, 0.17740469505624151, -0.0043101841409599814, -0.33866696253627121, 0.0393969525618715, -0.26339593722715154, 0.13598013030776659, 0.10364961453623139, -0.011168077595515221, -0.18224776807046214, -0.12296413131763473, 0.21989373735679868, 0.16380771710007386, 0.67271651276019118, -0.16319024909703136, 0.98390492917013062, 2.2217962254133496, -0.66077224091757802, 1.5638480130127614, -1.0129349058609651, 0.99232752650122769, 1.5155025161072819, 0.58675004339129688, 0.16801904131477496, 0.31725814504248523, -0.071714399164359219, 0.13832330176015895, -0.060442748560523389, -0.043434328775720558, -0.19718551141955432, -0.36586758725441343, -0.15612863751307984, -0.72499416196393318, -0.11056584899062098, 0.082780177430082938, -0.10585857030502534, -0.49717312826403764, 0.060297128338251849, -0.1741288940590143, 0.034503572794408806, -0.022140372568936324, 0.14950061311078439, 0.29242994865853189, -0.29100003355994419, 0.22751157962613949, -0.11471557758718894, 0.25575295594566499, 0.66007876209063321, -0.28144140655806837, -1.050216159001623], \"bottom\": {\"real\": [5837.242024063461, 16421.190569053251, 8527.2275182117319, 3938.41845467232, 969.21000043764093, 269.87346390668256, 193.53992011404216, 135.14631901451781, 58.523829955616236, 29.311524302602624, 20.863281166035843, 14.808244655557742, 11.401757474781434, 9.6386493936653288, 8.0538591094176777, 7.4714398062124641, 7.2711776175262477, 7.4714398062124241, 8.0538591094176653, 9.638649393665327, 11.401757474781416, 14.808244655557761, 20.863281166035858, 29.311524302602734, 58.523829955616236, 135.14631901451779, 193.53992011404216, 269.87346390668273, 969.21000043764059, 3938.4184546723186, 8527.2275182117301, 16421.190569053259, 14982.474506443205, 4755.1985786680198, 3083.8642011691682, 1502.8058566448747, 596.26851293203197, 262.35520536881347, 201.52671733896852, 108.13603201941604, 57.999252895466505, 28.992297197792773, 19.233600066307524, 13.871180161098291, 10.761421361485239, 8.8506828512506655, 7.8125584926262617, 7.1234501229356377, 6.6618841738486525, 7.1762884709606958, 8.1416889804019927, 8.8663632607744063, 11.328672883224474, 14.773155762512141, 20.058056528572401, 28.688344099071909, 57.995376649220766, 126.94075502116374, 211.30702516808583, 262.54448595536269, 752.96024761972672, 2141.5368023327851, 3891.3661973657881, 5583.5460990085166, 9500.6528086677681, 4225.3848573287933, 1708.1934289355966, 562.9450489663958, 526.41420210821127, 290.26438540271903, 151.34732218304231, 89.304597077577796, 50.161041673414204, 27.913649363990057, 19.253723232543383, 14.310501425792925, 10.622538104620221, 8.6520747616015274, 7.6796432895344049, 6.9311889072641995, 6.5442165971044535, 6.8352472963781299, 7.2531587818267287, 8.8125700197174819, 10.256278085266516, 13.962876672312342, 18.680978544191657, 27.641611280844351, 51.70590284164593, 92.383035108628647, 175.23999552329536, 238.6238705323166, 446.2130896894364, 589.84950644143407, 1459.800700420838, 2983.6421667816849, 6639.6980670311659, 3615.9230624353354, 1045.9683029029898, 541.95698246733389, 551.2292078912385, 269.01748102372522, 121.81702466062521, 78.619304368994548, 46.266475261147157, 26.895860643920866, 18.966790938143397, 14.141216689343503, 10.624588727031869, 8.5120674584469107, 7.5084078178458054, 7.127942028564302, 6.5505226441602824, 6.5976614570745582, 7.5671769464103935, 8.4293753366132105, 10.446992271959362, 13.755112829750516, 18.515159362788847, 25.868606557166544, 43.593025933023839, 76.847860046206122, 125.03651194390009, 241.77755195523335, 523.08499299660048, 633.36555854289827, 855.69476790230692, 2473.0066947172836, 2803.9496552692158, 1850.6397468329815, 645.77314636959022, 447.00563976857688, 381.6372474267435, 196.7755433249871, 93.586816816137713, 72.612365740746853, 43.711482900929944, 27.782222145016455, 18.647268962291367, 13.844325818813939, 10.350953817244738, 8.7140342291788997, 7.3516641952705921, 6.886474159529909, 6.1226840838853605, 6.7186507131414492, 7.0148796268173141, 7.9020046012660439, 9.6536048586555445, 13.744699851401226, 17.872279960942961, 25.025889030797831, 38.775468597625853, 68.228616115874232, 97.806667851841851, 178.52012140604563, 362.80035213144055, 506.96305099601244, 508.39785887877764, 1271.7627571663681, 1970.0713813014595, 1211.9708052435174, 448.82610946730466, 388.91483700385658, 294.26646682781944, 147.68595350614527, 76.563818921604266, 57.53338100926053, 37.094893522892434, 25.168957624787666, 17.405368368923924, 12.931100650610183, 10.211256703797424, 8.3783082007702649, 6.8845647672161352, 6.2954630311895761, 6.1711525716900475, 6.2852637654745882, 7.1318002457288037, 7.8126464614985656, 9.3562580058102185, 12.456351018938477, 17.12365920646733, 22.851195586808732, 34.22708028584924, 57.273965595477058, 82.126801795962663, 114.0182287640494, 248.69630423497404, 396.25330408596494, 382.77662480077174, 646.86127060880278, 1066.1959535576209, 770.74521634546068, 344.77171326148743, 328.21152488387929, 223.6732358532505, 124.39997807543456, 66.042124980023658, 49.833499278727395, 36.080812354502541, 24.010000461569632, 16.241873057458708, 11.94801819096188, 9.663620823552634, 8.1734814269274114, 6.8263151892657215, 6.1094005534487641, 5.5560364128866686, 6.0895161225652297, 6.7371553850929349, 7.5614980494024309, 9.3035460399083956, 11.904089289656403, 15.753116847312391, 22.116186781807659, 33.401673308199264, 45.775772578430164, 60.542807604917392, 91.412240599681226, 164.58197575163385, 289.97996145010069, 367.09809735899603, 433.51729458889321, 538.99714678707312, 436.9735160339028, 214.45700003213321, 226.27353228768246, 190.72528880002966, 104.24105887361294, 63.096291028318397, 44.895692115573439, 34.378771692376986, 22.743616534455565, 14.943130070579064, 11.306154107321404, 9.490726177732828, 8.057539867813432, 6.6249917656310648, 5.80530835366394, 5.6727594087192097, 5.6803994552580717, 6.4512234217242401, 7.3091820969038412, 8.9053168517088785, 11.147020821533502, 13.978280110937801, 19.308076160210224, 27.380246565144393, 39.45337202937899, 53.823906577074318, 70.344986096434994, 125.18491111128095, 220.27402210338624, 239.02095964975129, 253.52805611791149, 337.90351459641266, 301.96557555412664, 163.14862666039761, 176.1964602722083, 155.2640157056349, 91.402170635856464, 57.9223709952281, 44.132906015519367, 31.477476121951593, 19.994026988386896, 14.669539930994308, 10.52228821405147, 8.9499245076841039, 7.4160858759377133, 6.0652235290917815, 5.5336836347972449, 5.3453345499720717, 5.5251998880295652, 6.049359333226362, 7.4989544637904162, 8.6441457110666775, 10.17217183387787, 12.922358897606493, 16.497840703497662, 24.473525343022239, 36.893225695749557, 46.488420049270196, 60.008949681859932, 101.55324863109907, 172.57213254679178, 186.99209153386954, 177.69050334329205, 224.71115213821386, 219.35401697656656, 131.98987419085088, 139.58612051732652, 133.97255559613592, 83.717667146076977, 52.48988401855501, 39.948149447326976, 29.992243301791387, 19.792293237610107, 13.550533437330548, 10.191515700191694, 8.7251285565258279, 7.0130966099588283, 6.0412905020539274, 5.1695609453883042, 5.2335464217738297, 5.2748937601741233, 5.9151189141762242, 6.6404924993384702, 8.2525633194354864, 9.86505065394757, 11.857247340871206, 15.821441128307118, 21.809722446513074, 33.204842604441232, 45.292100524348356, 53.588237099743992, 86.046570865333351, 138.34470513151498, 144.28338780744133, 137.47961624149846, 184.36194031651988, 195.75342807998493, 111.69248606852764, 108.22432115257934, 110.31477193613289, 70.737952758714727, 45.316084199866118, 35.221165127538775, 25.132656234698317, 17.808708328889288, 13.205138111505544, 9.8319756958291311, 8.3851869715659166, 6.6979147774695411, 5.5577949826186863, 5.0640136062157843, 4.915924071395172, 5.1747375238921238, 5.621849200313962, 6.3926522738336189, 7.8838556827841355, 9.5880495388903295, 11.2702077240605, 14.675031755421674, 19.961485602094882, 28.340133288775018, 38.071807302485439, 46.211805942072893, 70.896288173632385, 115.46517347822648, 119.73189294718243, 110.21299532100423, 137.49078682179271, 145.21239507063157, 90.736475500202033, 84.820134662984671, 87.028887735269166, 58.592780926558561, 39.140475702708279, 30.030590426700837, 23.561748558876776, 17.07171690133644, 12.059539847971436, 9.1303469917064106, 7.8824915696444915, 6.5574577163884546, 5.4508327472027114, 4.6319487889521351, 4.8556936697031698, 5.0952139895658046, 5.3626061482546099, 6.0231504777267588, 7.3929124540904754, 8.8697139145390977, 10.839689611405708, 13.484775054138881, 18.125520870461621, 25.51326521840107, 33.814821758723511, 43.000660712963757, 59.289067569698993, 89.523100480006264, 96.002834501641331, 88.248403951505949, 114.22377327036351, 136.39754784126862, 85.133937137494058, 70.757613581150778, 72.941136445046624, 50.417131404641061, 35.29732697897046, 27.270836476117434, 20.337170678571646, 15.328073102208975, 11.227626008224609, 8.8894703399043831, 7.3066732490559749, 6.1117570010797007, 5.2240396800825373, 4.6927944754047974, 4.4462691956761722, 4.8997943453914665, 5.030120352863074, 5.8504059853355139, 6.9021030785339024, 8.6936481048417669, 10.014300550884089, 12.783989981758968, 16.915182814597465, 23.037925870268026, 29.781501040175886, 36.137786628939317, 46.659613314406016, 72.542096884400053, 80.098309124706176, 76.772569487169434, 87.96931966600367, 100.35528192635977, 66.390743706670477, 56.297220892995071, 57.449776912893739, 42.311817158751616, 30.3950154293208, 24.633397231162515, 18.800000277532757, 13.906344724637259, 10.685561612392762, 8.7726633553262534, 7.3765778222647702, 6.0238006847876884, 5.2082074327498917, 4.5886719664559399, 4.6166410353959701, 4.6115148269570563, 4.9920772309179853, 5.6445124723515159, 6.7980683034043956, 7.4975962005340229, 9.6066586869080837, 12.06652313244911, 16.251663826300451, 21.003823940677318, 27.622933573071261, 33.836788273738165, 41.877854423447168, 58.532835369703733, 68.239320296767971, 62.326149739008642, 71.583830955139561, 81.611391861674278, 61.290606958364052, 49.963935495056425, 49.744027747354536, 38.555965139546075, 28.313241453630848, 22.404376161451804, 17.69007471646092, 13.348861556136391, 10.46674681432143, 8.1507364253451371, 6.7804933363165576, 5.7303247473649055, 4.9737961537641029, 4.6591603640435002, 4.3691273542401863, 4.5876440856805019, 4.8775279419312838, 5.5643157824289267, 6.5106424514611394, 7.6517258774697732, 9.3978270674435489, 12.208065227131403, 15.316902707006163, 20.982661610009878, 26.317869298031479, 32.313264556083666, 38.062860113666069, 50.105167484748129, 58.219661124046276, 59.861157680092496, 61.019020366450448, 69.642805168222978, 57.634563900118565, 46.967523109902231, 43.85887184820529, 34.957640557066753, 26.505039983640941, 21.71545909517323, 16.236775633007202, 12.875777825381771, 9.9834739610997616, 7.8930497070448, 6.6829715569803687, 5.6672193704500122, 5.0794246915518446, 4.681264046528276, 4.6186632297539427, 4.6211092904368423, 5.0897865773957403, 5.5691810710797096, 6.5035187317991277, 7.2014326998593701, 9.1703620437944053, 12.475838151915292, 15.6623920524898, 19.528853843427893, 25.077028045409381, 30.833489267211636, 39.113296407386123, 46.770991427918581, 55.937485646720255, 57.570245344451905, 57.637817589030213, 59.860391566610879, 52.776195682327739, 43.839296967027423, 39.833012832197511, 33.598213438023812, 26.072700016436322, 20.276975501521189, 16.195672497297036, 12.239826665071417, 9.6875213487165066, 7.7379543893933631, 6.3786782254807157, 5.5950259327840586, 5.1232903828272987, 4.5786592309737237, 4.5178908466513406, 4.578659230973722, 5.1232903828272978, 5.5950259327840595, 6.3786782254807148, 7.7379543893933684, 9.6875213487165084, 12.239826665071421, 16.195672497297036, 20.276975501521182, 26.072700016436304, 33.598213438023805, 39.833012832197511, 43.839296967027416, 52.776195682327739, 59.860391566610836, 61.019020366450441, 57.570245344451919, 55.937485646720255, 46.770991427918517, 39.113296407386116, 30.833489267211636, 25.077028045409371, 19.528853843427893, 15.662392052489803, 12.475838151915296, 9.1703620437944, 7.2014326998593674, 6.5035187317991294, 5.5691810710797114, 5.0897865773957385, 4.6211092904368405, 4.6186632297539418, 4.6812640465282733, 5.0794246915518446, 5.6672193704500087, 6.6829715569803696, 7.8930497070447982, 9.9834739610997651, 12.875777825381764, 16.236775633007209, 21.715459095173252, 26.505039983640959, 34.957640557066775, 43.858871848205247, 46.967523109902238, 57.634563900118593, 69.642805168222949, 71.583830955139618, 59.861157680092482, 58.21966112404624, 50.105167484748137, 38.062860113666083, 32.313264556083666, 26.317869298031482, 20.982661610009867, 15.316902707006161, 12.208065227131399, 9.3978270674435436, 7.6517258774697732, 6.5106424514611394, 5.5643157824289284, 4.8775279419312856, 4.587644085680501, 4.3691273542401872, 4.6591603640434966, 4.973796153764102, 5.7303247473649037, 6.7804933363165594, 8.1507364253451371, 10.466746814321423, 13.348861556136386, 17.69007471646092, 22.404376161451779, 28.313241453630852, 38.555965139546039, 49.744027747354508, 49.963935495056418, 61.290606958364073, 81.611391861674235, 87.969319666003628, 62.326149739008663, 68.239320296767957, 58.532835369703712, 41.877854423447168, 33.836788273738158, 27.622933573071283, 21.003823940677311, 16.251663826300444, 12.066523132449106, 9.6066586869080837, 7.4975962005340202, 6.7980683034043929, 5.6445124723515194, 4.9920772309179844, 4.6115148269570598, 4.6166410353959719, 4.5886719664559372, 5.2082074327498908, 6.0238006847876866, 7.3765778222647711, 8.7726633553262587, 10.685561612392764, 13.906344724637258, 18.80000027753276, 24.633397231162533, 30.395015429320793, 42.311817158751609, 57.449776912893732, 56.297220892995028, 66.390743706670506, 100.35528192635975, 114.22377327036349, 76.772569487169449, 80.098309124706219, 72.542096884400053, 46.659613314406002, 36.137786628939317, 29.781501040175893, 23.037925870268033, 16.915182814597468, 12.783989981758975, 10.014300550884082, 8.6936481048417651, 6.9021030785339006, 5.8504059853355228, 5.0301203528630678, 4.8997943453914612, 4.4462691956761731, 4.6927944754048019, 5.2240396800825328, 6.1117570010797033, 7.3066732490559732, 8.8894703399043813, 11.227626008224609, 15.32807310220897, 20.337170678571649, 27.270836476117438, 35.297326978970467, 50.417131404641083, 72.941136445046638, 70.757613581150821, 85.133937137494073, 136.39754784126856, 137.49078682179265, 88.248403951506006, 96.002834501641317, 89.523100480006221, 59.289067569698972, 43.000660712963743, 33.814821758723504, 25.51326521840107, 18.125520870461624, 13.484775054138884, 10.839689611405714, 8.8697139145391013, 7.3929124540904745, 6.0231504777267606, 5.362606148254609, 5.0952139895658073, 4.8556936697031734, 4.6319487889521325, 5.4508327472027096, 6.5574577163884502, 7.8824915696444933, 9.1303469917064124, 12.059539847971436, 17.071716901336433, 23.561748558876776, 30.030590426700826, 39.140475702708279, 58.592780926558504, 87.028887735269151, 84.820134662984628, 90.73647550020199, 145.21239507063157, 184.36194031652002, 110.2129953210042, 119.73189294718252, 115.4651734782265, 70.896288173632399, 46.211805942072878, 38.071807302485439, 28.340133288775018, 19.961485602094882, 14.675031755421674, 11.270207724060505, 9.5880495388903277, 7.8838556827841364, 6.3926522738336233, 5.6218492003139611, 5.1747375238921247, 4.9159240713951746, 5.0640136062157861, 5.5577949826186863, 6.697914777469534, 8.3851869715659184, 9.8319756958291471, 13.205138111505548, 17.808708328889303, 25.13265623469832, 35.221165127538775, 45.316084199866097, 70.737952758714712, 110.3147719361329, 108.22432115257941, 111.69248606852767, 195.75342807998487, 224.71115213821398, 137.47961624149852, 144.28338780744139, 138.3447051315149, 86.046570865333337, 53.588237099743992, 45.292100524348342, 33.204842604441232, 21.809722446513071, 15.82144112830712, 11.857247340871208, 9.86505065394757, 8.2525633194354864, 6.640492499338464, 5.9151189141762242, 5.2748937601741233, 5.2335464217738297, 5.1695609453883096, 6.0412905020539247, 7.0130966099588328, 8.725128556525835, 10.191515700191694, 13.550533437330545, 19.792293237610103, 29.992243301791408, 39.948149447327012, 52.489884018555003, 83.717667146076963, 133.97255559613592, 139.58612051732649, 131.98987419085091, 219.35401697656653, 337.90351459641266, 177.69050334329216, 186.99209153386957, 172.57213254679186, 101.55324863109904, 60.008949681859939, 46.488420049270182, 36.893225695749557, 24.473525343022239, 16.497840703497666, 12.922358897606497, 10.172171833877869, 8.6441457110666775, 7.4989544637904126, 6.0493593332263602, 5.5251998880295634, 5.3453345499720717, 5.5336836347972458, 6.0652235290917806, 7.4160858759377133, 8.949924507684111, 10.522288214051471, 14.669539930994311, 19.994026988386889, 31.477476121951593, 44.13290601551936, 57.922370995228107, 91.402170635856407, 155.2640157056349, 176.1964602722083, 163.14862666039767, 301.96557555412653, 538.99714678707278, 253.5280561179116, 239.02095964975135, 220.2740221033861, 125.18491111128091, 70.344986096434923, 53.823906577074332, 39.453372029378947, 27.380246565144397, 19.308076160210238, 13.978280110937792, 11.147020821533506, 8.9053168517088821, 7.3091820969038439, 6.4512234217242392, 5.6803994552580681, 5.6727594087192079, 5.8053083536639392, 6.6249917656310666, 8.0575398678134302, 9.4907261777328298, 11.306154107321403, 14.943130070579077, 22.743616534455558, 34.378771692377001, 44.895692115573446, 63.09629102831839, 104.241058873613, 190.72528880002952, 226.27353228768243, 214.45700003213315, 436.97351603390234, 1066.1959535576209, 433.51729458889332, 367.09809735899597, 289.97996145010086, 164.58197575163376, 91.412240599681198, 60.542807604917364, 45.775772578430157, 33.401673308199264, 22.116186781807642, 15.753116847312398, 11.904089289656401, 9.303546039908392, 7.5614980494024362, 6.7371553850929322, 6.0895161225652297, 5.5560364128866677, 6.1094005534487605, 6.8263151892657268, 8.1734814269274096, 9.6636208235526269, 11.948018190961893, 16.241873057458722, 24.010000461569639, 36.080812354502534, 49.833499278727416, 66.042124980023658, 124.39997807543459, 223.67323585325056, 328.21152488387946, 344.77171326148749, 770.74521634546022, 1970.0713813014588, 646.86127060880301, 382.77662480077169, 396.2533040859646, 248.69630423497387, 114.01822876404945, 82.126801795962692, 57.273965595476994, 34.227080285849233, 22.851195586808739, 17.12365920646733, 12.456351018938475, 9.3562580058102167, 7.8126464614985656, 7.1318002457288037, 6.2852637654745882, 6.1711525716900475, 6.2954630311895787, 6.8845647672161387, 8.3783082007702561, 10.211256703797417, 12.931100650610194, 17.405368368923916, 25.168957624787648, 37.094893522892434, 57.533381009260523, 76.563818921604266, 147.68595350614524, 294.26646682781944, 388.91483700385658, 448.82610946730478, 1211.9708052435162, 2803.9496552692158, 1271.7627571663686, 508.39785887877753, 506.96305099601244, 362.80035213144049, 178.52012140604566, 97.806667851841823, 68.228616115874146, 38.775468597625853, 25.025889030797838, 17.872279960942965, 13.74469985140124, 9.6536048586555427, 7.9020046012660456, 7.0148796268173159, 6.7186507131414386, 6.1226840838853631, 6.8864741595299055, 7.3516641952705939, 8.7140342291789032, 10.350953817244736, 13.844325818813926, 18.64726896229136, 27.782222145016434, 43.711482900929937, 72.612365740746867, 93.586816816137656, 196.7755433249871, 381.63724742674339, 447.00563976857711, 645.77314636959011, 1850.6397468329806, 6639.698067031165, 2473.0066947172841, 855.69476790230704, 633.36555854289816, 523.0849929966007, 241.77755195523349, 125.03651194390012, 76.847860046206094, 43.593025933023853, 25.868606557166554, 18.515159362788847, 13.755112829750496, 10.44699227195936, 8.4293753366132176, 7.5671769464103917, 6.5976614570745609, 6.5505226441602797, 7.1279420285643011, 7.5084078178458018, 8.5120674584469089, 10.624588727031863, 14.141216689343507, 18.966790938143404, 26.895860643920869, 46.266475261147157, 78.619304368994577, 121.81702466062518, 269.01748102372505, 551.22920789123827, 541.95698246733446, 1045.9683029029893, 3615.9230624353345, 9500.6528086677681, 2983.6421667816867, 1459.8007004208382, 589.84950644143373, 446.2130896894364, 238.62387053231652, 175.23999552329542, 92.383035108628548, 51.705902841645944, 27.641611280844312, 18.680978544191667, 13.962876672312348, 10.256278085266519, 8.8125700197175014, 7.2531587818267402, 6.8352472963781254, 6.5442165971044517, 6.9311889072641986, 7.6796432895344058, 8.6520747616015186, 10.622538104620222, 14.310501425792921, 19.253723232543386, 27.913649363990046, 50.161041673414196, 89.304597077577839, 151.34732218304231, 290.26438540271909, 526.41420210821127, 562.94504896639603, 1708.1934289355961, 4225.3848573287914, 14982.474506443201, 5583.5460990085194, 3891.3661973657854, 2141.5368023327842, 752.9602476197266, 262.54448595536314, 211.30702516808589, 126.94075502116375, 57.995376649220773, 28.688344099071898, 20.058056528572401, 14.773155762512143, 11.328672883224492, 8.8663632607744169, 8.1416889804020052, 7.1762884709607109, 6.6618841738486552, 7.1234501229356262, 7.8125584926262608, 8.8506828512506655, 10.761421361485221, 13.871180161098282, 19.233600066307527, 28.992297197792769, 57.999252895466505, 108.13603201941609, 201.52671733896852, 262.35520536881353, 596.26851293203185, 1502.8058566448742, 3083.8642011691672, 4755.1985786680179], \"imag\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}, \"imag\": [0.0, -0.13871927675086548, -0.55827571496092165, -0.85383263724083092, -0.46701193383615952, 0.047809537946767316, -0.3426920474802197, 0.15831589374137059, 0.20589774809377467, -0.21944378817656213, -0.12654666933988368, -0.19544466487854822, -0.096446269450190733, -0.2265628704083768, 0.10840537931386109, -0.055457499657790024, 0.0, 0.055457499657784036, -0.10840537931384955, 0.22656287040837902, 0.096446269450189581, 0.19544466487854698, 0.1265466693398799, 0.21944378817656165, -0.20589774809377467, -0.15831589374137045, 0.34269204748022014, -0.047809537946767663, 0.46701193383615958, 0.85383263724082981, 0.55827571496092188, 0.13871927675086551, -1.279550584464304, -0.80695903119669909, -0.5066002982483182, -1.4561178571661, -0.13414323846201096, -0.25055297311154978, -0.64027404819684697, -0.19951473048424853, 0.33137912963317689, -0.047498243759329373, -0.24064979253244873, 0.1395435157196932, 0.17789090203786645, -0.044374683774468404, -0.36806933922228663, 0.19528135326361654, 0.32999646269142918, -0.13015393203002068, 0.1959681784626765, 0.28571835588367483, 0.22705801052414751, -0.14508578389537852, 0.23457709892354506, 0.21163882649779878, -0.20150153854805303, 0.060946718066345364, 0.31004041285864392, -0.26258387187077481, 0.13955938857309563, -0.2449447076348287, 0.068510051090992716, -1.1758121586434307, -1.3682011726001491, -1.6899938281650106, -0.75019268688655194, 0.68911282851752931, 0.44086751164178845, -0.23155959034339019, -0.54510315877084203, 0.26585764990704713, 0.2624959582084973, -0.045146091846171167, 0.011517786678353055, -0.057907844320373422, 0.076854124253010955, 0.0035092112107953564, -0.23588030048916386, -0.048277840380711062, -0.21489820671404902, 0.26817287178185911, -0.027468417557455105, 0.29873174456545087, 0.072899207479288589, 0.023829771073631354, 0.0066491170121291982, 0.0048298736467919092, -0.13057930804766787, -0.26946209593128789, 0.39240115086507854, 0.85317721061416651, -0.11752989424299426, 0.99998707389668307, 0.55787436167296656, -1.0314907737559058, -1.5043263157657751, -1.3830149751777026, -0.20446853801739454, -0.28364033101911829, 0.68303147161529054, 0.03902721990981517, -0.18273076418691683, -0.013466871818696777, 0.028891896132398606, -0.068621242214500722, -0.026792869524675422, 0.18842973810535804, 0.068392282535087487, -0.17097210848547728, -0.23288712244734344, -0.31416612358708279, 0.27284169211913839, -0.072438990225411531, 0.1202436118466384, 0.067443262257117789, -0.0040452326400191837, -0.15231382612170316, 0.020438609938141238, 0.10773227995476008, -0.1646961578394999, -0.034526357222664054, 0.34045699686317549, 0.3582562672018631, 0.50203282214727851, -0.90050578840564854, 1.1141651843864948, -1.0547694551235964, 0.15113295529591572, -0.42011997382980693, -1.1306687523196075, 0.59904899563122349, 0.12782476119556421, -0.26469201284371935, -0.0028564673365734715, 0.25878855026626812, 0.00078645201341040851, -0.17181320075266995, 0.013143422355015144, 0.050238396740841747, 0.072156922858987921, 0.041604673982592558, -0.0112715468909201, -0.016101389694688766, -0.31269363662275068, 0.094974334151300396, -0.067869387966968731, 0.14811752790953986, 0.010724993842567176, -0.071495661604357427, -0.037154193600070516, 0.05779163337935353, 0.094937931062917286, -0.1272883333159909, -0.017408469796284951, 0.62003762386212868, 0.074417004563971767, -0.12904495334293709, -1.4636084587609224, -0.036743730082780299, -0.77470195486186, -0.60686918965332004, 0.62872636200456622, -0.46894237369717673, -0.18368617361305525, 0.26816260026693856, 0.13447215443394772, 0.041008154934057489, -0.017107991149299187, -0.0680369475996533, -0.01240601732954733, 0.059356927461924558, 0.12615835751185028, 0.053672308552617974, 0.037749743592242362, -0.10597138547480481, 0.022172258797336697, -0.058681894939636686, 0.12792055300624736, -0.060154323470105943, 0.032298308999269151, -0.015701976416949814, 0.0007367446231764113, 0.07712597645572114, 0.055644084876628218, -0.065981740018919821, -0.14567847379973994, 0.039540586335773356, 0.24917063867041539, -0.6432675339043068, 0.36754664039982821, -0.069649876974948205, 0.2952063874323651, -0.011417685121456805, -1.0450941798657123, -0.17374602795438093, 0.19930768818407893, -0.1556206112582631, 0.055817128538076119, 0.17900936499027481, 0.0052374024484263433, -0.042596098823283683, -0.020834261928533829, 0.036686593450547957, 0.00076880260958178746, 0.061719692477810909, 0.027700064466885506, 0.10661165850403151, -0.13945785164947772, -0.050544258155460708, -0.11937846922953205, 0.034399558837173369, 0.02521789889898339, -0.0047468618190418272, -0.028256857448446509, 0.029239764799856467, 0.046539635523190424, -0.033316423902485758, -0.15842957449053302, 0.14741145606308881, 0.1752194519195491, -0.075629282019522973, -0.91968716746889456, -0.45504702044764878, -0.12177128356890227, -0.10462001130261206, 0.1804016527269576, -0.047005347129142915, -0.19200701617075638, 0.1133507155810588, 0.14315736053243958, -0.067545520465919412, -0.0022066601859379556, 0.0084001340729883862, 0.0049338006978182497, 0.016196236751475263, 0.066419574069183293, -0.012240235365542763, 0.014433128838537781, 0.023674926554515096, -0.017114978073907605, -0.14379898617791109, 0.084303725772385638, 0.0056779923265117766, 0.048321020114327755, 0.022849248448590556, 0.012395399307186424, 0.023865191872962568, -0.0060375152678495622, -0.021897165586045375, -0.092173327221095822, -0.17587869380621102, 0.091992925322100877, 0.014980171338571357, 0.0086063527817299007, 0.098130362913165001, 0.130338354535672, 0.094203305677599436, -0.19730813245926024, -0.10041080102702246, 0.075932042745803577, 0.021134287621881041, -0.059575532325244519, 0.0082992125422013917, 0.015272751179096435, 0.0090248536114060952, -0.019251438395354602, -0.015788972597383853, 0.003250945662643008, 0.032968975479440332, -0.015058032290062954, 0.017643635220692015, -0.068857003169531444, 0.030070570566209365, -0.12793975070954616, -0.043534834876013277, 0.0017423598025251587, 0.028592812647173952, 0.0036967486190428137, 0.0090453167838253218, -0.016259252101333162, -0.0052076817297827191, 0.018046490267575967, -0.026168992315517926, -0.083077034868877908, 0.032798990212655046, -0.027546636940189637, -0.12409557570816734, -0.0088356071822206419, -0.034333260533212014, 0.056177295075322577, 0.057994393113440637, -0.032566171451921935, -0.010465798382464413, 0.020079425427313443, -0.017396471253638312, -0.017870360905994483, 0.010919865739753416, 0.012363627500514531, -0.014313215415815719, 0.034201557920817111, 0.10796975372596095, 0.21064351401911494, -0.046016401957029461, -0.083803307026608195, -0.15128619138644472, -0.070745415327885988, -0.06951503451164355, 0.070638418064815661, -0.0080019035626016123, 0.02654845111893607, 0.019862790828204354, -0.0038698355762961699, -0.020866890117519677, -0.0048084432749845906, -0.0036451640963975299, -0.0026341276434262537, -0.0023099396961399252, 0.043908100663757832, 0.096772033742844044, 0.04918905117971889, 0.070600771528734244, -0.026773628633603139, -0.05973226936448265, 0.013552286601009756, 0.0032289712715403013, -0.023046337829044056, -0.010405151723131599, 0.019427096259341661, 0.018256051683800133, -0.056759870222018213, -0.032960560091393032, -0.017399004273096801, 0.12185282737260948, 0.037984234337547759, -0.12270039394272629, -0.055947445070994896, 0.04621845892784341, -0.1857137618225036, -0.063810892086947277, 0.07053672326645595, 0.03906718120738633, 0.01577517031413787, -0.0047456570119124219, -0.019801411975277249, 0.024637199092487311, 0.019457415538283646, -0.0067710516924983765, -0.028346017012320548, -0.0065098329229195291, -0.0013352981567293612, -0.023151697315085987, -0.06519950655383687, -0.1042256990435297, -0.023224778901070588, 0.0072963544312097499, -0.034708386400909293, -0.0023809918522597964, 0.016167541663812009, -0.0054340236987463174, 0.0027208109883995382, 0.0066841964011560553, -0.023932611476630623, -0.039005803210705049, 0.016396390506166533, 0.058067983872416511, 0.15112210885707694, 0.091953539825334094, -0.30878981646904202, 0.23773808023122034, -0.11496619447060334, -0.15410637679425881, 0.16398523681965352, -0.042160123131605852, -0.0057838899052936009, 0.021159112170606904, -0.00089194024953267548, -0.043632529695206895, 0.025594278576058532, 0.04827977682701759, 0.008656372871138766, -0.025123508323013247, -0.021222695138498154, 0.012727342518660707, 0.0027327273075534982, 0.016727222825244921, -0.062351999721191126, -0.095086485134993501, 0.009789315676701096, 0.020526538310240195, -0.0017729650965628652, 0.0042367342426148282, 0.0096918161659650896, -0.014518052118829046, -0.0045810353743419062, -0.069451504639382974, -0.036289590762181183, 0.22708969966074724, 0.3665342673930222, -0.59625762091850343, 0.36774772058649913, 0.2627894192943519, -0.10703484463450727, -0.13950623949894417, -0.080806137493453625, -0.018761372187400087, -0.14807112835842171, 0.015533054933596769, -0.013156170331620851, 0.033053795814988449, 0.012901798319361097, 0.00377273404398293, -0.0087050725477761486, -0.026200884444946355, -0.069983120002794802, -0.045851102565308888, -0.0080215915074989454, -0.048063119818621811, -0.055909188302307122, 0.015567334119352533, -0.069113723063989038, -0.0072474243428621863, 0.042526562044161449, 0.039806904605142766, -0.027582495505149615, 0.0049261433754253488, -0.04754279011762625, -0.074122351214929355, 0.22223052073714245, -0.0077417273670608014, -0.080825286420915882, 0.62390518555370134, -0.18988737165776209, -0.013310214088767865, -0.13538196037364333, -0.38370084094404533, -0.32853605615928166, -0.23095349816725769, 0.0024573680892555631, -0.060148519255615616, 0.030360401196840837, -0.0084214745912351684, 0.033027304906486414, 0.030739864021722699, 0.0097039926999964547, -0.060698557392036313, -0.04746519227839175, -0.053530300822357386, -0.046174234082698239, 0.0052112044634668644, 0.020596160958060543, -0.15878906772803425, -0.02193329327109424, 0.0079342423803948989, 0.027919450264392773, 0.0070430807013025284, 0.020085011074200358, -0.075935043112063852, -0.041652272773957957, 0.16889959178925665, 0.18647295463827135, 0.014154913289577202, 0.060521107576468509, -0.63637312336837226, 0.90191957381577925, 0.27922666018549325, -0.48673882008850766, -0.33370031357259311, -0.3513559741645329, -0.2622745616761345, -0.17197492325356289, -0.0057315027931728107, -0.04469091820910031, 0.053283308768024513, 0.039465599946438043, -0.014174493080162808, -0.04946368453866596, -0.022857667990750397, -0.16881304090125779, -0.080812526909499666, 0.00058234446045326367, 0.084338425974376116, -0.12518231680881081, -0.040506406338050263, -0.08374410530080309, -0.001350704062862842, 0.030200114248426838, 0.042299889130269351, 0.011310849850443803, 0.081759178445920677, 0.035289563063634108, -0.12268118169149339, 0.058157249768416797, 0.19453030659557169, -0.32019695139960919, 1.2621857571853639, 0.24947885513851267, -0.86827138009746829, -0.26346017480935824, -0.40312000272498982, -0.22820944406317872, 0.0813299683314989, 0.0038871367161771898, -0.10891614598123801, 0.00043800911235750134, -0.043289297526922212, 0.012593343881888895, -0.0042686636670869688, -0.008833188472774969, -0.024141666831206311, -0.03923653338217388, -0.25435751708422283, 0.0, 0.13106581900761921, 0.22441332039311174, -0.094768447018961463, 0.0024812204443016074, 0.036286268392045858, 0.0056698536823630895, -0.010705526315732189, 0.082044918512892334, 0.0010532751265284197, 0.015101105715477795, 0.090653505450224631, 0.27613653682211553, 0.17494988738073455, 0.30956821269851931, 0.034540476362705901, 0.0, -0.034540476362701966, -0.30956821269851847, -0.17494988738073411, -0.27613653682211575, -0.090653505450227129, -0.015101105715478274, -0.0010532751265287738, -0.082044918512892334, 0.010705526315732109, -0.0056698536823632534, -0.036286268392045982, -0.0024812204443015839, 0.094768447018961921, -0.22441332039311199, -0.13106581900761924, -0.00058234446045052997, 0.25435751708422299, 0.039236533382173068, 0.024141666831206714, 0.0088331884727747174, 0.0042686636670865837, -0.012593343881888968, 0.04328929752692242, -0.00043800911235742604, 0.1089161459812379, -0.0038871367161778295, -0.081329968331500163, 0.22820944406317803, 0.40312000272499021, 0.26346017480936107, 0.86827138009747229, -0.24947885513851314, -1.2621857571853632, 0.32019695139960752, -0.19453030659557399, -0.058157249768416672, 0.12268118169149329, -0.035289563063634503, -0.081759178445920649, -0.011310849850443772, -0.042299889130268831, -0.030200114248426623, 0.0013507040628626303, 0.083744105300802674, 0.040506406338050895, 0.12518231680881103, -0.084338425974375644, 0.046174234082696289, 0.08081252690949875, 0.16881304090125832, 0.022857667990750261, 0.04946368453866589, 0.014174493080162815, -0.039465599946438334, -0.053283308768024965, 0.044690918209100129, 0.0057315027931725314, 0.1719749232535624, 0.26227456167613394, 0.3513559741645329, 0.33370031357259339, 0.48673882008850966, -0.27922666018549408, -0.90191957381578058, 0.63637312336837637, -0.060521107576467635, -0.014154913289577215, -0.18647295463827063, -0.16889959178925743, 0.041652272773958374, 0.075935043112064518, -0.020085011074200423, -0.0070430807013025249, -0.02791945026439252, -0.0079342423803949891, 0.021933293271094115, 0.15878906772803389, -0.02059616095805995, -0.0052112044634673969, 0.008021591507499164, 0.05353030082235833, 0.047465192278390397, 0.060698557392036064, -0.0097039926999963107, -0.030739864021722747, -0.033027304906486449, 0.008421474591235165, -0.03036040119684083, 0.060148519255615165, -0.0024573680892551967, 0.23095349816725866, 0.32853605615928261, 0.38370084094404566, 0.13538196037364647, 0.01331021408876858, 0.18988737165776171, -0.62390518555369734, 0.080825286420916714, 0.0077417273670609497, -0.22223052073714233, 0.074122351214929452, 0.047542790117626306, -0.0049261433754249724, 0.027582495505149737, -0.039806904605142586, -0.042526562044161428, 0.0072474243428622999, 0.069113723063988594, -0.015567334119352927, 0.055909188302305984, 0.048063119818621922, -0.0027327273075535455, 0.045851102565308353, 0.069983120002795093, 0.026200884444945973, 0.0087050725477759057, -0.0037727340439829347, -0.012901798319361227, -0.033053795814988754, 0.013156170331620811, -0.015533054933596691, 0.14807112835842184, 0.018761372187400604, 0.080806137493454139, 0.13950623949894433, 0.10703484463450816, -0.26278941929435246, -0.36774772058649907, 0.59625762091850687, -0.36653426739302131, -0.22708969966074771, 0.036289590762181079, 0.069451504639383266, 0.0045810353743422905, 0.014518052118829408, -0.0096918161659651156, -0.0042367342426148941, 0.0017729650965627938, -0.020526538310240098, -0.0097893156767009607, 0.095086485134992974, 0.062351999721190751, -0.01672722282524514, 0.065199506553837216, -0.012727342518659639, 0.021222695138497675, 0.025123508323013449, -0.0086563728711387469, -0.048279776827017555, -0.025594278576058595, 0.04363252969520693, 0.00089194024953267417, -0.021159112170607019, 0.0057838899052937813, 0.042160123131606046, -0.16398523681965352, 0.15410637679425865, 0.11496619447060411, -0.23773808023122042, 0.30878981646904247, -0.091953539825333053, -0.15112210885707561, -0.058067983872415838, -0.016396390506166002, 0.039005803210705077, 0.023932611476630637, -0.006684196401155907, -0.0027208109883995707, 0.0054340236987462662, -0.016167541663812044, 0.0023809918522598732, 0.034708386400909043, -0.0072963544312100569, 0.023224778901069786, 0.10422569904352962, -0.049189051179719279, 0.023151697315084544, 0.0013352981567299367, 0.0065098329229194736, 0.02834601701232067, 0.0067710516924982707, -0.019457415538283694, -0.024637199092487305, 0.019801411975277225, 0.0047456570119127489, -0.015775170314137797, -0.03906718120738624, -0.070536723266456214, 0.063810892086946833, 0.18571376182250354, -0.046218458927843417, 0.055947445070994993, 0.1227003939427266, -0.037984234337547038, -0.12185282737260873, 0.01739900427309727, 0.032960560091392817, 0.056759870222018227, -0.018256051683799891, -0.019427096259341584, 0.010405151723131587, 0.023046337829044038, -0.0032289712715403299, -0.013552286601009622, 0.059732269364482463, 0.026773628633603028, -0.070600771528734632, 0.008835607182220432, -0.096772033742842878, -0.043908100663758234, 0.0023099396961402566, 0.0026341276434262424, 0.0036451640963978101, 0.004808443274984581, 0.020866890117519587, 0.0038698355762962896, -0.019862790828204292, -0.026548451118935872, 0.0080019035626017337, -0.0706384180648158, 0.069515034511643051, 0.070745415327885364, 0.15128619138644453, 0.083803307026608292, 0.046016401957029593, -0.21064351401911435, -0.10796975372596025, -0.034201557920816583, 0.01431321541581594, -0.012363627500514576, -0.010919865739753575, 0.017870360905994497, 0.017396471253638378, -0.02007942542731345, 0.01046579838246435, 0.032566171451921762, -0.05799439311344054, -0.056177295075322847, 0.034333260533212451, -0.130338354535672, 0.12409557570816747, 0.027546636940189641, -0.032798990212655137, 0.083077034868877978, 0.026168992315517999, -0.018046490267575984, 0.005207681729782772, 0.016259252101333162, -0.009045316783825131, -0.0036967486190426836, -0.028592812647173869, -0.0017423598025251908, 0.043534834876013409, 0.12793975070954686, -0.030070570566209584, 0.068857003169531444, -0.017643635220692303, 0.015058032290063167, -0.032968975479440069, -0.0032509456626426633, 0.015788972597383943, 0.019251438395354474, -0.0090248536114061126, -0.015272751179096435, -0.0082992125422014836, 0.059575532325244533, -0.021134287621881149, -0.075932042745803632, 0.10041080102702246, 0.19730813245926007, -0.094203305677599283, 0.12177128356890216, -0.098130362913164085, -0.0086063527817301141, -0.014980171338571052, -0.091992925322100572, 0.17587869380621152, 0.092173327221095724, 0.021897165586045479, 0.0060375152678496429, -0.02386519187296254, -0.012395399307185896, -0.022849248448590303, -0.048321020114327692, -0.0056779923265118269, -0.084303725772385735, 0.1437989861779114, 0.017114978073907855, -0.023674926554513819, -0.014433128838537597, 0.012240235365543381, -0.066419574069182918, -0.016196236751474646, -0.0049338006978182185, -0.0084001340729884851, 0.0022066601859378697, 0.067545520465919467, -0.1431573605324398, -0.11335071558105927, 0.19200701617075636, 0.047005347129143109, -0.18040165272695829, 0.10462001130261284, -0.2952063874323646, 0.45504702044764878, 0.91968716746889512, 0.075629282019523555, -0.17521945191954877, -0.14741145606308895, 0.15842957449053352, 0.033316423902485841, -0.046539635523190549, -0.029239764799856394, 0.028256857448446561, 0.0047468618190423398, -0.025217898898983061, -0.034399558837173737, 0.11937846922953181, 0.050544258155460854, 0.1394578516494776, -0.10661165850403005, -0.027700064466883865, -0.061719692477810832, -0.00076880260958129979, -0.036686593450547596, 0.020834261928534131, 0.042596098823283357, -0.0052374024484263546, -0.17900936499027453, -0.055817128538076279, 0.1556206112582631, -0.19930768818407885, 0.17374602795438115, 1.0450941798657116, 0.011417685121456564, 0.77470195486186011, 0.069649876974948843, -0.36754664039982721, 0.64326753390430735, -0.24917063867041553, -0.039540586335773169, 0.14567847379973992, 0.065981740018920196, -0.055644084876628218, -0.07712597645572139, -0.00073674462317611055, 0.015701976416950342, -0.032298308999268784, 0.060154323470106401, -0.12792055300624763, 0.058681894939637193, -0.022172258797336572, 0.105971385474807, -0.037749743592242278, -0.053672308552617946, -0.12615835751184992, -0.059356927461923663, 0.012406017329547145, 0.068036947599653702, 0.017107991149299284, -0.041008154934057878, -0.13447215443394772, -0.26816260026693878, 0.18368617361305564, 0.46894237369717728, -0.62872636200456533, 0.60686918965331993, -0.15113295529591578, 0.036743730082780514, 1.463608458760923, 0.12904495334293731, -0.074417004563971351, -0.62003762386212891, 0.017408469796284774, 0.1272883333159911, -0.094937931062917147, -0.057791633379354237, 0.037154193600070003, 0.071495661604358593, -0.010724993842566222, -0.14811752790953939, 0.067869387966970118, -0.094974334151300438, 0.31269363662275046, 0.01610138969469304, 0.011271546890921311, -0.0416046739825933, -0.072156922858987255, -0.050238396740841143, -0.013143422355014638, 0.17181320075266959, -0.00078645201341033847, -0.2587885502662679, 0.0028564673365731054, 0.26469201284371935, -0.12782476119556443, -0.59904899563122194, 1.130668752319608, 0.4201199738298067, 1.5043263157657745, 1.0547694551235969, -1.1141651843864939, 0.90050578840564954, -0.50203282214727829, -0.35825626720186354, -0.34045699686317654, 0.034526357222664658, 0.16469615783949973, -0.10773227995476188, -0.020438609938140839, 0.15231382612170388, 0.0040452326400209297, -0.067443262257115694, -0.120243611846639, 0.072438990225412794, -0.27284169211913811, 0.31416612358708496, 0.23288712244734694, 0.17097210848547523, -0.068392282535087695, -0.1884297381053561, 0.026792869524674363, 0.068621242214500999, -0.028891896132398506, 0.01346687181869554, 0.18273076418691644, -0.039027219909814823, -0.68303147161529132, 0.28364033101911773, 0.20446853801739462, 1.3830149751777017, 1.3682011726001495, 1.0314907737559074, -0.55787436167296611, -0.99998707389668362, 0.11752989424299397, -0.85317721061416762, -0.39240115086507799, 0.26946209593128989, 0.13057930804766765, -0.0048298736467919578, -0.0066491170121302217, -0.023829771073630532, -0.072899207479286424, -0.29873174456544577, 0.027468417557455698, -0.26817287178186705, 0.21489820671404794, 0.048277840380711166, 0.23588030048916517, -0.0035092112107956196, -0.076854124253010928, 0.057907844320372041, -0.011517786678353752, 0.045146091846170348, -0.2624959582084973, -0.26585764990704652, 0.54510315877084026, 0.23155959034339049, -0.44086751164178861, -0.68911282851752897, 0.75019268688655205, 1.6899938281650098, 1.2795505844643045, 1.1758121586434311, -0.068510051090992494, 0.24494470763482898, -0.13955938857309558, 0.26258387187077409, -0.31004041285864437, -0.060946718066343622, 0.20150153854805294, -0.21163882649779717, -0.23457709892354675, 0.14508578389537688, -0.22705801052414679, -0.2857183558836735, -0.19596817846267664, 0.13015393203001066, -0.32999646269142935, -0.19528135326362211, 0.36806933922229168, 0.044374683774465004, -0.17789090203786717, -0.13954351571969323, 0.24064979253244634, 0.047498243759330878, -0.33137912963317673, 0.19951473048424839, 0.64027404819684597, 0.25055297311154973, 0.13414323846201037, 1.4561178571660989, 0.50660029824831798, 0.80695903119669876], \"height\": 32, \"width\": 32, \"top\": {\"real\": [17750.107020847583, 6210.8656159662787, 10017.081922566327, 3457.5995074393513, 265.850218137708, -70.207684810343054, -8.882891147089472, 24.589756503786479, -11.140592103834141, -1.46746599378154, -0.34121813437428317, 1.0812077419156148, 1.7163290532419633, -4.5666146304635689, -2.6846394014203829, -2.2738643666223468, 1.917575640981823, -2.2738643666223641, -2.6846394014204122, -4.5666146304635395, 1.7163290532419744, 1.0812077419156028, -0.34121813437427356, -1.4674659937815784, -11.140592103834141, 24.589756503786372, -8.8828911470896639, -70.20768481034348, 265.8502181377076, 3457.5995074393486, 10017.081922566325, 6210.8656159662851, 23430.31298691556, -4993.9863865787011, -867.92707841112326, 991.9702295167051, 152.49743471969379, -30.096228916888641, 45.849661798659078, -31.467588946689009, 16.960718546454469, 4.334366206560186, -0.42583907131000093, 0.47860527443285728, -1.8738744001784808, 0.5336707597630499, -3.8841941455247579, -0.75407824565303971, 0.55147195392985549, -0.79345242739339283, -5.9026769793174889, -1.384293215600769, -4.1447942145798233, -2.9130522743117342, -0.87120822186396762, -1.7340023689981476, 8.0221119849442548, -9.1034799758133218, 67.038874839272566, 44.112472832699858, 441.79945796279685, 3245.5044122716786, 3861.5097933424754, -5655.7687421695537, -15889.920855591003, -2792.0170209163471, 3795.2577126849956, 553.88440852995757, -85.905664770254234, 195.26564512659746, 24.791859336013662, 19.637521614531401, -6.1680089153590449, -5.0872002952886746, -0.21502707506361318, 1.4832779566036471, 1.4444541156654906, -2.278921340791467, 0.30255454236990775, -2.3473646939882187, -0.02820677859184775, 1.2126049622480428, -0.78557937342030726, -2.9245439997897638, 1.236962081731878, 1.1827041713801927, -1.6114665304853286, -3.5864367039316236, -14.698165954413065, 20.29282209316159, 43.732891706759197, 111.68572777077691, -209.48016621032312, -187.12585183373633, 2586.3148393820152, 1688.0815183011628, 4748.2203910254093, 1775.7319020900284, 965.53459113591498, -592.89741380746352, 99.787886354888371, 95.459765036004825, 59.296635518443523, -7.6987106331430111, -0.0036180413118668542, -0.43290786252066471, -1.598202682681902, 0.11359872229615781, -0.47654646487314006, 0.052920121324431191, -1.1931569571302629, 1.6263047283546588, 1.1208282513608689, -1.916766911729648, -1.3790558562903064, -0.15528235781115707, 0.33989539819890602, -1.1170639390757935, -0.54019671791116586, 2.4039660385463359, 7.3342674422729397, -18.965458306286095, 0.037731231015075362, 5.7888823722245277, -226.40133474887324, -362.07505408372458, 1068.1182163210274, 1839.5542246985658, 1536.2207931138801, 1719.2247320855465, 351.77395499971544, -218.00810259302051, -154.06814929171503, 76.932404651951941, 11.83330919947551, 3.0799843602247936, 2.1514657945922595, -2.1600173905506583, -0.81329272919310069, -0.057640935991259419, 0.81743781787660708, 0.47007834357539929, 0.82578474649026179, -0.485121980563267, -0.44118347877967812, 0.85372587191033056, -0.96505091801449949, -2.5001329354507269, -0.28227610008090631, 1.5082121759974054, 0.73323799037869442, 0.47326064521443867, -2.2071915479661444, 2.1017967421924912, -14.788373732218277, -10.376064867674437, -110.67917899227207, -400.67251265606825, 13.375377575225066, 2228.271084047331, 1272.0006323499422, 485.30359922269918, -150.18264185504094, -215.33992676901764, -8.8694467345951651, 40.216044199991913, 0.62739683840663496, -1.763160286154926, 0.88761506214793773, 2.2829883187502253, -0.37542737915458396, -0.082924323502338942, -0.2690018095258665, 0.066494953017985289, -1.2937095742683771, 0.90148019848405447, 1.049315066873844, -1.5500155662664761, -1.5096304544124948, -0.76725462527686761, -0.45464639460382006, 0.03503878860161394, 0.85393872935961013, 0.89172763012310696, -0.12413241898971583, -7.4057881467564117, -5.5362761946156125, 1.231534306746803, 18.635135255424384, 26.03667534143711, -87.772888824715437, -225.72012452523001, 395.63478219787083, 378.71701677039351, 36.703056312438811, -91.050394397947159, -3.4611377608751717, 16.691588629055683, -0.030826600791664327, -3.1969308796412692, 1.3816292236713215, 0.42488100600164197, 0.084713763632908196, -0.28535803119354425, 0.0058483120842748731, -0.72249565507011926, -0.80262162213105104, -0.11947358836291604, 0.14251583505573939, -0.26639764768858409, -0.59599833623749066, -0.56289480519068613, -0.092201911820288446, 0.77223819072116529, 0.55522491064190738, -0.14411590791637013, -2.1806910872492855, 1.0588352659849944, -1.722617263430356, -9.0167440767821265, -38.483896322518888, -22.599080819691828, 25.541139705127691, 375.57983717352784, 181.47383294778024, 149.67885098073037, -4.1008782517976057, -3.7383475143657869, 18.721866312633942, -1.1602382001305473, -5.8391540939420112, -0.21088907624048864, -0.29870055099180226, 0.95331837446181378, 0.060424395643205529, -0.42858353450158043, -0.37036207729837234, -0.30369644506457261, -0.75652176347658984, -0.44545713631522388, 0.71326845215283508, 0.071761808928956311, -0.63829698193917794, -0.45235505563855871, -0.080159340308425753, -0.15881914095274483, 0.37773826228539636, -0.097086363313521495, -0.86706044290909523, -1.3342582973973045, -0.61792777020441481, 0.16957438507140327, 10.565905071599056, 15.380533375221102, 10.500239194747859, 19.996280010030237, 18.60272375866586, 4.0348314717803326, 11.168149094486143, 14.395513359675057, -3.576502394652771, -3.8760628092228431, 2.0358977627782506, -1.6580642648165547, -0.13166485139511078, 0.2591565726162201, -0.22701969228044258, -0.29312645623416966, 0.099969472199353857, -0.39101661164543228, -0.042546772814251566, 0.29433076927773894, -0.50935384874181677, 0.090487726861141621, -0.092143985882572388, -0.58253529440268437, -0.41671432281001702, 0.14644815319126417, 0.2723500443275419, -0.039709576626662156, -0.41013369223337515, 1.1756350920235048, 1.5259648698081887, -4.4516278662013118, -8.128003687892722, 9.6041080205516938, 20.813833475064627, 12.963050463991683, 7.8870012209429445, 15.407970089260955, 5.3783096889109112, -3.1350030536179672, 1.9101786820520572, 1.6649545288728531, -2.1421648847872561, 0.35230920085802159, 0.37729718445187704, 0.020823929394603979, 0.087139744957248078, -0.10976037032555666, -0.56986899401739111, -0.44020908152219312, 0.69190564661152409, 0.20725962387572397, 0.64042787368671816, 0.71867283099896739, 0.16183428074791173, -0.17223426808716463, -0.17676233483878773, -0.27594664738318686, 0.095238357444986099, 0.020726971935864241, -0.11463597101365795, -0.32333311610982368, 1.2888258236383847, 3.0237538834517612, -0.12189842989060286, -4.5002056479068653, -2.8307120360813536, 9.0325055742836575, -5.0836871456416608, -6.4226783361185662, -2.3832064029645541, 2.1204380507892151, -2.1797923249754283, -2.1316882770768921, 1.4364513793862836, 0.82847417311036753, -0.54705107713687473, -0.053118808001263999, 0.10349330090189141, -0.027586170457780668, -0.27866115184949369, -0.4744187891270259, 0.32835706009268834, 1.8712198771790323, 0.44937016780231559, 0.8488760221500451, 0.35191803530681381, 0.28758243475250972, -0.6426201464805843, -0.40597353100929789, -0.22244529364246871, -0.071869502235051647, 0.33021466122988641, 0.24942995069051274, -0.5214330526633183, -0.093662554700336673, 1.1233733739102922, 1.9003965613191238, 0.07120934753760759, -8.6549236119446178, -1.8427620371931031, -0.52295775466804406, 3.4092952720370122, -0.65003177967723336, -0.1840159964371442, 1.8831870902689825, 0.7983111628921199, -0.39925172982701851, 0.051205177403033819, 0.2598923527237304, -0.18824332097783142, 0.13750859145926242, 0.78226830313090512, -1.2572785001190825, 1.3355363328556911, 1.2220896356262305, 1.6491421999762639, 1.7622421170936717, 0.96487439834416744, 0.79128381470112286, -0.26979590260649117, -0.37236776211072153, -0.65318812250908376, -0.13360581679076858, -0.1817007191765827, 0.4244891020544192, 1.0695325895656689, -0.49200291489349485, -0.59959066580988751, -2.4610304070506381, -1.7528842523917616, 5.4092974592427554, 11.628502736704702, 13.318871722095572, 5.3844201289172418, 0.12839725172390623, -0.91462159985003533, -0.4207633568928546, 0.73289618436063231, 0.98164545606019249, -0.31879685258307294, -0.45467275635234927, 0.23929181220408463, 0.73553732103708702, -0.78050285180289647, -0.20614377250205779, -0.66147354811396541, 0.84722544756444751, 3.1542100241342745, -1.0454812204468338, 0.49112272834774079, 0.89780094097137775, -0.80686344960242362, 0.26166207514350009, 0.34234964401672252, -0.27361449647202374, 0.078400343257288022, 0.27130715748636108, -0.26706243773596255, 0.92879560872659372, -1.3686907450256593, 0.37153092475944227, -0.0077060915391855903, -2.1487270106054996, 8.2423115107991176, 10.211121947580189, 11.004080199445575, 5.512476255300478, 0.43541395104991965, 1.3138259234516578, 0.47697687525002369, -0.37437690637871951, 0.49170325146724819, 0.53092933204425685, 0.78977231856458541, 0.054935970034302541, 1.0907299238052364, -1.4537313504920895, 1.6637415256529431, 2.3271742206176285, 1.6752406948773604, 6.0227778178364675, -2.5693140331095292, -1.3449083811022362, -0.063540759326359386, 1.2007479971921078, 0.26947504329539196, -0.043317616642408706, -0.090092404474960294, -0.56149356452164179, -0.29757479536733583, -0.82531287850485402, 0.52880973840083989, -0.51042849628299192, 1.1866854822445434, 7.7130480762288167, 17.626109919920186, 26.29568713002228, 9.1514979514586194, -1.521929375229722, 0.85364359123771261, -0.365663824522519, -1.1590870007863963, 0.48082630002696519, 0.93059067445638155, 1.1024013035834523, 0.63841829574218301, 1.5659590764611497, 0.20674310541385973, 1.0081259505833966, 1.4865008399227626, -1.6031905208728288, 5.7718835709767413, 0.2720344299284404, 3.2411570780563994, -1.0481514144590243, 2.2338214812745694, 3.1628749936702945, 1.7743358086362808, -0.03099281849361625, -0.41442882712954171, -0.31459130661253104, -1.7323756021672925, 0.19363530105298493, 0.61123212270521721, 4.8260404786904152, 6.7814469674820135, 4.974801806376985, 19.935738411546794, 15.127019575257112, 16.951752765718286, 6.976320734749117, 0.83204582564536733, -0.22090351652873133, -0.48187393778382737, -0.72216259413318939, 0.68337514879437744, 1.4934027691778771, 1.3836806937153638, -0.089108362899698895, 0.57910533764344185, 3.1507795425198797, 1.9139554692796912, 4.1423990225960203, -5.0893580330573318, 4.6545320074577088, -1.3079026033800338, 1.2583901568403451, 1.3087920196200225, 1.8018391908724931, 1.3933980798910508, 0.67604933114803067, -0.49475104816844406, -1.4152366315362725, -0.64580662533466104, -1.4537653735214031, 3.1014323943375786, 7.6843087454063586, 10.909142678924193, 12.359496229531475, 15.280082473470735, 24.669023160454167, 12.739042274822818, 1.7204760023261643, 0.52929508548715176, 2.1482192005482723, -1.481161898887601, -0.79404079710432474, 0.46540881956838565, 0.92624711854277975, 1.0380549761479756, 2.3168267428989626, 1.5788387366050483, -0.83766970523004924, 4.7505720502223729, -2.6570294115495297, 6.7612131323955511, -2.6570294115495336, 4.7505720502223783, -0.83766970523005702, 1.5788387366050476, 2.3168267428989657, 1.0380549761479752, 0.9262471185427773, 0.46540881956838565, -0.79404079710432862, -1.4811618988876001, 2.148219200548279, 0.52929508548715154, 1.7204760023261518, 12.739042274822809, 24.669023160454188, 19.935738411547018, 12.35949622953156, 10.909142678924129, 7.6843087454063417, 3.101432394337563, -1.4537653735213987, -0.64580662533467093, -1.4152366315362839, -0.49475104816844562, 0.67604933114803401, 1.3933980798910552, 1.8018391908724987, 1.3087920196200247, 1.2583901568403484, -1.3079026033800301, 4.6545320074577061, -5.0893580330573203, 4.1423990225960088, 1.913955469279683, 3.1507795425198943, 0.57910533764344618, -0.089108362899694094, 1.3836806937153729, 1.4934027691778826, 0.68337514879437378, -0.72216259413318618, -0.4818739377838111, -0.22090351652873805, 0.83204582564534302, 6.976320734749093, 16.951752765718314, 15.127019575257133, 17.626109919920285, 4.9748018063769956, 6.7814469674819922, 4.8260404786903921, 0.61123212270520444, 0.19363530105297699, -1.7323756021672947, -0.31459130661253587, -0.41442882712954437, -0.030992818493609464, 1.7743358086362877, 3.162874993670298, 2.2338214812745694, -1.0481514144590143, 3.241157078056395, 0.27203442992843363, 5.7718835709767413, -1.6031905208728274, 1.4865008399227673, 1.0081259505833953, 0.20674310541386615, 1.5659590764611582, 0.63841829574219022, 1.1024013035834526, 0.93059067445638244, 0.48082630002696636, -1.1590870007863949, -0.36566382452250978, 0.85364359123770939, -1.5219293752297598, 9.1514979514585963, 26.295687130022237, 8.2423115107992349, 7.7130480762288673, 1.1866854822445243, -0.51042849628302267, 0.52880973840082446, -0.82531287850485058, -0.297574795367338, -0.56149356452165111, -0.090092404474959795, -0.043317616642408116, 0.26947504329539745, 1.2007479971921178, -0.063540759326354057, -1.3449083811022313, -2.5693140331095257, 6.0227778178364719, 1.675240694877361, 2.3271742206176271, 1.6637415256529449, -1.4537313504920832, 1.0907299238052377, 0.054935970034312817, 0.78977231856459063, 0.53092933204426229, 0.49170325146725052, -0.37437690637871607, 0.4769768752500283, 1.3138259234516545, 0.43541395104990577, 5.5124762553004887, 11.004080199445557, 10.211121947580168, 11.628502736704604, -2.1487270106054663, -0.0077060915391693741, 0.37153092475944555, -1.3686907450256616, 0.92879560872659006, -0.26706243773595856, 0.27130715748636525, 0.078400343257288438, -0.27361449647201985, 0.34234964401672396, 0.26166207514350365, -0.80686344960242218, 0.8978009409713853, 0.49112272834772974, -1.045481220446846, 3.1542100241342701, 0.84722544756444151, -0.66147354811395898, -0.20614377250205829, -0.7805028518028938, 0.73553732103708935, 0.23929181220408727, -0.45467275635235105, -0.31879685258307255, 0.98164545606019549, 0.73289618436063131, -0.42076335689285432, -0.91462159985003766, 0.12839725172388108, 5.3844201289172204, 13.318871722095585, -1.8427620371929223, 5.4092974592426515, -1.7528842523917609, -2.4610304070506088, -0.59959066580987819, -0.49200291489348996, 1.0695325895656664, 0.42448910205441354, -0.18170071917658262, -0.13360581679076522, -0.65318812250908243, -0.3723677621107227, -0.26979590260649017, 0.7912838147011273, 0.96487439834416677, 1.7622421170936722, 1.6491421999762705, 1.2220896356262196, 1.3355363328556904, -1.2572785001190749, 0.78226830313090379, 0.13750859145926628, -0.18824332097783478, 0.25989235272372874, 0.051205177403034013, -0.39925172982701423, 0.79831116289212645, 1.8831870902689678, -0.18401599643714045, -0.65003177967722925, 3.4092952720370082, -0.52295775466808114, -5.0836871456417914, -8.654923611944545, 0.071209347537571008, 1.9003965613191072, 1.1233733739103013, -0.093662554700343362, -0.52143305266331286, 0.24942995069051838, 0.33021466122988513, -0.071869502235049398, -0.22244529364246549, -0.40597353100929245, -0.64262014648058341, 0.28758243475251449, 0.35191803530680799, 0.84887602215004632, 0.44937016780231587, 1.8712198771790289, 0.32835706009269156, -0.47441878912702484, -0.27866115184949264, -0.027586170457779294, 0.1034933009018901, -0.053118808001266206, -0.54705107713687218, 0.82847417311037153, 1.4364513793862805, -2.1316882770768819, -2.1797923249754287, 2.1204380507892009, -2.3832064029645679, -6.4226783361184081, 7.8870012209433504, 9.0325055742834763, -2.8307120360814029, -4.5002056479068191, -0.12189842989059124, 3.0237538834517572, 1.2888258236383801, -0.32333311610982529, -0.11463597101365604, 0.020726971935865871, 0.09523835744498739, -0.27594664738318975, -0.17676233483878293, -0.17223426808716019, 0.16183428074791517, 0.71867283099897139, 0.64042787368672205, 0.20725962387572536, 0.69190564661152509, -0.44020908152219435, -0.56986899401739244, -0.10976037032555588, 0.087139744957248716, 0.020823929394600361, 0.37729718445187588, 0.35230920085802736, -2.142164884787245, 1.6649545288728365, 1.9101786820520659, -3.1350030536179658, 5.3783096889108455, 15.40797008926083, 18.60272375866586, 12.963050463991696, 20.813833475064644, 9.604108020551676, -8.1280036878927362, -4.4516278662013278, 1.5259648698081876, 1.1756350920235052, -0.41013369223337515, -0.039709576626662003, 0.27235004432754167, 0.14644815319126442, -0.41671432281001886, -0.58253529440268281, -0.092143985882572915, 0.090487726861142509, -0.50935384874181677, 0.29433076927773738, -0.042546772814252246, -0.39101661164543189, 0.09996947219935487, -0.29312645623417033, -0.22701969228044291, 0.2591565726162216, -0.13166485139511078, -1.6580642648165524, 2.0358977627782484, -3.8760628092228537, -3.5765023946527563, 14.395513359675084, 11.168149094486147, 4.034831471780354, 181.47383294778047, 19.996280010029963, 10.50023919474779, 15.38053337522109, 10.565905071599067, 0.16957438507140921, -0.6179277702044097, -1.3342582973973056, -0.86706044290909146, -0.097086363313522245, 0.37773826228539636, -0.1588191409527461, -0.080159340308420923, -0.45235505563855616, -0.63829698193917661, 0.071761808928958337, 0.71326845215283419, -0.44545713631521988, -0.75652176347658784, -0.30369644506457882, -0.37036207729837373, -0.42858353450157866, 0.060424395643203697, 0.953318374461814, -0.29870055099180354, -0.21088907624048941, -5.8391540939419864, -1.1602382001305538, 18.721866312633882, -3.7383475143657954, -4.100878251797706, 149.67885098073012, 395.63478219787089, 375.57983717352744, 25.541139705127598, -22.599080819691835, -38.483896322518888, -9.0167440767821709, -1.7226172634303247, 1.0588352659849967, -2.1806910872492873, -0.14411590791637696, 0.55522491064190693, 0.77223819072116739, -0.092201911820284366, -0.56289480519067914, -0.59599833623749254, -0.26639764768858487, 0.14251583505573989, -0.11947358836291141, -0.80262162213105359, -0.72249565507012325, 0.0058483120842701027, -0.28535803119354936, 0.084713763632907418, 0.42488100600164375, 1.3816292236713219, -3.1969308796412634, -0.030826600791668796, 16.691588629055648, -3.4611377608751566, -91.050394397947187, 36.703056312438633, 378.71701677039351, 1272.0006323499422, -225.72012452523026, -87.772888824715139, 26.036675341437149, 18.635135255424501, 1.2315343067468421, -5.536276194615616, -7.4057881467564011, -0.12413241898971436, 0.89172763012310496, 0.8539387293596038, 0.035038788601613982, -0.4546463946038164, -0.76725462527685828, -1.509630454412483, -1.550015566266479, 1.0493150668738473, 0.90148019848405436, -1.2937095742683813, 0.066494953017976297, -0.26900180952586789, -0.082924323502345257, -0.37542737915458746, 2.2829883187502267, 0.88761506214793962, -1.7631602861549227, 0.62739683840662275, 40.216044199991877, -8.8694467345952006, -215.33992676901772, -150.18264185504114, 485.3035992226977, 1536.2207931138814, 2228.2710840473319, 13.3753775752247, -400.67251265606865, -110.679178992272, -10.376064867674508, -14.788373732218197, 2.1017967421924983, -2.207191547966143, 0.47326064521441386, 0.73323799037869852, 1.5082121759973919, -0.28227610008090809, -2.5001329354507282, -0.96505091801449672, 0.8537258719103169, -0.44118347877968372, -0.48512198056327205, 0.82578474649025857, 0.47007834357539341, 0.81743781787659597, -0.057640935991271409, -0.81329272919311113, -2.1600173905506721, 2.1514657945922622, 3.0799843602248034, 11.833309199475522, 76.932404651952027, -154.06814929171483, -218.00810259302057, 351.77395499971459, 1719.2247320855445, 4748.2203910254084, 1839.554224698564, 1068.1182163210278, -362.07505408372486, -226.40133474887313, 5.7888823722244789, 0.037731231015098787, -18.965458306285971, 7.3342674422729388, 2.4039660385463657, -0.54019671791118873, -1.1170639390757879, 0.33989539819890108, -0.15528235781113153, -1.3790558562903272, -1.9167669117296613, 1.1208282513608707, 1.6263047283546224, -1.193156957130264, 0.052920121324427458, -0.4765464648731435, 0.11359872229612604, -1.5982026826818876, -0.43290786252068791, -0.0036180413118654109, -7.6987106331430244, 59.296635518443559, 95.459765036004427, 99.787886354888386, -592.89741380746432, 965.53459113591339, 1775.7319020900306, -15889.920855591006, 1688.0815183011607, 2586.3148393820165, -187.12585183373636, -209.48016621032366, 111.68572777077674, 43.732891706759332, 20.292822093161472, -14.698165954413049, -3.5864367039316574, -1.611466530485326, 1.1827041713801545, 1.2369620817318689, -2.9245439997897797, -0.78557937342029793, 1.2126049622479607, -0.028206778591846705, -2.3473646939882631, 0.30255454236988177, -2.278921340791416, 1.4444541156654738, 1.483277956603626, -0.21502707506361871, -5.0872002952886604, -6.168008915359052, 19.637521614531632, 24.791859336013527, 195.26564512659732, -85.905664770254006, 553.88440852995757, 3795.2577126849942, -2792.0170209163462, 23430.312986915553, -5655.7687421695537, 3861.5097933424781, 3245.5044122716772, 441.79945796279628, 44.112472832700512, 67.038874839272665, -9.1034799758128742, 8.0221119849442406, -1.7340023689979776, -0.87120822186400182, -2.9130522743116929, -4.1447942145798446, -1.3842932156007377, -5.9026769793175413, -0.7934524273933764, 0.55147195392985315, -0.75407824565312243, -3.8841941455247726, 0.53367075976302614, -1.8738744001784735, 0.47860527443281381, -0.42583907130996707, 4.3343662065600954, 16.960718546454476, -31.467588946689279, 45.849661798659248, -30.096228916889014, 152.4974347196931, 991.97022951670215, -867.92707841112428, -4993.9863865787029], \"imag\": [0.0, -2277.9356791272003, -4760.5440393641002, -3362.7502157108247, -452.6326365977277, 12.902525613472081, -66.324591493039264, 21.395810280639775, 12.049924797684376, -6.4322319301924828, -2.6401787430633603, -2.8941924141450355, -1.0996569736184965, -2.1837600734887777, 0.87308165169681873, -0.4143473704962265, 0.0, 0.41434737049617953, -0.87308165169672458, 2.1837600734887985, 1.0996569736184816, 2.8941924141450213, 2.6401787430632839, 6.4322319301924944, -12.049924797684376, -21.395810280639751, 66.32459149303935, -12.902525613472182, 452.63263659772764, 3362.7502157108197, 4760.5440393641011, 2277.9356791272016, -19170.834011440937, -3837.2504381898657, -1562.2865240696121, -2188.2624437144, -79.985389317630222, -65.73387671644744, -129.03232713044309, -21.574731283989859, 19.219741943874205, -1.3770831994436832, -4.6285618656089973, 1.9356332468609161, 1.914358953204174, -0.39274625271235863, -2.8755632420164114, 1.3910769799127469, 2.1983982122300691, -0.93402216187723952, 1.5955119590990243, 2.5332827335358816, 2.5722659267438073, -2.1433748844126024, 4.7051607105169868, 6.0715674792926295, -11.686157623491814, 7.736622407403881, 65.513717323045199, -68.939947660481394, 105.08267177765576, -524.55810593663, 266.59769699529215, -6565.2013915603111, -12998.804313286138, -7140.8743305075541, -1281.4742181751476, 387.93265499317204, 232.0789193763446, -67.213502175129548, -82.499903393484686, 23.742310304940581, 13.167070698799225, -1.2601921779485123, 0.22176027695648487, -0.82869028871129857, 0.81638586337482588, 0.030361957750051641, -1.8114765667849664, -0.33462283171345614, -1.4063404110660631, 1.8330278968089115, -0.19923279402973898, 2.6325944160953934, 0.74767454410312451, 0.33273215463055067, 0.1242120122414053, 0.13350548988021607, -6.7517210150420688, -24.893726268864828, 68.764375920932309, 203.58844824671789, -52.443377241039173, 589.84188198577237, 814.38538391702434, -3077.5993672243876, -9988.2725309741327, -5000.8757444384873, -213.86760970710961, -153.72085790515706, 376.50689706328353, 10.499004391497454, -22.259718007212538, -1.0587560944123571, 1.3367261976572533, -1.845627367813951, -0.50817475490747221, 2.6646257572641145, 0.72663987403826902, -1.4553261209412862, -1.7486114908592469, -2.2393579162674944, 1.7872556824974239, -0.4779279337995983, 0.90990468751900189, 0.56850457149088529, -0.042260514128558184, -2.0950938638350283, 0.37842412015856491, 2.7868839636562086, -7.1796038797667068, -2.6532766677526052, 42.569555354666804, 86.618323256686423, 262.60583525697274, -570.34935164465662, 953.3853188584327, -2608.4519239039555, 423.76919790180068, -777.49072200787271, -730.15551768721184, 267.77827954485849, 48.782690015655945, -52.084914641107339, -0.26732768536918228, 18.791248861451912, 0.034376983736590996, -4.7733525107569852, 0.2450889317389604, 0.69551673309505335, 0.74689297610787508, 0.36254455317814038, -0.082864627703290866, -0.11088180406499534, -1.9145243520823481, 0.63809937787576865, -0.47609558693404908, 1.1704253870693357, 0.1035348526676573, -0.98268640942924379, -0.66403014974353547, 1.4462870038602533, 3.6812627646537175, -8.6847068298461885, -1.7026644231740631, 110.68919188818327, 26.998515460375977, -65.421023262373453, -744.09540667092062, -46.729307478653496, -1526.2181503116453, -735.50774046161519, 282.18880697804167, -182.37864683063907, -54.052681314235201, 39.603849315110104, 10.295701682078779, 2.359337802307917, -0.63461911007383953, -1.7124190510555728, -0.21593130161202514, 0.76755040332111413, 1.2882353738829533, 0.44968314290067118, 0.25989055470659483, -0.66713893962057369, 0.13682839189736165, -0.36883118795348507, 0.91230383136371929, -0.46996446240256329, 0.30219131214854422, -0.19558932994062075, 0.012615763849470061, 1.762420772813289, 1.9045345605049635, -3.7790359077733253, -11.964107143689581, 4.5083476182968525, 61.96781696120042, -254.89688572081204, 140.68826246910922, -45.053807917761794, 314.74785574475101, -8.8001261891015723, -360.31891091191073, -57.025448777424479, 44.579795546563595, -19.359200628613657, 3.6862817789376683, 8.9206630611283089, 0.18896973496668307, -1.0227323524081069, -0.33838743748909134, 0.43833208591156991, 0.0074294169071561673, 0.50446476014305897, 0.1890893708139402, 0.65133332546862077, -0.77483290182744535, -0.30779007494077709, -0.80427129683389309, 0.26011219704759059, 0.23461588343644721, -0.056507066939534729, -0.44513357712322738, 0.64667209976975049, 1.5545017016282721, -1.5250850436867627, -9.5917712473092696, 13.475211488788412, 28.837963587037802, -21.930976284520067, -337.61540934331555, -197.27075321520147, -65.634374404237917, -45.716174186409042, 38.688397244662028, -10.636065931319841, -36.620593610799475, 11.815798616251305, 9.0326984830007095, -3.0325028906240825, -0.075862266735019127, 0.19104942819406223, 0.073726425569811863, 0.18311714867084192, 0.63036999033226249, -0.098626184449280729, 0.095619359707605045, 0.13744024889930673, -0.097089152898782338, -0.81683568275166918, 0.54386217024143169, 0.041501479859297266, 0.43031399471588661, 0.25470104821283102, 0.17326636360277617, 0.46079094226119127, -0.16530865667454481, -0.86391702025516282, -4.9611285532463629, -12.372184270457062, 11.516126179313906, 3.2997425925449804, 2.0570987009733872, 24.878800155519915, 44.041788084316849, 28.446155418037641, -32.190550839656126, -17.692027714058376, 11.789513877445387, 1.9317197634824401, -3.4507560855810171, 0.36626836712779354, 0.48074766055651602, 0.18044316667269442, -0.28240974426973131, -0.16613612027343372, 0.029095718259237995, 0.24450075339721422, -0.091330331747513635, 0.097634295479075664, -0.36806371804963284, 0.16614591312540511, -0.77395352504544712, -0.3264657443238585, 0.015061212014132833, 0.29085100346092985, 0.047770712409502418, 0.14922819541222396, -0.39792121836056477, -0.1921281774085053, 0.83895281997413806, -1.5703737430868945, -8.4367427775736452, 5.6601916863792336, -5.1510032561702124, -22.050605310259861, -1.9854594697574779, -7.5311386138630718, 7.4148341093741337, 8.0952123464619365, -4.3629732153959058, -0.87617222540110651, 1.0539667118389069, -0.69495683349647086, -0.53597221218340763, 0.21612918483653182, 0.16753374785242167, -0.14587335963051168, 0.2984129896925935, 0.75720231383362635, 1.2725586605629424, -0.23788459440434945, -0.43858849762191893, -0.79801858694486538, -0.41846754429723099, -0.46161406526582383, 0.58294801786464678, -0.078939183973068427, 0.31479155143425391, 0.31425797573231379, -0.084400039832661436, -0.69288180199641103, -0.21778449617622889, -0.19533791786522492, -0.22665765093841067, -0.31956792613405932, 6.3352095159571435, 13.304182061875538, 9.0685889178215753, 13.820343051841526, -2.9904131431626517, -6.4644843028741459, 1.4950174056035006, 0.22841081726546483, -1.0443697855595202, -0.36648156701751267, 0.48825453192442753, 0.32511669967392476, -0.74952192547288132, -0.32406742573949188, -0.14589390394899102, 0.81615985313544603, 0.21110858701983537, -0.62135646441400272, -0.27503339195756299, 0.23916839371037824, -1.0440547633891395, -0.40792084439497517, 0.55610134656922072, 0.37457806876122546, 0.17778944632276653, -0.069642667350154328, -0.39526560004564598, 0.69822150614317735, 0.740778974977921, -0.31290252683747921, -2.0096273906801638, -0.75165898775917361, -0.15987777595408992, -2.5516179078608778, -8.9643314564796608, -15.134863386021781, -2.1073345817546003, 0.61887776540407591, -3.0206322635570779, -0.13950893398737912, 0.63280527166495781, -0.16318694006603662, 0.06410706438489891, 0.11411070867346804, -0.2886162817684455, -0.35613651800395313, 0.12924440993745664, 0.38077834891929796, 0.82374133978448782, 0.42592408743381815, -1.4993887570975311, 1.2113263922466315, -0.61651842130949264, -0.92820589700907985, 1.2123284995709924, -0.37394823077908607, -0.062695571319925397, 0.28532586796592635, -0.016166881608109255, -1.1132083022635739, 0.86546596809253507, 2.0760623026361933, 0.51322827606545562, -2.2491343600113889, -2.0374388890600263, 1.1231676638159473, 0.31214242438772172, 2.2815521755579042, -5.3082712246609329, -6.7280927719717081, 0.71404381047788856, 1.0348891792697787, -0.062580928735681385, 0.11553928672311624, 0.19710411955257187, -0.22253376417909151, -0.05143415191355815, -0.61738709055352659, -0.26515618204121805, 1.3879170617746586, 1.9147895569711311, -2.7981144693643607, 1.6351053618238791, 1.2876141106871726, -0.53839815046157202, -0.81616813855627257, -0.55773229035800009, -0.16310476776122179, -1.4828287822897712, 0.19857441865721279, -0.22253902629935005, 0.76149089771667944, 0.38423492006819204, 0.13633825788919049, -0.40617531895308634, -1.9006670978622686, -5.6055295794952666, -3.5201069577585091, -0.70565394755327504, -4.8233879396582013, -3.7118525914264513, 0.87639764763224848, -3.9705679716456896, -0.3066516936670704, 1.2925955094882555, 0.98057929368147423, -0.5185509231518588, 0.068504647941653091, -0.50802141302695303, -0.65025043431383311, 1.6393007306999561, -0.046634622615140439, -0.42095485749155304, 2.8628962346767608, -0.87664183209871016, -0.061380249620325719, -0.67583720185830587, -2.165804182360429, -2.2334105499018988, -1.7315960703588726, 0.023607096501577673, -0.72578349898044647, 0.49340703388266716, -0.17688316963519096, 0.91231104952944475, 1.0401382704665323, 0.40638239361664558, -3.5528586670065754, -3.2389924588328527, -3.336337544628424, -3.3053285670589143, 0.42529364953930032, 1.2623512061316915, -7.9337267372836493, -1.0910503490681764, 0.30591237262721482, 0.79049013658839029, 0.15779582936744363, 0.35530534658354934, -1.0136463777621887, -0.43596379336607172, 1.3766560550226186, 1.2643786263280588, 0.081112249920068616, 0.30101965208538256, -2.9649644331404845, 3.940601481283172, 1.2809925361642973, -2.3740821954043603, -1.8568139214134618, -2.2875531209700912, -2.0068530505793203, -1.6161905886738603, -0.069970559948539499, -0.68452644609555957, 1.1180256373411306, 1.0386505011587546, -0.45802414484767806, -1.8827293053017495, -1.1452872829873149, -9.8282380345909921, -4.8375314158562777, 0.035534088492687292, 5.8735645683280717, -7.2148282372822923, -1.9024855757814658, -3.6729219824305321, -0.04721742712852893, 0.80045523566507781, 0.91856151213872683, 0.18365173124028911, 1.0527130168554166, 0.35231243394437906, -0.96832866520995176, 0.38866324603453256, 1.1024459216780036, -1.6264163010988006, 5.9086248051519128, 1.1522588148293589, -4.0123769411888297, -1.3409560614230069, -2.2450482885496141, -1.484164394238348, 0.58569229342098317, 0.035646451001070931, -1.3588202093923047, 0.006860270440306241, -0.84539036438792836, 0.31580363771161246, -0.13161779536446233, -0.34549511895795371, -1.1291296924180168, -2.1947930228924113, -14.643424663744323, 0.0, 7.8456512467946364, 11.843681310787776, -4.1545820919682566, 0.098834485797376734, 1.2191537903053737, 0.14782839419733967, -0.21707569483499198, 1.3287726303022269, 0.012891904979339022, 0.146292284007916, 0.70147269041246085, 1.7613861146868823, 0.97884915683286033, 1.5860078469473597, 0.15814907094033309, 0.0, -0.158149070940315, -1.5860078469473551, -0.978849156832858, -1.7613861146868832, -0.70147269041248062, -0.14629228400792066, -0.012891904979343359, -1.3287726303022269, 0.21707569483499028, -0.14782839419734384, -1.2191537903053777, -0.098834485797375804, 4.1545820919682752, -11.843681310787789, -7.8456512467946329, -0.035534088492520481, 14.643424663744339, 2.194793022892366, 1.1291296924180338, 0.34549511895794383, 0.13161779536445045, -0.31580363771161418, 0.84539036438793247, -0.0068602704403050632, 1.3588202093923036, -0.035646451001076773, -0.58569229342099216, 1.484164394238344, 2.2450482885496172, 1.3409560614230207, 4.0123769411888466, -1.1522588148293609, -5.9086248051519057, 1.6264163010987922, -1.102445921678016, -0.38866324603453178, 0.96832866520995076, -0.35231243394438311, -1.0527130168554157, -0.18365173124028866, -0.91856151213871651, -0.80045523566507271, 0.047217427128521561, 3.6729219824305099, 1.9024855757814958, 7.21482823728231, -5.8735645683280371, 3.3053285670587775, 4.8375314158562217, 9.828238034591017, 1.1452872829873084, 1.8827293053017478, 0.45802414484767828, -1.0386505011587623, -1.1180256373411397, 0.68452644609555668, 0.069970559948536071, 1.6161905886738546, 2.0068530505793158, 2.2875531209700912, 1.856813921413464, 2.3740821954043709, -1.2809925361643011, -3.9406014812831787, 2.9649644331405014, -0.30101965208537818, -0.081112249920068671, -1.2643786263280541, -1.3766560550226248, 0.43596379336607571, 1.0136463777621971, -0.35530534658355051, -0.15779582936744335, -0.79049013658838307, -0.30591237262721799, 1.0910503490681696, 7.9337267372836298, -1.2623512061316555, -0.42529364953934357, 0.70565394755329391, 3.336337544628484, 3.2389924588327594, 3.5528586670065589, -0.40638239361663953, -1.0401382704665338, -0.91231104952944642, 0.17688316963519082, -0.49340703388266682, 0.72578349898044092, -0.023607096501574151, 1.7315960703588795, 2.2334105499019046, 2.1658041823604322, 0.67583720185832141, 0.061380249620329064, 0.87664183209870872, -2.8628962346767408, 0.4209548574915572, 0.046634622615141327, -1.6393007306999556, 0.65025043431383445, 0.50802141302695369, -0.068504647941647845, 0.51855092315186113, -0.98057929368147057, -1.2925955094882546, 0.30665169366707518, 3.9705679716456634, -0.8763976476322699, 3.7118525914263776, 4.8233879396582111, -0.31214242438772705, 3.5201069577584692, 5.6055295794952924, 1.9006670978622411, 0.40617531895307485, -0.13633825788919066, -0.38423492006819598, -0.76149089771668665, 0.22253902629934941, -0.1985744186572119, 1.4828287822897714, 0.16310476776122626, 0.55773229035800354, 0.8161681385562749, 0.5383981504615758, -1.2876141106871739, -1.6351053618238793, 2.7981144693643794, -1.9147895569711246, -1.3879170617746619, 0.26515618204121727, 0.61738709055352903, 0.051434151913562459, 0.22253376417909698, -0.19710411955257243, -0.11553928672311804, 0.062580928735678887, -1.0348891792697743, -0.71404381047787879, 6.7280927719716743, 5.3082712246609018, -2.2815521755579335, 8.9643314564797052, -1.1231676638158536, 2.0374388890599802, 2.2491343600114058, -0.51322827606545429, -2.0760623026361911, -0.86546596809253695, 1.1132083022635748, 0.016166881608109234, -0.28532586796592802, 0.062695571319927382, 0.37394823077908801, -1.2123284995709924, 0.92820589700907918, 0.61651842130949663, -1.2113263922466326, 1.4993887570975342, -0.42592408743381316, -0.82374133978448039, -0.38077834891929335, -0.12924440993745251, 0.35613651800395341, 0.28861628176844567, -0.11411070867346547, -0.064107064384899673, 0.16318694006603501, -0.63280527166495915, 0.13950893398738348, 3.0206322635570557, -0.61887776540410167, 2.1073345817545266, 15.134863386021769, -9.0685889178216552, 2.5516179078607184, 0.15987777595415892, 0.75165898775916729, 2.0096273906801727, 0.31290252683747422, -0.74077897497792289, -0.69822150614317713, 0.39526560004564548, 0.069642667350159129, -0.1777894463227658, -0.37457806876122451, -0.55610134656922283, 0.40792084439497267, 1.0440547633891391, -0.23916839371037832, 0.2750333919575636, 0.62135646441400449, -0.21110858701983135, -0.81615985313544015, 0.14589390394899499, 0.32406742573949032, 0.74952192547288177, -0.32511669967392071, -0.48825453192442569, 0.36648156701751228, 1.0443697855595189, -0.22841081726546683, -1.4950174056034862, 6.4644843028741308, 2.9904131431626397, -13.820343051841599, 1.9854594697574315, -13.304182061875386, -6.3352095159572039, 0.3195679261341049, 0.22665765093840967, 0.19533791786523994, 0.21778449617622839, 0.69288180199640803, 0.084400039832664031, -0.31425797573231284, -0.31479155143425158, 0.078939183973069621, -0.58294801786464789, 0.46161406526582016, 0.41846754429722727, 0.79801858694486438, 0.43858849762191948, 0.23788459440435036, -1.2725586605629382, -0.75720231383362191, -0.29841298969258917, 0.14587335963051393, -0.16753374785242225, -0.21612918483653495, 0.53597221218340851, 0.69495683349647419, -1.0539667118389073, 0.87617222540110107, 4.3629732153958827, -8.0952123464619206, -7.414834109374171, 7.5311386138631651, -44.041788084316849, 22.050605310259897, 5.1510032561702142, -5.6601916863792514, 8.4367427775736488, 1.5703737430868991, -0.83895281997413862, 0.19212817740850727, 0.39792121836056477, -0.14922819541222082, -0.047770712409500753, -0.2908510034609289, -0.015061212014133111, 0.32646574432385927, 0.77395352504545112, -0.16614591312540627, 0.36806371804963284, -0.097634295479077288, 0.091330331747514912, -0.24450075339721231, -0.029095718259234932, 0.16613612027343472, 0.28240974426972948, -0.18044316667269469, -0.48074766055651602, -0.36626836712779753, 3.4507560855810189, -1.9317197634824488, -11.789513877445398, 17.692027714058376, 32.190550839656112, -28.446155418037584, 65.634374404237818, -24.878800155519698, -2.0570987009734387, -3.2997425925449106, -11.516126179313863, 12.372184270457085, 4.9611285532463585, 0.86391702025516592, 0.16530865667454706, -0.46079094226119116, -0.1732663636027687, -0.25470104821282824, -0.43031399471588622, -0.041501479859297648, -0.54386217024143224, 0.81683568275167029, 0.097089152898783726, -0.13744024889929929, -0.095619359707603865, 0.098626184449285684, -0.63036999033225893, -0.18311714867083492, -0.07372642556981146, -0.19104942819406445, 0.075862266735016198, 3.0325028906240856, -9.0326984830007238, -11.815798616251362, 36.620593610799446, 10.636065931319884, -38.68839724466217, 45.716174186409333, -314.74785574475044, 197.27075321520152, 337.61540934331566, 21.930976284520245, -28.837963587037731, -13.475211488788421, 9.5917712473092944, 1.5250850436867665, -1.5545017016282761, -0.64667209976974838, 0.44513357712322837, 0.056507066939540815, -0.23461588343644407, -0.26011219704759359, 0.8042712968338912, 0.30779007494077798, 0.77483290182744469, -0.65133332546861145, -0.18908937081392915, -0.50446476014305819, -0.0074294169071514489, -0.43833208591156614, 0.3383874374890965, 1.0227323524080993, -0.18896973496668346, -8.9206630611282982, -3.6862817789376785, 19.35920062861366, -44.579795546563581, 57.025448777424586, 360.31891091191056, 8.8001261891013822, 1526.2181503116453, 45.053807917762221, -140.68826246910882, 254.89688572081207, -61.967816961200398, -4.5083476182968329, 11.964107143689583, 3.7790359077733431, -1.9045345605049631, -1.7624207728132955, -0.01261576384946491, 0.19558932994062728, -0.30219131214854072, 0.4699644624025669, -0.91230383136372128, 0.36883118795348824, -0.13682839189736087, 0.66713893962058779, -0.25989055470659439, -0.44968314290067052, -1.2882353738829488, -0.76755040332110314, 0.21593130161202181, 1.7124190510555817, 0.6346191100738432, -2.3593378023079388, -10.295701682078779, -39.603849315110132, 54.052681314235315, 182.3786468306393, -282.18880697804133, 735.50774046161428, -423.76919790180091, 46.72930747865378, 744.09540667092074, 65.421023262373566, -26.998515460375824, -110.68919188818332, 1.7026644231740455, 8.6847068298461902, -3.6812627646537122, -1.4462870038602713, 0.66403014974352648, 0.98268640942926089, -0.10353485266764806, -1.1704253870693322, 0.47609558693405896, -0.63809937787576798, 1.9145243520823476, 0.11088180406502474, 0.082864627703299776, -0.36254455317814699, -0.74689297610786809, -0.69551673309504447, -0.24508893173895085, 4.773352510756971, -0.034376983736587929, -18.791248861451901, 0.26732768536914786, 52.084914641107339, -48.782690015656009, -267.77827954485792, 730.15551768721207, 777.49072200787191, 9988.2725309741272, 2608.4519239039569, -953.38531885843202, 570.34935164465708, -262.60583525697274, -86.61832325668658, -42.569555354666946, 2.6532766677526505, 7.1796038797667014, -2.7868839636562561, -0.37842412015855753, 2.0950938638350354, 0.042260514128576405, -0.56850457149086808, -0.90990468751900622, 0.4779279337996068, -1.7872556824974217, 2.239357916267509, 1.748611490859272, 1.4553261209412682, -0.72663987403827102, -2.6646257572640879, 0.50817475490745234, 1.8456273678139588, -1.3367261976572486, 1.0587560944122603, 22.259718007212488, -10.499004391497355, -376.50689706328382, 153.72085790515695, 213.86760970710961, 5000.8757444384837, 12998.804313286144, 3077.5993672243935, -814.38538391702389, -589.84188198577237, 52.443377241039045, -203.58844824671809, -68.764375920932238, 24.893726268864992, 6.7517210150420599, -0.13350548988021724, -0.12421201224142447, -0.33273215463053935, -0.74767454410310241, -2.6325944160953538, 0.19923279402974362, -1.8330278968089646, 1.4063404110660558, 0.33462283171345686, 1.8114765667849764, -0.030361957750053889, -0.81638586337482577, 0.82869028871127859, -0.22176027695649836, 1.260192177948489, -13.167070698799225, -23.742310304940538, 82.499903393484416, 67.213502175129648, -232.07891937634469, -387.93265499317204, 1281.4742181751474, 7140.8743305075477, 19170.83401144094, 6565.2013915603166, -266.59769699529113, 524.55810593663034, -105.08267177765569, 68.939947660481323, -65.513717323045299, -7.7366224074036598, 11.686157623491809, -6.0715674792925807, -4.7051607105170206, 2.1433748844125784, -2.5722659267438033, -2.5332827335358727, -1.5955119590990279, 0.93402216187716958, -2.1983982122300714, -1.3910769799127845, 2.875563242016451, 0.39274625271232855, -1.9143589532041787, -1.9356332468609148, 4.6285618656089529, 1.3770831994437265, -19.219741943874194, 21.574731283989856, 129.03232713044289, 65.73387671644744, 79.985389317629867, 2188.2624437143977, 1562.286524069611, 3837.2504381898625]}}\n}\n",
    "module.exports = right_eye_filter\n\nfunction right_eye_filter () {\n  return {\"real\": [1.8229079259010603, 0.097810498648582461, -0.55840092137248587, -0.99970462842356578, 0.18757876559092043, -0.81617694863114465, -0.17457078018685562, 0.13822182613073089, -0.13830885288846723, 0.14088352498892928, -0.11242245121823281, 0.64190144530750459, -0.18081689212517704, 0.84757445423403044, -2.0367692338977426, 2.3450651085370726, -3.2227771639624789, 2.3450651085369945, -2.0367692338977101, 0.84757445423403854, -0.18081689212518082, 0.64190144530750537, -0.11242245121823641, 0.14088352498894169, -0.13830885288846723, 0.13822182613073003, -0.17457078018684977, -0.81617694863113666, 0.18757876559091927, -0.99970462842356267, -0.55840092137248509, 0.097810498648581323, -1.0960340088024074, -1.9119199452512301, -2.4095702665388479, -0.55162352804953241, -0.50505328014021589, -1.3068505835636635, -0.49437187443975589, 0.23127204626685588, 0.043350794355039197, -0.071787406154436809, 0.070854449837205943, 0.17221102955705567, 0.44602122877614064, 0.074148205591900399, -0.015611524439393865, -0.79896724757292914, -0.67155961060437053, -0.49375784053273253, 0.028167647498424205, -0.3191891366103583, 0.53582170174408217, 0.20183473326047152, 0.12710467168208503, -0.071400263514192097, 0.074560604448017792, -0.12451483496807111, 0.051358135035693774, -0.77282398113384443, -0.42160647485916963, -1.1311602269894514, -1.4625324828122208, 0.3337871926813808, -1.77011609742092, -1.4302518240108344, -3.0428213499062116, -0.60631225487833551, -0.13683987631719793, -2.3692424085383519, -0.34105804260324346, -0.25969657852057992, 0.23610433796619859, -0.27685168579683173, 0.16986402710259335, 0.073612585805396993, 0.57704911017089122, -0.059867579479423505, 0.51680219528175042, -1.0666730319382505, -0.0056552094670686828, -0.75809939060745812, -0.064701320250044561, -0.19832318162238824, 0.37732986906226257, 0.20777584924550152, 0.15451076629740465, -0.013991851319401968, 0.13841341497021592, -0.086883949036928532, 0.25261423619714551, -1.1991385138433881, -1.9867837341406693, -2.275962773839737, -3.1079150257531585, -2.3995834975192567, -2.2937692343725722, -2.1872173045799017, -1.3988308931230504, -2.2073957813815439, -1.9667941627002865, -1.6748432066635108, -0.92650772032564344, -0.054197237250052703, -0.18026213329416008, -0.15232124758200827, -0.016555865669302033, 0.31289505893870784, 0.42806542968274719, 0.23124350286854853, -0.087366382764607439, -0.12552132795947232, -0.12547908619418155, -0.38089709050886683, -0.28444076658768042, -0.11944152964360766, 0.12056136689031131, 0.21189843131890268, 0.16581598470154221, 0.13376820638890077, 0.22205496825803592, 0.15120100371874812, 0.12380717441381156, -1.2352596784322261, -2.2222759116849211, -3.3782856809989692, -3.415076124219421, -2.7282977589825297, -1.5576789730825455, -1.6478932560447972, -2.067907968457094, -2.004290735457912, -2.6427456963680775, -1.9309474679838621, -0.16864865516592528, -0.22642518078963322, -0.13321306237600422, -0.20692971953006373, -0.068344938706069003, 0.14493915164047724, 0.46505832474821007, 0.32789481378377733, 0.1852927254910838, -0.1356638873386786, -0.03585192275390197, -0.17203834043005656, -0.15954900238018477, -0.059581713131431221, -0.017228379259871054, 0.12402459410135006, 0.1524538089963059, 0.16271946063708961, 0.24817234249560427, 0.26053579199245763, -0.04769125558408293, -0.81459993031792033, -2.0740660744196808, -3.1544891598954261, -2.9212825837849565, -2.4077419089431702, -1.6411629435379833, -1.576697627349694, -1.8007661961299257, -2.0001525985045707, -1.5107274159689619, -1.2839600483166405, -0.63196711118813498, 0.31071574064221719, -0.21370915949408273, -0.16393119308951343, -0.097481704015839707, 0.13767875532837173, 0.23695911940697742, 0.36158774196732829, -0.00066962538216623158, -0.1026502520704758, -0.18176695609293456, -0.059120611570986824, -0.13702193484548986, -0.0073538013157976303, 0.020281061259494877, 0.15032501459982059, 0.16876214929227357, 0.18780650312631536, 0.16308782299108887, 0.18583847563977354, 0.44907296092364651, -0.020800703185301726, -1.4297091333258476, -2.4259185480628145, -2.4053777736536626, -1.9821307035675879, -1.3372642957080885, -1.2989780551182537, -1.3731553217305845, -1.2269479805895975, -1.2032897772528626, -0.22206046284030648, -0.18415548289109809, -0.23415549346578352, 0.077936325689887453, -0.21633114300736572, -0.059449722211757941, 0.013318329293146938, 0.28775437300883983, 0.21963323601338633, 0.16649953505637383, -0.18974789333555656, -0.17379580132236441, -0.23416130311702454, -0.13478379984035538, -0.13112027137758978, 0.033522350558872455, 0.13259733500476653, 0.171380750952115, 0.15737574769334917, 0.092477162456605533, 0.13448891283084696, 0.41161459424817443, 0.35609170613712005, -0.55316449850203808, -1.540851379466907, -1.8005308506197801, -1.5719273509294158, -0.94040577953316051, -0.83899416480020927, -0.77336416928591256, -0.66562411016509948, -0.4002640865408188, -0.36750971454913561, 0.2414435659750552, -0.065677188177910795, -0.21341675767851534, -0.041369287190265204, -0.087404842921799578, 0.04460147122538273, 0.19583406251777175, 0.1830038441344799, 0.012219595757112435, -0.034593273427629516, -0.14926486203867156, -0.036665364495836496, -0.1306231554860259, -0.086381624051938985, 0.0020423415177502173, 0.11239290885891448, 0.12781279786870536, 0.10954302373131516, 0.14996801038078228, 0.12965098836907352, 0.14324588543961356, 0.0567484033157079, -0.079342592710004017, -0.77145898274835445, -1.1705860882999304, -1.0754357146023004, -0.5463269466436349, -0.37732231762995055, -0.29185933229148303, -0.18245346577017127, -0.15252816280103537, 0.00992307413149221, -0.05334501261419268, 0.10643359538216246, -0.069635302172998029, -0.20853401810086858, 0.03871878333386132, 0.024793140061197767, 0.22215018549405419, 0.19090693911120471, 0.13458393481660855, -0.1226120784542075, -0.060406846903667433, -0.083060383383984554, -0.016925686434954099, -0.033352938195947639, 0.056474422402956102, 0.04873056181166667, 0.092098221631537164, 0.13542751998114597, 0.15540921558269635, 0.10094403852684107, 0.050489672984821425, 0.089840998861512991, 0.018445471788018183, -0.44280324831238471, -0.64559475523542686, -0.64123409592876457, -0.25571779361731761, -0.15489773108593363, -0.10375533557574061, -0.074018947274090252, -0.074021765277388324, -0.034956034554291714, 0.065331700319185393, -0.079299771847393716, 0.035725424097319471, -0.10252861876832269, -0.22107962950770202, 0.20755848067860572, 0.23157078159613848, 0.34013467279608883, 0.23914223921471078, 0.043591964044129211, -0.20186945117744784, 0.04172561648658725, -0.038784831650455286, 0.076248151019351923, -0.060276976551200255, -0.0031358189183758184, 0.13054366560393055, 0.16122088670834137, 0.12129220423951546, 0.064624059271846127, 0.063153633523538075, 0.036868954773612302, 0.025599835220982206, -0.17872521900892777, -0.37577894082797708, -0.33418602947194676, -0.19087946198724595, -0.092430559387195924, -0.15843188266072916, -0.1178716916883143, -0.079832857077627425, -0.038455609721169501, 0.015668866487966955, 0.0052656766019976578, -0.12562510603385343, -0.024970842739258457, -0.030574039563531708, -0.21969881405226874, 0.59191387060782108, 0.39965780946904006, 0.22624763974293111, 0.077143781693831126, 0.078542516808501189, -0.0038697706067326258, 0.21858339549378, 0.083870133819846815, -0.19149929243694441, 0.053673315180545467, 0.22201073984886688, 0.16922848807595664, 0.12511007660405662, 0.095111634855384236, 0.084195395624058103, 0.010195208908487656, -0.016589123313681509, -0.076922699191606214, -0.17023093289451025, -0.26998035777525775, -0.28189859430096476, -0.32749231042729776, -0.240474927671948, -0.27714150491609907, -0.16857870511456344, -0.056310601502134704, 0.026291702225850644, -0.028508101274427284, -0.066307061790986485, -0.27187198211633473, 0.066219257946262391, 0.32825613521942065, -0.21303758386300781, 1.1917438602108388, 0.2807025357241521, 0.23447144426975483, 0.16511529097099151, 0.40113579910945835, 0.017152293761210982, -0.1450564820739392, 0.13833755803781553, 0.2361453534315919, 0.16033553043559276, 0.17442784770871, 0.17988585089228476, 0.143828955260344, 0.07132752932041192, 0.016244981011210025, -0.013577696292888701, -0.024045478766089354, -0.11184718959298219, -0.14666574805211069, 0.0080876817899727359, -0.16842937423863127, -0.43543489379944889, -0.29975286851709859, -0.22753898297998879, -0.069036032916579657, 0.014977564920406507, -0.020420877906038481, -0.13524198281736244, -0.15739380447541659, -0.33401260934309918, 0.46815371603113554, 0.93021729768322625, -0.26733338229185055, 1.4166629302294091, 0.60664479608939625, 0.3603810860087503, 0.4605515924213614, -0.32071019427276837, 0.15916183580862947, 0.55142162929110317, 0.20419289205444074, 0.051921880744650394, 0.24679565757292954, 0.2706202610478356, 0.15590400545853877, 0.081859441051199647, -0.040980231107277158, 0.019596242113331462, 0.094364427919773758, 0.065278519802775978, -0.029838116901178446, 0.15435464918439099, -0.039386655944161249, -0.077796406016204619, -0.28158476919608044, -0.033110128022724852, 0.018548614200940845, 0.067046107651037731, -0.044245201781535203, -0.1525534131110006, -0.22929077462390082, -0.085302710712388263, -0.049302393683332231, 0.85744368463127818, 1.8448220136861364, -0.68744556831975012, 1.810880881855317, 0.66237039703709566, -0.31567909429421087, 0.83232217907475781, 0.97863365922997991, 0.30994126117364096, -0.041163173314528664, 0.17633262873947353, 0.23161854928102976, 0.25087704366702551, 0.19868696729956423, 0.093569887694449877, 0.032362324442922322, -0.0027507666136337679, 0.21821986304703905, 0.37880734420129814, 0.40096920495374666, 0.93561154193066887, 0.61326039955329958, 0.1638528799494483, 0.1009541629695858, 0.056601591846233243, 0.15561323638878471, 0.073000292812971587, -0.0055442453146915694, -0.13817032242271102, -0.11770539535407684, -0.096245457278447424, 0.46442894125096079, 0.45587938373772585, 1.3432089992982477, 2.5059762271849535, -0.93829697639874887, 0.6492144586928863, 0.79782532034480069, 1.3025551528258366, 0.94174974100732234, 0.099921469659734793, 0.28712786266920659, 0.15853680079243379, 0.130717335778855, 0.17042917695126153, 0.19986443324539621, 0.13725228360851915, 0.029723534135295476, 0.098143635338702864, 0.19047751491127032, 0.49335337973435212, 0.78089304412099847, 0.29686587428828037, 0.38131881367791126, 0.40643673652514922, 0.19053499830856688, 0.20033550195294633, 0.13287714582076576, 0.10533560171090586, 0.00085487897815388243, -0.049435296406267468, -0.081309411554979491, 0.057947716710403128, 0.48207744089263116, 1.2538880645112733, 1.2204758332556214, 0.87793863876625744, 1.8796293205435075, -0.45285576127696725, 2.2308682152547137, 1.2382711063757557, -0.035207936995945072, 0.88175672278306683, 0.55916031961657942, 0.18718127547628777, 0.011764673252274449, 0.068747006595272581, 0.13522321325294812, 0.17151312046437606, 0.10315365060575944, -0.0011239413451798732, 0.14993420590829387, 0.38959110228082239, 0.38845862264410469, 0.69716730182732189, 0.51802064393501412, 0.28837767001488912, 0.10583936790249669, 0.071016615670210698, 0.16001776032454934, 0.10715662619027419, 0.056188716759532117, -0.035825840155044517, 0.0061469917968111389, 0.089493877843564718, 0.68387295014825999, 1.1016519558168656, 1.3182383587355595, 0.66635382040153524, 0.54863673632097221, 4.0547770231048936, 0.54863673632097154, 0.66635382040153424, 1.3182383587355562, 1.101651955816866, 0.68387295014826144, 0.089493877843565064, 0.0061469917968106288, -0.035825840155044517, 0.056188716759530431, 0.10715662619027334, 0.16001776032454856, 0.071016615670210018, 0.10583936790249539, 0.28837767001488829, 0.51802064393501346, 0.29686587428830957, 0.38845862264412201, 0.38959110228084654, 0.14993420590831108, -0.001123941345177488, 0.10315365060576374, 0.17151312046437922, 0.13522321325295103, 0.068747006595273552, 0.011764673252275867, 0.18718127547628682, 0.55916031961657786, 0.88175672278306205, -0.035207936995944634, 1.2382711063757532, 2.2308682152547106, -0.45285576127696175, 1.8796293205435037, 0.87793863876625788, 1.2204758332556218, 1.2538880645112747, 0.48207744089263271, 0.057947716710405182, -0.081309411554979547, -0.04943529640626837, 0.0008548789781495917, 0.10533560171090255, 0.13287714582076099, 0.20033550195294705, 0.19053499830855697, 0.40643673652513423, 0.38131881367792647, 0.93561154193068807, 0.78089304412102711, 0.49335337973436416, 0.19047751491127579, 0.098143635338704696, 0.029723534135297252, 0.13725228360851988, 0.19986443324539666, 0.17042917695126267, 0.13071733577885625, 0.15853680079243432, 0.28712786266920415, 0.099921469659732226, 0.94174974100731712, 1.3025551528258328, 0.79782532034480169, 0.64921445869288619, -0.93829697639874454, 2.5059762271849548, 1.3432089992982421, 0.45587938373772335, 0.46442894125096235, -0.096245457278447175, -0.11770539535407766, -0.13817032242271216, -0.0055442453146945193, 0.073000292812969436, 0.15561323638878341, 0.056601591846233208, 0.10095416296958591, 0.16385287994945555, 0.61326039955330602, 0.15435464918440814, 0.40096920495376004, 0.37880734420131523, 0.21821986304704899, -0.0027507666136306606, 0.032362324442924542, 0.093569887694449336, 0.19868696729956342, 0.25087704366702551, 0.23161854928103059, 0.17633262873947425, -0.041163173314526666, 0.30994126117363635, 0.97863365922997669, 0.83232217907475781, -0.31567909429421592, 0.66237039703709699, 1.810880881855315, -0.68744556831974835, 1.8448220136861369, 0.85744368463127729, -0.049302393683329601, -0.085302710712388291, -0.22929077462390179, -0.15255341311100187, -0.044245201781539331, 0.067046107651035594, 0.018548614200940294, -0.033110128022720509, -0.28158476919607578, -0.077796406016200054, -0.039386655944146774, 0.0080876817899761342, -0.029838116901173162, 0.065278519802780599, 0.09436442791977824, 0.019596242113334855, -0.040980231107276652, 0.08185944105119855, 0.15590400545853553, 0.2706202610478356, 0.24679565757292907, 0.051921880744651677, 0.20419289205443947, 0.55142162929109917, 0.15916183580862936, -0.32071019427277109, 0.46055159242136157, 0.36038108600874996, 0.60664479608939803, 1.4166629302294049, -0.2673333822918505, 0.93021729768322625, 0.46815371603113448, -0.3340126093430979, -0.15739380447541709, -0.13524198281736302, -0.020420877906040739, 0.014977564920405115, -0.069036032916578546, -0.22753898297998629, -0.29975286851709465, -0.43543489379944272, -0.16842937423862725, -0.28189859430095965, -0.14666574805210519, -0.1118471895929717, -0.024045478766081197, -0.013577696292883971, 0.016244981011212731, 0.071327529320409616, 0.14382895526034015, 0.1798858508922834, 0.17442784770871067, 0.16033553043559218, 0.23614535343159299, 0.13833755803781575, -0.14505648207394348, 0.017152293761212339, 0.40113579910946001, 0.16511529097099317, 0.23447144426975502, 0.28070253572415382, 1.1917438602108381, -0.21303758386300692, 0.32825613521942509, 0.066219257946262128, -0.27187198211633529, -0.066307061790987387, -0.028508101274429792, 0.026291702225849072, -0.056310601502134003, -0.1685787051145608, -0.27714150491609657, -0.24047492767194564, -0.32749231042729471, -0.19087946198724157, -0.26998035777525148, -0.17023093289450597, -0.076922699191602426, -0.016589123313677224, 0.01019520890848913, 0.084195395624057118, 0.095111634855381461, 0.12511007660405613, 0.1692284880759545, 0.22201073984886613, 0.053673315180547035, -0.19149929243694658, 0.083870133819847037, 0.21858339549377928, -0.0038697706067313737, 0.078542516808500606, 0.077143781693833222, 0.22624763974292969, 0.39965780946904111, 0.59191387060782175, -0.21969881405226852, -0.030574039563530501, -0.024970842739259945, -0.12562510603385371, 0.0052656766019967011, 0.015668866487966397, -0.038455609721168606, -0.079832857077626357, -0.11787169168831266, -0.15843188266072725, -0.092430559387194119, -0.25571779361731145, -0.33418602947193976, -0.37577894082796842, -0.17872521900892277, 0.025599835220983438, 0.036868954773614897, 0.063153633523536298, 0.064624059271844544, 0.12129220423951372, 0.1612208867083402, 0.13054366560393141, -0.0031358189183775171, -0.060276976551199596, 0.076248151019351354, -0.038784831650455917, 0.041725616486585258, -0.20186945117744698, 0.043591964044126186, 0.23914223921470992, 0.34013467279608772, 0.23157078159613964, 0.20755848067860685, -0.22107962950770196, -0.1025286187683216, 0.035725424097318138, -0.079299771847393549, 0.065331700319185088, -0.034956034554288036, -0.074021765277385243, -0.074018947274086908, -0.10375533557573537, -0.15489773108592672, -0.5463269466436349, -0.64123409592876401, -0.64559475523542686, -0.44280324831238616, 0.018445471788017767, 0.089840998861510313, 0.050489672984820259, 0.10094403852683856, 0.15540921558269635, 0.13542751998114574, 0.092098221631536192, 0.04873056181166658, 0.056474422402955825, -0.033352938195949811, -0.016925686434957218, -0.083060383383990535, -0.060406846903667433, -0.1226120784542102, 0.13458393481660744, 0.19090693911120402, 0.22215018549405383, 0.024793140061198739, 0.038718783333861403, -0.20853401810086775, -0.069635302172998029, 0.1064335953821621, -0.053345012614191917, 0.0099230741314936706, -0.15252816280103507, -0.18245346577017069, -0.29185933229148298, -0.3773223176299495, -0.94040577953315341, -1.0754357146022915, -1.1705860882999222, -0.77145898274834734, -0.079342592710004489, 0.05674840331570382, 0.14324588543960787, 0.12965098836906794, 0.14996801038078103, 0.10954302373131049, 0.12781279786870486, 0.11239290885891398, 0.0020423415177517252, -0.086381624051941733, -0.13062315548602732, -0.036665364495841957, -0.14926486203867201, -0.034593273427634852, 0.012219595757109143, 0.18300384413447635, 0.1958340625177715, 0.044601471225384402, -0.08740484292179726, -0.041369287190262873, -0.21341675767851565, -0.065677188177906895, 0.24144356597505726, -0.36750971454912684, -0.40026408654081164, -0.66562411016509171, -0.77336416928590557, -0.83899416480020206, -1.3372642957080858, -1.5719273509294132, -1.8005308506197781, -1.5408513794669076, -0.5531644985020383, 0.35609170613711127, 0.4116145942481696, 0.13448891283084041, 0.092477162456604783, 0.15737574769334561, 0.17138075095211283, 0.13259733500476581, 0.033522350558872378, -0.13112027137759125, -0.13478379984035713, -0.23416130311702804, -0.17379580132236419, -0.18974789333555622, 0.16649953505637016, 0.21963323601338522, 0.28775437300883855, 0.013318329293152468, -0.059449722211754409, -0.21633114300735917, 0.077936325689886982, -0.23415549346577649, -0.18415548289109335, -0.2220604628402971, -1.203289777252857, -1.2269479805895944, -1.3731553217305832, -1.2989780551182524, -1.64116294353798, -1.9821307035675826, -2.4053777736536572, -2.4259185480628087, -1.4297091333258454, -0.020800703185307738, 0.44907296092364196, 0.1858384756397643, 0.16308782299108818, 0.18780650312631128, 0.16876214929227229, 0.15032501459981898, 0.020281061259495404, -0.0073538013157964212, -0.13702193484548603, -0.059120611570979247, -0.18176695609293375, -0.10265025207047287, -0.00066962538216844151, 0.36158774196732713, 0.23695911940697681, 0.13767875532837892, -0.097481704015832935, -0.1639311930895031, -0.2137091594940832, 0.3107157406422304, -0.63196711118812665, -1.2839600483166249, -1.5107274159689543, -2.0001525985045667, -1.8007661961299211, -1.5766976273496909, -1.557678973082544, -2.4077419089431698, -2.9212825837849552, -3.1544891598954266, -2.0740660744196822, -0.81459993031793032, -0.047691255584086843, 0.26053579199245114, 0.24817234249560396, 0.16271946063708537, 0.1524538089963024, 0.12402459410134949, -0.017228379259870755, -0.059581713131428661, -0.15954900238017725, -0.17203834043004781, -0.03585192275390215, -0.13566388733867182, 0.18529272549107739, 0.32789481378377766, 0.46505832474821029, 0.14493915164048596, -0.068344938706060163, -0.20692971953005135, -0.13321306237600447, -0.22642518078961474, -0.16864865516591712, -1.9309474679838514, -2.6427456963680735, -2.0042907354579094, -2.0679079684570931, -1.6478932560447959, -2.2937692343725686, -2.7282977589825266, -3.4150761242194196, -3.3782856809989692, -2.2222759116849189, -1.2352596784322352, 0.12380717441380877, 0.15120100371873849, 0.22205496825803597, 0.13376820638889372, 0.16581598470153905, 0.21189843131890046, 0.1205613668903118, -0.11944152964360859, -0.2844407665876833, -0.38089709050886922, -0.1254790861941803, -0.12552132795948226, -0.087366382764606329, 0.2312435028685467, 0.42806542968274885, 0.31289505893871633, -0.016555865669298363, -0.15232124758199445, -0.18026213329416074, -0.054197237250036744, -0.92650772032563145, -1.6748432066634964, -1.9667941627002861, -2.2073957813815404, -1.3988308931230464, -2.1872173045798968, -1.7701160974209202, -2.3995834975192563, -3.1079150257531603, -2.2759627738397428, -1.9867837341406698, -1.1991385138433992, 0.25261423619714135, -0.086883949036943853, 0.13841341497021575, -0.013991851319408978, 0.15451076629740176, 0.20777584924549833, 0.37732986906226257, -0.1983231816223982, -0.064701320250050057, -0.75809939060751286, -0.0056552094670687921, -1.0666730319382445, 0.5168021952817432, -0.059867579479421881, 0.57704911017089144, 0.073612585805408248, 0.16986402710259826, -0.27685168579682035, 0.23610433796619823, -0.25969657852055217, -0.34105804260323408, -2.3692424085383355, -0.13683987631719494, -0.60631225487832385, -3.0428213499062093, -1.4302518240108333, -1.0960340088024054, 0.33378719268138207, -1.462532482812221, -1.1311602269894572, -0.42160647485916913, -0.77282398113385165, 0.051358135035689895, -0.12451483496808054, 0.074560604448017945, -0.071400263514198398, 0.12710467168208478, 0.20183473326046905, 0.53582170174408328, -0.31918913661037829, 0.028167647498415164, -0.49375784053277538, -0.67155961060436897, -0.79896724757297555, -0.015611524439376389, 0.074148205591898927, 0.44602122877613765, 0.17221102955705844, 0.070854449837212188, -0.07178740615442418, 0.043350794355038948, 0.23127204626685866, -0.49437187443974595, -1.3068505835636535, -0.50505328014021666, -0.55162352804951942, -2.4095702665388461, -1.9119199452512292], \"bottom\": {\"real\": [4046.4241509904555, 28839.973879370627, 10191.512031448321, 4381.7455807293263, 2071.9548413915022, 1107.2825867454831, 528.34551553150311, 308.97330299730402, 185.81061014820492, 130.08108126519062, 87.65365496956511, 59.09553675383809, 43.506269455848397, 34.575222311681692, 30.798097452905282, 25.523061346781674, 25.951646714603154, 25.523061346781589, 30.798097452905211, 34.575222311681706, 43.506269455848361, 59.095536753838019, 87.653654969565167, 130.08108126519082, 185.81061014820492, 308.97330299730379, 528.34551553150334, 1107.2825867454833, 2071.9548413915031, 4381.7455807293318, 10191.512031448323, 28839.973879370646, 13493.224333003216, 16392.519951456161, 4871.8353885075767, 1571.3337493887716, 567.64096645153529, 373.6703632325283, 244.24660034041102, 142.79597933554817, 106.13580676907658, 75.858347622710525, 58.061322564190078, 39.854538473021549, 30.569538051408923, 25.094853941398878, 22.929757321982656, 20.808198660555963, 22.04888812794956, 23.622937534136554, 29.138683151168021, 38.082981074479143, 54.39934218587819, 77.826621492011839, 121.61239162949131, 177.63416429867098, 254.30481783551838, 430.47940336338183, 664.63525809030591, 1219.8477670929726, 1935.5749815900854, 3358.0980991141623, 6069.2175916916049, 8660.7039291701622, 15384.540019848313, 11175.737303494303, 2216.879483433469, 674.59859086304846, 308.57630937597452, 222.13525013253278, 144.62539946693838, 89.351789047349641, 66.200283784031811, 53.5880480094322, 38.104835124660447, 27.112718944065261, 23.033311632510099, 19.858863545618888, 19.408029208714364, 19.38215160767772, 20.871711217553681, 24.726583224259915, 29.429525390428484, 39.688247321389746, 54.026677368666491, 71.509189516532359, 109.7023701375058, 145.30501493896827, 183.84765943176359, 237.38092500065588, 353.51632607639505, 531.27032729465725, 719.17065363709912, 1367.9024800373177, 2857.7322293344778, 8625.0149751320059, 3926.8611003464521, 2444.3527388912776, 1028.8359899085383, 585.56166554295623, 332.57137935864864, 180.13762334769046, 105.17011934648103, 61.496465220623485, 45.504823244138095, 37.908460172493172, 30.846794326525625, 21.222093075405745, 18.718288087401802, 17.679602313216872, 17.409839934721365, 17.794391783727544, 18.55926931620083, 21.348409581307148, 24.39997962145603, 30.767061622228063, 38.103008129659166, 44.81251118779231, 61.577721983396955, 87.291485884508717, 106.99539363556599, 134.18057082099898, 169.37440787587974, 269.99443977661724, 364.56248799144709, 674.50839546082307, 1521.022929703357, 2634.7343778883865, 2024.849011267275, 1926.8239401023498, 1491.9478410044117, 611.83627918833088, 316.43682665588744, 155.99683828976544, 89.673379864750018, 50.013293885425135, 37.528009707176061, 32.4518569290627, 24.966146703509182, 19.130394004010906, 15.343856356149828, 14.843145659919786, 14.861292517540363, 15.036681247518919, 15.312687438440403, 17.138709070816013, 19.446116741695533, 22.850207518010233, 27.457440287528367, 32.581505308308088, 40.985078317877736, 54.412823137373685, 75.762437644265901, 94.733059346587339, 128.1467358253355, 182.29010502256293, 275.95498073034861, 527.32695578494008, 1132.5867520786235, 1866.4077869841046, 2266.7457843108455, 2107.8495169895441, 1234.6592459623437, 673.70954283481137, 266.6693703142779, 139.47307538222793, 66.730731113314476, 41.917980917088734, 31.2590211502941, 26.786032891522527, 20.35627716260823, 16.038244917569745, 14.499148814332527, 13.459360575928033, 13.144389071570192, 12.567429683418663, 12.230328765246885, 13.466217665828195, 15.328301760046475, 17.144679989146308, 19.68756841312236, 24.074134044705339, 32.727034612286992, 43.026808431859955, 59.193773906230369, 78.820512563030945, 92.994178544706472, 120.42091176843755, 201.9182636225097, 436.44287859172925, 877.8862778005057, 1439.6385876846614, 1649.9911393469049, 1699.4038415062987, 1039.2560892520887, 495.51661529689329, 235.81544665938515, 113.58561083280532, 60.921551746622946, 35.725757089786256, 25.024628727892466, 22.490208420088727, 17.759823791920191, 13.543616943986416, 12.938917306264663, 11.956364952724385, 11.421939705679733, 11.372903592178258, 11.032765269291394, 11.408229662647633, 12.481114469594095, 13.60275540468532, 14.91952183557448, 17.807798659576154, 23.277252196336814, 31.950664619854233, 47.416694920263616, 56.268912844615144, 64.959626427586997, 85.070809539003847, 130.82046704446515, 257.67571935262418, 627.46721263291658, 1194.1693767483914, 1080.1900960853154, 902.674413704009, 600.04055794738224, 333.23520458041997, 166.5653831933532, 88.946305547571072, 50.717393232745131, 31.897215329939996, 23.060146944216118, 18.579780562544169, 15.572760511446054, 13.273777678692191, 12.224913053368416, 11.68638594982613, 10.392044527527784, 10.422646713468026, 10.113778554702394, 10.225072497047023, 10.776357928238541, 11.471833692521193, 12.585855785544721, 15.131216045563061, 18.856673404562432, 24.858220592568422, 32.657280802203381, 43.037987696240307, 51.536289299313914, 59.08796022590117, 89.418846636419246, 168.44781050782811, 382.14409608709747, 745.27797642375992, 544.93523795856049, 546.63255943550212, 362.69938393816085, 222.4530875664997, 124.78354764285341, 69.155510455436144, 41.705006957506896, 26.952419331651356, 19.778555411511121, 17.743475715717917, 14.471795156401063, 12.765457059373892, 11.899864411981882, 10.85818004844373, 10.325708895539952, 9.5692719745256376, 9.2113480820863387, 9.0680329970290128, 9.7734432560375648, 10.488284402310196, 11.323197140674811, 13.23504887223821, 16.674941080314653, 20.771526297093455, 27.569417818570489, 33.103068481604573, 37.131609415223707, 47.964760430736398, 66.578817507603574, 119.94841754808802, 237.18123750436465, 409.50889944188236, 307.01018353832677, 288.66760291638428, 236.16368190120858, 154.32114106589464, 92.303773245695481, 55.468009578938926, 35.843010431224045, 24.692475316947775, 18.31794202383119, 15.815283825259236, 13.970653175227845, 12.321358605090134, 11.166914874614415, 10.532076178141539, 9.9738582700772742, 9.4395532322934326, 8.8524779931517035, 8.5960325163902862, 8.7233150994257276, 9.4605465058702709, 10.702831587760128, 11.695932356823622, 14.406509159208545, 18.893042693096525, 25.031728162044864, 28.237283751764654, 32.110154440123182, 38.781782989560291, 56.412497176172337, 92.156945934839797, 157.10935603874077, 244.24925081430641, 218.20881258539546, 216.90433976724358, 169.13695858014356, 112.62100758585845, 68.70530790516959, 45.982361360241526, 32.725373555898344, 22.221572369125827, 17.135020014783734, 14.281960328360523, 12.699315839076576, 11.637118060780567, 11.004832210877884, 10.393382355075936, 9.6259602166533789, 8.7652013845999868, 8.5650120282362092, 8.5854476517741869, 8.1851518687531879, 9.1270872628576836, 9.8383977040140795, 11.693775785132257, 13.287947209975439, 16.544820171465705, 21.672488061489553, 27.762087103200397, 29.796933806391767, 35.443188490268959, 51.826480475596476, 76.692136618774384, 114.45554660359461, 172.81330831382385, 150.57608076172548, 151.07347077509746, 119.80060075739978, 84.307080896770614, 55.59442395215062, 38.954469932130465, 27.855857296119165, 21.147383956632677, 16.095362427853317, 14.114901096214023, 12.272097096384341, 11.279235865220194, 10.45557624282722, 10.213403723979409, 9.4352540004127672, 9.059591562681522, 8.4285767722705884, 8.2189676916739653, 8.2483207838968369, 8.7272133851807343, 9.3853417746714207, 10.436988631508529, 11.737372360714012, 14.160123000210135, 18.959579242189701, 24.173697545434358, 27.627516713161423, 33.591531685669004, 45.297439984936638, 65.897539497304663, 88.610944521286385, 122.51594786973793, 102.9717174324289, 99.771144171631136, 80.254636450195903, 61.009511746666256, 44.786912913807178, 34.271024500323179, 25.65851527359349, 19.184194785168692, 15.369946764821139, 13.384363033613122, 12.174478369218367, 10.905903566261369, 10.181651684644681, 9.6408755952533021, 9.5742304532973588, 8.9763308722412098, 8.5493032688069821, 8.0644484764315241, 8.4276865988342919, 8.7290963397981098, 9.1210926884309647, 10.045472592156113, 11.11042960636143, 12.723025686618605, 15.905816263070196, 20.709491045732211, 24.791931496783274, 30.865414152401307, 41.835714185623189, 55.039237230593706, 69.947250962386548, 86.305656954166849, 70.246077416654487, 70.163190967731239, 60.941585457354833, 46.988681551588527, 37.426824229947464, 31.105114654781531, 24.717957509432271, 18.191253220796238, 14.40571246916225, 12.794837539520243, 11.45286867499644, 10.555233980671725, 10.138595490186225, 9.7617939326440126, 9.2945114067021706, 9.1978519570897408, 8.5269704682665068, 8.3694986947733589, 8.3900850601209847, 8.9019780110016278, 9.4993224051697176, 10.189344774081897, 11.038776504531349, 12.139382952337165, 14.296273465828305, 18.325479810549485, 23.245126565071455, 28.658675517780157, 38.227879918404916, 50.026933715114076, 59.913478880080035, 67.142884728350211, 60.673200962744687, 56.006191670589025, 48.952383807337931, 41.877289900824969, 35.563752651142892, 29.381802508508265, 23.323351055229473, 18.385352146785323, 14.386074460433269, 11.971768024825069, 10.813949701229296, 10.104265892334448, 9.7873837360525968, 9.7876450182420029, 9.3736570608881902, 9.1067837514303367, 8.8782742568475381, 8.4108604655156682, 8.5145291911969032, 9.1444638633789328, 9.5903687569174956, 10.050972673200409, 10.599176866339214, 12.029252308933458, 13.885440808202775, 16.933840539652099, 20.949767453800131, 27.392670445772911, 35.246945811604022, 44.844494652773115, 53.527920120533459, 59.511906457614529, 53.048047546158344, 49.667902591204928, 45.161821768091436, 39.040569237963304, 34.153498370766542, 28.812200326236947, 21.915204963295363, 16.825291542921018, 14.194481006765461, 11.707465544074312, 10.438485210613589, 9.8151245648739263, 9.283134914271356, 9.0821420578250009, 9.0470505359514384, 9.0924089982219396, 8.8466944313913523, 8.4735939062643375, 8.4980702515250215, 9.0113445722107848, 9.2898710387292809, 9.9575678866832327, 10.426127211956205, 11.223822839806607, 13.773251241827809, 16.688691177663944, 20.746301629724744, 26.320191080313084, 33.979868436578599, 42.0788988747152, 48.313306819757166, 52.481937610238305, 49.070609767594966, 49.766679020971374, 46.544272852318578, 40.229040805773415, 32.559839637781486, 26.180018982316895, 21.083604085221012, 16.97356072267355, 13.301411970448795, 11.264067238060504, 10.255581922596939, 9.6536213682112031, 9.2153774062964224, 8.7468110761182825, 8.4356542718375049, 8.7323846743622209, 8.8458599078381237, 8.7323846743622209, 8.4356542718375032, 8.7468110761182896, 9.2153774062964278, 9.653621368211212, 10.255581922596944, 11.264067238060512, 13.301411970448795, 16.973560722673543, 21.083604085221008, 26.180018982316881, 32.559839637781494, 40.22904080577338, 46.544272852318571, 49.766679020971331, 53.048047546158344, 52.481937610238198, 48.313306819757052, 42.0788988747152, 33.979868436578577, 26.320191080313087, 20.746301629724748, 16.688691177663959, 13.773251241827822, 11.22382283980661, 10.426127211956201, 9.9575678866832256, 9.2898710387292791, 9.0113445722107919, 8.4980702515250268, 8.4735939062643357, 8.8466944313913505, 9.0924089982219467, 9.0470505359514402, 9.0821420578250063, 9.2831349142713542, 9.815124564873928, 10.438485210613582, 11.707465544074319, 14.194481006765461, 16.825291542921001, 21.915204963295366, 28.81220032623694, 34.153498370766549, 39.040569237963282, 45.161821768091372, 49.667902591204999, 60.67320096274468, 59.511906457614572, 53.527920120533402, 44.844494652773072, 35.246945811604007, 27.392670445772925, 20.949767453800135, 16.933840539652095, 13.88544080820277, 12.029252308933453, 10.599176866339214, 10.0509726732004, 9.5903687569174885, 9.1444638633789328, 8.5145291911969103, 8.4108604655156718, 8.8782742568475346, 9.1067837514303385, 9.3736570608881848, 9.7876450182420012, 9.7873837360526021, 10.10426589233446, 10.813949701229305, 11.971768024825074, 14.386074460433273, 18.385352146785333, 23.323351055229466, 29.381802508508251, 35.563752651142877, 41.877289900824962, 48.952383807337874, 56.006191670588912, 70.246077416654288, 67.142884728350111, 59.913478880079964, 50.026933715114062, 38.227879918404923, 28.658675517780189, 23.24512656507147, 18.325479810549478, 14.296273465828305, 12.139382952337156, 11.038776504531354, 10.189344774081897, 9.4993224051697229, 8.9019780110016331, 8.3900850601209847, 8.3694986947733572, 8.5269704682665068, 9.197851957089739, 9.2945114067021635, 9.7617939326440144, 10.138595490186225, 10.555233980671725, 11.452868674996441, 12.794837539520238, 14.405712469162248, 18.191253220796249, 24.717957509432264, 31.105114654781534, 37.426824229947449, 46.988681551588492, 60.941585457354776, 70.163190967731154, 102.97171743242879, 86.305656954166807, 69.947250962386491, 55.039237230593784, 41.835714185623168, 30.865414152401325, 24.791931496783278, 20.709491045732214, 15.905816263070196, 12.723025686618604, 11.110429606361421, 10.045472592156107, 9.1210926884309735, 8.7290963397981116, 8.4276865988342937, 8.0644484764315258, 8.5493032688069821, 8.9763308722412134, 9.5742304532973623, 9.6408755952533056, 10.181651684644681, 10.905903566261369, 12.174478369218367, 13.384363033613125, 15.369946764821144, 19.184194785168689, 25.658515273593498, 34.271024500323144, 44.78691291380715, 61.009511746666178, 80.25463645019579, 99.771144171631008, 150.57608076172505, 122.51594786973776, 88.610944521286228, 65.897539497304635, 45.297439984936574, 33.591531685669025, 27.627516713161402, 24.173697545434354, 18.959579242189701, 14.160123000210131, 11.737372360714007, 10.436988631508525, 9.3853417746714172, 8.7272133851807325, 8.2483207838968262, 8.2189676916739689, 8.4285767722705902, 9.0595915626815202, 9.4352540004127654, 10.213403723979411, 10.455576242827226, 11.279235865220191, 12.272097096384336, 14.114901096214016, 16.095362427853331, 21.147383956632702, 27.855857296119162, 38.954469932130408, 55.594423952150585, 84.307080896770429, 119.80060075739968, 151.07347077509721, 218.20881258539524, 172.81330831382382, 114.45554660359451, 76.692136618774427, 51.826480475596433, 35.443188490268959, 29.796933806391745, 27.762087103200372, 21.672488061489549, 16.544820171465698, 13.287947209975444, 11.693775785132251, 9.8383977040140866, 9.1270872628576836, 8.1851518687531897, 8.5854476517741798, 8.5650120282362074, 8.7652013845999939, 9.6259602166533789, 10.393382355075921, 11.004832210877884, 11.637118060780562, 12.699315839076572, 14.281960328360505, 17.135020014783741, 22.221572369125806, 32.725373555898322, 45.982361360241477, 68.705307905169562, 112.62100758585837, 169.13695858014344, 216.90433976724287, 307.01018353832563, 244.24925081430612, 157.1093560387404, 92.156945934839754, 56.412497176172316, 38.781782989560298, 32.110154440123168, 28.237283751764654, 25.031728162044857, 18.893042693096504, 14.406509159208543, 11.695932356823613, 10.702831587760132, 9.4605465058702674, 8.7233150994257205, 8.5960325163902844, 8.8524779931517052, 9.4395532322934272, 9.9738582700772813, 10.53207617814155, 11.166914874614413, 12.321358605090143, 13.970653175227838, 15.815283825259229, 18.317942023831186, 24.692475316947778, 35.843010431224023, 55.468009578938812, 92.303773245695368, 154.32114106589427, 236.16368190120789, 288.66760291638354, 544.93523795856049, 409.50889944188282, 237.18123750436465, 119.9484175480882, 66.578817507603574, 47.964760430736455, 37.131609415223693, 33.103068481604559, 27.569417818570489, 20.771526297093434, 16.674941080314646, 13.235048872238199, 11.323197140674804, 10.488284402310184, 9.7734432560375648, 9.068032997029011, 9.2113480820863387, 9.5692719745256465, 10.325708895539957, 10.85818004844373, 11.899864411981884, 12.765457059373892, 14.471795156401072, 17.743475715717903, 19.778555411511121, 26.952419331651342, 41.705006957506882, 69.155510455435987, 124.78354764285341, 222.45308756649936, 362.69938393816079, 546.63255943550212, 1080.190096085312, 745.27797642375788, 382.14409608709587, 168.44781050782805, 89.418846636419218, 59.087960225901135, 51.536289299313893, 43.037987696240307, 32.657280802203374, 24.858220592568383, 18.8566734045624, 15.131216045563052, 12.585855785544725, 11.471833692521184, 10.776357928238532, 10.225072497047019, 10.113778554702403, 10.422646713468026, 10.39204452752778, 11.686385949826136, 12.224913053368411, 13.273777678692191, 15.572760511446033, 18.579780562544141, 23.060146944216122, 31.897215329939918, 50.717393232745025, 88.946305547570788, 166.56538319335294, 333.23520458041884, 600.04055794738088, 902.6744137040065, 1649.9911393469013, 1194.1693767483896, 627.46721263291568, 257.67571935262464, 130.82046704446515, 85.070809539003903, 64.95962642758694, 56.268912844615201, 47.416694920263595, 31.950664619854226, 23.277252196336782, 17.807798659576147, 14.919521835574468, 13.60275540468532, 12.481114469594081, 11.408229662647638, 11.032765269291394, 11.37290359217827, 11.421939705679749, 11.956364952724407, 12.938917306264656, 13.543616943986398, 17.759823791920141, 22.490208420088635, 25.024628727892473, 35.725757089786228, 60.92155174662291, 113.58561083280503, 235.81544665938503, 495.51661529689198, 1039.2560892520876, 1699.403841506296, 2266.7457843108423, 1439.6385876846614, 877.88627780050422, 436.44287859172971, 201.91826362250967, 120.42091176843758, 92.994178544706443, 78.820512563031016, 59.193773906230312, 43.026808431859891, 32.72703461228695, 24.074134044705318, 19.687568413122339, 17.144679989146301, 15.32830176004647, 13.466217665828177, 12.230328765246888, 12.567429683418707, 13.144389071570203, 13.459360575928054, 14.499148814332536, 16.038244917569731, 20.356277162608194, 26.786032891522385, 31.259021150294068, 41.917980917088691, 66.730731113314405, 139.47307538222745, 266.66937031427761, 673.70954283481024, 1234.659245962343, 2107.8495169895405, 2024.849011267276, 1866.4077869841062, 1132.5867520786235, 527.32695578494054, 275.9549807303485, 182.29010502256293, 128.14673582533564, 94.733059346587495, 75.762437644265887, 54.412823137373678, 40.985078317877729, 32.581505308308067, 27.457440287528364, 22.850207518010212, 19.446116741695526, 17.138709070816009, 15.312687438440404, 15.036681247518965, 14.861292517540395, 14.843145659919811, 15.343856356149836, 19.130394004010878, 24.966146703509185, 32.451856929062608, 37.528009707176075, 50.013293885425036, 89.673379864749862, 155.99683828976509, 316.43682665588739, 611.83627918833008, 1491.9478410044112, 1926.8239401023493, 3926.8611003464503, 2634.734377888386, 1521.0229297033557, 674.50839546082398, 364.56248799144686, 269.99443977661741, 169.37440787587963, 134.18057082099915, 106.99539363556599, 87.291485884508702, 61.577721983396906, 44.812511187792317, 38.103008129659166, 30.767061622228066, 24.399979621456033, 21.348409581307155, 18.55926931620083, 17.794391783727576, 17.409839934721397, 17.67960231321689, 18.718288087401788, 21.222093075405763, 30.846794326525586, 37.908460172493079, 45.504823244138095, 61.496465220623335, 105.17011934648093, 180.13762334768973, 332.57137935864853, 585.56166554295532, 1028.8359899085369, 2444.3527388912739, 15384.540019848309, 8625.0149751320096, 2857.732229334476, 1367.9024800373199, 719.17065363709889, 531.27032729465782, 353.51632607639499, 237.38092500065625, 183.84765943176362, 145.3050149389683, 109.70237013750581, 71.509189516532217, 54.026677368666469, 39.688247321389689, 29.429525390428473, 24.726583224260004, 20.871711217553678, 19.382151607677731, 19.408029208714364, 19.858863545618949, 23.033311632510113, 27.11271894406525, 38.10483512466044, 53.588048009431979, 66.200283784031811, 89.351789047349371, 144.62539946693829, 222.13525013253218, 308.57630937597452, 674.59859086304834, 2216.8794834334685, 11175.737303494294, 13493.224333003214, 8660.703929170164, 6069.217591691604, 3358.0980991141591, 1935.5749815900851, 1219.8477670929722, 664.63525809030602, 430.47940336338263, 254.30481783551838, 177.63416429867087, 121.61239162949126, 77.826621492011839, 54.399342185878204, 38.082981074479164, 29.138683151168006, 23.622937534136597, 22.04888812794956, 20.808198660555991, 22.92975732198266, 25.094853941398917, 30.569538051408909, 39.854538473021513, 58.061322564190043, 75.858347622710383, 106.13580676907651, 142.795979335548, 244.24660034041099, 373.67036323252819, 567.64096645153575, 1571.3337493887695, 4871.835388507573, 16392.519951456165], \"imag\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}, \"imag\": [0.0, -1.343901621327011, 1.7218333249394571, 1.3937858919791224, -0.90478486773452105, 0.99560837280124848, 0.13374486301187097, 0.79781790598886937, 0.081235430122062774, 0.47338465820086184, -0.078534664439216209, 0.29500119331967589, -0.62479162763734286, 0.29517170974740459, -1.8712573358384692, 0.14096520515743682, 0.0, -0.14096520515741828, 1.8712573358384816, -0.29517170974737811, 0.62479162763733731, -0.29500119331966146, 0.078534664439223051, -0.47338465820085962, -0.081235430122062774, -0.79781790598886004, -0.13374486301187369, -0.99560837280124848, 0.90478486773452083, -1.3937858919791226, -1.7218333249394557, 1.3439016213270112, 1.5871307700950068, 0.56370110925886319, 1.2603198064423482, 2.9317402483699255, -0.84090846562801591, 0.28395441021550888, 1.0393523450590114, 0.83104911233799517, 0.57334259680943678, 0.30043904784975134, 0.29266755430531527, 0.082930104064024152, -0.36502835420313379, -0.76213554623438207, -0.54316838647957832, -0.66028179246101926, 0.20250391456576916, -0.059393044635645806, 0.9730252602081445, -0.01782962412134724, 0.18933865423621773, 0.011846708470834844, 0.014269719747672759, -0.16281560265463554, -0.24410560657714067, -0.34963232308526365, -0.32234943120999277, -0.6691127915152365, 0.14162995430492473, -0.96909874957635578, -1.0446282489208472, 1.3612809629252947, 0.70464907960903156, 1.644656498115789, 1.457626495523533, -0.6840361527612806, -0.68147470897196205, 0.73118573872942638, 1.2398159392319572, 1.2736175855463174, 0.65550663858936109, 0.45897332874861019, 0.24948129249627171, 0.22959418801218681, -0.67355449112520815, -0.78917379441405089, -0.83366315887398401, -0.022795944141155908, 0.15753196960053301, 0.50836195321582456, 0.16292155588892338, 0.14047533322536612, -0.029004083819245446, 0.042892010327960466, -0.084780328674450303, -0.13217055914433321, -0.30971168558439593, -0.44061350110378666, -0.59380988893293396, -0.46719027726302742, -1.2068396187631398, -0.94969408752542273, 0.28960616895899027, -0.40038203546320883, 0.55620249274438927, 0.14065731983379595, 1.390858139437829, -0.67833342052765033, -2.0926714021100303, 1.5120873610545131, 1.7251253398279642, 1.0499886203647506, 0.6413261932720733, 0.43315407205712014, 0.32584150801434064, 0.17968537990933128, -0.27887473465086693, -0.72646685328097149, -0.95200274282553721, -0.38747270801185796, 0.31172559850957127, 0.3167238274644899, 0.25925756638025876, 0.20404659434537992, 0.19201780058118942, 0.0025274006864131854, -0.20254250312507205, -0.30146681989018398, -0.45156398868756126, -0.71583959398165176, -0.78636343748881254, -1.3089140888320636, 0.41393919421363429, -0.92308378001125058, -0.96086768695066838, 0.99489496750979101, -0.39381772120025876, -0.59264738582705545, -1.1161873115341066, -0.38954314931717815, 0.15776662530084892, 0.39428020304678685, 1.7089894615168126, 0.92868491010646026, 0.350973234838865, 0.32125288047075679, 0.23669588269358602, 0.19592809956108717, -0.32646969875093118, -0.5617213523679232, -0.76596137582739887, -0.4848448097808058, 0.0035984972735877987, 0.36234031342999445, 0.02584515038201295, 0.38132345964413561, 0.29172235696712762, 0.10460468586389386, -0.14942504329756173, -0.23406484190568319, -0.59702583417138988, -0.64791716309340031, -1.1972380302487249, -0.37081056871520385, 0.31028937719203986, -0.11181138224479611, 0.050224150041196312, -0.59242819035998506, -0.4703174557375312, -0.55567065990801068, -0.18073895078348806, -0.07286620180284567, 0.9080135456055427, 1.3448759333642528, 0.56391746646770735, 0.68824563709365816, 0.27054447491545203, 0.18555506064923469, 0.21628766080629094, 0.089227696371118645, -0.1330464412169812, -0.51044075389216448, -0.57482956329522528, -0.49992842173388902, -0.0088882269741786465, -0.026119953804469152, 0.16649307508904443, 0.18021017930701566, 0.24129551707937363, 0.051414766220490717, -0.054409237913703348, -0.21354052285348152, -0.34065461819243753, -0.83215952955458006, -0.65455151443418824, -0.51711748874533736, -0.34193161983249143, 0.25991967791421511, -0.31922838969311168, -0.25096233231074472, -0.019538834540300996, 0.23386297177233037, 0.39736821511961345, 0.72603823847118543, 0.8168297825020705, 1.0763583447726135, 0.80611388127401196, -0.023349196100613815, 0.09911450222934183, 0.11136104528246665, 0.11912886110102348, 0.1510441091194204, -0.10294245821664937, -0.34339582552474845, -0.46071517851602106, -0.27454988477746128, -0.021291149638310566, 0.035818571775215378, 0.08165077597052256, 0.19593247304969552, 0.16021249355536668, 0.073411101811457824, -0.094413661460628892, -0.14774431296435828, -0.3788677957633147, -0.38953231590523063, -0.62892221563014938, -0.80219655994233319, 0.19764870263775744, -0.28620163890053252, 0.041738811618785537, -0.047502831671303453, 0.42759360787810174, 0.44353340330745888, 0.61232760985457502, 0.70207820166905466, 0.72192603666395361, 0.63928791416871467, 0.32589261306510392, 0.17268517789923485, -0.11832252230060911, 0.049391580905339259, 0.12347320818582375, 0.064697981434016727, -0.0067102091687047593, -0.27370819742589092, -0.26939466873920287, -0.25176222060998998, 0.0081310228529853402, 0.013089808045657288, 0.185105158015618, 0.11713478908555769, 0.20974664985683705, 0.048745778368168922, -0.0069359534603168627, -0.18083894269546222, -0.15907734702039189, -0.30490326972545728, -0.49525043110711681, -0.20633977154543071, -0.28929558460304977, 0.017255660868048289, 0.089250558912840242, 0.34349774583430781, 0.38277205043588519, 0.56772102070325814, 0.48811475177501612, 0.43659704639067964, 0.38858095560717315, 0.35469216713625445, 0.11095078972724678, -0.050354098986562471, 0.010426074631633324, -0.023032548262322892, 0.068558023511485697, 0.1199625535177883, -0.0044347552049944488, -0.14323623171577524, -0.2742488887234425, -0.15059247824174998, -0.18695930341705305, 0.068136880204083733, 0.049162011568203073, 0.16362595169702937, 0.078325720975578078, 0.11153460033842358, -0.10346450949096449, -0.039250261082814021, -0.12027128091306288, -0.23113762225192683, -0.07885965728132803, -0.25982980909746989, -0.11219308206942701, -0.19372413199270677, 0.1843821378255476, 0.22544536191476028, 0.22838873802709003, 0.11856768480607156, 0.20011010622694389, 0.16443500436191505, 0.13441036107213369, 0.15600995797323181, 0.029984980792926118, -0.017950425588896139, -0.095997178609832007, 0.045815559155676679, 0.050600401411128038, 0.062555070152262096, 0.095362679574156284, -0.25884721081868178, -0.19352665675464722, -0.35758313393883445, 0.057241994101256972, -0.074489797691212556, 0.15760636776309309, 0.077110294424560424, 0.21793581355625327, -0.085384156728057797, 0.054278095118519401, -0.063513516552257218, -0.13925876777247995, -0.053090482149624127, -0.088550664314818353, 0.097053178020475875, 0.021982682491266895, -0.032057043772553598, 0.011606155190390474, 0.20297398899260674, 0.087137707937781944, 0.14235450986309658, -0.0066344290522644652, 0.069443551113326479, 0.037974760198136455, 0.02723212012252952, -0.030406089689394462, -0.062891439826322393, -0.033462702565164315, -0.13091343010011852, 0.18662643567548856, 0.14580799486104234, -0.055902479292620696, -0.12813917376287484, -0.43706544906097528, -0.097926711565598012, -0.17130544619864244, 0.30727693305691806, -0.2953735036217468, 0.22056405751825581, -0.16529753202987246, 0.34047455883436423, -0.0020829156573361745, -0.14775664020163451, -0.074518551996532553, -0.14850320507536691, -0.057283952975165524, 0.064665418468806371, 0.23511892751228192, 0.11870789775778592, 0.0625549454189092, -0.031298024311669038, 0.0064402102662661845, -0.079082063664820082, 0.0553675188881671, 0.025089334126077875, 0.063800091749494747, 0.015988824093570549, -0.048545356942180602, -0.11558972094679192, -0.097487343329346582, -0.00049492928166827938, -0.18157168721539482, 0.33942288969170681, 0.30522386319855388, -0.54639589537101751, 0.013830571830100688, -0.38850732372171304, 0.223075916963486, -0.31865288748874443, 0.25745374979707547, -0.81885347149607268, 0.50855168910609783, 0.20195166784419227, -0.069785743671890318, 0.050884179954965268, -0.18377202523753672, -0.17303565260659334, -0.15924096907201105, 0.092146932205194695, 0.26379835890783954, 0.35934781180257075, 0.24329566614587647, 0.18564601960109514, 0.24223475523068938, 0.28967646870392649, 0.15967526911861643, 0.22365254766781259, 0.12185893624650075, 0.070105150765122456, -0.045495054958742086, -0.13016925945874308, -0.12331107551299306, -0.096585989040329473, 0.22919036999990153, -0.39865574246315477, 0.3675558227752026, 0.45597314967635888, -0.93227329954448013, 0.32110784375924512, -0.59160024067907024, 0.39469180639349893, -1.5810043928614619, 0.71926168426275527, -0.095920343398476549, -0.084877145937512208, 0.40399573862898452, -0.041743397742653787, -0.10303861084867461, -0.21220001866353477, -0.17318676777643013, 0.015792824133968684, 0.37994714934071439, 0.4573031649737595, 0.48491463219236358, 0.278045596991639, 0.33099751793182702, 0.073461819418744675, 0.30445717300203839, 0.34815332433352569, 0.27336662525128713, 0.050113511094951838, -0.059405844632707393, -0.16261143474742229, -0.10891422081227681, -0.075070297171157971, 0.15348950297637756, 0.63132994551184463, -0.93604459898777692, 0.42325697055405742, 1.1782712312395338, -1.6700526640562563, 0.67307548012867768, -2.0365876460209691, 0.69665186973993298, -0.3990336398782886, -0.77751104168880314, 0.5628167675812451, 0.044468991083659551, 0.081278132745909976, -0.070993394358423723, -0.091852860366211056, -0.10956166698887557, 0.072941493094735049, 0.35167328896657912, 0.63488067579895824, 0.56199684605205058, 0.60627707274502263, -0.018970197624819329, 0.37668655809680845, 0.22317003729918369, 0.17596357423928666, 0.18202109891962201, 0.038230887694388455, -0.10475039750351335, -0.15123171993121909, -0.11278544639649389, 0.054110895720760221, 0.23852479976301316, 0.30802887330694756, 0.9587111952302938, -1.4503952980081434, -0.061458391503499687, 2.1389978076683529, -3.5142346308062073, 1.6764175122847729, -0.63252660757872936, -1.1970497991660358, 0.46027494328631885, -0.38868529039399474, 0.063066133758830412, 0.085024034480974467, 0.047630852690686495, -0.022775175196356016, 0.011847923870825085, 0.13095780969018636, 0.39870906011464996, 0.54100133271840178, 0.62859642257501991, 0.12859489098386362, -0.17371304193339687, -0.77135662792152559, -0.35696964892202537, -0.15350152251372465, -0.081108427029901481, -0.12890403553126065, -0.14048874638904316, -0.18368108831833277, -0.13143015225876853, 0.037318187986402011, 0.39815350666418903, 0.44685069559938601, 0.29854169122462937, 1.0193515924216456, -2.1696976832709978, -1.5476694374721527, 4.1115013597100623, -1.6066056279080296, -1.1129988398741206, 0.94641351902713078, -0.66464487182371434, -0.22405122030787003, -0.16845135046504239, 0.10281428632219461, 0.12776142939872864, 0.10903691838775739, 0.097477148948306502, 0.19622512970077355, 0.37581890109000032, 0.58152174984392169, 0.57588244896775898, 0.56835821427965394, 0.0, -0.075660591040101741, -0.5319087481065502, -0.49066506338765509, -0.25388521774435541, -0.17759782612549996, -0.17342105765811164, -0.17172379067488869, -0.17163733194043357, -0.0096917261033460274, 0.23320936684713756, 0.61544163247884909, 0.23031783223894131, 0.4504667163321609, -0.25422186154383031, -1.2338903723029762, 0.0, 1.2338903723029679, 0.25422186154382892, -0.45046671633216256, -0.23031783223894184, -0.61544163247884998, -0.2332093668471385, 0.0096917261033450074, 0.17163733194043357, 0.17172379067488885, 0.17342105765811225, 0.17759782612550043, 0.25388521774435546, 0.49066506338765642, 0.53190874810654976, 0.075660591040102837, 0.17371304193345374, -0.56835821427958444, -0.57588244896772234, -0.58152174984391114, -0.37581890108999716, -0.19622512970076919, -0.097477148948305531, -0.10903691838775691, -0.12776142939873006, -0.10281428632219579, 0.16845135046504131, 0.22405122030786861, 0.66464487182371257, -0.94641351902713855, 1.1129988398741191, 1.6066056279080259, -4.1115013597100578, 1.5476694374721462, 2.1696976832709982, -1.0193515924216472, -0.29854169122463242, -0.44685069559938834, -0.39815350666419097, -0.037318187986404149, 0.13143015225876697, 0.18368108831833294, 0.14048874638904385, 0.12890403553126736, 0.081108427029909794, 0.15350152251374438, 0.35696964892206617, 0.77135662792155557, 0.018970197624865574, -0.12859489098383081, -0.62859642257500314, -0.54100133271839856, -0.39870906011464824, -0.13095780969018578, -0.011847923870824886, 0.022775175196357359, -0.047630852690687051, -0.085024034480974689, -0.063066133758832563, 0.38868529039399197, -0.46027494328632251, 1.1970497991660347, 0.63252660757872814, -1.6764175122847713, 3.5142346308062082, -2.1389978076683618, 0.061458391503496308, 1.4503952980081398, -0.95871119523029713, -0.30802887330694667, -0.2385247997630148, -0.054110895720761498, 0.11278544639649313, 0.15123171993121864, 0.1047503975035141, -0.038230887694384028, -0.18202109891961496, -0.17596357423927469, -0.2231700372991606, -0.37668655809676688, -0.33099751793180054, -0.60627707274499654, -0.56199684605203359, -0.63488067579895024, -0.35167328896657507, -0.072941493094733675, 0.1095616669888755, 0.091852860366211805, 0.07099339435842339, -0.08127813274590924, -0.044468991083660724, -0.56281676758124888, 0.77751104168880336, 0.39903363987828711, -0.69665186973992854, 2.0365876460209633, -0.67307548012867546, 1.6700526640562572, -1.17827123123954, -0.42325697055405653, 0.93604459898777859, -0.63132994551184651, -0.15348950297637845, 0.075070297171156097, 0.10891422081227575, 0.16261143474742193, 0.059405844632708517, -0.050113511094947612, -0.27336662525128258, -0.34815332433351742, -0.30445717300202041, -0.073461819418725136, -0.24223475523068566, -0.278045596991634, -0.48491463219235625, -0.45730316497375445, -0.37994714934071183, -0.015792824133968708, 0.17318676777642958, 0.21220001866353638, 0.10303861084867472, 0.04174339774265514, -0.40399573862898636, 0.084877145937511819, 0.095920343398476396, -0.71926168426275106, 1.5810043928614652, -0.39469180639349549, 0.59160024067907002, -0.32110784375924395, 0.93227329954447902, -0.4559731496763611, -0.36755582277520088, 0.39865574246315755, -0.22919036999990147, 0.096585989040328876, 0.12331107551299252, 0.1301692594587433, 0.045495054958742745, -0.070105150765121721, -0.12185893624649984, -0.22365254766781101, -0.15967526911861513, -0.28967646870392255, -0.0064402102662611729, -0.18564601960108706, -0.24329566614587189, -0.35934781180256659, -0.2637983589078372, -0.092146932205193599, 0.15924096907201093, 0.17303565260659445, 0.18377202523753683, -0.05088417995496395, 0.069785743671890568, -0.20195166784419286, -0.50855168910609727, 0.81885347149607191, -0.25745374979707175, 0.3186528874887527, -0.22307591696348483, 0.38850732372171648, -0.013830571830101068, 0.54639589537102196, -0.30522386319855499, -0.33942288969170481, 0.18157168721539607, 0.0004949292816654663, 0.097487343329345874, 0.11558972094679136, 0.04854535694218131, -0.015988824093569717, -0.06380009174949508, -0.025089334126078205, -0.055367518888164394, 0.079082063664820748, -0.087137707937777115, 0.031298024311669809, -0.062554945418906743, -0.1187078977577844, -0.23511892751228033, -0.064665418468805788, 0.057283952975166051, 0.14850320507536743, 0.074518551996532748, 0.14775664020163706, 0.0020829156573371555, -0.34047455883436323, 0.16529753202987046, -0.22056405751825445, 0.29537350362174863, -0.30727693305691484, 0.17130544619864224, 0.097926711565602301, 0.43706544906097711, 0.12813917376287753, 0.055902479292622584, -0.14580799486104357, -0.18662643567548898, 0.13091343010011883, 0.03346270256516358, 0.062891439826322837, 0.030406089689394671, -0.027232120122529239, -0.037974760198136892, -0.069443551113326632, 0.0066344290522653612, -0.14235450986309153, -0.22838873802708684, -0.2029739889926063, -0.011606155190393872, 0.032057043772551565, -0.021982682491265355, -0.097053178020474681, 0.088550664314818187, 0.053090482149624633, 0.13925876777248047, 0.063513516552260146, -0.054278095118517826, 0.08538415672805795, -0.21793581355625447, -0.077110294424558939, -0.15760636776309189, 0.074489797691215873, -0.057241994101257694, 0.35758313393883939, 0.19352665675464989, 0.25884721081868634, -0.095362679574154757, -0.062555070152259029, -0.050600401411129904, -0.04581555915567774, 0.095997178609832215, 0.0179504255888953, -0.029984980792924155, -0.15600995797322956, -0.13441036107213314, -0.16443500436191227, -0.20011010622694014, -0.1185676848060674, -0.38277205043588519, -0.22544536191476122, -0.18438213782554774, 0.19372413199270522, 0.11219308206942717, 0.25982980909746933, 0.078859657281328127, 0.23113762225192824, 0.12027128091306288, 0.03925026108281611, 0.10346450949096535, -0.11153460033842286, -0.078325720975578092, -0.16362595169702793, -0.049162011568201006, -0.06813688020407746, 0.18695930341705305, 0.15059247824175628, 0.27424888872344572, 0.14323623171577923, 0.0044347552049957819, -0.11996255351778637, -0.068558023511484198, 0.023032548262321723, -0.010426074631633324, 0.05035409898656467, -0.11095078972724633, -0.35469216713625396, -0.38858095560717304, -0.43659704639067964, -0.48811475177501651, -0.56772102070325836, -0.42759360787810491, -0.34349774583431025, -0.089250558912845224, -0.017255660868053985, 0.28929558460304938, 0.20633977154543065, 0.49525043110711575, 0.30490326972545867, 0.15907734702039197, 0.18083894269546641, 0.0069359534603191542, -0.048745778368166057, -0.20974664985683683, -0.11713478908555536, -0.18510515801561447, -0.013089808045645399, -0.0081310228529865667, 0.25176222061000281, 0.2693946687392072, 0.27370819742589902, 0.0067102091687078758, -0.064697981434012536, -0.12347320818582255, -0.049391580905336498, 0.11832252230060807, -0.17268517789922963, -0.32589261306509937, -0.639287914168712, -0.72192603666395261, -0.70207820166905555, -0.61232760985457479, -0.44353340330746277, 0.019538834540299969, 0.047502831671299713, -0.041738811618788646, 0.28620163890052958, -0.19764870263775797, 0.80219655994233652, 0.62892221563015416, 0.38953231590523568, 0.37886779576331475, 0.14774431296436413, 0.094413661460632833, -0.073411101811453133, -0.16021249355536557, -0.19593247304968892, -0.081650775970513151, -0.035818571775193361, 0.021291149638310077, 0.27454988477748077, 0.46071517851603194, 0.34339582552475939, 0.10294245821665464, -0.15104410911941546, -0.11912886110102075, -0.1113610452824651, -0.099114502229341719, 0.023349196100618572, -0.80611388127400851, -1.0763583447726097, -0.8168297825020715, -0.72603823847118742, -0.39736821511961523, -0.23386297177233123, 0.4703174557375292, 0.25096233231074278, 0.31922838969310624, -0.25991967791422005, 0.34193161983249054, 0.51711748874534202, 0.65455151443419168, 0.83215952955458772, 0.34065461819243747, 0.21354052285348993, 0.054409237913707532, -0.051414766220484194, -0.24129551707937194, -0.18021017930700467, -0.16649307508903324, 0.02611995380449984, 0.0088882269741778191, 0.49992842173391339, 0.57482956329523827, 0.51044075389218102, 0.13304644121698647, -0.089227696371110179, -0.21628766080628836, -0.18555506064923225, -0.27054447491545125, -0.68824563709364495, -0.56391746646770291, -1.3448759333642519, -0.90801354560554559, 0.072866201802841646, 0.18073895078348665, 0.55567065990800857, 0.39381772120025821, 0.59242819035998318, -0.05022415004119711, 0.11181138224479518, -0.31028937719203997, 0.3708105687152074, 1.1972380302487284, 0.6479171630934083, 0.5970258341713901, 0.23406484190569171, 0.1494250432975659, -0.10460468586388726, -0.29172235696712562, -0.38132345964412656, -0.02584515038199919, -0.36234031342997136, -0.0035984972735878563, 0.484844809780835, 0.76596137582741564, 0.56172135236794307, 0.32646969875093934, -0.19592809956107882, -0.23669588269358457, -0.32125288047075495, -0.35097323483886461, -0.92868491010645182, -1.7089894615168075, -0.39428020304678818, -0.15776662530084981, 0.38954314931717637, 1.1161873115341048, 0.59264738582705467, -0.5562024927443876, -0.99489496750979078, 0.9608676869506646, 0.92308378001124303, -0.4139391942136339, 1.3089140888320632, 0.78636343748881332, 0.71583959398165975, 0.45156398868756092, 0.30146681989019147, 0.20254250312507779, -0.0025274006864056797, -0.19201780058118689, -0.20404659434537004, -0.25925756638025355, -0.31672382746446043, -0.31172559850957088, 0.38747270801190198, 0.95200274282556019, 0.72646685328099436, 0.2788747346508717, -0.17968537990931685, -0.3258415080143367, -0.43315407205711348, -0.64132619327207141, -1.0499886203647348, -1.7251253398279605, -1.5120873610545145, 2.092671402110029, 0.678333420527655, -1.3908581394378237, -0.14065731983379445, -0.704649079609032, 0.40038203546320611, -0.28960616895899161, 0.94969408752542028, 1.2068396187631385, 0.4671902772630277, 0.59380988893293563, 0.44061350110379105, 0.30971168558439566, 0.13217055914433939, 0.084780328674454217, -0.042892010327952576, 0.029004083819250629, -0.14047533322535441, -0.16292155588890503, -0.50836195321575572, -0.15753196960053273, 0.022795944141262008, 0.83366315887402342, 0.78917379441409119, 0.67355449112521315, -0.2295941880121686, -0.24948129249626083, -0.45897332874859181, -0.65550663858936065, -1.2736175855462932, -1.2398159392319503, -0.73118573872941783, 0.68147470897196305, 0.68403615276129381, -1.4576264955235338, -1.6446564981157907, -1.587130770095007, -1.361280962925294, 1.044628248920846, 0.96909874957635356, -0.14162995430492481, 0.66911279151523617, 0.32234943120999365, 0.34963232308526704, 0.244105606577141, 0.16281560265463482, -0.014269719747667968, -0.011846708470826806, -0.18933865423621368, 0.017829624121361812, -0.97302526020811309, 0.059393044635753067, -0.20250391456577049, 0.6602817924610479, 0.54316838647960974, 0.76213554623441593, 0.36502835420313695, -0.082930104064008442, -0.29266755430530383, -0.30043904784973247, -0.57334259680943656, -0.83104911233797829, -1.039352345059011, -0.28395441021550044, 0.84090846562801602, -2.9317402483699175, -1.2603198064423498, -0.5637011092588653], \"height\": 32, \"width\": 32, \"top\": {\"real\": [7376.2586563979694, 2820.8522261533344, -5690.9497085395169, -4380.4513376296127, 388.6547315083493, -903.73852292232903, -92.233688854560938, 42.706854165930984, -25.699252344104405, 18.326281263011424, -9.8542387499157442, 37.933510453511431, -7.8666684309670254, 29.305075180843883, -62.728617354661907, 59.853240627388928, -83.636374399044939, 59.853240627386725, -62.728617354660756, 29.305075180844177, -7.8666684309671826, 37.933510453511431, -9.8542387499160657, 18.326281263013065, -25.699252344104405, 42.706854165930693, -92.233688854557883, -903.7385229223205, 388.65473150834708, -4380.4513376296045, -5690.9497085395114, 2820.8522261533035, -14789.032757371706, -31341.185848117759, -11739.029695619593, -866.78466658113393, -286.68893204831016, -488.33133225087568, -120.74864963582691, 33.024718339611894, 4.6010715329524166, -5.4456740109959769, 4.1139030671062393, 6.8633911029603265, 13.634662924808397, 1.860738389345556, -0.35796846682150263, -16.625069210775109, -14.807142725465134, -11.664010623894898, 0.82076815557037341, -12.155673848711613, 29.148348103795893, 15.708115389403888, 15.457503110539639, -12.683126140048403, 18.961120931859309, -53.601071866945205, 34.13442733448511, -942.72760774202175, -816.05094481379797, -3798.5470080468217, -8876.4278731043305, 2890.8320511623124, -27232.421940549859, -15984.118662988652, -6745.5682223604126, -409.0173927639226, -42.225544009425754, -526.29225504527119, -49.325655652906178, -23.20435390028933, 15.630174176003303, -14.835941429972856, 6.4726407463551725, 1.9958373496876167, 13.291351981828791, -1.1889020916883648, 10.030112101155916, -20.674418420848429, -0.1180338988714332, -18.745207674116038, -1.9041291470929314, -7.8710994817942428, 20.385879097388031, 14.857882580655026, 16.950197274587541, -2.033086164989526, 25.446982376231624, -20.624592190095939, 89.303256695009566, -637.06671072120571, -1428.8365567175017, -3113.2951228079887, -8881.5889351276946, -20696.443600183225, -9007.3131796291163, -5346.3306090002807, -1439.1675666408983, -1292.5663502582722, -654.09944760377277, -301.70227472838963, -97.440927522083996, -3.3329385156017457, -8.2027965131620153, -5.7742639473870323, -0.51069538319854635, 6.6402880636318233, 8.0126520330591013, 4.0882931682311625, -1.5210347396074151, -2.2335756869246048, -2.3288001542285928, -8.1315470965115093, -6.9403489082507335, -3.6748649027980562, 4.5937507427443531, 9.4957008241539675, 10.21057060635477, 11.676825499792781, 23.758858737501662, 20.288236987689611, 20.969766857125101, -333.51324485695324, -810.1584353673162, -2278.6820540988888, -5194.4090916202094, -7188.339898707115, -3154.0647285180166, -3175.2001764803263, -3085.2108289353805, -1226.2977859942123, -836.26206181721784, -301.22169990911055, -15.123294918373254, -11.324269109892445, -4.9992210979693361, -6.7152536525607003, -1.7063097661780617, 2.7727430774894133, 7.1357881321682148, 4.8669904821248817, 2.7536893948953045, -2.039934630711028, -0.54898928719761031, -2.9485150656567436, -3.1026085263061316, -1.3614545093317587, -0.47304719477880164, 4.0409079710738931, 6.2483313015723709, 8.8540252326547968, 18.802141623354618, 24.681352644731625, -6.1114787305120313, -148.49350684902615, -572.34886359995278, -1663.447165744248, -3308.6059534728529, -4493.8282478995061, -3720.0991836319017, -3323.4413322476125, -2223.3326338682518, -1347.5218927383742, -402.86472873295924, -179.07785660663581, -42.171627369153548, 13.024576486879551, -6.680339136637107, -4.3910663300422375, -1.9843645852297727, 2.2081255979025864, 3.4357055351949564, 4.8667397989738959, -0.0088018165553918268, -1.2900498248809058, -2.2230696316747851, -0.79613102395178958, -2.1003135650570957, -0.12607857026311342, 0.39928478103703097, 3.6189445517483683, 5.5230847011321824, 8.0807144322734796, 9.6537837209938342, 14.647883903859292, 41.761171107733581, -2.5048396429986766, -288.68438568639834, -1058.7748743456032, -2111.6481404168812, -2853.5518466904464, -2206.4742388833251, -2207.4882969003411, -1427.0600295974209, -607.97311048711572, -283.75431628355585, -25.222873313531675, -11.21903778037437, -8.3653822807976148, 1.9503276148055415, -4.8653324939916756, -1.0558165909594248, 0.18037835028025548, 3.7232300368774149, 2.6260151255238955, 1.901747650437611, -2.157984497724208, -1.9174482807780493, -2.671365924063863, -1.6822520344543337, -1.7835969801453151, 0.50013744114287995, 2.3612666445612516, 3.9892729615099713, 5.0282597338489978, 4.3849613992965208, 7.5675449146459712, 26.738330274504211, 30.293009711209869, -72.365238046453968, -397.03998761961856, -1129.7740740979677, -1877.1475049531305, -1015.8170093531105, -757.33856581211364, -464.04986763483271, -221.8093865245269, -66.670140953208971, -32.688631361988044, 12.245388279073117, -2.09491941357581, -4.9214217924247272, -0.76863227802399692, -1.3611346863617457, 0.59203001318831738, 2.3940543871676745, 2.1386535528573569, 0.12698658321630202, -0.36055346759858353, -1.509631760657328, -0.37490601010058217, -1.4076418772333708, -0.9909556252137327, 0.025704615807234758, 1.7006413859335137, 2.4101241863335301, 2.7230446482899899, 4.8975474263529586, 5.5799176422335819, 7.3823613929523022, 3.3531473980019464, -7.0947231292717241, -129.95057654055665, -447.33256260550814, -801.49855315264267, -297.71280467242298, -206.25666421819534, -105.85720001872387, -40.587336797783266, -19.033005269759897, 0.68623525685047748, -2.224754122223199, 2.8686428937153541, -1.3772856826259623, -3.7001182860738422, 0.56033030111271653, 0.31649576481826269, 2.6435570864758695, 2.0729019173667451, 1.3896745329326239, -1.1733083260901866, -0.5564284933709801, -0.75319429727185228, -0.16542223594150865, -0.34981510145177358, 0.63947101827441399, 0.64495136714903334, 1.5357324193076427, 2.8130362926385226, 4.2845415972556511, 3.3415574201637508, 1.8747628167747612, 4.3092019872505318, 1.2280777000161127, -53.113548920223614, -153.12296297306594, -262.59106890839882, -78.507966752468647, -44.713956729763169, -24.503242066462356, -11.422688403833899, -6.8324882374101472, -1.9389416594991726, 2.3416848160301655, -1.9581076589813595, 0.65441624739147974, -1.6215192060328243, -3.0886268279599727, 2.5574024719687731, 2.5859312055320047, 3.582324284715654, 2.3851708003164411, 0.41148866509477899, -1.7870448740379692, 0.35867475608513461, -0.33833230756510146, 0.72134917870519866, -0.6451343286468626, -0.036676325952571386, 1.8806785141996829, 3.0459530955995717, 3.0361534846987768, 1.8248078988499765, 2.0278729258957484, 1.4298438030821454, 1.444150632114136, -16.470770345398158, -59.038387406403551, -81.624687331130716, -41.65158074717607, -20.04858945819673, -26.796686775361913, -13.274828683787613, -5.4849410264677898, -1.7682797425272327, 0.51276950901621554, 0.11701161368370352, -2.1525887062494076, -0.35663258536781867, -0.3882693848937121, -2.5566610369397282, 6.5139128293303541, 4.1537964250038213, 2.1778507792771808, 0.67618078211604771, 0.67271760119275736, -0.033223712968477391, 1.7891382881043305, 0.76549003012129324, -1.8840461990319548, 0.62764371336603419, 2.9500669911593334, 2.7998549031057309, 2.7114466415734606, 2.640497491382968, 2.5087646302130264, 0.3613507110411972, -0.85975587552377708, -5.8993661554875496, -19.483874473281006, -46.656198806892085, -42.447185502078959, -49.475399988407517, -28.809040802191632, -23.364991274814315, -9.3720360014436217, -2.193549633075087, 0.73237790527535407, -0.60287176352488314, -1.0672361910519921, -3.8374461384037328, 0.81264916316705227, 3.7024783733454592, -2.2274307006673761, 12.171761179906976, 2.6484997231173142, 2.1242155181960216, 1.3916869062247985, 3.2969221728544564, 0.14147762112210061, -1.2659388719629114, 1.2983452624583423, 2.4646463691490883, 1.8819178233751466, 2.4699197782172551, 3.4105600445409938, 3.476877662739366, 1.970602508408192, 0.54569379437115284, -0.61503488296082265, -1.584537886719974, -9.9108851118855448, -17.968893142628509, 0.83280248396047341, -16.804391379900096, -34.94566909960443, -18.287776152890835, -10.19076861522101, -2.3659355754892188, 0.38430207827148843, -0.39175809943359002, -2.0786620762717161, -2.1066158183404973, -4.0664292874937455, 5.1056392812224729, 9.4711485160420441, -2.577327881134023, 13.563457368659881, 5.4454444116217209, 3.0810071966308192, 3.71409458782056, -2.7028450063821525, 1.3893389983926554, 5.0295677911697716, 2.0512141006459763, 0.57687440104333121, 3.1399874906463121, 4.3044361492909653, 3.2286926050373941, 2.0294536549063102, -1.2648718051872285, 0.81982278416560761, 5.1937461344056883, 4.5660530070978913, -2.5751982814314349, 10.842808636227273, -2.7634934625905125, -4.7410363255116081, -13.231297049532179, -1.2392069417375811, 0.57695677140757395, 1.6572428400911725, -0.80487566941313171, -2.1976406054664008, -2.9337382106235617, -0.97696074341019468, -0.52039830113476337, 8.6932746740913363, 18.008772340009436, -6.3894706762347742, 16.656214263229323, 5.6480128145892756, -2.6420757676626341, 6.9832538798624686, 8.7117753152913409, 2.944231966553327, -0.4194257648970201, 1.9464964791115495, 2.8117062685871983, 3.586606822562346, 3.6410340078674697, 2.1750438821370093, 0.92746135521083628, -0.10515597578954901, 10.916870623975495, 22.695665816423684, 26.922229107827643, 56.766547106622895, 34.346379481364103, 8.0209890672230593, 4.2276867493724737, 2.0129650120803855, 4.5721973792850843, 1.7026114564114816, -0.10193290249876912, -1.9877285465951933, -1.4091416884493304, -1.0407935339809435, 4.6927135104950821, 4.461866465996299, 13.14685287043932, 23.490161756370188, -8.5448676586843408, 5.7639040157862622, 6.7103974452754578, 11.090643871879529, 8.6117964749879281, 0.95828374077, 2.8859143014026349, 1.6803595914225926, 1.5724318132354216, 2.3664842485474589, 3.3844724421254813, 2.8754034241014996, 0.81420697505183059, 3.4592633965370854, 8.5418678989119741, 26.408180301615612, 46.472433795130719, 15.748155014076561, 18.939305693948317, 18.355423454953527, 7.4385947937208252, 6.8421582395566496, 3.8284829441665011, 2.3084513014265475, 0.014383588041353481, -0.70170837590258439, -0.9519271341888802, 0.60488638387036897, 4.7316501322768225, 11.640012070252736, 11.084534895769892, 7.9427552323827459, 17.090358547431578, -4.0062765415124373, 18.903471314461139, 10.522914852414784, -0.31727085194714888, 8.1914062421872558, 5.5678768421215832, 1.9515757898119943, 0.13204460835173984, 0.94686979396028259, 2.2566984460298456, 3.5582629306092612, 2.7150237945754423, -0.038191379039643265, 6.3090662882758242, 18.822434458740766, 20.387061197767007, 34.210424610695611, 25.78016711295075, 13.422328957688888, 4.2578162502068047, 2.3122896178400203, 4.1892680028045364, 2.2592478817037658, 0.95372259584702335, -0.47653425908969432, 0.069240128911087023, 0.91781179579556105, 6.6018505246928774, 10.152138543237006, 11.530381877152177, 5.6211304516254526, 4.7909070280413646, 35.867989503906792, 4.7909070280413584, 5.6211304516254428, 11.530381877152157, 10.152138543237017, 6.6018505246928978, 0.91781179579556504, 0.069240128911081333, -0.47653425908969432, 0.95372259584699437, 2.2592478817037476, 4.1892680028045142, 2.3122896178399985, 4.2578162502067478, 13.422328957688848, 25.780167112950689, 15.74815501407811, 20.387061197767874, 18.822434458741888, 6.309066288276548, -0.038191379039562191, 2.7150237945755555, 3.5582629306093274, 2.2566984460298958, 0.94686979396029702, 0.1320446083517558, 1.9515757898119841, 5.5678768421215636, 8.1914062421872096, -0.31727085194714522, 10.522914852414772, 18.903471314461111, -4.0062765415123884, 17.090358547431556, 7.9427552323827513, 11.084534895769902, 11.640012070252746, 4.7316501322768385, 0.60488638387038995, -0.9519271341888812, -0.70170837590259716, 0.014383588041281273, 2.3084513014264751, 3.8284829441663635, 6.8421582395566762, 7.4385947937204353, 18.355423454952824, 18.939305693949098, 56.76654710662406, 46.472433795132453, 26.408180301616227, 8.5418678989122103, 3.4592633965371484, 0.81420697505187978, 2.8754034241015152, 3.3844724421254879, 2.3664842485474735, 1.572431813235436, 1.6803595914225982, 2.8859143014026083, 0.95828374076997469, 8.6117964749878801, 11.090643871879506, 6.7103974452754693, 5.7639040157862587, -8.5448676586843018, 23.490161756370185, 13.146852870439265, 4.4618664659962768, 4.6927135104951034, -1.0407935339809418, -1.4091416884493408, -1.9877285465952099, -0.10193290249882341, 1.7026114564114307, 4.5721973792850434, 2.0129650120803833, 4.2276867493724772, 8.0209890672234039, 34.346379481364394, 10.842808636228447, 26.9222291078285, 22.695665816424683, 10.916870623975989, -0.10515597578943024, 0.92746135521090112, 2.1750438821369982, 3.6410340078674537, 3.5866068225623455, 2.8117062685872063, 1.9464964791115584, -0.41942576489699973, 2.9442319665532848, 8.7117753152913178, 6.9832538798624677, -2.6420757676626758, 5.6480128145892872, 16.656214263229302, -6.389470676234752, 18.008772340009443, 8.6932746740913274, -0.52039830113473562, -0.97696074341019512, -2.9337382106235728, -2.1976406054664195, -0.80487566941320732, 1.657242840091119, 0.57695677140755675, -1.2392069417374179, -13.231297049531948, -4.7410363255113248, -2.7634934625894938, 0.83280248396082224, -2.5751982814309775, 4.566053007098211, 5.1937461344059415, 0.81982278416574916, -1.2648718051872136, 2.0294536549062832, 3.2286926050373275, 4.3044361492909653, 3.1399874906463054, 0.57687440104334498, 2.0512141006459621, 5.0295677911697396, 1.3893389983926545, -2.7028450063821756, 3.7140945878205622, 3.0810071966308161, 5.4454444116217395, 13.563457368659845, -2.5773278811340234, 9.4711485160420441, 5.1056392812224614, -4.0664292874937296, -2.1066158183405044, -2.0786620762717254, -0.39175809943363327, 0.38430207827145285, -2.3659355754891784, -10.190768615220893, -18.287776152890569, -34.94566909960389, -16.804391379899673, -42.447185502078064, -17.968893142627813, -9.910885111884598, -1.5845378867194357, -0.61503488296060749, 0.5456937943712441, 1.9706025084081269, 3.4768776627392723, 3.4105600445409681, 2.4699197782172639, 1.881917823375139, 2.4646463691490985, 1.2983452624583438, -1.2659388719629485, 0.1414776211221116, 3.2969221728544715, 1.3916869062248129, 2.1242155181960229, 2.6484997231173293, 12.171761179906973, -2.2274307006673681, 3.702478373345508, 0.81264916316704883, -3.8374461384037382, -1.0672361910520076, -0.60287176352493688, 0.73237790527531033, -2.1935496330750563, -9.3720360014434689, -23.364991274814056, -28.809040802191326, -49.47539998840697, -41.651580747175068, -46.656198806890998, -19.483874473280501, -5.8993661554872627, -0.85975587552355426, 0.36135071104124949, 2.5087646302129953, 2.6404974913828889, 2.7114466415734491, 2.7998549031056945, 2.9500669911593249, 0.62764371336605218, -1.8840461990319775, 0.76549003012129535, 1.789138288104325, -0.033223712968466615, 0.67271760119275215, 0.67618078211606658, 2.1778507792771671, 4.1537964250038266, 6.5139128293303603, -2.5566610369397242, -0.38826938489369667, -0.35663258536783948, -2.1525887062494129, 0.11701161368368215, 0.51276950901619689, -1.7682797425271899, -5.4849410264677143, -13.274828683787417, -26.796686775361572, -20.048589458196275, -78.507966752466459, -81.624687331128925, -59.038387406402052, -16.470770345397689, 1.4441506321142048, 1.429843803082246, 2.0278729258956907, 1.8248078988499317, 3.0361534846987319, 3.045953095599546, 1.8806785141996951, -0.036676325952591224, -0.64513432864685583, 0.72134917870519299, -0.33833230756510668, 0.35867475608511745, -1.7870448740379619, 0.41148866509475018, 2.385170800316434, 3.582324284715646, 2.5859312055320172, 2.5574024719687887, -3.08862682795997, -1.6215192060328063, 0.65441624739145521, -1.9581076589813555, 2.3416848160301531, -1.9389416594989646, -6.8324882374098541, -11.422688403833355, -24.503242066461048, -44.713956729761051, -297.71280467242298, -262.59106890839888, -153.12296297306594, -53.113548920223877, 1.2280777000160852, 4.3092019872504084, 1.8747628167747172, 3.341557420163666, 4.2845415972556511, 2.8130362926385151, 1.5357324193076258, 0.64495136714903156, 0.63947101827441044, -0.34981510145179595, -0.16542223594153913, -0.75319429727190634, -0.5564284933709801, -1.1733083260902135, 1.3896745329326132, 2.0729019173667376, 2.6435570864758655, 0.31649576481827513, 0.56033030111271809, -3.7001182860738244, -1.3772856826259623, 2.8686428937153425, -2.2247541222231662, 0.68623525685057685, -19.033005269759858, -40.587336797783074, -105.85720001872383, -206.25666421819477, -1015.8170093530997, -801.4985531526338, -447.3325626055032, -129.9505765405554, -7.094723129271765, 3.3531473980017035, 7.3823613929520073, 5.5799176422333412, 4.8975474263529168, 2.7230446482898696, 2.4101241863335168, 1.700641385933505, 0.025704615807253747, -0.99095562521376346, -1.4076418772333852, -0.37490601010063784, -1.5096317606573337, -0.36055346759863915, 0.12698658321626774, 2.1386535528573165, 2.3940543871676701, 0.59203001318833959, -1.3611346863617075, -0.7686322780239524, -4.9214217924247352, -2.0949194135756803, 12.245388279073195, -32.688631361987156, -66.670140953207678, -221.8093865245236, -464.04986763482748, -757.33856581210489, -2206.474238883316, -1877.1475049531243, -1129.7740740979648, -397.03998761961947, -72.365238046453996, 30.293009711209137, 26.738330274503873, 7.5675449146456106, 4.3849613992964835, 5.0282597338488833, 3.9892729615099154, 2.3612666445612378, 0.50013744114287839, -1.7835969801453351, -1.6822520344543537, -2.6713659240639043, -1.9174482807780469, -2.1579844977242066, 1.9017476504375719, 2.6260151255238871, 3.7232300368773963, 0.18037835028033014, -1.0558165909593593, -4.8653324939915077, 1.9503276148055297, -8.3653822807973572, -11.219037780374073, -25.222873313530549, -283.75431628355437, -607.97311048711254, -1427.0600295974182, -2207.4882969003352, -3720.099183631889, -2853.5518466904387, -2111.648140416873, -1058.7748743456016, -288.68438568639789, -2.5048396429994018, 41.761171107733141, 14.647883903858578, 9.6537837209937827, 8.0807144322732913, 5.5230847011321327, 3.6189445517483261, 0.3992847810370409, -0.12607857026309263, -2.1003135650570361, -0.79613102395168645, -2.2230696316747758, -1.2900498248808734, -0.0088018165554208834, 4.8667397989738888, 3.4357055351949497, 2.2081255979026997, -1.9843645852296314, -4.3910663300419372, -6.6803391366371141, 13.024576486880093, -42.171627369152944, -179.07785660663302, -402.86472873295685, -1347.5218927383694, -2223.332633868245, -3323.4413322476003, -3154.0647285180148, -4493.8282478995088, -3308.6059534728515, -1663.4471657442498, -572.34886359995289, -148.49350684902797, -6.1114787305125393, 24.681352644731046, 18.802141623354593, 8.8540252326545641, 6.2483313015722262, 4.0409079710738718, -0.47304719477879342, -1.361454509331699, -3.1026085263059842, -2.948515065656593, -0.5489892871976132, -2.0399346307109321, 2.7536893948952148, 4.8669904821248942, 7.1357881321682211, 2.7727430774895763, -1.706309766177841, -6.7152536525602784, -4.9992210979693477, -11.324269109891496, -15.123294918372496, -301.22169990910822, -836.26206181721659, -1226.2977859942089, -3085.2108289353782, -3175.2001764803231, -9007.3131796291, -7188.3398987071041, -5194.4090916202022, -2278.6820540988915, -810.15843536731495, -333.51324485695591, 20.969766857124615, 20.288236987688347, 23.758858737501669, 11.676825499792164, 10.210570606354567, 9.4957008241538698, 4.5937507427443718, -3.6748649027980855, -6.9403489082508045, -8.1315470965115626, -2.3288001542285697, -2.2335756869247856, -1.5210347396073984, 4.088293168231135, 8.0126520330591262, 6.6402880636320099, -0.51069538319843244, -5.7742639473864941, -8.2027965131620455, -3.3329385156007563, -97.440927522082632, -301.70227472838576, -654.09944760377232, -1292.5663502582681, -1439.1675666408923, -5346.3306090002598, -27232.421940549855, -20696.443600183229, -8881.5889351276946, -3113.2951228080024, -1428.8365567175017, -637.0667107212123, 89.303256695008088, -20.624592190099609, 25.446982376231595, -2.0330861649905447, 16.950197274587225, 14.857882580654767, 20.385879097388024, -7.8710994817946256, -1.9041291470930921, -18.745207674117459, -0.11803389887143546, -20.674418420848326, 10.030112101155776, -1.1889020916883362, 13.291351981828802, 1.9958373496879209, 6.472640746355359, -14.835941429972186, 15.63017417600328, -23.204353900286776, -49.325655652904786, -526.29225504526619, -42.22554400942483, -409.0173927639147, -6745.5682223604063, -15984.118662988625, -14789.032757371675, 2890.8320511623242, -8876.4278731043305, -3798.5470080468367, -816.05094481379706, -942.72760774203016, 34.134427334482538, -53.601071866949361, 18.961120931859348, -12.683126140049515, 15.4575031105396, 15.708115389403696, 29.148348103795954, -12.155673848712381, 0.82076815557010951, -11.664010623895932, -14.807142725465098, -16.625069210776097, -0.357968466821102, 1.860738389345522, 13.634662924808296, 6.8633911029604313, 4.1139030671065999, -5.4456740109950088, 4.6010715329523864, 33.024718339612249, -120.74864963582446, -488.33133225087175, -286.68893204831085, -866.78466658111245, -11739.029695619576, -31341.185848117751], \"imag\": [0.0, -38758.087655514835, 17548.085047269142, 6107.2151726624015, -1874.673387120311, 1102.4198144208276, 70.663498597697227, 246.50443360377355, 15.094404836632346, 61.578388193120794, -6.883850379905633, 17.433253862249003, -27.182352905748338, 10.205627484635695, -57.631165788617082, 3.5978635789949243, 0.0, -3.5978635789944389, 57.631165788617331, -10.205627484634785, 27.182352905748068, -17.433253862248129, 6.883850379906236, -61.578388193120603, -15.094404836632346, -246.50443360377048, -70.663498597698691, -1102.4198144208278, 1874.6733871203112, -6107.2151726624097, -17548.085047269135, 38758.087655514864, 21415.511526704078, 9240.4816801838842, 6140.0706338628515, 4606.7423967050836, -477.33409412636456, 106.10534760670754, 253.85827683649731, 118.670471872242, 60.852179067446961, 22.790809731222598, 16.992665274593527, 3.3051410229913314, -11.158748163655874, -19.125680216300069, -12.454719286949617, -13.739274709476872, 4.4649861577324996, -1.4030381833900449, 28.352674755287939, -0.67900523797834378, 10.299898240809684, 0.92198929608587377, 1.7353747463970652, -28.921613512340663, -62.077231813228479, -150.50951383829744, -214.24479740751684, -816.21574466320703, 274.1353961963593, -3254.3286688062722, -6340.0761451284025, 11789.651384311641, 10840.701965194425, 18380.248977426931, 3231.3822724351476, -461.44982475214084, -210.28695062763435, 162.42212696600188, 179.30887547689923, 113.80000983072934, 43.394725496932487, 24.59548477602943, 9.5064435172576207, 6.2249226907652995, -15.514190495563678, -15.67209469704693, -16.179758937655365, -0.44183444538403649, 3.28796177703477, 12.57005414423841, 4.7947040656811843, 5.5752197676029693, -1.566994278876134, 3.0671728952871886, -9.3006029966239439, -19.205045070959127, -56.939768493357462, -104.59324045979437, -209.92149032340299, -248.20433151041027, -867.92363746103479, -1299.0888976028032, 827.61688284819274, -3453.3010516440099, 2184.1299326736716, 343.81610498084558, 1430.9649107108667, -397.20604751762147, -695.96261474413006, 272.38382351444113, 181.43163787734565, 64.570588674311324, 29.183435066681643, 16.420203889130576, 10.051165980763317, 3.8132998567254699, -5.2200576234926608, -12.843645059741645, -16.574215370008311, -6.8948411718648668, 5.7853993354930253, 6.7615499928711884, 6.3258793363865982, 6.2779141420300757, 7.316455816584333, 0.11325917153592484, -12.472105947256997, -26.315486653091728, -48.315266721271882, -96.05176533673017, -133.18984159990899, -353.39952612993443, 150.90670251969735, -622.62775933130001, -1461.5017842629939, 2621.2839732861958, -797.42142339187535, -1141.9271710506443, -1665.2932495998289, -238.3366310615267, 49.923170262409073, 61.506465075545492, 153.25086116745172, 46.446591336114025, 13.171326963991907, 10.42525251508628, 5.9093841314446687, 3.7481817410606739, -5.009304162269796, -8.3377118534842136, -11.383176063308646, -7.2904568591879206, 0.055102663998529922, 6.2100452165049633, 0.50258781153530074, 8.7133201843540995, 8.0099491969619425, 3.408178127748358, -6.1241971022028396, -12.736128845291272, -45.232132533425755, -61.3791750629996, -153.42214558232837, -67.595097514570796, 85.625899103861244, -58.961155821254636, 56.883206971067992, -1105.7125877167775, -1066.0901100808514, -1171.2701320923616, -223.1510166903665, -49.090655504704266, 242.13940044346495, 187.57398243385657, 37.630624824958112, 28.849867481961542, 8.4569554634773265, 4.9702839577388582, 4.4028115702250554, 1.4310556478305501, -1.929060150422355, -6.8702061592831818, -7.5557834297932249, -6.2828152868831211, -0.10870593803434039, -0.35173698335235887, 2.5520560959229499, 3.0896458550054593, 4.7505220002799033, 1.2377659738692817, -1.7806530124299274, -9.1879671692559626, -20.164632449396379, -65.591240653702698, -60.869480400000917, -62.271759486118263, -69.04223895420877, 113.44009243151515, -280.24622279593513, -361.29505764988915, -32.2389038646619, 397.42763261597736, 412.9673372382922, 359.76401050336045, 192.6210800054142, 122.25882006598455, 49.109708531705785, -0.83416770813231356, 2.4803036198391495, 2.5045331182816137, 2.1157075816863125, 2.0456835555591151, -1.3319639541688315, -4.1057658132159602, -5.2622609905014679, -3.122429370817716, -0.23490025627283884, 0.40862649299968534, 1.0190926814192749, 2.6652215067301066, 2.3902937959311288, 1.3072901204360872, -2.1976906085986245, -4.7205289930149936, -17.964658686821839, -21.918559933832515, -40.854552179344822, -68.24351076369831, 25.856495589804037, -73.74721318359471, 26.189735785049756, -56.726426890704197, 461.88238037931336, 400.36625478870423, 367.42140066372616, 233.95717316464078, 120.24788693419019, 56.86229814651989, 16.528423808469729, 5.5081763037408891, -2.7285347510623343, 0.91768473485835012, 1.922818700657754, 0.85878662181529319, -0.082031723657331246, -3.1986596327501684, -2.7995613930163934, -2.624028681216124, 0.082235364558318216, 0.13384423623927519, 1.9947594371394528, 1.3437508199980643, 2.6398410865992954, 0.73758290379789837, -0.13078900915043976, -4.4953343292506398, -5.1950335909144894, -13.12242317098767, -25.523369493146305, -12.192196214097944, -25.868477512213353, 2.9066782920883432, 34.106574161015573, 256.00130492151595, 208.58597838816522, 310.3347945923577, 177.03891975992664, 97.122360992021001, 48.488510187113192, 24.528917872852549, 4.6272034575157122, -1.3571647909533122, 0.20621269482631011, -0.40867746076362715, 0.99215767258594889, 1.5313768256641691, -0.052772985639764861, -1.5552847934304939, -2.8318141898835965, -1.44106038161314, -1.7221472209588695, 0.61786747800524422, 0.48048213041449506, 1.7161555169971148, 0.88689757979195871, 1.4761658864245926, -1.7252645996654892, -0.81528783024945528, -3.3158091950668926, -7.6513645380807835, -2.9281859927886749, -12.462674546124116, -7.4696827367159715, -23.236903073402107, 43.7319836231637, 92.321882041990349, 70.117668379783737, 34.226649356314077, 47.258739472197036, 25.375797504306092, 12.406583490274283, 8.6535618432690811, 1.0747519793409035, -0.44324044078252567, -1.7584707522262704, 0.72458607165998101, 0.70692065864217946, 0.77076345191259166, 1.0649069250197341, -2.7261985428418192, -1.9302074459527443, -3.3754250277859401, 0.50673349306549698, -0.64031672309299725, 1.374850007673434, 0.72950552648490297, 2.3325303094340692, -0.9986473214357906, 0.78195787446934228, -1.1999635798104886, -3.4858876190620522, -1.4991310089769327, -2.8433755069243221, 3.7638952884372583, 1.2400980139632869, -2.9542792497780144, 1.8234355680479359, 49.576244746235467, 19.014215780516388, 30.877310974744532, -1.1221271518157558, 7.8208026967228905, 2.609067592037944, 1.2521971880796572, -0.99505064345958283, -1.3975466814991453, -0.57338407820284554, -1.8697004151394911, 2.3700280505641378, 1.696784850403636, -0.61519740478736618, -1.3317994275810727, -4.2071746247346917, -0.85834734780410316, -1.4672332071937433, 2.6381100233578914, -2.4176769851497171, 2.0131074000190821, -1.6262628596018911, 3.9814331515508763, -0.027677673297514374, -2.444607041276003, -1.6150024285043403, -4.1227589144067673, -1.7068861549694658, 2.2919486155920237, 12.185386506158462, 9.103962312567619, 7.1597604706792799, -5.4087151249860161, 0.96974162117579055, -11.947201833901593, 6.6330620252490986, 2.1152085218133552, 3.546929348907518, 0.62283616740311709, -1.3522725353705505, -2.4444202103018355, -1.5690941230144015, -0.0069858778603680161, -2.2282653754616524, 3.8284308308873771, 3.1912913728027457, -5.5805618725494135, 0.13049495818795365, -3.5197176720292105, 1.8802124921714005, -2.6189977871286096, 2.1235611153433935, -7.1463089769422359, 4.7729314123471731, 2.1077672614040215, -0.81910125894631813, 0.72052624692713507, -3.4842402749887631, -4.1829115306886377, -4.3994325344570067, 3.0953565929079909, 11.949390330752637, 23.680136621529911, 21.558658775121675, 22.744598059672118, 24.943328767928129, 28.901352722188449, 12.814680673201753, 13.644932734111247, 5.45768556544121, 2.4025753394703617, -1.1673355625318591, -2.4971924284976894, -1.8952846661475429, -1.2927419412763479, 2.7902732019969552, -4.3477010834394934, 3.7423253621601038, 4.3959804108055893, -8.9257994152947724, 2.882370251254919, -5.0577698714645729, 3.1829717367300585, -13.324209534416688, 6.2785045354550411, -0.87489834284363188, -0.85263104321571348, 4.4885662153073236, -0.53110232172652128, -1.6389132121610095, -4.3945543864166812, -4.2936344828625694, 0.48745205753098192, 15.895360345460416, 25.169617383292081, 33.918445473292621, 23.996907911576923, 23.251277269359601, 5.1543156647143702, 18.554102826608389, 16.359265688234956, 10.231244633613841, 1.5587865083621433, -1.4683911434431964, -2.958105786087343, -1.5689869488245065, -0.96051225634847215, 1.7578951205789273, 6.6638352938822507, -9.4901775499106478, 4.1317473271038834, 10.951455398944859, -15.360897164532773, 5.739294741971535, -17.045217645164048, 5.8449684444103616, -3.5521886878464675, -7.3858280585812945, 5.7347340895196259, 0.4908832539545151, 0.98666637905349674, -1.0149409800154179, -1.6832477381822215, -2.5467748158366237, 2.0904065823844138, 13.443724261124899, 31.761133485201317, 33.671186166611122, 40.707191608760652, -1.1509826127936451, 21.096779572504321, 10.924705320167561, 7.3688776104039446, 6.4733533392666498, 1.1232923919614803, -2.4431302941492752, -2.7804484266994756, -1.6225398299131664, 0.6478030911844409, 2.5793951871330139, 3.1124056384095988, 9.3832743597685244, -14.195954313031031, -0.57608988546761064, 19.479390479219269, -31.200338855208866, 14.100113777774123, -5.3856662644378392, -10.946378631138824, 4.4142064356850845, -3.9066652322250062, 0.66844910598604979, 1.0227755630951001, 0.66137538568075327, -0.38567118503773246, 0.24821124990411303, 3.5872841231435211, 14.053276636456639, 24.260931372233497, 33.647459095648763, 7.6529271231588307, -9.2151377078706354, -38.311665858686638, -16.121399661234683, -5.9927868178298498, -2.7701365304211771, -3.7140088945870469, -3.0788396721523017, -3.0904878618769733, -1.8655827999533823, 0.43690140001808947, 4.1561194908680763, 4.3858952392085353, 2.7714027971729753, 9.257895969243517, -19.629364588289473, -14.072043519544888, 36.373196183604975, -13.61372365841147, -9.4583423311161248, 8.5284583277520429, -6.1744651457950592, -2.2310052363098367, -1.75629520897435, 1.1539693350814639, 1.7596902661237352, 1.8196834579374304, 2.022290334087173, 5.1646829084835781, 12.770276815017757, 24.46979490512981, 27.822785449092486, 29.828540342091252, 0.0, -3.7653763488297254, -24.757305904406468, -19.738984856989376, -8.2664619761594462, -4.6495144591838038, -3.656340919703911, -2.9147641885479052, -2.2830188616483764, -0.10916825448095578, 2.3916977668177819, 5.941240494184604, 2.1224657474819093, 3.9401472638367774, -2.1445277323266949, -10.774805376941604, 0.0, 10.774805376941531, 2.1445277323266829, -3.9401472638367951, -2.1224657474819155, -5.9412404941846173, -2.3916977668177926, 0.10916825448094437, 2.2830188616483764, 2.9147641885479065, 3.6563409197039234, 4.6495144591838136, 8.2664619761594498, 19.738984856989411, 24.75730590440644, 3.7653763488297773, 9.2151377078736516, -29.828540342087546, -27.822785449090652, -24.469794905129369, -12.770276815017642, -5.1646829084834636, -2.022290334087153, -1.8196834579374237, -1.7596902661237566, -1.1539693350814775, 1.7562952089743382, 2.2310052363098212, 6.1744651457950415, -8.5284583277521193, 9.4583423311161194, 13.613723658411436, -36.373196183604932, 14.07204351954484, 19.629364588289484, -9.2578959692435348, -2.7714027971730033, -4.3858952392085584, -4.1561194908680932, -0.43690140001811473, 1.8655827999533605, 3.0904878618769729, 3.0788396721523177, 3.7140088945872396, 2.7701365304214618, 5.9927868178306163, 16.121399661236502, 38.31166585868818, 1.1509826127964509, -7.6529271231568821, -33.647459095647825, -24.260931372233326, -14.053276636456571, -3.5872841231435073, -0.24821124990410889, 0.3856711850377551, -0.66137538568076071, -1.0227755630951023, -0.66844910598607266, 3.9066652322249751, -4.4142064356851165, 10.946378631138813, 5.3856662644378339, -14.100113777774116, 31.200338855208855, -19.479390479219351, 0.57608988546757856, 14.195954313030994, -9.3832743597685617, -3.1124056384095939, -2.5793951871330338, -0.64780309118445645, 1.6225398299131557, 2.7804484266994689, 2.4431302941492916, -1.1232923919613498, -6.4733533392663958, -7.368877610403441, -10.924705320166419, -21.096779572501951, -23.251277269357679, -40.707191608758833, -33.671186166610063, -31.761133485200901, -13.443724261124748, -2.0904065823843769, 2.5467748158366237, 1.6832477381822348, 1.0149409800154132, -0.98666637905348697, -0.49088325395452825, -5.734734089519665, 7.3858280585813008, 3.5521886878464564, -5.8449684444103243, 17.045217645163998, -5.7392947419715155, 15.360897164532778, -10.951455398944907, -4.1317473271038754, 9.4901775499106655, -6.6638352938822702, -1.7578951205789377, 0.96051225634844795, 1.5689869488244914, 2.9581057860873381, 1.4683911434432237, -1.5587865083620118, -10.231244633613667, -16.359265688234554, -18.554102826607274, -5.1543156647129926, -24.943328767927714, -23.996907911576475, -33.918445473292081, -25.169617383291836, -15.895360345460304, -0.48745205753098297, 4.2936344828625552, 4.3945543864167149, 1.6389132121610113, 0.53110232172653837, -4.4885662153073405, 0.85263104321570904, 0.87489834284363122, -6.2785045354550046, 13.324209534416719, -3.1829717367300314, 5.0577698714645702, -2.8823702512549096, 8.9257994152947653, -4.3959804108056124, -3.742325362160086, 4.3477010834395236, -2.7902732019969543, 1.2927419412763401, 1.8952846661475349, 2.4971924284976934, 1.1673355625318764, -2.4025753394703346, -5.4576855654411656, -13.644932734111133, -12.814680673201632, -28.901352722188015, -0.96974162117503315, -22.744598059671098, -21.558658775121231, -23.680136621529623, -11.949390330752514, -3.0953565929079563, 4.3994325344570004, 4.1829115306886644, 3.4842402749887649, -0.72052624692711631, 0.81910125894632069, -2.1077672614040264, -4.772931412347166, 7.1463089769422288, -2.1235611153433602, 2.6189977871286789, -1.8802124921713912, 3.5197176720292407, -0.1304949581879572, 5.5805618725494606, -3.191291372802759, -3.8284308308873531, 2.228265375461667, 0.0069858778603283057, 1.5690941230143916, 2.4444202103018267, 1.3522725353705702, -0.62283616740308378, -3.546929348907534, -2.1152085218133783, -6.6330620252487682, 11.947201833901675, -19.014215780515311, 5.4087151249861485, -7.159760470678993, -9.1039623125675071, -12.18538650615837, -2.2919486155920032, 1.7068861549694805, 4.1227589144067789, 1.6150024285043441, 2.4446070412760443, 0.027677673297527423, -3.981433151550863, 1.6262628596018724, -2.0131074000190696, 2.4176769851497326, -2.6381100233578612, 1.4672332071937413, 0.85834734780414157, 4.2071746247347095, 1.3317994275810989, 0.61519740478738694, -1.6967848504036496, -2.3700280505641422, 1.8697004151394931, 0.5733840782028331, 1.397546681499154, 0.99505064345958893, -1.2521971880796428, -2.6090675920379729, -7.8208026967229012, 1.1221271518159068, -30.877310974743335, -70.117668379782501, -49.576244746235311, -1.8234355680484657, 2.9542792497778261, -1.2400980139631994, -3.7638952884372125, 2.8433755069243154, 1.499131008976947, 3.4858876190620642, 1.1999635798105424, -0.78195787446931964, 0.9986473214357916, -2.332530309434083, -0.72950552648488864, -1.3748500076734225, 0.64031672309302556, -0.50673349306550342, 3.375425027785985, 1.930207445952772, 2.7261985428418698, -1.0649069250197167, -0.77076345191255435, -0.7069206586422051, -0.72458607165999755, 1.7584707522262737, 0.44324044078250502, -1.0747519793408324, -8.6535618432689372, -12.406583490274217, -25.375797504305602, -47.258739472196019, -34.226649356312784, -208.58597838816522, -92.321882041990833, -43.731983623163735, 23.236903073401958, 7.4696827367159822, 12.462674546124104, 2.9281859927886771, 7.6513645380808271, 3.3158091950668926, 0.8152878302494978, 1.7252645996655027, -1.4761658864245817, -0.88689757979195827, -1.7161555169970975, -0.48048213041447491, -0.61786747800518715, 1.7221472209588695, 1.4410603816132017, 2.8318141898836315, 1.5552847934305372, 0.05277298563978073, -1.5313768256641445, -0.9921576725859278, 0.40867746076360606, -0.20621269482631011, 1.3571647909533708, -4.6272034575156908, -24.528917872852457, -48.488510187113178, -97.122360992020845, -177.03891975992676, -310.33479459235781, -461.88238037931535, -256.00130492151709, -34.106574161017335, -2.9066782920893011, 25.868477512213314, 12.192196214097933, 25.523369493146241, 13.12242317098773, 5.1950335909144911, 4.4953343292507366, 0.13078900915048275, -0.73758290379785463, -2.6398410865992936, -1.3437508199980366, -1.9947594371394133, -0.13384423623915356, -0.082235364558330679, 2.6240286812162581, 2.7995613930164374, 3.1986596327502643, 0.082031723657369299, -0.85878662181523746, -1.9228187006577324, -0.91768473485829727, 2.7285347510623108, -5.5081763037407097, -16.528423808469462, -56.862298146519464, -120.24788693418984, -233.9571731646403, -367.42140066372525, -400.36625478870656, 32.238903864660138, 56.726426890699642, -26.189735785051667, 73.747213183594084, -25.856495589804108, 68.243510763698637, 40.854552179345092, 21.918559933832821, 17.964658686821831, 4.7205289930151793, 2.1976906085987129, -1.3072901204360032, -2.3902937959311101, -2.6652215067300165, -1.0190926814191563, -0.40862649299943438, 0.23490025627283342, 3.1224293708179411, 5.2622609905015993, 4.1057658132160988, 1.331963954168899, -2.0456835555590454, -2.1157075816862583, -2.504533118281568, -2.4803036198391473, 0.83416770813248287, -49.109708531705543, -122.25882006598383, -192.62108000541431, -359.76401050336045, -412.96733723829362, -397.42763261597815, 1066.0901100808455, 361.29505764988636, 280.2462227959299, -113.44009243151743, 69.042238954208585, 62.271759486118853, 60.869480400001216, 65.591240653703366, 20.164632449396354, 9.1879671692563107, 1.7806530124300617, -1.2377659738691233, -4.7505220002798652, -3.0896458550052697, -2.5520560959227772, 0.35173698335277165, 0.10870593803433028, 6.2828152868834488, 7.5557834297934026, 6.8702061592834163, 1.9290601504224327, -1.4310556478304128, -4.402811570224995, -4.9702839577387659, -8.4569554634772928, -28.849867481960956, -37.630624824957771, -187.57398243385583, -242.13940044346546, 49.090655504701473, 223.15101669036463, 1171.270132092355, 797.42142339187455, 1105.712587716775, -56.883206971068894, 58.961155821254195, -85.625899103861229, 67.595097514571449, 153.42214558232899, 61.379175063000453, 45.232132533425769, 12.736128845291734, 6.1241971022030093, -3.4081781277481404, -8.0099491969618857, -8.7133201843538846, -0.50258781153503296, -6.2100452165045663, -0.055102663998530817, 7.2904568591883807, 11.383176063308918, 8.3377118534845209, 5.009304162269923, -3.7481817410605087, -5.9093841314446331, -10.425252515086191, -13.171326963991898, -46.446591336113507, -153.25086116745101, -61.506465075545563, -49.92317026240935, 238.33663106152528, 1665.2932495998259, 1141.9271710506428, -2184.1299326736644, -2621.2839732861944, 1461.5017842629866, 622.62775933129569, -150.90670251969709, 353.39952612993454, 133.18984159990904, 96.051765336731378, 48.315266721271847, 26.315486653092378, 12.47210594725734, -0.11325917153558851, -7.3164558165842362, -6.2779141420297728, -6.325879336386472, -6.7615499928705614, -5.7853993354930182, 6.8948411718656626, 16.574215370008741, 12.843645059742064, 5.220057623492746, -3.813299856725167, -10.051165980763182, -16.420203889130285, -29.183435066681557, -64.570588674310201, -181.43163787734505, -272.38382351444022, 695.96261474412938, 397.20604751762363, -1430.9649107108592, -343.81610498084137, -10840.70196519443, 3453.3010516439876, -827.61688284819604, 1299.088897602802, 867.92363746103354, 248.20433151041067, 209.92149032340356, 104.5932404597956, 56.939768493357427, 19.205045070960029, 9.3006029966243737, -3.0671728952866175, 1.5669942788764133, -5.5752197676024959, -4.7947040656806426, -12.570054144236753, -3.2879617770347638, 0.44183444538609318, 16.179758937656128, 15.672094697047777, 15.514190495563801, -6.2249226907648021, -9.506443517257205, -24.595484776028343, -43.394725496932452, -113.80000983072682, -179.30887547689812, -162.42212696599955, 210.28695062763467, 461.44982475214965, -3231.3822724351485, -18380.248977426934, -21415.511526704078, -11789.651384311637, 6340.0761451283952, 3254.3286688062612, -274.13539619635947, 816.21574466320624, 214.24479740751747, 150.50951383829917, 62.077231813228565, 28.921613512340514, -1.7353747463964819, -0.92198929608524804, -10.299898240809465, 0.679005237978899, -28.352674755287008, 1.4030381833925814, -4.4649861577325289, 13.739274709477487, 12.454719286950338, 19.12568021630095, 11.158748163655963, -3.3051410229907021, -16.992665274592852, -22.790809731221124, -60.852179067446897, -118.67047187223945, -253.85827683649717, -106.10534760670436, 477.33409412636507, -4606.7423967050645, -6140.0706338628543, -9240.4816801839206]}}\n}\n",
    "\"use strict\";\n\nvar svmFilter = function() {\n\n  var _fft, fft_filters, responses, biases;\n  var fft_size, filterLength, filter_width, search_width, num_patches;\n  var temp_imag_part, temp_real_part;\n\n  // fft function\n  this.fft_inplace = function(array, _im_part) {\n      // in-place\n\n      if (typeof _im_part == \"undefined\") {\n        _im_part = temp_imag_part;\n      }\n\n      for (var i = 0;i < filterLength;i++) {\n        _im_part[i] = 0.0;\n      }\n\n      _fft.real_fft2d(array,_im_part);\n\n      return [array, _im_part];\n  }\n\n  this.ifft = function(rn, cn) {\n      // in-place\n      _fft.real_ifft2d(rn, cn);\n      return rn;\n  }\n\n  var complex_mult_inplace = function(cn1, cn2) {\n      // in-place, cn1 is the one modified\n      var temp1, temp2;\n      for (var r = 0;r < filterLength;r++) {\n          temp1 = (cn1[0][r]*cn2[0][r]) - (cn1[1][r]*cn2[1][r]);\n          temp2 = (cn1[0][r]*cn2[1][r]) + (cn1[1][r]*cn2[0][r]);\n          cn1[0][r] = temp1;\n          cn1[1][r] = temp2;\n      }\n  }\n\n  this.init = function(filter_input, bias_input, numPatches, filterWidth, searchWidth) {\n\n    var temp, fft, offset;\n\n    // calculate needed size of fft (has to be power of two)\n    fft_size = upperPowerOfTwo(filterWidth-1+searchWidth);\n    filterLength = fft_size*fft_size;\n    _fft = new FFT();\n    _fft.init(fft_size);\n    fft_filters = Array(numPatches);\n    var fft_filter;\n    var edge = (filterWidth-1)/2;\n\n    for (var i = 0;i < numPatches;i++) {\n      var flar_fi0 = new Float64Array(filterLength);\n      var flar_fi1 = new Float64Array(filterLength);\n\n      // load filter\n      var xOffset, yOffset;\n      for (var j = 0;j < filterWidth;j++) {\n        for (var k = 0;k < filterWidth;k++) {\n          // TODO : rotate filter\n\n          xOffset = k < edge ? (fft_size-edge) : (-edge);\n          yOffset = j < edge ? (fft_size-edge) : (-edge);\n          flar_fi0[k+xOffset+((j+yOffset)*fft_size)] = filter_input[i][(filterWidth-1-j)+((filterWidth-1-k)*filterWidth)];\n\n          /*xOffset = k < edge ? (fft_size-edge) : (-edge);\n          yOffset = j < edge ? (fft_size-edge) : (-edge);\n          flar_fi0[k+xOffset+((j+yOffset)*fft_size)] = filter_input[i][k+(j*filterWidth)];*/\n\n          //console.log(k + \",\"+ j+\":\" + (k+xOffset+((j+yOffset)*fft_size)))\n        }\n      }\n\n      // fft it and store\n      fft_filter = this.fft_inplace(flar_fi0, flar_fi1);\n      fft_filters[i] = fft_filter;\n\n    }\n\n    // set up biases\n    biases = new Float64Array(numPatches);\n    for (var i = 0;i < numPatches;i++) {\n      biases[i] = bias_input[i];\n    }\n\n    responses = Array(numPatches);\n    temp_imag_part = Array(numPatches);\n    for (var i = 0;i < numPatches;i++) {\n      responses[i] = new Float64Array(searchWidth*searchWidth);\n      temp_imag_part[i] = new Float64Array(searchWidth*searchWidth);\n    }\n    temp_real_part = new Float64Array(filterLength);\n\n    num_patches = numPatches;\n    filter_width = filterWidth;\n    search_width = searchWidth;\n  }\n\n  this.getResponses = function(patches) {\n    var response, temp, edge;\n    var patch_width = filter_width-1+search_width;\n    for (var i = 0;i < num_patches;i++) {\n      // reset zeroes in temp_real_part\n      for (var j = 0;j < fft_size*fft_size;j++) {\n        temp_real_part[j] = 0.0;\n      }\n\n      // normalize patches to 0-1\n      patches[i] = normalizePatches(patches[i]);\n\n      // patch must be padded (with zeroes) to match fft size\n      for (var j = 0;j < patch_width;j++) {\n        for (var k = 0;k < patch_width;k++) {\n          temp_real_part[j + (fft_size*k)] = patches[i][k + (patch_width*j)];\n        }\n      }\n\n      //drawData(document.getElementById('sketch').getContext('2d'), temp_real_part, 32, 32, false, 0, 0);\n\n      // fft it\n      response = this.fft_inplace(temp_real_part);\n\n      // multiply pointwise with filter\n      complex_mult_inplace(response, fft_filters[i]);\n\n      // inverse fft it\n      response = this.ifft(response[0], response[1]);\n\n      // crop out edges\n      edge = (filter_width-1)/2;\n      for (var j = 0;j < search_width;j++) {\n        for (var k = 0;k < search_width;k++) {\n          responses[i][j + (k*search_width)] = response[edge + k + ((j+edge)*(fft_size))];\n        }\n      }\n\n      // add bias\n      for (var j = 0;j < search_width*search_width;j++) {\n        responses[i][j] += biases[i];\n      }\n\n      // logistic transformation\n      responses[i] = logisticResponse(responses[i]);\n\n      /*responses[i] = new Float64Array(32*32)\n      for (var j = 0;j < 32;j++) {\n        for (var k = 0;k < 32;k++) {\n          responses[i][k + (j*(32))] = response[k + (j*(32))]\n        }\n      }*/\n\n      // normalization?\n      inplaceNormalizeFilterMatrix(responses[i]);\n    }\n\n    return responses;\n  }\n\n  var normalizePatches = function(patch) {\n    var patch_width = filter_width-1+search_width;\n    var max = 0;\n    var min = 1000;\n    var value;\n    for (var j = 0;j < patch_width;j++) {\n      for (var k = 0;k < patch_width;k++) {\n        value = patch[k + (patch_width*j)]\n        if (value < min) {\n          min = value;\n        }\n        if (value > max) {\n          max = value;\n        }\n      }\n    }\n    var scale = max-min;\n    for (var j = 0;j < patch_width;j++) {\n      for (var k = 0;k < patch_width;k++) {\n        patch[k + (patch_width*j)] = (patch[k + (patch_width*j)]-min)/scale;\n      }\n    }\n    return patch;\n  }\n\n  var logisticResponse = function(response) {\n    // create probability by doing logistic transformation\n    for (var j = 0;j < search_width;j++) {\n      for (var k = 0;k < search_width;k++) {\n        response[j + (k*search_width)] = 1.0/(1.0 + Math.exp(- (response[j + (k*search_width)] - 1.0 )));\n      }\n    }\n    return response\n  }\n\n  var upperPowerOfTwo = function(x) {\n    x--;\n    x |= x >> 1;\n    x |= x >> 2;\n    x |= x >> 4;\n    x |= x >> 8;\n    x |= x >> 16;\n    x++;\n    return x;\n  }\n\n  var inplaceNormalizeFilterMatrix = function(response) {\n    // normalize responses to lie within [0,1]\n    var msize = response.length;\n    var max = 0;\n    var min = 1;\n\n    for (var i = 0;i < msize;i++) {\n      max = response[i] > max ? response[i] : max;\n      min = response[i] < min ? response[i] : min;\n    }\n    var dist = max-min;\n\n    if (dist == 0) {\n      console.log(\"a patchresponse was monotone, causing normalization to fail. Leaving it unchanged.\")\n    } else {\n      for (var i = 0;i < msize;i++) {\n        response[i] = (response[i]-min)/dist;\n      }\n    }\n  }\n\n  /**\n   * Fast Fourier Transform\n   * 1D-FFT/IFFT, 2D-FFT/IFFT (radix-2)\n   *\n   * @author ryo / github.com/wellflat\n   * Based on https://github.com/wellflat/javascript-labs with some tiny optimizations\n   */\n\n  function FFT() {\n\n    var _n = 0,          // order\n        _bitrev = null,  // bit reversal table\n        _cstb = null;    // sin/cos table\n    var _tre, _tim;\n\n    this.init = function (n) {\n      if(n !== 0 && (n & (n - 1)) === 0) {\n        _n = n;\n        _setVariables();\n        _makeBitReversal();\n        _makeCosSinTable();\n      } else {\n        throw new Error(\"init: radix-2 required\");\n      }\n    }\n\n    // 1D-FFT\n    this.fft1d = function (re, im) {\n      fft(re, im, 1);\n    }\n\n    // 1D-IFFT\n    this.ifft1d = function (re, im) {\n      var n = 1/_n;\n      fft(re, im, -1);\n      for(var i=0; i<_n; i++) {\n        re[i] *= n;\n        im[i] *= n;\n      }\n    }\n\n    // 2D-FFT\n    this.fft2d = function (re, im) {\n      var i = 0;\n      // x-axis\n      for(var y=0; y<_n; y++) {\n        i = y*_n;\n        for(var x1=0; x1<_n; x1++) {\n          _tre[x1] = re[x1 + i];\n          _tim[x1] = im[x1 + i];\n        }\n        this.fft1d(_tre, _tim);\n        for(var x2=0; x2<_n; x2++) {\n          re[x2 + i] = _tre[x2];\n          im[x2 + i] = _tim[x2];\n        }\n      }\n\n      // y-axis\n      for(var x=0; x<_n; x++) {\n        for(var y1=0; y1<_n; y1++) {\n          i = x + y1*_n;\n          _tre[y1] = re[i];\n          _tim[y1] = im[i];\n        }\n        this.fft1d(_tre, _tim);\n        for(var y2=0; y2<_n; y2++) {\n          i = x + y2*_n;\n          re[i] = _tre[y2];\n          im[i] = _tim[y2];\n        }\n      }\n    }\n\n    // 2D-IFFT\n    this.ifft2d = function (re, im) {\n      var i = 0;\n      // x-axis\n      for(var y=0; y<_n; y++) {\n        i = y*_n;\n        for(var x1=0; x1<_n; x1++) {\n          _tre[x1] = re[x1 + i];\n          _tim[x1] = im[x1 + i];\n        }\n        this.ifft1d(_tre, _tim);\n        for(var x2=0; x2<_n; x2++) {\n          re[x2 + i] = _tre[x2];\n          im[x2 + i] = _tim[x2];\n        }\n      }\n      // y-axis\n      for(var x=0; x<_n; x++) {\n        for(var y1=0; y1<_n; y1++) {\n          i = x + y1*_n;\n          _tre[y1] = re[i];\n          _tim[y1] = im[i];\n        }\n        this.ifft1d(_tre, _tim);\n        for(var y2=0; y2<_n; y2++) {\n          i = x + y2*_n;\n          re[i] = _tre[y2];\n          im[i] = _tim[y2];\n        }\n      }\n    }\n\n    // 2D-IFFT, real-valued\n    // only outputs the real valued part\n    this.real_ifft2d = function (re, im) {\n      var i2;\n      var i = 0;\n      // x-axis\n      for(var y=0; y<_n; y++) {\n        i = y*_n;\n        for(var x1=0; x1<_n; x1++) {\n          _tre[x1] = re[x1 + i];\n          _tim[x1] = im[x1 + i];\n        }\n        this.ifft1d(_tre, _tim);\n        for(var x2=0; x2<_n; x2++) {\n          re[x2 + i] = _tre[x2];\n          im[x2 + i] = _tim[x2];\n        }\n      }\n      // y-axis\n      var halfn = _n/2;\n      var rowIdx = 0;\n      for(var x=0; x<_n; x+=2) {\n        //untangle\n        i = x;\n        i2 = x+1;\n        _tre[0] = re[0 + i];\n        _tim[0] = re[0 + i2];\n        _tre[_n/2] = re[(halfn*_n) + i];\n        _tim[_n/2] = re[(halfn*_n) + i2];\n        for (var x2=1;x2<halfn;x2++) {\n          rowIdx = x2*_n\n          _tre[x2] = re[rowIdx+i] - im[rowIdx + i2];\n          _tre[_n - x2] = re[rowIdx+i] + im[rowIdx + i2];\n          _tim[x2] = im[rowIdx+i] + re[rowIdx+i2];\n          _tim[_n - x2] = re[rowIdx+i2] - im[rowIdx+i];\n        }\n        this.ifft1d(_tre, _tim);\n        for(var y2=0; y2<_n; y2++) {\n          i = x + y2*_n;\n          i2 = (x + 1) + y2*_n;\n          re[i] = _tre[y2];\n          re[i2] = _tim[y2];\n        }\n      }\n    }\n\n    // 2D-FFT, real-valued only\n    // ignores the imaginary input\n    //   see:\n    // http://www.inf.fu-berlin.de/lehre/SS12/SP-Par/download/fft1.pdf\n    // http://cnx.org/content/m12021/latest/\n    // http://images.apple.com/acg/pdf/g4fft.pdf\n    // http://www.ti.com/lit/an/spra291/spra291.pdf\n    this.real_fft2d = function (re, im) {\n      var i = 0, i2 = 0;\n      var fftlen = (_n*_n)-1;\n      // x-axis\n      for(var y=0; y<_n; y += 2) {\n        i = y*_n;\n        i2 = (y+1)*_n;\n        // tangle\n        for(var x1=0; x1<_n; x1++) {\n          _tre[x1] = re[x1 + i];\n          _tim[x1] = re[x1 + i2];\n        }\n        this.fft1d(_tre, _tim);\n        // untangle\n        re[0 + i] = _tre[0];\n        re[0 + i2] = _tim[0];\n        im[0 + i] = 0;\n        im[0 + i2] = 0;\n        re[_n/2 + i] = _tre[_n/2];\n        re[_n/2 + i2] = _tim[_n/2];\n        im[_n/2 + i] = 0;\n        im[_n/2 + i2] = 0;\n        for(var x2=1;x2<(_n/2);x2++) {\n          re[x2 + i] = 0.5 * (_tre[x2] + _tre[_n - x2]);\n          im[x2 + i] = 0.5 * (_tim[x2] - _tim[_n - x2]);\n          re[x2 + i2] = 0.5 * (_tim[x2] + _tim[_n - x2]);\n          im[x2 + i2] = -0.5 * (_tre[x2] - _tre[_n - x2]);\n          re[(_n-x2) + i] = re[x2 + i];\n          im[(_n-x2) + i] = -im[x2 + i];\n          re[(_n-x2) + i2] = re[x2 + i2];\n          im[(_n-x2) + i2] = -im[x2 + i2];\n        }\n      }\n      // y-axis\n      for(var x=0; x<_n; x++) {\n        for(var y1=0; y1<_n; y1++) {\n          i = x + y1*_n;\n          _tre[y1] = re[i];\n          _tim[y1] = im[i];\n        }\n        this.fft1d(_tre, _tim);\n        for(var y2=0; y2<_n; y2++) {\n          i = x + y2*_n;\n          re[i] = _tre[y2];\n          im[i] = _tim[y2];\n        }\n      }\n    }\n\n    // core operation of FFT\n    function fft(re, im, inv) {\n      var d, h, ik, m, tmp, wr, wi, xr, xi,\n          n4 = _n >> 2;\n      // bit reversal\n      for(var l=0; l<_n; l++) {\n        m = _bitrev[l];\n        if(l < m) {\n          tmp = re[l];\n          re[l] = re[m];\n          re[m] = tmp;\n          tmp = im[l];\n          im[l] = im[m];\n          im[m] = tmp;\n        }\n      }\n      // butterfly operation\n      //butfly(re,im,inv,n4);\n      for(var k=1; k<_n; k<<=1) {\n        h = 0;\n        d = _n/(k << 1);\n        for(var j=0; j<k; j++) {\n          wr = _cstb[h + n4];\n          wi = inv*_cstb[h];\n          for(var i=j; i<_n; i+=(k<<1)) {\n            ik = i + k;\n            xr = wr*re[ik] + wi*im[ik];\n            xi = wr*im[ik] - wi*re[ik];\n            re[ik] = re[i] - xr;\n            re[i] += xr;\n            im[ik] = im[i] - xi;\n            im[i] += xi;\n          }\n          h += d;\n        }\n      }\n    }\n\n    function butfly(re, im, inv, n4) {\n      var h,d,wr,wi,ik,xr,xi;\n      for(var k=1; k<_n; k<<=1) {\n        h = 0;\n        d = _n/(k << 1);\n        for(var j=0; j<k; j++) {\n          wr = _cstb[h + n4];\n          wi = inv*_cstb[h];\n          for(var i=j; i<_n; i+=(k<<1)) {\n            ik = i + k;\n            xr = wr*re[ik] + wi*im[ik];\n            xi = wr*im[ik] - wi*re[ik];\n            re[ik] = re[i] - xr;\n            re[i] += xr;\n            im[ik] = im[i] - xi;\n            im[i] += xi;\n          }\n          h += d;\n        }\n      }\n    }\n\n    // set variables\n    function _setVariables() {\n      if(typeof Uint8Array !== 'undefined') {\n        _bitrev = new Uint8Array(_n);\n      } else {\n        _bitrev = new Array(_n);\n      }\n      if(typeof Float64Array !== 'undefined') {\n        _cstb = new Float64Array(_n*1.25);\n        _tre = new Float64Array(_n);\n        _tim = new Float64Array(_n);\n      } else {\n        _cstb = new Array(_n*1.25);\n        _tre = new Array(_n);\n        _tim = new Array(_n);\n      }\n    }\n\n    // make bit reversal table\n    function _makeBitReversal() {\n      var i = 0,\n          j = 0,\n          k = 0;\n      _bitrev[0] = 0;\n      while(++i < _n) {\n        k = _n >> 1;\n        while(k <= j) {\n          j -= k;\n          k >>= 1;\n        }\n        j += k;\n        _bitrev[i] = j;\n      }\n    }\n\n    // make trigonometric function table\n    function _makeCosSinTable() {\n      var n2 = _n >> 1,\n          n4 = _n >> 2,\n          n8 = _n >> 3,\n          n2p4 = n2 + n4,\n          t = Math.sin(Math.PI/_n),\n          dc = 2*t*t,\n          ds = Math.sqrt(dc*(2 - dc)),\n          c = _cstb[n4] = 1,\n          s = _cstb[0] = 0;\n      t = 2*dc;\n      for(var i=1; i<n8; i++) {\n        c -= dc;\n        dc += t*c;\n        s += ds;\n        ds -= t*s;\n        _cstb[i] = s;\n        _cstb[n4 - i] = c;\n      }\n      if(n8 !== 0) {\n        _cstb[n8] = Math.sqrt(0.5);\n      }\n      for(var j=0; j<n4; j++) {\n        _cstb[n2 - j]  = _cstb[j];\n      }\n      for(var k=0; k<n2p4; k++) {\n        _cstb[k + n2] = -_cstb[k];\n      }\n    }\n  }\n}\n",
    "module.exports = webglFilter\n\nfunction webglFilter () {\n\n  /*\n   * Textures:\n   * 0 : raw filter\n   * 1 : patches\n   * 2 : finished response\n   * 3 : grad/lbp treated patches\n   * 4 : sobel filter\n   * 5 : lbp filter\n   *\n   * Routing:\n   *         (              )  0/4/5 --\\\n   *         (              )          _\\|\n   * 1 ----> ( ---------->3 ) ----------> 2\n   *         lbpResponse/      patchResponse\n   *         gradientResponse\n   */\n\n  var gl, canvas;\n  var filterWidth, filterHeight, patchWidth, patchHeight, numPatches, canvasWidth, canvasHeight;\n  var patchResponseProgram, patchDrawProgram;\n  var fbo, numBlocks, patchTex;\n  var drawRectBuffer, drawLayerBuffer, drawImageBuffer, rttTexture;\n  var texCoordBuffer, texCoordLocation, apositionBuffer;\n  var newCanvasWidth, newCanvasBlockHeight, newCanvasHeight;\n  var drawOutRectangles, drawOutImages, drawOutLayer;\n  var patchCells, textureWidth, textureHeight, patchSize, patchArray;\n  var biases;\n\n  var lbpResponseProgram;\n  var lbo, lbpTexCoordLocation, lbpTexCoordBuffer, lbpPositionLocation, lbpAPositionBuffer;\n\n  var gradientResponseProgram;\n  var gbo, gradTexCoordLocation, gradTexCoordBuffer, gradPositionLocation, gradAPositionBuffer;\n\n  var lbpInit = false;\n  var sobelInit = false;\n  var rawInit = false;\n\n  var lbpResponseVS = [\n    \"attribute vec2 a_texCoord;\",\n    \"attribute vec2 a_position;\",\n    \"\",\n    \"varying vec2 v_texCoord;\",\n    \"\",\n    \"void main() {\",\n    \"   // transform coordinates to regular coordinates\",\n    \"   gl_Position = vec4(a_position,0.0,1.0);\",\n    \" \",\n    \"   // pass the texCoord to the fragment shader\",\n    \"   v_texCoord = a_texCoord;\",\n    \"}\"\n  ].join('\\n');\n  var lbpResponseFS;\n\n  var gradientResponseVS = [\n    \"attribute vec2 a_texCoord;\",\n    \"attribute vec2 a_position;\",\n    \"\",\n    \"varying vec2 v_texCoord;\",\n    \"\",\n    \"void main() {\",\n    \"   // transform coordinates to regular coordinates\",\n    \"   gl_Position = vec4(a_position,0.0,1.0);\",\n    \" \",\n    \"   // pass the texCoord to the fragment shader\",\n    \"   v_texCoord = a_texCoord;\",\n    \"}\"\n  ].join('\\n');\n  var gradientResponseFS;\n\n  var patchResponseVS;\n  var patchResponseFS;\n\n  var drawResponsesVS = [\n    \"attribute vec2 a_texCoord_draw;\",\n    \"attribute vec2 a_position_draw;\",\n    \"attribute float a_patchChoice_draw;\",\n    \"\",\n    \"uniform vec2 u_resolutiondraw;\",\n    \"\",\n    \"varying vec2 v_texCoord;\",\n    \"varying float v_select;\",\n    \"\",\n    \"void main() {\",\n    \"   // convert the rectangle from pixels to 0.0 to 1.0\",\n    \"   vec2 zeroToOne = a_position_draw / u_resolutiondraw;\",\n    \"\",\n    \"   // convert from 0->1 to 0->2\",\n    \"   vec2 zeroToTwo = zeroToOne * 2.0;\",\n    \"\",\n    \"   // convert from 0->2 to -1->+1 (clipspace)\",\n    \"   vec2 clipSpace = zeroToTwo - 1.0;\",\n    \"   \",\n    \"   // transform coordinates to regular coordinates\",\n    \"   gl_Position = vec4(clipSpace * vec2(1.0, 1.0), 0, 1);\",\n    \"\",\n    \"   // pass the texCoord to the fragment shader\",\n    \"   v_texCoord = a_texCoord_draw;\",\n    \"   \",\n    \"   v_select = a_patchChoice_draw;\",\n    \"}\"\n  ].join('\\n');\n\n  var drawResponsesFS = [\n    \"precision mediump float;\",\n    \"\",\n    \"// our responses\",\n    \"uniform sampler2D u_responses;\",\n    \"\",\n    \"// the texCoords passed in from the vertex shader.\",\n    \"varying vec2 v_texCoord;\",\n    \"varying float v_select;\",\n    \"\",\n    \"const vec4 bit_shift = vec4(256.0*256.0*256.0, 256.0*256.0, 256.0, 1.0);\",\n    \"const vec4 bit_mask  = vec4(0.0, 1.0/256.0, 1.0/256.0, 1.0/256.0);\",\n    \"\",\n    \"// packing code from here http://stackoverflow.com/questions/9882716/packing-float-into-vec4-how-does-this-code-work\",\n    \"void main() {\",\n    \"  vec4 colorSum = texture2D(u_responses, v_texCoord);\",\n    \"  float value = 0.0;\",\n    \"  if (v_select < 0.1) {\",\n    \"    value = colorSum[0];\",\n    \"  } else if (v_select > 0.9 && v_select < 1.1) {\",\n    \"    value = colorSum[1];\",\n    \"  } else if (v_select > 1.9 && v_select < 2.1) {\",\n    \"    value = colorSum[2];\",\n    \"  } else if (v_select > 2.9 && v_select < 3.1) {\",\n    \"    value = colorSum[3];\",\n    \"  } else {\",\n    \"    value = 1.0;\",\n    \"  }\",\n    \"  \",\n    \"  vec4 res = fract(value * bit_shift);\",\n    \"  res -= res.xxyz * bit_mask;\",\n    \"  \",\n    \"  //gl_FragColor = vec4(value, value, value, value);\",\n    \"  //gl_FragColor = vec4(1.0, value, 1.0, 1.0);\",\n    \"  gl_FragColor = res;\",\n    \"}\"\n  ].join('\\n');\n\n  this.init = function(filters, bias, nP, pW, pH, fW, fH) {\n    // we assume filterVector goes from left to right, rowwise, i.e. row-major order\n\n    if (fW != fH) {\n      alert(\"filter width and height must be same size!\");\n      return;\n    }\n\n    // if filter width is not odd, alert\n    if (fW % 2 == 0 || fH % 2 == 0) {\n      alert(\"filters used in svm must be of odd dimensions!\");\n      return;\n    }\n\n    // setup variables\n    biases = bias;\n    filterWidth = fW;\n    filterHeight = fH;\n    patchWidth = pW;\n    patchHeight = pH;\n    numPatches = nP;\n    numBlocks = Math.floor(numPatches / 4) + Math.ceil((numPatches % 4)/4);\n    canvasWidth = patchWidth;\n    canvasHeight = patchHeight*numBlocks;\n    newCanvasWidth = patchWidth-filterWidth+1;\n    newCanvasBlockHeight = patchHeight-filterWidth+1;\n    newCanvasHeight = newCanvasBlockHeight*numPatches;\n    patchCells = (Math.floor(numPatches / 4) + Math.ceil((numPatches % 4)/4));\n    textureWidth = patchWidth;\n    textureHeight = patchHeight*patchCells;\n    patchSize = patchWidth*patchHeight;\n    patchArray = new Float32Array(patchSize*patchCells*4);\n    var opp = [1/patchWidth, 1/(patchHeight*numBlocks)];\n\n    // write out shaders\n    patchResponseFS = [\n      \"precision mediump float;\",\n      \"\",\n      \"const vec2 u_onePixelPatches = vec2(\"+(1/patchWidth).toFixed(10)+\",\"+(1/(patchHeight*numBlocks)).toFixed(10)+\");\",\n      \"const vec2 u_onePixelFilters = vec2(\"+(1/filterWidth).toFixed(10)+\",\"+(1/(filterHeight*numBlocks)).toFixed(10)+\");\",\n      \"const float u_halffilterwidth = \"+((filterWidth-1.0)/2).toFixed(1)+\";\",\n      \"const float u_halffilterheight = \"+((filterHeight-1.0)/2).toFixed(1)+\";\",\n      \"\",\n      \"// our patches\",\n      \"uniform sampler2D u_patches;\",\n      \"// our filters\",\n      \"uniform sampler2D u_filters;\",\n      \"\",\n      \"// the texCoords passed in from the vertex shader.\",\n      \"varying vec2 v_texCoord;\",\n      \"varying vec2 v_texCoordFilters; // this should give us correct filter\",\n      \"\",\n      \"void main() {\",\n      \"  vec4 colorSum = vec4(0.0, 0.0, 0.0, 0.0);\",\n      \"  vec4 maxn = vec4(0.0, 0.0, 0.0, 0.0);\",\n      \"  vec4 minn = vec4(256.0, 256.0, 256.0, 256.0);\",\n      \"  vec4 scale = vec4(0.0, 0.0, 0.0, 0.0);\",\n      \"  vec4 patchValue = vec4(0.0, 0.0, 0.0, 0.0);\",\n      \"  vec4 filterValue = vec4(0.0, 0.0, 0.0, 0.0);\",\n      \"  vec4 filterTemp = vec4(0.0, 0.0, 0.0, 0.0);\",\n      \"  for (int w = 0;w < \"+filterWidth+\";w++) {\",\n      \"    for (int h = 0;h < \"+filterHeight+\";h++) {\",\n      \"      patchValue = texture2D(u_patches, v_texCoord + u_onePixelPatches * vec2(float(w)-u_halffilterwidth, float(h)-u_halffilterheight));\",\n      \"      filterValue = texture2D(u_filters, v_texCoordFilters + u_onePixelFilters * vec2(float(w)-u_halffilterwidth, float(h)-u_halffilterheight));\",\n      \"      maxn = max(patchValue, maxn);\",\n      \"      minn = min(patchValue, minn);\",\n      \"      colorSum += patchValue*filterValue;\",\n      \"      filterTemp += filterValue;\",\n      \"    } \",\n      \"  }\",\n      \"  scale = maxn-minn;\",\n      \"  colorSum = (colorSum-(minn*filterTemp))/scale;\",\n      \"  // logistic transformation\",\n      \"  colorSum = 1.0/(1.0 + exp(- (colorSum) ));\",\n      \"  gl_FragColor = colorSum;\",\n      \"}\"\n    ].join('\\n');\n\n    patchResponseVS = [\n      \"attribute vec2 a_texCoord;\",\n      \"attribute vec2 a_position;\",\n      \"\",\n      \"const vec2 u_resolution = vec2(\"+canvasWidth.toFixed(1)+\",\"+canvasHeight.toFixed(1)+\");\",\n      \"const float u_patchHeight = \"+(1/numBlocks).toFixed(10)+\";\",\n      \"const float u_filterHeight = \"+(1/numBlocks).toFixed(10)+\";\",\n      \"const vec2 u_midpoint = vec2(0.5 ,\"+(1/(numBlocks*2)).toFixed(10)+\");\",\n      \"\",\n      \"varying vec2 v_texCoord;\",\n      \"varying vec2 v_texCoordFilters;\",\n      \"\",\n      \"void main() {\",\n      \"   // convert the rectangle from pixels to 0.0 to 1.0\",\n      \"   vec2 zeroToOne = a_position / u_resolution;\",\n      \"\",\n      \"   // convert from 0->1 to 0->2\",\n      \"   vec2 zeroToTwo = zeroToOne * 2.0;\",\n      \"\",\n      \"   // convert from 0->2 to -1->+1 (clipspace)\",\n      \"   vec2 clipSpace = zeroToTwo - 1.0;\",\n      \"   \",\n      \"   // transform coordinates to regular coordinates\",\n      \"   gl_Position = vec4(clipSpace * vec2(1.0, 1.0), 0, 1);\",\n      \" \",\n      \"   // pass the texCoord to the fragment shader\",\n      \"   v_texCoord = a_texCoord;\",\n      \"   \",\n      \"   // set the filtertexture coordinate based on number filter to use\",\n      \"   v_texCoordFilters = u_midpoint + vec2(0.0, u_filterHeight * floor(a_texCoord[1]/u_patchHeight));\",\n      \"}\"\n    ].join('\\n');\n\n    if ('lbp' in filters) {\n      // lbpResponseFragment\n      lbpResponseFS = [\n        \"precision mediump float;\",\n        \"\",\n        \"uniform vec2 u_onePixelPatches;\",\n        \"\",\n        \"// our patches\",\n        \"uniform sampler2D u_patches;\",\n        \"\",\n        \"// the texCoords passed in from the vertex shader.\",\n        \"varying vec2 v_texCoord;\",\n        \"\",\n        \"void main() {\",\n        \"  vec4 topLeft = texture2D(u_patches, v_texCoord + vec2(-\"+opp[0].toFixed(5)+\", -\"+opp[1].toFixed(5)+\"));\",\n        \"  vec4 topMid = texture2D(u_patches, v_texCoord + vec2(0.0, -\"+opp[1].toFixed(5)+\"));\",\n        \"  vec4 topRight = texture2D(u_patches, v_texCoord + vec2(\"+opp[0].toFixed(5)+\", -\"+opp[1].toFixed(5)+\"));\",\n        \"  vec4 midLeft = texture2D(u_patches, v_texCoord + vec2(-\"+opp[0].toFixed(5)+\", 0.0));\",\n        \"  vec4 midMid = texture2D(u_patches, v_texCoord);\",\n        \"  vec4 midRight = texture2D(u_patches, v_texCoord + vec2(\"+opp[0].toFixed(5)+\", 0.0));\",\n        \"  vec4 bottomLeft = texture2D(u_patches, v_texCoord + vec2(-\"+opp[0].toFixed(5)+\", \"+opp[1].toFixed(5)+\"));\",\n        \"  vec4 bottomMid = texture2D(u_patches, v_texCoord + vec2(0.0, \"+opp[1].toFixed(5)+\"));\",\n        \"  vec4 bottomRight = texture2D(u_patches, v_texCoord + vec2(\"+opp[0].toFixed(5)+\", \"+opp[1].toFixed(5)+\"));\",\n        \"  vec4 lbp = step(midMid, midRight)*1.0 + step(midMid, topRight)*2.0 + step(midMid, topMid)*4.0;\",\n        \"  lbp = lbp + step(midMid, topLeft)*8.0 + step(midMid, midLeft)*16.0 + step(midMid, bottomLeft)*32.0;\",\n        \"  lbp = lbp + step(midMid, bottomMid)*64.0 + step(midMid, bottomRight)*128.0;\",\n        \"  gl_FragColor = lbp;\",\n        \"}\"\n      ].join('\\n');\n    }\n\n    if ('sobel' in filters) {\n      // gradResponseFragment\n      gradientResponseFS = [\n        \"precision mediump float;\",\n        \"\",\n        \"uniform vec2 u_onePixelPatches;\",\n        \"\",\n        \"// our patches\",\n        \"uniform sampler2D u_patches;\",\n        \"\",\n        \"// the texCoords passed in from the vertex shader.\",\n        \"varying vec2 v_texCoord;\",\n        \"\",\n        \"void main() {\",\n        \"  vec4 bottomLeft = texture2D(u_patches, v_texCoord + vec2(-\"+opp[0].toFixed(5)+\", \"+opp[1].toFixed(5)+\"));\",\n        \"  vec4 bottomRight = texture2D(u_patches, v_texCoord + vec2(\"+opp[0].toFixed(5)+\", \"+opp[1].toFixed(5)+\"));\",\n        \"  vec4 topLeft = texture2D(u_patches, v_texCoord + vec2(-\"+opp[0].toFixed(5)+\", -\"+opp[1].toFixed(5)+\"));\",\n        \"  vec4 topRight = texture2D(u_patches, v_texCoord + vec2(\"+opp[0].toFixed(5)+\", -\"+opp[1].toFixed(5)+\"));\",\n        \"  vec4 dx = (\",\n        \"    bottomLeft +\",\n        \"    (texture2D(u_patches, v_texCoord + vec2(-\"+opp[0].toFixed(5)+\", 0.0))*vec4(2.0,2.0,2.0,2.0)) +\",\n        \"    topLeft -\",\n        \"    bottomRight -\",\n        \"    (texture2D(u_patches, v_texCoord + vec2(\"+opp[0].toFixed(5)+\", 0.0))*vec4(2.0,2.0,2.0,2.0)) -\",\n        \"    topRight)/4.0;\",\n        \"  vec4 dy = (\",\n        \"    bottomLeft +\",\n        \"    (texture2D(u_patches, v_texCoord + vec2(0.0, \"+opp[1].toFixed(5)+\"))*vec4(2.0,2.0,2.0,2.0)) +\",\n        \"    bottomRight -\",\n        \"    topLeft -\",\n        \"    (texture2D(u_patches, v_texCoord + vec2(0.0, -\"+opp[1].toFixed(5)+\"))*vec4(2.0,2.0,2.0,2.0)) -\",\n        \"    topRight)/4.0;\",\n        \"  vec4 gradient = sqrt((dx*dx) + (dy*dy));\",\n        \"  gl_FragColor = gradient;\",\n        \"}\"\n      ].join('\\n');\n    }\n\n    //create webglcanvas\n    canvas = document.createElement('canvas')\n    canvas.setAttribute('width', (patchWidth-filterWidth+1)+\"px\");\n    canvas.setAttribute('height', ((patchHeight-filterHeight+1)*numPatches)+\"px\");\n    canvas.setAttribute('id', 'renderCanvas');\n    canvas.setAttribute('style', 'display:none;');\n    document.body.appendChild(canvas);\n    // TODO : isolate this library from webgl-util.js\n    gl = setupWebGL(canvas, {premultipliedAlpha: false, preserveDrawingBuffer : true, antialias : false});\n\n\n    // check for float textures support and fail if not\n    if (!gl.getExtension(\"OES_texture_float\")) {\n      alert(\"Your graphics card does not support floating point textures! :(\");\n      return;\n    }\n\n    /** insert filters into textures **/\n    if ('raw' in filters) {\n      insertFilter(filters['raw'], gl.TEXTURE0)\n      rawInit = true;\n    }\n    if ('sobel' in filters) {\n      insertFilter(filters['sobel'], gl.TEXTURE4)\n      sobelInit = true;\n    }\n    if ('lbp' in filters) {\n      insertFilter(filters['lbp'], gl.TEXTURE5)\n      lbpInit = true;\n    }\n\n    /** calculate vertices for calculating responses **/\n\n    // vertex rectangles to draw out\n    var rectangles = [];\n    var halfFilter = (filterWidth-1)/2;\n    var yOffset;\n    for (var i = 0;i < numBlocks;i++) {\n      yOffset = i*patchHeight;\n      //first triangle\n      rectangles = rectangles.concat(\n        [halfFilter, yOffset+halfFilter,\n        patchWidth-halfFilter, yOffset+halfFilter,\n        halfFilter, yOffset+patchHeight-halfFilter]\n      );\n      //second triangle\n      rectangles = rectangles.concat(\n        [halfFilter, yOffset+patchHeight-halfFilter,\n        patchWidth-halfFilter, yOffset+halfFilter,\n        patchWidth-halfFilter, yOffset+patchHeight-halfFilter]\n      );\n    }\n    rectangles = new Float32Array(rectangles);\n\n    // image rectangles to draw out\n    var irectangles = [];\n    for (var i = 0;i < rectangles.length;i++) {\n      if (i % 2 == 0) {\n        irectangles[i] = rectangles[i]/canvasWidth;\n      } else {\n        irectangles[i] = rectangles[i]/canvasHeight;\n      }\n    }\n    irectangles = new Float32Array(irectangles);\n\n    if ('lbp' in filters || 'sobel' in filters) {\n      var topCoord = 1.0 - 2/(patchHeight*numBlocks);\n      var bottomCoord = 1.0 - 2/numBlocks + 2/(patchHeight*numBlocks);\n      var yOffset;\n      // calculate position of vertex rectangles for gradient/lbp program\n      var gradRectangles = [];\n      for (var i = 0;i < numBlocks;i++) {\n        yOffset = i * (2/numBlocks);\n        //first triangle\n        gradRectangles = gradRectangles.concat(\n          [-1.0, topCoord - yOffset,\n          1.0, topCoord - yOffset,\n          -1.0, bottomCoord - yOffset]\n        );\n        //second triangle\n        gradRectangles = gradRectangles.concat(\n          [-1.0, bottomCoord - yOffset,\n          1.0, topCoord - yOffset,\n          1.0, bottomCoord - yOffset]\n        );\n      }\n      gradRectangles = new Float32Array(gradRectangles);\n\n      topCoord = 1.0 - 1/(patchHeight*numBlocks);\n      bottomCoord = 1.0 - 1/numBlocks + 1/(patchHeight*numBlocks);\n      // calculate position of image rectangles to draw out\n      var gradIRectangles = [];\n      for (var i = 0;i < numBlocks;i++) {\n        yOffset = i * (1/numBlocks);\n        //first triangle\n        gradIRectangles = gradIRectangles.concat(\n          [0.0, topCoord - yOffset,\n          1.0, topCoord - yOffset,\n          0.0, bottomCoord - yOffset]\n        );\n        //second triangle\n        gradIRectangles = gradIRectangles.concat(\n          [0.0, bottomCoord - yOffset,\n          1.0, topCoord - yOffset,\n          1.0, bottomCoord - yOffset]\n        );\n      }\n      gradIRectangles = new Float32Array(gradIRectangles);\n    }\n\n    // vertices for drawing out responses\n\n    // drawOutRectangles\n    drawOutRectangles = new Float32Array(12*numPatches);\n    var yOffset, indexOffset;\n    for (var i = 0;i < numPatches;i++) {\n      yOffset = i*newCanvasBlockHeight;\n      indexOffset = i*12;\n\n      //first triangle\n      drawOutRectangles[indexOffset] = 0.0;\n      drawOutRectangles[indexOffset+1] = yOffset;\n      drawOutRectangles[indexOffset+2] = newCanvasWidth;\n      drawOutRectangles[indexOffset+3] = yOffset;\n      drawOutRectangles[indexOffset+4] = 0.0;\n      drawOutRectangles[indexOffset+5] = yOffset+newCanvasBlockHeight;\n\n      //second triangle\n      drawOutRectangles[indexOffset+6] = 0.0;\n      drawOutRectangles[indexOffset+7] = yOffset+newCanvasBlockHeight;\n      drawOutRectangles[indexOffset+8] = newCanvasWidth;\n      drawOutRectangles[indexOffset+9] = yOffset;\n      drawOutRectangles[indexOffset+10] = newCanvasWidth;\n      drawOutRectangles[indexOffset+11] = yOffset+newCanvasBlockHeight;\n    }\n\n    // images\n    drawOutImages = new Float32Array(numPatches*12);\n    var halfFilterWidth = ((filterWidth-1)/2)/patchWidth;\n    var halfFilterHeight = ((filterWidth-1)/2)/(patchHeight*patchCells);\n    var patchHeightT = patchHeight / (patchHeight*patchCells);\n    for (var i = 0;i < numPatches;i++) {\n      yOffset = Math.floor(i / 4)*patchHeightT;\n      indexOffset = i*12;\n\n      //first triangle\n      drawOutImages[indexOffset] = halfFilterWidth;\n      drawOutImages[indexOffset+1] = yOffset+halfFilterHeight;\n      drawOutImages[indexOffset+2] = 1.0-halfFilterWidth;\n      drawOutImages[indexOffset+3] = yOffset+halfFilterHeight;\n      drawOutImages[indexOffset+4] = halfFilterWidth;\n      drawOutImages[indexOffset+5] = yOffset+patchHeightT-halfFilterHeight;\n\n      //second triangle\n      drawOutImages[indexOffset+6] = halfFilterWidth;\n      drawOutImages[indexOffset+7] = yOffset+patchHeightT-halfFilterHeight;\n      drawOutImages[indexOffset+8] = 1.0-halfFilterWidth;\n      drawOutImages[indexOffset+9] = yOffset+halfFilterHeight;\n      drawOutImages[indexOffset+10] = 1.0-halfFilterWidth;\n      drawOutImages[indexOffset+11] = yOffset+patchHeightT-halfFilterHeight;\n    }\n\n    // layer\n    drawOutLayer = new Float32Array(numPatches*6);\n    var layernum;\n    for (var i = 0;i < numPatches;i++) {\n      layernum = i % 4;\n      indexOffset = i*6;\n      drawOutLayer[indexOffset] = layernum;\n      drawOutLayer[indexOffset+1] = layernum;\n      drawOutLayer[indexOffset+2] = layernum;\n      drawOutLayer[indexOffset+3] = layernum;\n      drawOutLayer[indexOffset+4] = layernum;\n      drawOutLayer[indexOffset+5] = layernum;\n    }\n\n    /** set up programs and load attributes etc **/\n\n    if ('sobel' in filters) {\n      var grVertexShader = loadShader(gl, gradientResponseVS, gl.VERTEX_SHADER);\n      var grFragmentShader = loadShader(gl, gradientResponseFS, gl.FRAGMENT_SHADER);\n      gradientResponseProgram = createProgram(gl, [grVertexShader, grFragmentShader]);\n      gl.useProgram(gradientResponseProgram);\n\n      // set up vertices with rectangles\n      gradPositionLocation = gl.getAttribLocation(gradientResponseProgram, \"a_position\");\n      gradAPositionBuffer = gl.createBuffer();\n      gl.bindBuffer(gl.ARRAY_BUFFER, gradAPositionBuffer);\n      gl.bufferData(gl.ARRAY_BUFFER, gradRectangles, gl.STATIC_DRAW);\n      gl.enableVertexAttribArray(gradPositionLocation);\n      gl.vertexAttribPointer(gradPositionLocation, 2, gl.FLOAT, false, 0, 0);\n\n      // set up texture positions\n      gradTexCoordLocation = gl.getAttribLocation(gradientResponseProgram, \"a_texCoord\");\n      gradTexCoordBuffer = gl.createBuffer();\n      gl.bindBuffer(gl.ARRAY_BUFFER, gradTexCoordBuffer);\n      gl.bufferData(gl.ARRAY_BUFFER, gradIRectangles, gl.STATIC_DRAW);\n      gl.enableVertexAttribArray(gradTexCoordLocation);\n      gl.vertexAttribPointer(gradTexCoordLocation, 2, gl.FLOAT, false, 0, 0);\n\n      // set up patches texture in gradientResponseProgram\n      gl.uniform1i(gl.getUniformLocation(gradientResponseProgram, \"u_patches\"), 1);\n    }\n    if ('lbp' in filters) {\n      var lbpVertexShader = loadShader(gl, lbpResponseVS, gl.VERTEX_SHADER);\n      var lbpFragmentShader = loadShader(gl, lbpResponseFS, gl.FRAGMENT_SHADER);\n      lbpResponseProgram = createProgram(gl, [lbpVertexShader, lbpFragmentShader]);\n      gl.useProgram(lbpResponseProgram);\n\n      // set up vertices with rectangles\n      lbpPositionLocation = gl.getAttribLocation(lbpResponseProgram, \"a_position\");\n      lbpAPositionBuffer = gl.createBuffer();\n      gl.bindBuffer(gl.ARRAY_BUFFER, lbpAPositionBuffer);\n      gl.bufferData(gl.ARRAY_BUFFER, gradRectangles, gl.STATIC_DRAW);\n      gl.enableVertexAttribArray(lbpPositionLocation);\n      gl.vertexAttribPointer(lbpPositionLocation, 2, gl.FLOAT, false, 0, 0);\n\n      // set up texture positions\n      gradTexCoordLocation = gl.getAttribLocation(lbpResponseProgram, \"a_texCoord\");\n      lbpTexCoordBuffer = gl.createBuffer();\n      gl.bindBuffer(gl.ARRAY_BUFFER, lbpTexCoordBuffer);\n      gl.bufferData(gl.ARRAY_BUFFER, gradIRectangles, gl.STATIC_DRAW);\n      gl.enableVertexAttribArray(lbpTexCoordLocation);\n      gl.vertexAttribPointer(lbpTexCoordLocation, 2, gl.FLOAT, false, 0, 0);\n\n      // set up patches texture in lbpResponseProgram\n      gl.uniform1i(gl.getUniformLocation(lbpResponseProgram, \"u_patches\"), 1);\n    }\n\n    // setup patchdraw program\n    var drVertexShader = loadShader(gl, drawResponsesVS, gl.VERTEX_SHADER);\n    var drFragmentShader = loadShader(gl, drawResponsesFS, gl.FRAGMENT_SHADER);\n    patchDrawProgram = createProgram(gl, [drVertexShader, drFragmentShader]);\n    gl.useProgram(patchDrawProgram);\n\n    // set the resolution/dimension of the canvas\n    var resolutionLocation = gl.getUniformLocation(patchDrawProgram, \"u_resolutiondraw\");\n    gl.uniform2f(resolutionLocation, newCanvasWidth, newCanvasHeight);\n\n    // set u_responses\n    var responsesLocation = gl.getUniformLocation(patchDrawProgram, \"u_responses\");\n    gl.uniform1i(responsesLocation, 2);\n\n    // setup patchresponse program\n    var prVertexShader = loadShader(gl, patchResponseVS, gl.VERTEX_SHADER);\n    var prFragmentShader = loadShader(gl, patchResponseFS, gl.FRAGMENT_SHADER);\n    patchResponseProgram = createProgram(gl, [prVertexShader, prFragmentShader]);\n    gl.useProgram(patchResponseProgram);\n\n    // set up vertices with rectangles\n    var positionLocation = gl.getAttribLocation(patchResponseProgram, \"a_position\");\n    apositionBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, apositionBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, rectangles, gl.STATIC_DRAW);\n    gl.enableVertexAttribArray(positionLocation);\n    gl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);\n\n    // set up texture positions\n    texCoordLocation = gl.getAttribLocation(patchResponseProgram, \"a_texCoord\");\n    texCoordBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, texCoordBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, irectangles, gl.STATIC_DRAW);\n    gl.enableVertexAttribArray(texCoordLocation);\n    gl.vertexAttribPointer(texCoordLocation, 2, gl.FLOAT, false, 0, 0);\n\n    if ('lbp' in filters || 'sobel' in filters) {\n      // set up gradient/lbp buffer (also used for lbp)\n      gl.activeTexture(gl.TEXTURE3);\n      var gradients = gl.createTexture();\n      gl.bindTexture(gl.TEXTURE_2D, gradients);\n      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, patchWidth, patchHeight*numBlocks, 0, gl.RGBA, gl.FLOAT, null);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\n      // set up gradient/lbp framebuffer\n      gbo = gl.createFramebuffer();\n      gl.bindFramebuffer(gl.FRAMEBUFFER, gbo);\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, gradients, 0);\n    }\n\n    // set up buffer to draw to\n    gl.activeTexture(gl.TEXTURE2);\n    rttTexture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, rttTexture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, patchWidth, patchHeight*numBlocks, 0, gl.RGBA, gl.FLOAT, null);\n\n    // set up response framebuffer\n    fbo = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, rttTexture, 0);\n\n    gl.viewport(0, 0, patchWidth, patchHeight*numBlocks);\n\n    /* initialize some textures and buffers used later on */\n\n    patchTex = gl.createTexture();\n    drawRectBuffer = gl.createBuffer();\n    drawImageBuffer = gl.createBuffer();\n    drawLayerBuffer = gl.createBuffer();\n  }\n\n  this.getRawResponses = function(patches) {\n    // TODO: check patches correct length/dimension\n\n    insertPatches(patches);\n\n    // switch to correct program\n    gl.useProgram(patchResponseProgram);\n\n    // set u_patches to point to texture 1\n    gl.uniform1i(gl.getUniformLocation(patchResponseProgram, \"u_patches\"), 1);\n\n    // set u_filters to point to correct filter\n    gl.uniform1i(gl.getUniformLocation(patchResponseProgram, \"u_filters\"), 0);\n\n    // set up vertices with rectangles\n    var positionLocation = gl.getAttribLocation(patchResponseProgram, \"a_position\");\n    gl.bindBuffer(gl.ARRAY_BUFFER, apositionBuffer);\n    gl.enableVertexAttribArray(positionLocation);\n    gl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);\n\n    // set up texture positions\n    var texCoordLocation = gl.getAttribLocation(patchResponseProgram, \"a_texCoord\");\n    gl.bindBuffer(gl.ARRAY_BUFFER, texCoordBuffer);\n    gl.enableVertexAttribArray(texCoordLocation);\n    gl.vertexAttribPointer(texCoordLocation, 2, gl.FLOAT, false, 0, 0);\n\n    // set framebuffer to the original one if not already using it\n    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);\n\n    gl.viewport(0, 0, patchWidth, patchHeight*numBlocks);\n\n    gl.clearColor(0.0, 0.0, 0.0, 1.0);\n    gl.clear(gl.COLOR_BUFFER_BIT|gl.DEPTH_BUFFER)\n\n    // draw to framebuffer\n    gl.drawArrays(gl.TRIANGLES, 0, patchCells*6);\n\n    //gl.finish();\n\n    var responses = drawOut('raw');\n\n    return responses;\n  }\n\n  this.getSobelResponses = function(patches) {\n    // check that it is initialized\n    if (!sobelInit) return;\n\n    insertPatches(patches);\n\n    /* do sobel filter on patches */\n\n    // switch to correct program\n    gl.useProgram(gradientResponseProgram);\n\n    // set up vertices with rectangles\n    var gradPositionLocation = gl.getAttribLocation(gradientResponseProgram, \"a_position\");\n    gl.bindBuffer(gl.ARRAY_BUFFER, gradAPositionBuffer);\n    gl.enableVertexAttribArray(gradPositionLocation);\n    gl.vertexAttribPointer(gradPositionLocation, 2, gl.FLOAT, false, 0, 0);\n\n    // set up texture positions\n    var gradTexCoordLocation = gl.getAttribLocation(gradientResponseProgram, \"a_texCoord\");\n    gl.bindBuffer(gl.ARRAY_BUFFER, gradTexCoordBuffer);\n    gl.enableVertexAttribArray(gradTexCoordLocation);\n    gl.vertexAttribPointer(gradTexCoordLocation, 2, gl.FLOAT, false, 0, 0);\n\n    // set framebuffer to the original one if not already using it\n    gl.bindFramebuffer(gl.FRAMEBUFFER, gbo);\n\n    gl.viewport(0, 0, patchWidth, patchHeight*numBlocks);\n\n    gl.clearColor(0.0, 0.0, 0.0, 1.0);\n    gl.clear(gl.COLOR_BUFFER_BIT|gl.DEPTH_BUFFER)\n\n    // draw to framebuffer\n    gl.drawArrays(gl.TRIANGLES, 0, patchCells*6);\n\n    /* calculate responses */\n\n    gl.useProgram(patchResponseProgram);\n\n    // set patches and filters to point to correct textures\n    gl.uniform1i(gl.getUniformLocation(patchResponseProgram, \"u_filters\"), 4);\n    gl.uniform1i(gl.getUniformLocation(patchResponseProgram, \"u_patches\"), 3);\n\n    var positionLocation = gl.getAttribLocation(patchResponseProgram, \"a_position\");\n    gl.bindBuffer(gl.ARRAY_BUFFER, apositionBuffer);\n    gl.enableVertexAttribArray(positionLocation);\n    gl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);\n\n    // set up texture positions\n    var texCoordLocation = gl.getAttribLocation(patchResponseProgram, \"a_texCoord\");\n    gl.bindBuffer(gl.ARRAY_BUFFER, texCoordBuffer);\n    gl.enableVertexAttribArray(texCoordLocation);\n    gl.vertexAttribPointer(texCoordLocation, 2, gl.FLOAT, false, 0, 0);\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);\n    gl.viewport(0, 0, patchWidth, patchHeight*numBlocks);\n\n    gl.clearColor(0.0, 0.0, 0.0, 1.0);\n    gl.clear(gl.COLOR_BUFFER_BIT|gl.DEPTH_BUFFER)\n\n    // draw to framebuffer\n    gl.drawArrays(gl.TRIANGLES, 0, patchCells*6);\n\n    /* get the responses */\n\n    var responses = drawOut('sobel');\n\n    return responses;\n  }\n\n  this.getLBPResponses = function(patches) {\n    // check that it is initialized\n    if (!lbpInit) return;\n\n    insertPatches(patches);\n\n     /* do sobel filter on patches */\n\n    // switch to correct program\n    gl.useProgram(lbpResponseProgram);\n\n    // set up vertices with rectangles\n    var lbpPositionLocation = gl.getAttribLocation(lbpResponseProgram, \"a_position\");\n    gl.bindBuffer(gl.ARRAY_BUFFER, lbpAPositionBuffer);\n    gl.enableVertexAttribArray(lbpPositionLocation);\n    gl.vertexAttribPointer(lbpPositionLocation, 2, gl.FLOAT, false, 0, 0);\n\n    // set up texture positions\n    var lbpTexCoordLocation = gl.getAttribLocation(lbpResponseProgram, \"a_texCoord\");\n    gl.bindBuffer(gl.ARRAY_BUFFER, lbpTexCoordBuffer);\n    gl.enableVertexAttribArray(lbpTexCoordLocation);\n    gl.vertexAttribPointer(lbpTexCoordLocation, 2, gl.FLOAT, false, 0, 0);\n\n    // set framebuffer to the original one if not already using it\n    gl.bindFramebuffer(gl.FRAMEBUFFER, gbo);\n\n    gl.viewport(0, 0, patchWidth, patchHeight*numBlocks);\n\n    gl.clearColor(0.0, 0.0, 0.0, 1.0);\n    gl.clear(gl.COLOR_BUFFER_BIT|gl.DEPTH_BUFFER)\n\n    // draw to framebuffer\n    gl.drawArrays(gl.TRIANGLES, 0, patchCells*6);\n\n    /* calculate responses */\n\n    gl.useProgram(patchResponseProgram);\n\n    gl.uniform1i(gl.getUniformLocation(patchResponseProgram, \"u_filters\"), 5);\n    gl.uniform1i(gl.getUniformLocation(patchResponseProgram, \"u_patches\"), 3);\n\n    var positionLocation = gl.getAttribLocation(patchResponseProgram, \"a_position\");\n    gl.bindBuffer(gl.ARRAY_BUFFER, apositionBuffer);\n    gl.enableVertexAttribArray(positionLocation);\n    gl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);\n\n    // set up texture positions\n    var texCoordLocation = gl.getAttribLocation(patchResponseProgram, \"a_texCoord\");\n    gl.bindBuffer(gl.ARRAY_BUFFER, texCoordBuffer);\n    gl.enableVertexAttribArray(texCoordLocation);\n    gl.vertexAttribPointer(texCoordLocation, 2, gl.FLOAT, false, 0, 0);\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);\n    gl.viewport(0, 0, patchWidth, patchHeight*numBlocks);\n\n    gl.clearColor(0.0, 0.0, 0.0, 1.0);\n    gl.clear(gl.COLOR_BUFFER_BIT|gl.DEPTH_BUFFER)\n\n    // draw to framebuffer\n    gl.drawArrays(gl.TRIANGLES, 0, patchCells*6);\n\n    /* get the responses */\n\n    var responses = drawOut('lbp');\n\n    return responses;\n  }\n\n  var insertPatches = function(patches) {\n    // pass patches into texture, each patch in either r, g, b or a\n    var patchArrayIndex = 0;\n    var patchesIndex1 = 0;\n    var patchesIndex2 = 0;\n    for (var i = 0;i < patchCells;i++) {\n      for (var j = 0;j < patchHeight;j++) {\n        for (var k = 0;k < patchWidth;k++) {\n          patchesIndex1 = i*4;\n          patchesIndex2 = (j*patchWidth) + k;\n          patchArrayIndex = ((patchSize*i) + patchesIndex2)*4;\n\n          //set r with first patch\n          if (patchesIndex1 < numPatches) {\n            patchArray[patchArrayIndex] = patches[patchesIndex1][patchesIndex2];\n          } else {\n            patchArray[patchArrayIndex] = 0;\n          }\n          //set g with 2nd patch\n          if (patchesIndex1+1 < numPatches) {\n            patchArray[patchArrayIndex + 1] = patches[patchesIndex1+1][patchesIndex2];\n          } else {\n            patchArray[patchArrayIndex + 1] = 0;\n          }\n          //set b with 3rd patch\n          if (patchesIndex1+2 < numPatches) {\n            patchArray[patchArrayIndex + 2] = patches[patchesIndex1+2][patchesIndex2];\n          } else {\n            patchArray[patchArrayIndex + 2] = 0;\n          }\n          //set a with 4th patch\n          if (patchesIndex1+3 < numPatches) {\n            patchArray[patchArrayIndex + 3] = patches[patchesIndex1+3][patchesIndex2];\n          } else {\n            patchArray[patchArrayIndex + 3] = 0;\n          }\n        }\n      }\n    }\n\n    // pass texture into an uniform\n    gl.activeTexture(gl.TEXTURE1);\n    gl.bindTexture(gl.TEXTURE_2D, patchTex);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, textureWidth, textureHeight, 0, gl.RGBA, gl.FLOAT, patchArray);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n  }\n\n  var insertFilter = function(filter, textureNum) {\n    var filterSize = filterWidth*filterHeight;\n    var filterArray = new Float32Array(filterSize*(numBlocks)*4);\n    for (var i = 0;i < numBlocks;i++) {\n      for (var j = 0;j < filterHeight;j++) {\n        for (var k = 0;k < filterWidth;k++) {\n          //set r with first filter\n          if (i*4 < filter.length) {\n            filterArray[((filterSize*i) + (j*filterWidth) + k)*4] = filter[i*4][(j*filterWidth) + k];\n          } else {\n            filterArray[((filterSize*i) + (j*filterWidth) + k)*4] = 0;\n          }\n          //set g with 2nd filter\n          if ((i*4 + 1) < filter.length) {\n            filterArray[((filterSize*i) + (j*filterWidth) + k)*4 + 1] = filter[(i*4)+1][(j*filterWidth) + k];\n          } else {\n            filterArray[((filterSize*i) + (j*filterWidth) + k)*4 + 1] = 0;\n          }\n          //set b with 3rd filter\n          if ((i*4 + 2) < filter.length) {\n            filterArray[((filterSize*i) + (j*filterWidth) + k)*4 + 2] = filter[(i*4)+2][(j*filterWidth) + k];\n          } else {\n            filterArray[((filterSize*i) + (j*filterWidth) + k)*4 + 2] = 0;\n          }\n          //set a with 4th filter\n          if ((i*4 + 3) < filter.length) {\n            filterArray[((filterSize*i) + (j*filterWidth) + k)*4 + 3] = filter[(i*4)+3][(j*filterWidth) + k];\n          } else {\n            filterArray[((filterSize*i) + (j*filterWidth) + k)*4 + 3] = 0;\n          }\n        }\n      }\n    }\n\n    gl.activeTexture(textureNum);\n    var filterTexture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, filterTexture);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, filterWidth, filterHeight*numBlocks, 0, gl.RGBA, gl.FLOAT, filterArray);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n  }\n\n  var drawOut = function(type) {\n    // switch programs\n    gl.useProgram(patchDrawProgram);\n\n    // bind canvas buffer\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.viewport(0, 0, newCanvasWidth, newCanvasHeight);\n\n    gl.clearColor(0.0, 0.0, 0.0, 1.0);\n    gl.clear(gl.COLOR_BUFFER_BIT|gl.DEPTH_BUFFER)\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, drawRectBuffer);\n    gl.bufferData(\n      gl.ARRAY_BUFFER,\n      drawOutRectangles,\n      gl.STATIC_DRAW);\n    var positionLocation = gl.getAttribLocation(patchDrawProgram, \"a_position_draw\");\n    gl.enableVertexAttribArray(positionLocation);\n    gl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, drawImageBuffer);\n    gl.bufferData(\n      gl.ARRAY_BUFFER,\n      drawOutImages,\n      gl.STATIC_DRAW);\n    var textureLocation = gl.getAttribLocation(patchDrawProgram, \"a_texCoord_draw\");\n    gl.enableVertexAttribArray(textureLocation);\n    gl.vertexAttribPointer(textureLocation, 2, gl.FLOAT, false, 0, 0);\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, drawLayerBuffer);\n    gl.bufferData(\n      gl.ARRAY_BUFFER,\n      drawOutLayer,\n      gl.STATIC_DRAW);\n    var layerLocation = gl.getAttribLocation(patchDrawProgram, \"a_patchChoice_draw\");\n    gl.enableVertexAttribArray(layerLocation);\n    gl.vertexAttribPointer(layerLocation, 1, gl.FLOAT, false, 0, 0);\n\n    // draw out\n    gl.drawArrays(gl.TRIANGLES, 0, numPatches*6);\n\n    var responses = getOutput();\n\n    responses = unpackToFloat(responses);\n\n    // split\n    responses = splitArray(responses, numPatches);\n\n    // add bias\n    responses = addBias(responses, biases[type]);\n\n    // normalize responses to lie within [0,1]\n    var rl = responses.length;\n\n    for (var i = 0;i < rl;i++) {\n      responses[i] = normalizeFilterMatrix(responses[i]);\n    }\n\n    return responses;\n  }\n\n  var addBias = function(responses, bias) {\n    // do a little trick to add bias in the logit function\n    var biasMult;\n    for (var i = 0;i < responses.length;i++) {\n      biasMult = Math.exp(bias[i]);\n      for (var j = 0;j < responses[i].length;j++) {\n        responses[i][j] = 1/(1+((1-responses[i][j])/(responses[i][j]*biasMult)));\n      }\n    }\n    return responses;\n  }\n\n  var splitArray = function(array, parts) {\n    var sp = [];\n    var al = array.length;\n    var splitlength = al/parts;\n    var ta = [];\n    for (var i = 0;i < al;i++) {\n      if (i % splitlength == 0) {\n        if (i != 0) {\n          sp.push(ta);\n        }\n        ta = [];\n      }\n      ta.push(array[i]);\n    }\n    sp.push(ta);\n    return sp;\n  }\n\n  var getOutput = function() {\n    // get data\n    var pixelValues = new Uint8Array(4*canvas.width*canvas.height);\n    var data = gl.readPixels(0, 0, canvas.width, canvas.height, gl.RGBA, gl.UNSIGNED_BYTE, pixelValues);\n    // return\n    return pixelValues;\n  }\n\n  var unpackToFloat = function(array) {\n    // convert packed floats to proper floats : see http://stackoverflow.com/questions/9882716/packing-float-into-vec4-how-does-this-code-work\n    var newArray = [];\n    var al = array.length;\n    for (var i = 0;i < al;i+=4) {\n      newArray[(i / 4) >> 0] = ((array[i]/(256*256*256*256))+(array[i+1]/(256*256*256))+(array[i+2]/(256*256))+(array[i+3]/256));\n    }\n    return newArray;\n  }\n\n  var normalizeFilterMatrix = function(response) {\n    // normalize responses to lie within [0,1]\n    var msize = response.length;\n    var max = 0;\n    var min = 1;\n\n    for (var i = 0;i < msize;i++) {\n      max = response[i] > max ? response[i] : max;\n      min = response[i] < min ? response[i] : min;\n    }\n    var dist = max-min;\n\n    if (dist == 0) {\n      console.log(\"a patchresponse was monotone, causing normalization to fail. Leaving it unchanged.\")\n      response = response.map(function() {return 1});\n    } else {\n      for (var i = 0;i < msize;i++) {\n        response[i] = (response[i]-min)/dist;\n      }\n    }\n\n    return response\n  }\n};\n\n// The rest of the code is based on webgl-utils.js authored by Gregg Tavares, license below:\n/*\n * Copyright (c) 2011, Gregg Tavares\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * * Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * * Redistributions in binary form must reproduce the above copyright notice,\n *   this list of conditions and the following disclaimer in the documentation\n *   and/or other materials provided with the distribution.\n *\n *  * Neither the name of greggman.com nor the names of its contributors\n *   may be used to endorse or promote products derived from this software\n *   without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS\n * IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\n * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n(function() {\n\n  /**\n   * Wrapped logging function.\n   * @param {string} msg The message to log.\n   */\n  var log = function(msg) {\n    if (window.console && window.console.log) {\n      window.console.log(msg);\n    }\n  };\n\n  /**\n   * Wrapped logging function.\n   * @param {string} msg The message to log.\n   */\n  var error = function(msg) {\n    if (window.console) {\n      if (window.console.error) {\n        window.console.error(msg);\n      }\n      else if (window.console.log) {\n        window.console.log(msg);\n      }\n    }\n    throw msg;\n  };\n\n  /**\n   * Turn off all logging.\n   */\n  var loggingOff = function() {\n    log = function() {};\n    error = function() {};\n  };\n\n  /**\n   * Check if the page is embedded.\n   * @return {boolean} True of we are in an iframe\n   */\n  var isInIFrame = function() {\n    return window != window.top;\n  };\n\n  /**\n   * Converts a WebGL enum to a string\n   * @param {!WebGLContext} gl The WebGLContext to use.\n   * @param {number} value The enum value.\n   * @return {string} The enum as a string.\n   */\n  var glEnumToString = function(gl, value) {\n    for (var p in gl) {\n      if (gl[p] == value) {\n        return p;\n      }\n    }\n    return \"0x\" + value.toString(16);\n  };\n\n  /**\n   * Creates the HTLM for a failure message\n   * @param {string} canvasContainerId id of container of th\n   *        canvas.\n   * @return {string} The html.\n   */\n  var makeFailHTML = function(msg) {\n    return '' +\n      '<table style=\"background-color: #8CE; width: 100%; height: 100%;\"><tr>' +\n      '<td align=\"center\">' +\n      '<div style=\"display: table-cell; vertical-align: middle;\">' +\n      '<div style=\"\">' + msg + '</div>' +\n      '</div>' +\n      '</td></tr></table>';\n  };\n\n  /**\n   * Mesasge for getting a webgl browser\n   * @type {string}\n   */\n  var GET_A_WEBGL_BROWSER = '' +\n    'This page requires a browser that supports WebGL.<br/>' +\n    '<a href=\"http://get.webgl.org\">Click here to upgrade your browser.</a>';\n\n  /**\n   * Mesasge for need better hardware\n   * @type {string}\n   */\n  var OTHER_PROBLEM = '' +\n    \"It doesn't appear your computer can support WebGL.<br/>\" +\n    '<a href=\"http://get.webgl.org/troubleshooting/\">Click here for more information.</a>';\n\n  /**\n   * Creates a webgl context. If creation fails it will\n   * change the contents of the container of the <canvas>\n   * tag to an error message with the correct links for WebGL.\n   * @param {Element} canvas. The canvas element to create a\n   *     context from.\n   * @param {WebGLContextCreationAttirbutes} opt_attribs Any\n   *     creation attributes you want to pass in.\n   * @return {WebGLRenderingContext} The created context.\n   */\n  var setupWebGL = function(canvas, opt_attribs) {\n    function showLink(str) {\n      var container = canvas.parentNode;\n      if (container) {\n        container.innerHTML = makeFailHTML(str);\n      }\n    };\n\n    if (!window.WebGLRenderingContext) {\n      //showLink(GET_A_WEBGL_BROWSER);\n      return null;\n    }\n\n    var context = create3DContext(canvas, opt_attribs);\n    if (!context) {\n      //showLink(OTHER_PROBLEM);\n      return null;\n    }\n    return context;\n  };\n\n  /**\n   * Creates a webgl context.\n   * @param {!Canvas} canvas The canvas tag to get context\n   *     from. If one is not passed in one will be created.\n   * @return {!WebGLContext} The created context.\n   */\n  var create3DContext = function(canvas, opt_attribs) {\n    var names = [\"webgl\", \"experimental-webgl\"];\n    var context = null;\n    for (var ii = 0; ii < names.length; ++ii) {\n      try {\n        context = canvas.getContext(names[ii], opt_attribs);\n      } catch(e) {}\n      if (context) {\n        break;\n      }\n    }\n    return context;\n  }\n\n  var updateCSSIfInIFrame = function() {\n    if (isInIFrame()) {\n      document.body.className = \"iframe\";\n    }\n  };\n\n  /**\n   * Gets a WebGL context.\n   * makes its backing store the size it is displayed.\n   */\n  var getWebGLContext = function(canvas) {\n    if (isInIFrame()) {\n      updateCSSIfInIFrame();\n\n      // make the canvas backing store the size it's displayed.\n      canvas.width = canvas.clientWidth;\n      canvas.height = canvas.clientHeight;\n    }\n\n    var gl = setupWebGL(canvas);\n    return gl;\n  };\n\n  /**\n   * Loads a shader.\n   * @param {!WebGLContext} gl The WebGLContext to use.\n   * @param {string} shaderSource The shader source.\n   * @param {number} shaderType The type of shader.\n   * @param {function(string): void) opt_errorCallback callback for errors.\n   * @return {!WebGLShader} The created shader.\n   */\n  var loadShader = function(gl, shaderSource, shaderType, opt_errorCallback) {\n    var errFn = opt_errorCallback || error;\n    // Create the shader object\n    var shader = gl.createShader(shaderType);\n\n    // Load the shader source\n    gl.shaderSource(shader, shaderSource);\n\n    // Compile the shader\n    gl.compileShader(shader);\n\n    // Check the compile status\n    var compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n    if (!compiled) {\n      // Something went wrong during compilation; get the error\n      var lastError = gl.getShaderInfoLog(shader);\n      errFn(\"*** Error compiling shader '\" + shader + \"':\" + lastError);\n      gl.deleteShader(shader);\n      return null;\n    }\n\n    return shader;\n  }\n\n  /**\n   * Creates a program, attaches shaders, binds attrib locations, links the\n   * program and calls useProgram.\n   * @param {!Array.<!WebGLShader>} shaders The shaders to attach\n   * @param {!Array.<string>} opt_attribs The attribs names.\n   * @param {!Array.<number>} opt_locations The locations for the attribs.\n   */\n  var loadProgram = function(gl, shaders, opt_attribs, opt_locations) {\n    var program = gl.createProgram();\n    for (var ii = 0; ii < shaders.length; ++ii) {\n      gl.attachShader(program, shaders[ii]);\n    }\n    if (opt_attribs) {\n      for (var ii = 0; ii < opt_attribs.length; ++ii) {\n        gl.bindAttribLocation(\n            program,\n            opt_locations ? opt_locations[ii] : ii,\n            opt_attribs[ii]);\n      }\n    }\n    gl.linkProgram(program);\n\n    // Check the link status\n    var linked = gl.getProgramParameter(program, gl.LINK_STATUS);\n    if (!linked) {\n        // something went wrong with the link\n        var lastError = gl.getProgramInfoLog (program);\n        error(\"Error in program linking:\" + lastError);\n\n        gl.deleteProgram(program);\n        return null;\n    }\n    return program;\n  };\n\n  /**\n   * Loads a shader from a script tag.\n   * @param {!WebGLContext} gl The WebGLContext to use.\n   * @param {string} scriptId The id of the script tag.\n   * @param {number} opt_shaderType The type of shader. If not passed in it will\n   *     be derived from the type of the script tag.\n   * @param {function(string): void) opt_errorCallback callback for errors.\n   * @return {!WebGLShader} The created shader.\n   */\n  var createShaderFromScript = function(\n      gl, scriptId, opt_shaderType, opt_errorCallback) {\n    var shaderSource = \"\";\n    var shaderType;\n    var shaderScript = document.getElementById(scriptId);\n    if (!shaderScript) {\n      throw(\"*** Error: unknown script element\" + scriptId);\n    }\n    shaderSource = shaderScript.text;\n\n    if (!opt_shaderType) {\n      if (shaderScript.type == \"x-shader/x-vertex\") {\n        shaderType = gl.VERTEX_SHADER;\n      } else if (shaderScript.type == \"x-shader/x-fragment\") {\n        shaderType = gl.FRAGMENT_SHADER;\n      } else if (shaderType != gl.VERTEX_SHADER && shaderType != gl.FRAGMENT_SHADER) {\n        throw(\"*** Error: unknown shader type\");\n        return null;\n      }\n    }\n\n    return loadShader(\n        gl, shaderSource, opt_shaderType ? opt_shaderType : shaderType,\n        opt_errorCallback);\n  };\n\n  /* export functions */\n  window.setupWebGL = setupWebGL;\n  window.createProgram = loadProgram;\n  window.createShaderFromScriptElement = createShaderFromScript;\n  window.getWebGLContext = getWebGLContext;\n  window.updateCSSIfInIFrame = updateCSSIfInIFrame;\n  window.loadShader = loadShader;\n\n}());\n"
  ]
}